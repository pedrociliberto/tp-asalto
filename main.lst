     1                                  %macro mPuts 1 ; Imprime el string %1, hasta encontrar un 0
     2                                      mov rdi, %1
     3                                      sub rsp, 8
     4                                      call puts
     5                                      add rsp, 8
     6                                  %endmacro
     7                                  
     8                                  %macro mPrint 2 ; Imprime el string %2 con formato %1
     9                                      mov rdi, %1
    10                                      mov rsi, %2
    11                                      sub rsp, 8
    12                                      call printf
    13                                      add rsp, 8
    14                                  %endmacro
    15                                  
    16                                  %macro mGets 1 ; Obtiene un string por teclado, guardándolo en %1
    17                                      mov rdi, %1
    18                                      sub rsp, 8
    19                                      call gets
    20                                      add rsp, 8
    21                                  %endmacro
    22                                  
    23                                  %macro mCommand 1 ; Ejecuta el comando %1 de la terminal
    24                                      mov rdi, %1
    25                                      sub rsp, 8
    26                                      call system
    27                                      add rsp, 8
    28                                  %endmacro
    29                                  
    30                                  %macro mMov 3 ; Copia %3 bytes del campo de memoria %2 al campo de memoria %1
    31                                      mov rcx, %3
    32                                      lea rsi, [%2]
    33                                      lea rdi, [%1]
    34                                      rep movsb
    35                                  %endmacro
    36                                  
    37                                  %macro mCmp 3 ; Compara %3 bytes del campo %1 con %2
    38                                      mov rcx, %3
    39                                      lea rsi, %1
    40                                      lea rdi, %2
    41                                      repe cmpsb
    42                                  %endmacro 
    43                                  
    44                                  %macro mErrorJump 2 ; Imprime el mensaje de error %1 y salta a la etiqueta %2
    45                                      mPuts %1
    46                                      jmp %2
    47                                  %endmacro
    48                                  
    49                                  %macro mfGets 2
    50                                      mov rdi, %1
    51                                      mov rsi, %2
    52                                      mov rdx, [stdin]
    53                                      sub rsp, 8
    54                                      call fgets
    55                                      add rsp, 8
    56                                  %endmacro
    57                                  
    58                                  %macro mLeerEntradaEstandar 2
    59                                      mov rax, 0      ; syscall: read
    60                                      mov rdi, 0      ; 0: stdin
    61                                      mov rsi, %1   ; buffer (direccion de guardado de lo leido)
    62                                      mov rdx, %2     ; Cuantos bytes queremos leer
    63                                      syscall
    64                                  
    65                                      mov byte[rsi+rax], 0
    66                                  %endmacro
    67                                  
    68                                  %macro mSscanf 3
    69                                      lea rdi, %1     ; Variable Original string
    70                                      mov rsi, %2     ; Formato
    71                                      mov rdx, %3     ; Variable a guardar el int
    72                                      sub rsp, 8
    73                                      call sscanf
    74                                      add rsp, 8
    75                                  %endmacro
    76                                  
    77                                  %macro mSprintf 3
    78                                      mov rdi, %1     ; Variable donde se guardará el string
    79                                      mov rsi, %2     ; Formato
    80                                      mov rdx, %3     ; Variable a guardar en el string
    81                                      sub rsp, 8
    82                                      call sprintf
    83                                      add rsp, 8
    84                                  %endmacro
    85                                  
    86                                  %macro mCalcDesplaz 3
    87                                      mov rdi, %1
    88                                      mov rsi, %2
    89                                      call calcularDesplazamiento
    90                                      mov %3, rax
    91                                  %endmacro
    92                                  
    93                                  %macro mEstaVacia 1 
    94                                      mov rax, 0
    95                                      mov rdi, %1 ; recibe el desplazamiento
    96                                      call estaVacia
    97                                  %endmacro
    98                                  
    99                                  %macro mHaySoldado 1
   100                                      mov rax, 0
   101                                      mov rdi, %1 ; recibe el desplazamiento
   102                                      call haySoldado
   103                                  %endmacro
   104                                  
   105                                  %macro mPuedeCapturar 2
   106                                      mov rdi, %1 ; diferencia de desplazamiento
   107                                      mov rsi, %2 ; 0 para sumar [rdi] al desplazamiento, 1 para restar
   108                                      call podiaComerPieza
   109                                  %endmacro
   110                                  
   111                                  %macro mOpenFile 2
   112                                      mov rdi, %1 ; nombre del archivo
   113                                      mov rsi, %2 ; modo de apertura
   114                                      sub rsp, 8
   115                                      call fopen
   116                                      add rsp, 8
   117                                  
   118                                      cmp rax, 0
   119                                      mov qword[idArchGuardado], rax ; Guardamos el ID del archivo
   120                                  %endmacro
   121                                  
   122                                  %macro mCloseFile 1
   123                                      mov rdi, [%1] ; ID del archivo
   124                                      sub rsp, 8
   125                                      call fclose
   126                                      add rsp, 8
   127                                  %endmacro
   128                                  
   129                                  %macro mReadLine 3 
   130                                      mov rdi, %1 ; lugar a dejar lo leido
   131                                      mov rsi, %2 ; cantidad de bytes a leer
   132                                      mov rdx, %3 ; bloques de lectura
   133                                      mov rcx, [idArchGuardado] ; ID del archivo
   134                                      sub rsp, 8
   135                                      call fread
   136                                      add rsp, 8
   137                                  %endmacro
   138                                  
   139                                  %macro mWriteLine 3
   140                                      mov rdi, %1 ; string a escribir
   141                                      mov rsi, %2 ; cantidad de bytes a escribir
   142                                      mov rdx, %3 ; bloques de escritura
   143                                      mov rcx, [idArchGuardado] ; ID del archivo
   144                                      sub rsp, 8
   145                                      call fwrite
   146                                      add rsp, 8
   147                                  %endmacro
   148                                  
   149                                  ; Importación de funciones de la librería C
   150                                  extern puts, printf
   151                                  extern gets
   152                                  extern system, stdin
   153                                  extern sscanf, sprintf
   154                                  extern fopen, fclose, fread, fwrite, fgets
   155                                  
   156                                  section .data
   157                                  
   158                                      ; Tableros y sus posibles estados
   159                                  
   160 00000000 202031323334353637-         tableroOrig         db " "," ","1","2","3","4","5","6","7"," ",10
   160 00000009 200A               
   161 0000000B 2020202D5F5F5F2D20-                             db " "," "," ","-","_","_","_","-"," "," ",10 
   161 00000014 200A               
   162 00000016 3120207C5858587C20-                             db "1"," "," ","|","X","X","X","|"," "," ",10
   162 0000001F 200A               
   163 00000021 322D5F7C5858587C5F-                             db "2","-","_","|","X","X","X","|","_","-",10
   163 0000002A 2D0A               
   164 0000002C 337C58585858585858-                             db "3","|","X","X","X","X","X","X","X","|",10 
   164 00000035 7C0A               
   165 00000037 347C58585858585858-                             db "4","|","X","X","X","X","X","X","X","|",10 
   165 00000040 7C0A               
   166 00000042 357C58582020205858-                             db "5","|","X","X"," "," "," ","X","X","|",10 
   166 0000004B 7C0A               
   167 0000004D 362D2D7C20204F7C2D-                             db "6","-","-","|"," "," ","O","|","-","-",10 
   167 00000056 2D0A               
   168 00000058 3720207C4F20207C20-                             db "7"," "," ","|","O"," "," ","|"," "," ",10 
   168 00000061 200A               
   169 00000063 2020202D2D2D2D2D20-                             db " "," "," ","-","-","-","-","-"," "," ",10,0
   169 0000006C 200A00             
   170                                  
   171                                      ; Mensajes
   172                                  
   173 0000006F C2A14269656E76656E-         msgBienvenida           db "¡Bienvenido al juego El Asalto! ('#' para salir)", 0
   173 00000078 69646F20616C206A75-
   173 00000081 65676F20456C204173-
   173 0000008A 616C746F2120282723-
   173 00000093 272070617261207361-
   173 0000009C 6C69722900         
   174                                  
   175 000000A1 4F706369C3B36E2069-         msgOpcionInvalida       db "Opción inválida. Intente de nuevo.", 0
   175 000000AA 6E76C3A16C6964612E-
   175 000000B3 20496E74656E746520-
   175 000000BC 6465206E7565766F2E-
   175 000000C5 00                 
   176                                      
   177 000000C6 436173696C6C612069-         msgCasillaInvalidaSold  db "Casilla inválida: no hay un soldado en esa casilla. Intente de nuevo.", 0
   177 000000CF 6E76C3A16C6964613A-
   177 000000D8 206E6F206861792075-
   177 000000E1 6E20736F6C6461646F-
   177 000000EA 20656E206573612063-
   177 000000F3 6173696C6C612E2049-
   177 000000FC 6E74656E7465206465-
   177 00000105 206E7565766F2E00   
   178 0000010D 4572726F7220656E20-         msgErrorInputSold       db "Error en el formato de entrada del soldado. Intente de nuevo.", 0
   178 00000116 656C20666F726D6174-
   178 0000011F 6F20646520656E7472-
   178 00000128 6164612064656C2073-
   178 00000131 6F6C6461646F2E2049-
   178 0000013A 6E74656E7465206465-
   178 00000143 206E7565766F2E00   
   179 0000014B 4E6F20736520707565-         msgCasillaInvMovSold    db "No se puede mover el soldado a esa casilla. Intente de nuevo.", 0
   179 00000154 6465206D6F76657220-
   179 0000015D 656C20736F6C646164-
   179 00000166 6F2061206573612063-
   179 0000016F 6173696C6C612E2049-
   179 00000178 6E74656E7465206465-
   179 00000181 206E7565766F2E00   
   180                                  
   181 00000189 436173696C6C612069-         msgCasillaInvalidaOfic  db "Casilla inválida: no hay un oficial en esa casilla. Intente de nuevo.", 0
   181 00000192 6E76C3A16C6964613A-
   181 0000019B 206E6F206861792075-
   181 000001A4 6E206F66696369616C-
   181 000001AD 20656E206573612063-
   181 000001B6 6173696C6C612E2049-
   181 000001BF 6E74656E7465206465-
   181 000001C8 206E7565766F2E00   
   182 000001D0 4572726F7220656E20-         msgErrorInputOfic       db "Error en el formato de entrada del oficial. Intente de nuevo.", 0
   182 000001D9 656C20666F726D6174-
   182 000001E2 6F20646520656E7472-
   182 000001EB 6164612064656C206F-
   182 000001F4 66696369616C2E2049-
   182 000001FD 6E74656E7465206465-
   182 00000206 206E7565766F2E00   
   183 0000020E 4E6F20736520707565-         msgCasillaInvMovOfic    db "No se puede mover el oficial a esa casilla. Intente de nuevo.", 0
   183 00000217 6465206D6F76657220-
   183 00000220 656C206F6669636961-
   183 00000229 6C2061206573612063-
   183 00000232 6173696C6C612E2049-
   183 0000023B 6E74656E7465206465-
   183 00000244 206E7565766F2E00   
   184                                  
   185 0000024C 556E206F6669636961-         msgCapturaSold          db "Un oficial ha capturado a un soldado.", 0
   185 00000255 6C2068612063617074-
   185 0000025E 757261646F20612075-
   185 00000267 6E20736F6C6461646F-
   185 00000270 2E00               
   186 00000272 536520686120726574-         msgOficialRetirado      db "Se ha retirado a un oficial! No ha capturado a un soldado.", 0
   186 0000027B 697261646F20612075-
   186 00000284 6E206F66696369616C-
   186 0000028D 21204E6F2068612063-
   186 00000296 617074757261646F20-
   186 0000029F 6120756E20736F6C64-
   186 000002A8 61646F2E00         
   187                                      
   188 000002AD C2BF517569C3A96E20-         msgQuienInicia          db "¿Quién inicia el juego: oficiales o soldados? (o/s): ", 0
   188 000002B6 696E6963696120656C-
   188 000002BF 206A7565676F3A206F-
   188 000002C8 66696369616C657320-
   188 000002D1 6F20736F6C6461646F-
   188 000002DA 733F20286F2F73293A-
   188 000002E3 2000               
   189                                  
   190 000002E5 4573746164C3AD7374-         msgEstadisticas         db "Estadísticas de los oficiales:", 10, 0
   190 000002EE 69636173206465206C-
   190 000002F7 6F73206F6669636961-
   190 00000300 6C65733A0A00       
   191                                  
   192 00000306 43616E746964616420-         msgCantTotalCapturas    db "Cantidad total de capturas: %d", 10, 10, 0
   192 0000030F 746F74616C20646520-
   192 00000318 63617074757261733A-
   192 00000321 2025640A0A00       
   193                                  
   194 00000327 4F66696369616C2031-         msgOficial1             db "Oficial 1:", 10, 0
   194 00000330 3A0A00             
   195 00000333 4F66696369616C2032-         msgOficial2             db "Oficial 2:", 10, 0
   195 0000033C 3A0A00             
   196                                  
   197 0000033F 4D6F76696D69656E74-         msgCantMovimientos      db "Movimientos totales: %d", 10, 0
   197 00000348 6F7320746F74616C65-
   197 00000351 733A2025640A00     
   198 00000358 2D2048616369612061-         msgCantAdelante         db "- Hacia adelante: %d", 10, 0
   198 00000361 64656C616E74653A20-
   198 0000036A 25640A00           
   199 0000036E 2D204861636961206C-         msgCantDerecha          db "- Hacia la derecha: %d", 10, 0
   199 00000377 612064657265636861-
   199 00000380 3A2025640A00       
   200 00000386 2D204861636961206C-         msgCantIzquierda        db "- Hacia la izquierda: %d", 10, 0
   200 0000038F 6120697A7175696572-
   200 00000398 64613A2025640A00   
   201 000003A0 2D2048616369612061-         msgCantAtras            db "- Hacia atrás: %d", 10, 0
   201 000003A9 7472C3A1733A202564-
   201 000003B2 0A00               
   202 000003B4 2D20456E2064696167-         msgCantDiagonal         db "- En diagonal: %d", 10, 0
   202 000003BD 6F6E616C3A2025640A-
   202 000003C6 00                 
   203 000003C7 2D2D2D204164656C61-         msgCantDiagArribaDer    db "--- Adelante-derecha: %d", 10, 0
   203 000003D0 6E74652D6465726563-
   203 000003D9 68613A2025640A00   
   204 000003E1 2D2D2D204164656C61-         msgCantDiagArribaIzq    db "--- Adelante-izquierda: %d", 10, 0
   204 000003EA 6E74652D697A717569-
   204 000003F3 657264613A2025640A-
   204 000003FC 00                 
   205 000003FD 2D2D2D20417472C3A1-         msgCantDiagAbajoDer     db "--- Atrás-derecha: %d", 10, 0
   205 00000406 732D64657265636861-
   205 0000040F 3A2025640A00       
   206 00000415 2D2D2D20417472C3A1-         msgCantDiagAbajoIzq     db "--- Atrás-izquierda: %d", 10, 0
   206 0000041E 732D697A7175696572-
   206 00000427 64613A2025640A00   
   207                                  
   208 0000042F 43616E746964616420-         msgCantSoldadosCapt     db "Cantidad de soldados capturados: %d", 10, 10, 0
   208 00000438 646520736F6C646164-
   208 00000441 6F7320636170747572-
   208 0000044A 61646F733A2025640A-
   208 00000453 0A00               
   209                                  
   210 00000455 C2A1456C206A756567-         msgJuegoTerminado       db "¡El juego ha terminado!", 10, 0
   210 0000045E 6F206861207465726D-
   210 00000467 696E61646F210A00   
   211 0000046F C2A1456C2067616E61-         msgGanador              db "¡El ganador es el equipo de los %s!", 10, 0
   211 00000478 646F7220657320656C-
   211 00000481 2065717569706F2064-
   211 0000048A 65206C6F7320257321-
   211 00000493 0A00               
   212 00000495 736F6C6461646F7300          stringSoldados          db "soldados", 0
   213 0000049E 6F66696369616C6573-         stringOficiales         db "oficiales", 0
   213 000004A7 00                 
   214                                  
   215 000004A8 52617AC3B36E3A2025-         msgRazonGanador         db "Razón: %s", 10, 0
   215 000004B1 730A00             
   216                                  
   217 000004B4 2D2D2D2D00                  varRazonFin             db '----', 0 ; Razón de fin de juego (a llenar)          
   218                                  
   219                                      ; Se ha decidido salir de la partida
   220 000004B9 536520686120646563-         msgSalidaPartida        db "Se ha decidido salir de la partida. ¿Desea guardarla? (s/n)", 0
   220 000004C2 696469646F2073616C-
   220 000004CB 6972206465206C6120-
   220 000004D4 706172746964612E20-
   220 000004DD C2BF44657365612067-
   220 000004E6 7561726461726C613F-
   220 000004EF 2028732F6E2900     
   221 000004F6 4E4F54413A20536920-         msgAclaracionSalida     db "NOTA: Si decide no guardar la partida, se perderá todo el progreso. En cambio, si decide guardarla y tenía una partida guardada, se sobreescribirá.", 0
   221 000004FF 646563696465206E6F-
   221 00000508 206775617264617220-
   221 00000511 6C6120706172746964-
   221 0000051A 612C20736520706572-
   221 00000523 646572C3A120746F64-
   221 0000052C 6F20656C2070726F67-
   221 00000535 7265736F2E20456E20-
   221 0000053E 63616D62696F2C2073-
   221 00000547 692064656369646520-
   221 00000550 677561726461726C61-
   221 00000559 20792074656EC3AD61-
   221 00000562 20756E612070617274-
   221 0000056B 696461206775617264-
   221 00000574 6164612C2073652073-
   221 0000057D 6F6272656573637269-
   221 00000586 626972C3A12E00     
   222 0000058D 6E00                        guardadoPartida         db 'n', 0 ; guardar (s), no guardar (n)
   223                                  
   224 0000058F 6E00                        yaHabiaGuardado         db 'n', 0 ; ya había guardado (s), no había guardado (n)
   225                                  
   226 00000591 7300                        turnoDe                 db 's', 0 ; soldados (s), oficiales (o)
   227                                  
   228 00000593 C2A150617274696461-         msgPartidaGuardada      db "¡Partida guardada con éxito!", 0
   228 0000059C 206775617264616461-
   228 000005A5 20636F6E20C3A97869-
   228 000005AE 746F2100           
   229                                  
   230 000005B2 4572726F7220616C20-         msgErrorOpenFile        db "Error al abrir el archivo.", 0
   230 000005BB 616272697220656C20-
   230 000005C4 6172636869766F2E00 
   231                                  
   232                                      ; Razones de victoria de soldados
   233 000005CD 6C6F7320736F6C6461-         msgSoldadosFortaleza    db "los soldados han ocupado todos los puntos de la fortaleza.", 0
   233 000005D6 646F732068616E206F-
   233 000005DF 63757061646F20746F-
   233 000005E8 646F73206C6F732070-
   233 000005F1 756E746F7320646520-
   233 000005FA 6C6120666F7274616C-
   233 00000603 657A612E00         
   234 00000608 6C6F7320736F6C6461-         msgSoldadosRodean       db "los soldados han rodeado a los oficiales.", 0
   234 00000611 646F732068616E2072-
   234 0000061A 6F646561646F206120-
   234 00000623 6C6F73206F66696369-
   234 0000062C 616C65732E00       
   235 00000632 616D626F73206F6669-         msgSoldadosInvalidar    db "ambos oficiales han sido invalidados.", 0
   235 0000063B 6369616C6573206861-
   235 00000644 6E207369646F20696E-
   235 0000064D 76616C696461646F73-
   235 00000656 2E00               
   236                                  
   237                                      ; Razones de victoria de oficiales
   238 00000658 6E6F2071756564616E-         msgOficialesGanan       db "no quedan suficientes soldados para ocupar la fortaleza.", 0
   238 00000661 20737566696369656E-
   238 0000066A 74657320736F6C6461-
   238 00000673 646F73207061726120-
   238 0000067C 6F6375706172206C61-
   238 00000685 20666F7274616C657A-
   238 0000068E 612E00             
   239                                  
   240                                      ; Turnos
   241 00000691 4573207475726E6F20-         msgTurnoSoldados        db "Es turno de los soldados. Decida a qué soldado desea mover: (<numFila>-<numColumna>)", 0
   241 0000069A 6465206C6F7320736F-
   241 000006A3 6C6461646F732E2044-
   241 000006AC 656369646120612071-
   241 000006B5 75C3A920736F6C6461-
   241 000006BE 646F20646573656120-
   241 000006C7 6D6F7665723A20283C-
   241 000006D0 6E756D46696C613E2D-
   241 000006D9 3C6E756D436F6C756D-
   241 000006E2 6E613E2900         
   242 000006E7 4573207475726E6F20-         msgTurnoOficiales       db "Es turno de los oficiales. Decida a qué oficial desea mover: (<numFila>-<numColumna>)", 0
   242 000006F0 6465206C6F73206F66-
   242 000006F9 696369616C65732E20-
   242 00000702 446563696461206120-
   242 0000070B 7175C3A9206F666963-
   242 00000714 69616C206465736561-
   242 0000071D 206D6F7665723A2028-
   242 00000726 3C6E756D46696C613E-
   242 0000072F 2D3C6E756D436F6C75-
   242 00000738 6D6E613E2900       
   243 0000073E C2BF41207175C3A920-         msgTurnoMovSold         db "¿A qué casilla desea mover el soldado? (<numFila>-<numColumna>)", 0
   243 00000747 636173696C6C612064-
   243 00000750 65736561206D6F7665-
   243 00000759 7220656C20736F6C64-
   243 00000762 61646F3F20283C6E75-
   243 0000076B 6D46696C613E2D3C6E-
   243 00000774 756D436F6C756D6E61-
   243 0000077D 3E2900             
   244 00000780 C2BF41207175C3A920-         msgTurnoMovOfic         db "¿A qué casilla desea mover el oficial? (<numFila>-<numColumna>)", 0
   244 00000789 636173696C6C612064-
   244 00000792 65736561206D6F7665-
   244 0000079B 7220656C206F666963-
   244 000007A4 69616C3F20283C6E75-
   244 000007AD 6D46696C613E2D3C6E-
   244 000007B6 756D436F6C756D6E61-
   244 000007BF 3E2900             
   245                                      
   246                                      ; Contadores
   247                                  
   248 000007C2 0000000000000000            movimientosOfic1        dq 0
   249 000007CA 0000000000000000            movimientosOfic2        dq 0
   250                                      
   251 000007D2 0000000000000000            movOfic1Adelante        dq 0
   252 000007DA 0000000000000000            movOfic1Derecha         dq 0
   253 000007E2 0000000000000000            movOfic1Izquierda       dq 0
   254 000007EA 0000000000000000            movOfic1Atras           dq 0
   255 000007F2 0000000000000000            movOfic1Diagonal        dq 0
   256 000007FA 0000000000000000            movOfic1DiagArribaDer   dq 0
   257 00000802 0000000000000000            movOfic1DiagArribaIzq   dq 0
   258 0000080A 0000000000000000            movOfic1DiagAbajoDer    dq 0
   259 00000812 0000000000000000            movOfic1DiagAbajoIzq    dq 0
   260                                  
   261 0000081A 0000000000000000            movOfic2Adelante        dq 0
   262 00000822 0000000000000000            movOfic2Derecha         dq 0
   263 0000082A 0000000000000000            movOfic2Izquierda       dq 0
   264 00000832 0000000000000000            movOfic2Atras           dq 0
   265 0000083A 0000000000000000            movOfic2Diagonal        dq 0
   266 00000842 0000000000000000            movOfic2DiagArribaDer   dq 0
   267 0000084A 0000000000000000            movOfic2DiagArribaIzq   dq 0
   268 00000852 0000000000000000            movOfic2DiagAbajoDer    dq 0
   269 0000085A 0000000000000000            movOfic2DiagAbajoIzq    dq 0
   270                                  
   271 00000862 0000000000000000            cantSoldCapturados      dq 0 ; Cuando haya 16 soldados capturados, los oficiales ganan
   272 0000086A 0000000000000000            cantOficInvalidados     dq 0 ; Cuando haya 2 oficiales invalidados, los soldados ganan
   273                                  
   274 00000872 070000000000000003-         casillaOfic1            dq 7,3
   274 0000087B 00000000000000     
   275 00000882 060000000000000005-         casillaOfic2            dq 6,5
   275 0000088B 00000000000000     
   276                                  
   277 00000892 0000000000000000            cantCapturasOfic1       dq 0
   278 0000089A 0000000000000000            cantCapturasOfic2       dq 0
   279                                  
   280 000008A2 4F00                        simboloOficiales        db 'O', 0
   281 000008A4 5800                        simboloSoldados         db 'X', 0
   282                                      
   283 000008A6 04                          orientacionTablero      db  4       ; 4 -> no rotar (default) 
   284 000008A7 73                          piezaDeInicio           db 's'      ; soldados (s), oficiales (o)
   285                                  
   286                                      ; Comandos 
   287 000008A8 636C65617200                cmdLimpiarPantalla          db "clear", 0
   288 000008AE 746F75636820706172-         cmdCrearArchivoPartida      db "touch partidaGuardada.dat", 0
   288 000008B7 746964614775617264-
   288 000008C0 6164612E64617400   
   289 000008C8 726D20706172746964-         cmdBorrarArchivoPartida     db "rm partidaGuardada.dat", 0
   289 000008D1 614775617264616461-
   289 000008DA 2E64617400         
   290 000008DF 6563686F202D6E203E-         cmdLimpiarArchivo           db "echo -n > partidaGuardada.dat", 0
   290 000008E8 207061727469646147-
   290 000008F1 756172646164612E64-
   290 000008FA 617400             
   291                                  
   292                                      ; Formatos
   293 000008FD 257500                      formatoAtoi             db "%u", 0
   294 00000900 257300                      formatoItoa             db "%s", 0
   295                                  
   296                                      ; Modos de apertura de archivos
   297 00000903 726200                      modoLectura             db "rb", 0
   298 00000906 776200                      modoEscritura           db "wb", 0
   299 00000909 616200                      modoAppend              db "ab", 0
   300                                  
   301 0000090C 706172746964614775-         nombreArchivo           db "partidaGuardada.dat", 0
   301 00000915 6172646164612E6461-
   301 0000091E 7400               
   302                                  
   303                                  section .bss
   304                                  
   305 00000000 ????????                    piezaIniElegida     resd 1  ; Variable pivote para la pieza que inicia
   306                                  
   307 00000004 <res 74h>                   tableroEnJuego      resb 116 ; Tablero en juego
   308                                  
   309 00000078 ????????                    soldadoElegido      resb 4  ; Fila y columna del soldado a mover
   310 0000007C ????????                    casillaMovSold      resb 4  ; Fila y columna de la casilla de destino del soldado
   311                                  
   312 00000080 ????????                    oficialElegido      resb 4  ; Fila y columna del oficial a mover
   313 00000084 ????????                    casillaMovOfic      resb 4  ; Fila y columna de la casilla de destino del oficial
   314                                  
   315 00000088 ????????????????            fila                resq 1
   316 00000090 ????????????????            columna             resq 1   
   317 00000098 ????????????????            desplazCasOrig      resq 1
   318                                  
   319 000000A0 ????????????????            filaAMover          resq 1
   320 000000A8 ????????????????            columnaAMover       resq 1
   321 000000B0 ????????????????            desplazCasAMover    resq 1
   322                                  
   323 000000B8 ????????????????            filaAux             resq 1
   324 000000C0 ????????????????            columnaAux          resq 1
   325 000000C8 ????????????????            desplazAux          resq 1
   326 000000D0 ????????????????            desplazAux2         resq 1
   327                                  
   328 000000D8 ????????????????            idArchGuardado      resq 1 ; ID del archivo de la partida guardada
   329                                      
   330 000000E0 <res 47h>                   msgErrorEspecificoSold  resb 71 ; Máximo largo de mensaje de error para soldados
   331 00000127 <res 47h>                   msgErrorEspecificoOfic  resb 71 ; Máximo largo de mensaje de error para oficiales
   332                                  
   333 0000016E <res 47h>                   msgErrorEspecificoSoldMov   resb 71 ; Máximo largo de mensaje de error para movimientos de soldados
   334 000001B5 <res 47h>                   msgErrorEspecificoOficMov   resb 71 ; Máximo largo de mensaje de error para movimientos de oficiales
   335                                  
   336                                  section .text
   337                                      global main
   338                                  
   339                                  main:
   340                                      ; Vemos si hay una partida guardada
   341                                      mOpenFile nombreArchivo, modoLectura
   112 00000000 48BF-               <1>  mov rdi, %1
   112 00000002 [0C09000000000000]  <1>
   113 0000000A 48BE-               <1>  mov rsi, %2
   113 0000000C [0309000000000000]  <1>
   114 00000014 4883EC08            <1>  sub rsp, 8
   115 00000018 E8(00000000)        <1>  call fopen
   116 0000001D 4883C408            <1>  add rsp, 8
   117                              <1> 
   118 00000021 4883F800            <1>  cmp rax, 0
   119 00000025 48890425[D8000000]  <1>  mov qword[idArchGuardado], rax
   342 0000002D 4883F800                    cmp rax, 0
   343 00000031 7F02                        jg partidaGuardada
   344 00000033 EB18                        jmp bienvenida
   345                                  
   346                                      partidaGuardada:
   347 00000035 E8A7280000                      call abrirPartidaGuardada
   348 0000003A 803C25[91050000]73              cmp byte[turnoDe], 's'
   349 00000042 0F84D8000000                    je loopMovimientos
   350 00000048 E9E3010000                      jmp turnoOficiales
   351                                  
   352                                      bienvenida:
   353                                          mPuts msgBienvenida
     2 0000004D 48BF-               <1>  mov rdi, %1
     2 0000004F [6F00000000000000]  <1>
     3 00000057 4883EC08            <1>  sub rsp, 8
     4 0000005B E8(00000000)        <1>  call puts
     5 00000060 4883C408            <1>  add rsp, 8
   354                                          
   355                                      ; Se debe elegir quién inicia la partida
   356                                      personalizarQuienInicia:
   357 00000064 C70425[00000000]00-             mov dword[piezaIniElegida], ''    ; vaciar variable
   357 0000006C 000000             
   358                                          mPuts msgQuienInicia
     2 0000006F 48BF-               <1>  mov rdi, %1
     2 00000071 [AD02000000000000]  <1>
     3 00000079 4883EC08            <1>  sub rsp, 8
     4 0000007D E8(00000000)        <1>  call puts
     5 00000082 4883C408            <1>  add rsp, 8
   359                                          mGets piezaIniElegida
    17 00000086 48BF-               <1>  mov rdi, %1
    17 00000088 [0000000000000000]  <1>
    18 00000090 4883EC08            <1>  sub rsp, 8
    19 00000094 E8(00000000)        <1>  call gets
    20 00000099 4883C408            <1>  add rsp, 8
   360                                  
   361 0000009D 833C25[00000000]23              cmp dword[piezaIniElegida], '#'
   362 000000A5 0F840C220000                    je salirSinGuardar
   363                                  
   364 000000AB 833C25[00000000]6F              cmp dword[piezaIniElegida], 'o' 
   365 000000B3 7423                            je setearPiezaInicio
   366 000000B5 833C25[00000000]73              cmp dword[piezaIniElegida], 's'
   367 000000BD 7419                            je setearPiezaInicio
   368                                  
   369                                          mErrorJump msgOpcionInvalida, personalizarQuienInicia
    45                              <1>  mPuts %1
     2 000000BF 48BF-               <2>  mov rdi, %1
     2 000000C1 [A100000000000000]  <2>
     3 000000C9 4883EC08            <2>  sub rsp, 8
     4 000000CD E8(00000000)        <2>  call puts
     5 000000D2 4883C408            <2>  add rsp, 8
    46 000000D6 EB8C                <1>  jmp %2
   370                                  
   371                                          setearPiezaInicio:
   372                                              mMov piezaDeInicio, piezaIniElegida, 1
    31 000000D8 B901000000          <1>  mov rcx, %3
    32 000000DD 488D3425[00000000]  <1>  lea rsi, [%2]
    33 000000E5 488D3C25[A7080000]  <1>  lea rdi, [%1]
    34 000000ED F3A4                <1>  rep movsb
   373 000000EF EB00                                jmp comenzarPorInicio
   374                                  
   375                                  ; --------------------------------------------------------------------------------------------
   376                                  ; RUTINA PARA COMENZAR EL JUEGO -> Se comienza desde el jugador elegido (o el default)
   377                                  ; --------------------------------------------------------------------------------------------
   378                                  
   379                                  comenzarPorInicio:
   380                                      mMov tableroEnJuego, tableroOrig, 116
    31 000000F1 B974000000          <1>  mov rcx, %3
    32 000000F6 488D3425[00000000]  <1>  lea rsi, [%2]
    33 000000FE 488D3C25[04000000]  <1>  lea rdi, [%1]
    34 00000106 F3A4                <1>  rep movsb
   381                                  
   382 00000108 803C25[A7080000]73          cmp byte[piezaDeInicio], 's'
   383 00000110 740E                        je loopMovimientos
   384 00000112 803C25[A7080000]6F          cmp byte[piezaDeInicio], 'o'
   385 0000011A 0F8410010000                je turnoOficiales
   386                                  
   387                                  
   388                                  ; COMIENZA EL JUEGO
   389                                  loopMovimientos:; mostrarTablero, mostrarTurno, realizarMovimiento, verificarFinJuego
   390 00000120 C60425[E0000000]00          mov byte[msgErrorEspecificoSold], 0
   391 00000128 C60425[B5010000]00          mov byte[msgErrorEspecificoOficMov], 0
   392                                      turnoSoldados:
   393 00000130 C60425[91050000]73              mov byte[turnoDe], 's'
   394 00000138 C60425[78000000]30              mov byte [soldadoElegido], '0'
   395                                      
   396                                          mCommand cmdLimpiarPantalla ; Limpia la pantalla para mostrar el tablero
    24 00000140 48BF-               <1>  mov rdi, %1
    24 00000142 [A808000000000000]  <1>
    25 0000014A 4883EC08            <1>  sub rsp, 8
    26 0000014E E8(00000000)        <1>  call system
    27 00000153 4883C408            <1>  add rsp, 8
   397                                  
   398                                          mPuts tableroEnJuego ; Muestro el tablero
     2 00000157 48BF-               <1>  mov rdi, %1
     2 00000159 [0400000000000000]  <1>
     3 00000161 4883EC08            <1>  sub rsp, 8
     4 00000165 E8(00000000)        <1>  call puts
     5 0000016A 4883C408            <1>  add rsp, 8
   399                                  
   400 0000016E 803C25[E0000000]00              cmp byte[msgErrorEspecificoSold], 0
   401 00000176 0F8519030000                    jne imprimirErrorSold
   402                                  
   403 0000017C 803C25[B6010000]00              cmp byte[msgErrorEspecificoOficMov+1], 0
   404 00000184 0F85590B0000                    jne imprimirOficInvalidado
   405                                  
   406                                          todoOkSold:
   407 0000018A C60425[B5010000]00                  mov byte[msgErrorEspecificoOficMov], 0
   408                                  
   409                                              mPuts msgTurnoSoldados      ; Muestra el mensaje de seleccionar ficha a mover
     2 00000192 48BF-               <1>  mov rdi, %1
     2 00000194 [9106000000000000]  <1>
     3 0000019C 4883EC08            <1>  sub rsp, 8
     4 000001A0 E8(00000000)        <1>  call puts
     5 000001A5 4883C408            <1>  add rsp, 8
   410                                              mGets soldadoElegido        ; Obtiene la ficha a mover
    17 000001A9 48BF-               <1>  mov rdi, %1
    17 000001AB [7800000000000000]  <1>
    18 000001B3 4883EC08            <1>  sub rsp, 8
    19 000001B7 E8(00000000)        <1>  call gets
    20 000001BC 4883C408            <1>  add rsp, 8
   411                                  
   412 000001C0 803C25[78000000]23                  cmp byte[soldadoElegido], '#'
   413 000001C8 0F84EF200000                        je salirDelJuego
   414                                              
   415 000001CE E966010000                          jmp verificarFichaSold ; Verifica si la ficha elegida es valida
   416                                  
   417                                              casillaAMoverseSold:
   418                                                  
   419                                                  mPuts msgTurnoMovSold   ; Muestra el mensaje de seleccionar casilla a mover
     2 000001D3 48BF-               <1>  mov rdi, %1
     2 000001D5 [3E07000000000000]  <1>
     3 000001DD 4883EC08            <1>  sub rsp, 8
     4 000001E1 E8(00000000)        <1>  call puts
     5 000001E6 4883C408            <1>  add rsp, 8
   420                                                  mGets casillaMovSold    ; Obtiene la casilla a mover
    17 000001EA 48BF-               <1>  mov rdi, %1
    17 000001EC [7C00000000000000]  <1>
    18 000001F4 4883EC08            <1>  sub rsp, 8
    19 000001F8 E8(00000000)        <1>  call gets
    20 000001FD 4883C408            <1>  add rsp, 8
   421                                  
   422 00000201 803C25[7C000000]23                      cmp byte[casillaMovSold], '#'
   423 00000209 0F84AE200000                            je salirDelJuego
   424                                  
   425 0000020F E91B040000                              jmp verificarMovimientoSold ; Verifica si el movimiento es valido
   426                                  
   427                                                  moverSoldado:
   428 00000214 E8660A0000                                  call realizarMovimientoSold ; Realiza el movimiento
   429                                                      
   430 00000219 E88F160000                                  call verificarFinJuegoSoldados ; Verificar fin de juego por algún movimiento de soldado
   431 0000021E 4883F800                                    cmp rax, 0
   432 00000222 0F84E71B0000                                je finDeJuego
   433                                  
   434 00000228 C60425[27010000]00          mov byte[msgErrorEspecificoOfic], 0
   435                                      turnoOficiales:
   436 00000230 C60425[91050000]6F              mov byte[turnoDe], 'o'
   437 00000238 C60425[80000000]30              mov byte[oficialElegido], '0'
   438                                          
   439                                          mCommand cmdLimpiarPantalla ; Limpia la pantalla para mostrar el tablero
    24 00000240 48BF-               <1>  mov rdi, %1
    24 00000242 [A808000000000000]  <1>
    25 0000024A 4883EC08            <1>  sub rsp, 8
    26 0000024E E8(00000000)        <1>  call system
    27 00000253 4883C408            <1>  add rsp, 8
   440                                  
   441                                          mPuts tableroEnJuego ; Muestra el tablero
     2 00000257 48BF-               <1>  mov rdi, %1
     2 00000259 [0400000000000000]  <1>
     3 00000261 4883EC08            <1>  sub rsp, 8
     4 00000265 E8(00000000)        <1>  call puts
     5 0000026A 4883C408            <1>  add rsp, 8
   442                                  
   443 0000026E 803C25[27010000]00              cmp byte[msgErrorEspecificoOfic], 0
   444 00000276 0F8597030000                    jne imprimirErrorOfic
   445                                  
   446                                          todoOkOfic:
   447 0000027C C60425[27010000]00                  mov byte[msgErrorEspecificoOfic], 0
   448                                  
   449                                              mPuts msgTurnoOficiales ; Muestra el mensaje de seleccionar ficha a mover
     2 00000284 48BF-               <1>  mov rdi, %1
     2 00000286 [E706000000000000]  <1>
     3 0000028E 4883EC08            <1>  sub rsp, 8
     4 00000292 E8(00000000)        <1>  call puts
     5 00000297 4883C408            <1>  add rsp, 8
   450                                              mGets oficialElegido    ; Obtiene la ficha a mover
    17 0000029B 48BF-               <1>  mov rdi, %1
    17 0000029D [8000000000000000]  <1>
    18 000002A5 4883EC08            <1>  sub rsp, 8
    19 000002A9 E8(00000000)        <1>  call gets
    20 000002AE 4883C408            <1>  add rsp, 8
   451                                  
   452 000002B2 803C25[80000000]23                  cmp byte[oficialElegido], '#'
   453 000002BA 0F84FD1F0000                        je salirDelJuego
   454                                  
   455 000002C0 E9EC010000                          jmp verificarFichaOfic ; Verifica si la ficha elegida es valida
   456                                  
   457                                              casillaAMoverseOfic:
   458                                  
   459                                                  mPuts msgTurnoMovOfic   ; Muestra el mensaje de seleccionar casilla a mover
     2 000002C5 48BF-               <1>  mov rdi, %1
     2 000002C7 [8007000000000000]  <1>
     3 000002CF 4883EC08            <1>  sub rsp, 8
     4 000002D3 E8(00000000)        <1>  call puts
     5 000002D8 4883C408            <1>  add rsp, 8
   460                                                  mGets casillaMovOfic    ; Obtiene la casilla a mover
    17 000002DC 48BF-               <1>  mov rdi, %1
    17 000002DE [8400000000000000]  <1>
    18 000002E6 4883EC08            <1>  sub rsp, 8
    19 000002EA E8(00000000)        <1>  call gets
    20 000002EF 4883C408            <1>  add rsp, 8
   461                                  
   462 000002F3 803C25[84000000]23                      cmp byte[casillaMovOfic], '#'
   463 000002FB 0F84BC1F0000                            je salirDelJuego
   464                                                  
   465 00000301 E9C3060000                              jmp verificarMovimientoOfic ; Verifica si el movimiento es valido
   466                                  
   467                                                  moverOficial:
   468 00000306 E8A2090000                                  call realizarMovimientoOfic ; Realiza el movimiento
   469                                                      ; Verificar fin de juego por algún movimiento de oficial
   470 0000030B E863150000                                  call verificarFinJuegoOficiales
   471 00000310 4883F800                                    cmp rax, 0
   472 00000314 0F84F51A0000                                je finDeJuego
   473                                                      
   474 0000031A E911FEFFFF                                  jmp turnoSoldados
   475                                                  
   476                                                  capturar:
   477 0000031F E8F60D0000                                  call capturarSoldado ; Captura soldado
   478                                                      ; Verificar fin de juego por captura de soldado
   479 00000324 E84A150000                                  call verificarFinJuegoOficiales
   480 00000329 4883F800                                    cmp rax, 0
   481 0000032D 0F84DC1A0000                                je finDeJuego
   482                                                      
   483                                                  ; Repetir en loop
   484 00000333 E9F8FDFFFF                              jmp turnoSoldados
   485                                  
   486 00000338 C3                          ret
   487                                  
   488                                  ;; --------------------------------------------------------------------------------------------
   489                                  ; VERIFICACIONES DE PIEZAS ORIGINALES A MOVER PARA SOLDADOS Y OFICIALES
   490                                  ; --------------------------------------------------------------------------------------------
   491                                  
   492                                  verificarFichaSold:
   493 00000339 8A0425[78000000]            mov al, byte[soldadoElegido] ; Numero de fila
   494                                      
   495                                      ; Compromabos que el caracter ingresado sea un número entre 1 y 7
   496 00000340 3C31                        cmp al, '1'
   497 00000342 0F8C05010000                jl errorInputSold
   498 00000348 3C37                        cmp al, '7'
   499 0000034A 0F8FFD000000                jg errorInputSold
   500                                  
   501                                      ; Parseamos el número de fila de string a int
   502 00000350 48C70425[88000000]-         mov qword[fila], 0
   502 00000358 00000000           
   503                                      mSscanf byte[soldadoElegido], formatoAtoi, fila
    69 0000035C 488D3C25[78000000]  <1>  lea rdi, %1
    70 00000364 48BE-               <1>  mov rsi, %2
    70 00000366 [FD08000000000000]  <1>
    71 0000036E 48BA-               <1>  mov rdx, %3
    71 00000370 [8800000000000000]  <1>
    72 00000378 4883EC08            <1>  sub rsp, 8
    73 0000037C E8(00000000)        <1>  call sscanf
    74 00000381 4883C408            <1>  add rsp, 8
   504 00000385 4883F801                    cmp rax, 1
   505 00000389 0F8CBE000000                jl errorInputSold
   506                                  
   507                                      ; Comprobamos que el caracter siguiente sea un guión para que cumpla con el formato establecido
   508 0000038F 8A0425[79000000]            mov al, byte[soldadoElegido+1] ; Caracter '-'
   509 00000396 3C2D                        cmp al, '-'
   510 00000398 0F85AF000000                jne errorInputSold
   511                                      
   512                                      ; Comprobamos que el número de columna sea un número entre 1 y 7
   513 0000039E 8A0425[7A000000]            mov al, byte[soldadoElegido+2] ; Numero de columna
   514 000003A5 3C31                        cmp al, '1'
   515 000003A7 0F8CA0000000                jl errorInputSold
   516 000003AD 3C37                        cmp al, '7'
   517 000003AF 0F8F98000000                jg errorInputSold
   518                                  
   519                                      ; Parseamos el número de columna de string a int
   520 000003B5 48C70425[90000000]-         mov qword[columna], 0
   520 000003BD 00000000           
   521                                      mSscanf byte[soldadoElegido+2], formatoAtoi, columna
    69 000003C1 488D3C25[7A000000]  <1>  lea rdi, %1
    70 000003C9 48BE-               <1>  mov rsi, %2
    70 000003CB [FD08000000000000]  <1>
    71 000003D3 48BA-               <1>  mov rdx, %3
    71 000003D5 [9000000000000000]  <1>
    72 000003DD 4883EC08            <1>  sub rsp, 8
    73 000003E1 E8(00000000)        <1>  call sscanf
    74 000003E6 4883C408            <1>  add rsp, 8
   522 000003EA 4883F801                    cmp rax, 1
   523 000003EE 7C5D                        jl errorInputSold
   524                                  
   525                                      ; El ultimo caracter del string ingresado debe ser un caracter nulo
   526 000003F0 8A0425[7B000000]            mov al, byte[soldadoElegido+3] ; Caracter nulo
   527 000003F7 3C00                        cmp al, 0
   528 000003F9 7552                        jne errorInputSold
   529                                  
   530                                      ; Calculamos desplazamiento en el tablero
   531                                      ;  mCalcDesplaz calcula el desplazamiento en el tablero en base a la fila y columna y lo almacena en desplazCasOrig usando una formula
   532                                      mCalcDesplaz [fila], [columna], qword[desplazCasOrig]
    87 000003FB 488B3C25[88000000]  <1>  mov rdi, %1
    88 00000403 488B3425[90000000]  <1>  mov rsi, %2
    89 0000040B E859080000          <1>  call calcularDesplazamiento
    90 00000410 48890425[98000000]  <1>  mov %3, rax
   533 00000418 488B1C25[98000000]          mov rbx, qword[desplazCasOrig]
   534                                      
   535                                      ; Limpio los registros
   536 00000420 B800000000                  mov rax,0
   537 00000425 BA00000000                  mov rdx, 0
   538                                  
   539                                      ; Cargo en dl el caracter de la casilla en el tablero y en al el simbolo de los soldados
   540 0000042A 8A93[04000000]              mov dl, byte[tableroEnJuego+rbx]
   541 00000430 8A0425[A4080000]            mov al, [simboloSoldados]
   542                                  
   543                                      ; Comparo los caracteres, deben ser iguales para que el movimiento no sea invalido
   544 00000437 38C2                        cmp dl, al
   545 00000439 7536                        jne errorCasillaInvalidaSold
   546                                      
   547                                      ; Si no hubo errores, limpio el mensaje de error y sigo con la ejecucion
   548 0000043B B800000000                  mov rax, 0
   549 00000440 48890425[E0000000]          mov [msgErrorEspecificoSold], rax
   550 00000448 E986FDFFFF                  jmp casillaAMoverseSold
   551                                  
   552                                      ; Errores
   553                                      errorInputSold:
   554 0000044D 488B0425[0D010000]              mov rax, [msgErrorInputSold]
   555                                          mMov msgErrorEspecificoSold, msgErrorInputSold, 62
    31 00000455 B93E000000          <1>  mov rcx, %3
    32 0000045A 488D3425[0D010000]  <1>  lea rsi, [%2]
    33 00000462 488D3C25[E0000000]  <1>  lea rdi, [%1]
    34 0000046A F3A4                <1>  rep movsb
   556 0000046C E9BFFCFFFF                      jmp turnoSoldados
   557                                  
   558                                      errorCasillaInvalidaSold:
   559 00000471 488B0425[C6000000]              mov rax, [msgCasillaInvalidaSold]
   560                                          mMov msgErrorEspecificoSold, msgCasillaInvalidaSold, 70
    31 00000479 B946000000          <1>  mov rcx, %3
    32 0000047E 488D3425[C6000000]  <1>  lea rsi, [%2]
    33 00000486 488D3C25[E0000000]  <1>  lea rdi, [%1]
    34 0000048E F3A4                <1>  rep movsb
   561 00000490 E99BFCFFFF                      jmp turnoSoldados
   562                                  
   563                                      imprimirErrorSold:
   564                                          mPuts msgErrorEspecificoSold
     2 00000495 48BF-               <1>  mov rdi, %1
     2 00000497 [E000000000000000]  <1>
     3 0000049F 4883EC08            <1>  sub rsp, 8
     4 000004A3 E8(00000000)        <1>  call puts
     5 000004A8 4883C408            <1>  add rsp, 8
   565 000004AC E9D9FCFFFF                      jmp todoOkSold
   566                                      
   567                                  
   568                                  verificarFichaOfic:
   569 000004B1 8A0C25[80000000]            mov cl, byte[oficialElegido] ; Numero de fila
   570                                      
   571                                      ; Compromabos que el caracter ingresado para la fila sea un número entre 1 y 7
   572 000004B8 80F931                      cmp cl, '1'
   573 000004BB 0F8C0A010000                jl errorInputOfic
   574 000004C1 80F937                      cmp cl, '7'
   575 000004C4 0F8F01010000                jg errorInputOfic
   576                                      
   577                                      ; Parseamos el número de fila de string a int
   578 000004CA 48C70425[88000000]-         mov qword[fila], 0
   578 000004D2 00000000           
   579                                      mSscanf byte[oficialElegido], formatoAtoi, fila
    69 000004D6 488D3C25[80000000]  <1>  lea rdi, %1
    70 000004DE 48BE-               <1>  mov rsi, %2
    70 000004E0 [FD08000000000000]  <1>
    71 000004E8 48BA-               <1>  mov rdx, %3
    71 000004EA [8800000000000000]  <1>
    72 000004F2 4883EC08            <1>  sub rsp, 8
    73 000004F6 E8(00000000)        <1>  call sscanf
    74 000004FB 4883C408            <1>  add rsp, 8
   580 000004FF 4883F801                    cmp rax, 1
   581 00000503 0F8CC2000000                jl errorInputOfic
   582                                  
   583                                      ; Comprobamos que el caracter siguiente sea un guión para que cumpla con el formato establecido
   584 00000509 8A0C25[81000000]            mov cl, byte[oficialElegido+1] ; Caracter '-'
   585 00000510 80F92D                      cmp cl, '-'
   586 00000513 0F85B2000000                jne errorInputOfic
   587                                      
   588                                      ; Comprobamos que el número de columna sea un número entre 1 y 7
   589 00000519 8A0C25[82000000]            mov cl, byte[oficialElegido+2] ; Numero de columna
   590 00000520 80F931                      cmp cl, '1'
   591 00000523 0F8CA2000000                jl errorInputOfic
   592 00000529 80F937                      cmp cl, '7'
   593 0000052C 0F8F99000000                jg errorInputOfic
   594                                  
   595                                      ; Parseamos el número de columna de string a int
   596 00000532 48C70425[90000000]-         mov qword[columna], 0
   596 0000053A 00000000           
   597                                      mSscanf byte[oficialElegido+2], formatoAtoi, columna
    69 0000053E 488D3C25[82000000]  <1>  lea rdi, %1
    70 00000546 48BE-               <1>  mov rsi, %2
    70 00000548 [FD08000000000000]  <1>
    71 00000550 48BA-               <1>  mov rdx, %3
    71 00000552 [9000000000000000]  <1>
    72 0000055A 4883EC08            <1>  sub rsp, 8
    73 0000055E E8(00000000)        <1>  call sscanf
    74 00000563 4883C408            <1>  add rsp, 8
   598 00000567 4883F801                    cmp rax, 1
   599 0000056B 7C5E                        jl errorInputOfic
   600                                  
   601                                      ; El ultimo caracter del string ingresado debe ser un caracter nulo
   602 0000056D 8A0C25[83000000]            mov cl, byte[oficialElegido+3] ; Caracter nulo
   603 00000574 80F900                      cmp cl, 0
   604 00000577 7552                        jne errorInputOfic
   605                                  
   606                                      ; Calculamos desplazamiento en tablero
   607                                      ; mCalcDesplaz calcula el desplazamiento en el tablero en base a la fila y columna y lo almacena en desplazCasOrig usando una formula
   608                                      mCalcDesplaz [fila], [columna], qword[desplazCasOrig]
    87 00000579 488B3C25[88000000]  <1>  mov rdi, %1
    88 00000581 488B3425[90000000]  <1>  mov rsi, %2
    89 00000589 E8DB060000          <1>  call calcularDesplazamiento
    90 0000058E 48890425[98000000]  <1>  mov %3, rax
   609 00000596 488B1C25[98000000]          mov rbx, qword[desplazCasOrig]
   610                                      
   611                                      ; Limpio los registros
   612 0000059E B800000000                  mov rax, 0
   613 000005A3 BA00000000                  mov rdx, 0
   614                                  
   615                                      ; Cargo en dl el caracter de la casilla en el tablero y en cl el simbolo de los oficiales
   616 000005A8 8A93[04000000]              mov dl, byte[tableroEnJuego+rbx]
   617 000005AE 8A0C25[A2080000]            mov cl, [simboloOficiales]
   618                                  
   619                                      ; Comparo los caracteres, deben ser iguales para que el movimiento no sea invalido
   620 000005B5 38CA                        cmp dl, cl
   621 000005B7 7536                        jne errorCasillaInvalidaOfic
   622                                  
   623                                      ; Si no hubo errores, limpio el mensaje de error y sigo con la ejecucion
   624 000005B9 B800000000                  mov rax, 0
   625 000005BE 48890425[27010000]          mov [msgErrorEspecificoOfic], rax
   626 000005C6 E9FAFCFFFF                  jmp casillaAMoverseOfic
   627                                  
   628                                      ; Errores
   629                                      errorInputOfic:
   630 000005CB 488B0425[D0010000]              mov rax, [msgErrorInputOfic]
   631                                          mMov msgErrorEspecificoOfic, msgErrorInputOfic, 62
    31 000005D3 B93E000000          <1>  mov rcx, %3
    32 000005D8 488D3425[D0010000]  <1>  lea rsi, [%2]
    33 000005E0 488D3C25[27010000]  <1>  lea rdi, [%1]
    34 000005E8 F3A4                <1>  rep movsb
   632 000005EA E941FCFFFF                      jmp turnoOficiales
   633                                  
   634                                      errorCasillaInvalidaOfic:
   635 000005EF 488B0425[89010000]              mov rax, [msgCasillaInvalidaOfic]
   636                                          mMov msgErrorEspecificoOfic, msgCasillaInvalidaOfic, 70
    31 000005F7 B946000000          <1>  mov rcx, %3
    32 000005FC 488D3425[89010000]  <1>  lea rsi, [%2]
    33 00000604 488D3C25[27010000]  <1>  lea rdi, [%1]
    34 0000060C F3A4                <1>  rep movsb
   637 0000060E E91DFCFFFF                      jmp turnoOficiales
   638                                  
   639                                      imprimirErrorOfic:
   640                                          mPuts msgErrorEspecificoOfic
     2 00000613 48BF-               <1>  mov rdi, %1
     2 00000615 [2701000000000000]  <1>
     3 0000061D 4883EC08            <1>  sub rsp, 8
     4 00000621 E8(00000000)        <1>  call puts
     5 00000626 4883C408            <1>  add rsp, 8
   641 0000062A E94DFCFFFF                      jmp todoOkOfic
   642                                  
   643                                  ; --------------------------------------------------------------------------------------------
   644                                  ; VERFICIACIONES DE CASILLAS DESTINO PARA SOLDADOS Y OFICIALES
   645                                  ; --------------------------------------------------------------------------------------------
   646                                  
   647                                  verificarMovimientoSold:
   648 0000062F 8A0425[7C000000]            mov al, byte[casillaMovSold] ; Numero de fila
   649                                      
   650                                      ; Compromabos que el caracter ingresado sea un número entre 1 y 7
   651 00000636 3C31                        cmp al, '1'
   652 00000638 0F8CE0010000                jl errorInputSoldMov
   653 0000063E 3C37                        cmp al, '7'
   654 00000640 0F8FD8010000                jg errorInputSoldMov
   655                                  
   656                                      ; Parseamos el número de fila de string a int
   657 00000646 48C70425[A0000000]-         mov qword[filaAMover], 0
   657 0000064E 00000000           
   658                                      mSscanf byte[casillaMovSold], formatoAtoi, filaAMover
    69 00000652 488D3C25[7C000000]  <1>  lea rdi, %1
    70 0000065A 48BE-               <1>  mov rsi, %2
    70 0000065C [FD08000000000000]  <1>
    71 00000664 48BA-               <1>  mov rdx, %3
    71 00000666 [A000000000000000]  <1>
    72 0000066E 4883EC08            <1>  sub rsp, 8
    73 00000672 E8(00000000)        <1>  call sscanf
    74 00000677 4883C408            <1>  add rsp, 8
   659 0000067B 4883F801                    cmp rax, 1
   660 0000067F 0F8C99010000                jl errorInputSoldMov
   661                                  
   662                                      ; Comprobamos que el caracter siguiente sea un guión para que cumpla con el formato establecido
   663 00000685 8A0425[7D000000]            mov al, byte[casillaMovSold+1] ; Caracter '-'
   664 0000068C 3C2D                        cmp al, '-'
   665 0000068E 0F858A010000                jne errorInputSoldMov
   666                                      
   667                                      ; Comprobamos que el número de columna sea un número entre 1 y 7
   668 00000694 8A0425[7E000000]            mov al, byte[casillaMovSold+2] ; Numero de columna
   669 0000069B 3C31                        cmp al, '1'
   670 0000069D 0F8C7B010000                jl errorInputSoldMov
   671 000006A3 3C37                        cmp al, '7'
   672 000006A5 0F8F73010000                jg errorInputSoldMov
   673                                      
   674                                      ; Parseamos el número de columna de string a int
   675 000006AB 48C70425[A8000000]-         mov qword[columnaAMover], 0
   675 000006B3 00000000           
   676                                      mSscanf byte[casillaMovSold+2], formatoAtoi, columnaAMover
    69 000006B7 488D3C25[7E000000]  <1>  lea rdi, %1
    70 000006BF 48BE-               <1>  mov rsi, %2
    70 000006C1 [FD08000000000000]  <1>
    71 000006C9 48BA-               <1>  mov rdx, %3
    71 000006CB [A800000000000000]  <1>
    72 000006D3 4883EC08            <1>  sub rsp, 8
    73 000006D7 E8(00000000)        <1>  call sscanf
    74 000006DC 4883C408            <1>  add rsp, 8
   677 000006E0 4883F801                    cmp rax, 1
   678 000006E4 0F8C34010000                jl errorInputSoldMov
   679                                  
   680                                      ; El ultimo caracter del string ingresado debe ser un caracter nulo
   681 000006EA 8A0425[7F000000]            mov al, byte[casillaMovSold+3] ; Caracter nulo
   682 000006F1 3C00                        cmp al, 0
   683 000006F3 0F8525010000                jne errorInputSoldMov
   684                                  
   685                                      ; Primero chequeamos si el soldado original está en alguna de las posiciones especiales
   686 000006F9 E848070000                  call chequearSoldPosEspeciales
   687 000006FE 4883F800                    cmp rax, 0
   688 00000702 7423                        je lugaresComunesSold ; Si recibimos 1, la casilla original es un lugar común: intentamos hacer el movimiento normal
   689                                      
   690 00000704 4883F801                    cmp rax, 1 ; Si recibimos 1, la casilla original es un lugar especial: solo podemos movernos a la derecha
   691 00000708 0F8474010000                je soloDerechaSold
   692 0000070E 4883F802                    cmp rax, 2 ; Si recibimos 2, la casilla original es un lugar especial: solo podemos movernos a la izquierda
   693 00000712 0F840D020000                je soloIzquierdaSold
   694                                      
   695                                      casillaEspecialAMover:
   696 00000718 4983F800                        cmp r8, 0
   697 0000071C 0F8520010000                    jne errorCasillaInvalidaSoldMov
   698 00000722 E9EDFAFFFF                      jmp moverSoldado
   699                                  
   700                                      lugaresComunesSold:
   701                                          ; Comparamos la fila a mover con la fila actual, la fila a mover debe ser igual a la fila actual + 1
   702                                          mMov filaAux, fila, 1
    31 00000727 B901000000          <1>  mov rcx, %3
    32 0000072C 488D3425[88000000]  <1>  lea rsi, [%2]
    33 00000734 488D3C25[B8000000]  <1>  lea rdi, [%1]
    34 0000073C F3A4                <1>  rep movsb
   703 0000073E 48FF0425[B8000000]              inc qword[filaAux]
   704                                          mCmp [filaAux], [filaAMover], 1
    38 00000746 B901000000          <1>  mov rcx, %3
    39 0000074B 488D3425[B8000000]  <1>  lea rsi, %1
    40 00000753 488D3C25[A0000000]  <1>  lea rdi, %2
    41 0000075B F3A6                <1>  repe cmpsb
   705 0000075D 0F85DF000000                    jne errorCasillaInvalidaSoldMov
   706                                  
   707                                          ; Comparamos la columna a mover con la columna actual
   708 00000763 48C70425[C0000000]-             mov qword[columnaAux], 0 ; Reiniciamos la columna auxiliar
   708 0000076B 00000000           
   709                                          mMov columnaAux, columna, 1
    31 0000076F B901000000          <1>  mov rcx, %3
    32 00000774 488D3425[90000000]  <1>  lea rsi, [%2]
    33 0000077C 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 00000784 F3A4                <1>  rep movsb
   710                                  
   711                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento hacia adelante
    38 00000786 B901000000          <1>  mov rcx, %3
    39 0000078B 488D3425[C0000000]  <1>  lea rsi, %1
    40 00000793 488D3C25[A8000000]  <1>  lea rdi, %2
    41 0000079B F3A6                <1>  repe cmpsb
   712 0000079D 7445                            je columnaSoldAMoverValida
   713                                  
   714 0000079F 48FF0425[C0000000]              inc qword[columnaAux]
   715                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la izquierda
    38 000007A7 B901000000          <1>  mov rcx, %3
    39 000007AC 488D3425[C0000000]  <1>  lea rsi, %1
    40 000007B4 488D3C25[A8000000]  <1>  lea rdi, %2
    41 000007BC F3A6                <1>  repe cmpsb
   716 000007BE 7424                            je columnaSoldAMoverValida
   717                                  
   718 000007C0 48832C25[C0000000]-             sub qword[columnaAux], 2
   718 000007C8 02                 
   719                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la derecha
    38 000007C9 B901000000          <1>  mov rcx, %3
    39 000007CE 488D3425[C0000000]  <1>  lea rsi, %1
    40 000007D6 488D3C25[A8000000]  <1>  lea rdi, %2
    41 000007DE F3A6                <1>  repe cmpsb
   720 000007E0 7402                            je columnaSoldAMoverValida
   721                                  
   722 000007E2 EB5E                            jmp errorCasillaInvalidaSoldMov
   723                                  
   724                                      columnaSoldAMoverValida: ; Queda ver si en esa casilla está vacía o no
   725                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    87 000007E4 488B3C25[A0000000]  <1>  mov rdi, %1
    88 000007EC 488B3425[A8000000]  <1>  mov rsi, %2
    89 000007F4 E870040000          <1>  call calcularDesplazamiento
    90 000007F9 48890425[B0000000]  <1>  mov %3, rax
   726                                          mEstaVacia qword[desplazCasAMover]
    94 00000801 B800000000          <1>  mov rax, 0
    95 00000806 488B3C25[B0000000]  <1>  mov rdi, %1
    96 0000080E E841040000          <1>  call estaVacia
   727 00000813 4883F801                        cmp rax, 1
   728 00000817 7429                            je errorCasillaInvalidaSoldMov ; Si recibimos 1, la casilla está ocupada (o está fuera del tablero)
   729                                          
   730 00000819 E9F6F9FFFF                      jmp moverSoldado 
   731                                  
   732                                      ; Errores
   733                                      errorInputSoldMov:
   734 0000081E 488B0425[0D010000]              mov rax, [msgErrorInputSold]
   735                                          mMov msgErrorEspecificoSoldMov, msgErrorInputSold, 62
    31 00000826 B93E000000          <1>  mov rcx, %3
    32 0000082B 488D3425[0D010000]  <1>  lea rsi, [%2]
    33 00000833 488D3C25[6E010000]  <1>  lea rdi, [%1]
    34 0000083B F3A4                <1>  rep movsb
   736 0000083D E9EEF8FFFF                      jmp turnoSoldados
   737                                  
   738                                      errorCasillaInvalidaSoldMov:
   739 00000842 488B0425[4B010000]              mov rax, [msgCasillaInvMovSold]
   740                                          mMov msgErrorEspecificoSoldMov, msgCasillaInvMovSold, 62
    31 0000084A B93E000000          <1>  mov rcx, %3
    32 0000084F 488D3425[4B010000]  <1>  lea rsi, [%2]
    33 00000857 488D3C25[6E010000]  <1>  lea rdi, [%1]
    34 0000085F F3A4                <1>  rep movsb
   741 00000861 E9CAF8FFFF                      jmp turnoSoldados
   742                                  
   743                                      imprimirErrorSoldMov:
   744                                          mPuts msgErrorEspecificoSoldMov
     2 00000866 48BF-               <1>  mov rdi, %1
     2 00000868 [6E01000000000000]  <1>
     3 00000870 4883EC08            <1>  sub rsp, 8
     4 00000874 E8(00000000)        <1>  call puts
     5 00000879 4883C408            <1>  add rsp, 8
   745 0000087D E9AEF8FFFF                      jmp turnoSoldados
   746                                  
   747                                      ; Si la casilla original es una casilla especial, solo podemos movernos a la derecha o a la izquierda
   748                                      soloDerechaSold:
   749 00000882 41B801000000                    mov r8, 1 ; Suponemos que el movimiento es inválido
   750                                  
   751                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover] ; Calculamos el desplazamiento de la casilla a mover
    87 00000888 488B3C25[A0000000]  <1>  mov rdi, %1
    88 00000890 488B3425[A8000000]  <1>  mov rsi, %2
    89 00000898 E8CC030000          <1>  call calcularDesplazamiento
    90 0000089D 48890425[B0000000]  <1>  mov %3, rax
   752                                          mEstaVacia qword[desplazCasAMover] ; Verificamos si la casilla a mover está vacía
    94 000008A5 B800000000          <1>  mov rax, 0
    95 000008AA 488B3C25[B0000000]  <1>  mov rdi, %1
    96 000008B2 E89D030000          <1>  call estaVacia
   753 000008B7 4883F801                        cmp rax, 1 ; Si recibimos 1, la casilla a mover está ocupada (o está fuera del tablero)
   754 000008BB 0F8457FEFFFF                    je casillaEspecialAMover
   755                                          
   756                                          mCmp [fila], [filaAMover], 1 ; Las filas deben ser iguales (el movimiento especial es para el costado)
    38 000008C1 B901000000          <1>  mov rcx, %3
    39 000008C6 488D3425[88000000]  <1>  lea rsi, %1
    40 000008CE 488D3C25[A0000000]  <1>  lea rdi, %2
    41 000008D6 F3A6                <1>  repe cmpsb
   757 000008D8 0F853AFEFFFF                    jne casillaEspecialAMover
   758                                  
   759                                          mMov columnaAux, columna, 1
    31 000008DE B901000000          <1>  mov rcx, %3
    32 000008E3 488D3425[90000000]  <1>  lea rsi, [%2]
    33 000008EB 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 000008F3 F3A4                <1>  rep movsb
   760 000008F5 48FF0425[C0000000]              inc qword[columnaAux]
   761                                          mCmp [columnaAux], [columnaAMover], 1
    38 000008FD B901000000          <1>  mov rcx, %3
    39 00000902 488D3425[C0000000]  <1>  lea rsi, %1
    40 0000090A 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00000912 F3A6                <1>  repe cmpsb
   762 00000914 0F85FEFDFFFF                    jne casillaEspecialAMover
   763                                          
   764 0000091A 41B800000000                    mov r8, 0 ; Si llegamos acá, el movimiento es válido
   765 00000920 E9F3FDFFFF                      jmp casillaEspecialAMover
   766                                      
   767                                      soloIzquierdaSold:
   768 00000925 41B801000000                    mov r8, 1 ; Suponemos que el movimiento es inválido
   769                                  
   770                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    87 0000092B 488B3C25[A0000000]  <1>  mov rdi, %1
    88 00000933 488B3425[A8000000]  <1>  mov rsi, %2
    89 0000093B E829030000          <1>  call calcularDesplazamiento
    90 00000940 48890425[B0000000]  <1>  mov %3, rax
   771                                          mEstaVacia qword[desplazCasAMover]
    94 00000948 B800000000          <1>  mov rax, 0
    95 0000094D 488B3C25[B0000000]  <1>  mov rdi, %1
    96 00000955 E8FA020000          <1>  call estaVacia
   772 0000095A 4883F801                        cmp rax, 1 
   773 0000095E 0F84B4FDFFFF                    je casillaEspecialAMover
   774                                  
   775                                          mCmp [fila], [filaAMover], 1 ; Las filas deben ser iguales (el movimiento especial es para el costado)
    38 00000964 B901000000          <1>  mov rcx, %3
    39 00000969 488D3425[88000000]  <1>  lea rsi, %1
    40 00000971 488D3C25[A0000000]  <1>  lea rdi, %2
    41 00000979 F3A6                <1>  repe cmpsb
   776 0000097B 0F8597FDFFFF                    jne casillaEspecialAMover
   777                                  
   778                                          mMov columnaAux, columna, 1
    31 00000981 B901000000          <1>  mov rcx, %3
    32 00000986 488D3425[90000000]  <1>  lea rsi, [%2]
    33 0000098E 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 00000996 F3A4                <1>  rep movsb
   779 00000998 48FF0C25[C0000000]              dec qword[columnaAux]
   780                                          mCmp [columnaAux], [columnaAMover], 1
    38 000009A0 B901000000          <1>  mov rcx, %3
    39 000009A5 488D3425[C0000000]  <1>  lea rsi, %1
    40 000009AD 488D3C25[A8000000]  <1>  lea rdi, %2
    41 000009B5 F3A6                <1>  repe cmpsb
   781 000009B7 0F855BFDFFFF                    jne casillaEspecialAMover
   782                                  
   783 000009BD 41B800000000                    mov r8, 0 ; Si llegamos acá, el movimiento es válido
   784 000009C3 E950FDFFFF                      jmp casillaEspecialAMover
   785                                      
   786 000009C8 C3                          ret
   787                                  
   788                                  verificarMovimientoOfic:
   789 000009C9 8A0425[84000000]            mov al, byte[casillaMovOfic] ; Numero de fila
   790                                      
   791 000009D0 3C31                        cmp al, '1'
   792 000009D2 0F8C18020000                jl errorInputOficMov
   793 000009D8 3C37                        cmp al, '7'
   794 000009DA 0F8F10020000                jg errorInputOficMov
   795                                  
   796 000009E0 48C70425[A0000000]-         mov qword[filaAMover], 0
   796 000009E8 00000000           
   797                                      mSscanf byte[casillaMovOfic], formatoAtoi, filaAMover
    69 000009EC 488D3C25[84000000]  <1>  lea rdi, %1
    70 000009F4 48BE-               <1>  mov rsi, %2
    70 000009F6 [FD08000000000000]  <1>
    71 000009FE 48BA-               <1>  mov rdx, %3
    71 00000A00 [A000000000000000]  <1>
    72 00000A08 4883EC08            <1>  sub rsp, 8
    73 00000A0C E8(00000000)        <1>  call sscanf
    74 00000A11 4883C408            <1>  add rsp, 8
   798                                  
   799 00000A15 4883F801                    cmp rax, 1
   800 00000A19 0F8CD1010000                jl errorInputOficMov
   801                                  
   802 00000A1F 8A0425[85000000]            mov al, byte[casillaMovOfic+1] ; Caracter '-'
   803 00000A26 3C2D                        cmp al, '-'
   804 00000A28 0F85C2010000                jne errorInputOficMov
   805                                      
   806 00000A2E 8A0425[86000000]            mov al, byte[casillaMovOfic+2] ; Numero de columna
   807 00000A35 3C31                        cmp al, '1'
   808 00000A37 0F8CB3010000                jl errorInputOficMov
   809 00000A3D 3C37                        cmp al, '7'
   810 00000A3F 0F8FAB010000                jg errorInputOficMov
   811                                  
   812 00000A45 48C70425[A8000000]-         mov qword[columnaAMover], 0
   812 00000A4D 00000000           
   813                                      mSscanf byte[casillaMovOfic+2], formatoAtoi, columnaAMover
    69 00000A51 488D3C25[86000000]  <1>  lea rdi, %1
    70 00000A59 48BE-               <1>  mov rsi, %2
    70 00000A5B [FD08000000000000]  <1>
    71 00000A63 48BA-               <1>  mov rdx, %3
    71 00000A65 [A800000000000000]  <1>
    72 00000A6D 4883EC08            <1>  sub rsp, 8
    73 00000A71 E8(00000000)        <1>  call sscanf
    74 00000A76 4883C408            <1>  add rsp, 8
   814                                  
   815 00000A7A 4883F801                    cmp rax, 1
   816 00000A7E 0F8C6C010000                jl errorInputOficMov
   817                                  
   818 00000A84 8A0425[87000000]            mov al, byte[casillaMovOfic+3] ; Caracter nulo
   819 00000A8B 3C00                        cmp al, 0
   820 00000A8D 0F855D010000                jne errorInputOficMov
   821                                  
   822                                      ; Comparamos la fila a mover con la fila actual
   823                                      mMov filaAux, fila, 1
    31 00000A93 B901000000          <1>  mov rcx, %3
    32 00000A98 488D3425[88000000]  <1>  lea rsi, [%2]
    33 00000AA0 488D3C25[B8000000]  <1>  lea rdi, [%1]
    34 00000AA8 F3A4                <1>  rep movsb
   824                                  
   825                                      mCmp [filaAux], [filaAMover], 1
    38 00000AAA B901000000          <1>  mov rcx, %3
    39 00000AAF 488D3425[B8000000]  <1>  lea rsi, %1
    40 00000AB7 488D3C25[A0000000]  <1>  lea rdi, %2
    41 00000ABF F3A6                <1>  repe cmpsb
   826 00000AC1 7448                        je filaOficAMoverValida ; Filas iguales -> válido
   827 00000AC3 48FF0425[B8000000]          inc qword[filaAux]
   828                                      mCmp [filaAux], [filaAMover], 1
    38 00000ACB B901000000          <1>  mov rcx, %3
    39 00000AD0 488D3425[B8000000]  <1>  lea rsi, %1
    40 00000AD8 488D3C25[A0000000]  <1>  lea rdi, %2
    41 00000AE0 F3A6                <1>  repe cmpsb
   829 00000AE2 7427                        je filaOficAMoverValida
   830 00000AE4 48832C25[B8000000]-         sub qword[filaAux], 2
   830 00000AEC 02                 
   831                                      mCmp [filaAux], [filaAMover], 1
    38 00000AED B901000000          <1>  mov rcx, %3
    39 00000AF2 488D3425[B8000000]  <1>  lea rsi, %1
    40 00000AFA 488D3C25[A0000000]  <1>  lea rdi, %2
    41 00000B02 F3A6                <1>  repe cmpsb
   832 00000B04 7405                        je filaOficAMoverValida
   833                                  
   834 00000B06 E909010000                  jmp errorCasillaInvalidaOficMov
   835                                  
   836                                      filaOficAMoverValida:
   837                                          ; Comparamos la columna a mover con la columna actual
   838 00000B0B 48C70425[C0000000]-             mov qword[columnaAux], 0 ; Reiniciamos la columna auxiliar
   838 00000B13 00000000           
   839                                          mMov columnaAux, columna, 1
    31 00000B17 B901000000          <1>  mov rcx, %3
    32 00000B1C 488D3425[90000000]  <1>  lea rsi, [%2]
    33 00000B24 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 00000B2C F3A4                <1>  rep movsb
   840                                  
   841                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento hacia adelante
    38 00000B2E B901000000          <1>  mov rcx, %3
    39 00000B33 488D3425[C0000000]  <1>  lea rsi, %1
    40 00000B3B 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00000B43 F3A6                <1>  repe cmpsb
   842 00000B45 7448                            je columnaOficAMoverValida
   843                                  
   844 00000B47 48FF0425[C0000000]              inc qword[columnaAux]
   845                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la izquierda
    38 00000B4F B901000000          <1>  mov rcx, %3
    39 00000B54 488D3425[C0000000]  <1>  lea rsi, %1
    40 00000B5C 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00000B64 F3A6                <1>  repe cmpsb
   846 00000B66 7427                            je columnaOficAMoverValida
   847                                  
   848 00000B68 48832C25[C0000000]-             sub qword[columnaAux], 2
   848 00000B70 02                 
   849                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la derecha
    38 00000B71 B901000000          <1>  mov rcx, %3
    39 00000B76 488D3425[C0000000]  <1>  lea rsi, %1
    40 00000B7E 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00000B86 F3A6                <1>  repe cmpsb
   850 00000B88 7405                            je columnaOficAMoverValida
   851                                  
   852 00000B8A E985000000                      jmp errorCasillaInvalidaOficMov
   853                                  
   854                                      columnaOficAMoverValida: ; Podríamos hacer un movimiento normal (casilla vacía) o capturar un soldado...
   855                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    87 00000B8F 488B3C25[A0000000]  <1>  mov rdi, %1
    88 00000B97 488B3425[A8000000]  <1>  mov rsi, %2
    89 00000B9F E8C5000000          <1>  call calcularDesplazamiento
    90 00000BA4 48890425[B0000000]  <1>  mov %3, rax
   856                                          mEstaVacia qword[desplazCasAMover]
    94 00000BAC B800000000          <1>  mov rax, 0
    95 00000BB1 488B3C25[B0000000]  <1>  mov rdi, %1
    96 00000BB9 E896000000          <1>  call estaVacia
   857 00000BBE 4883F800                        cmp rax, 0
   858 00000BC2 0F843EF7FFFF                    je moverOficial ; Si llegamos acá, la casilla a mover está vacía -> movimiento normal
   859                                          
   860                                          ; Si llegamos acá, la casilla no está vacía: ver si hay un soldado para capturar
   861                                          mHaySoldado qword[desplazCasAMover]
   100 00000BC8 B800000000          <1>  mov rax, 0
   101 00000BCD 488B3C25[B0000000]  <1>  mov rdi, %1
   102 00000BD5 E8B5020000          <1>  call haySoldado
   862 00000BDA 4883F801                        cmp rax, 1
   863 00000BDE 7434                            je errorCasillaInvalidaOficMov ; Si recibimos 1, la casilla a ocupar no tiene un soldado -> movimiento inválido
   864                                  
   865                                          ; Si llegamos acá, la casilla a ocupar tiene un soldado: debemos ver si el oficial puede saltar sobre él...
   866 00000BE0 E8CE020000                      call sePuedeSaltarSoldado
   867 00000BE5 4883F801                        cmp rax, 1
   868 00000BE9 7429                            je errorCasillaInvalidaOficMov ; Si recibimos 1, el oficial no puede saltar sobre el soldado -> movimiento inválido
   869                                  
   870 00000BEB E92FF7FFFF                      jmp capturar
   871                                  
   872                                  
   873                                      errorInputOficMov:
   874 00000BF0 488B0425[D0010000]              mov rax, [msgErrorInputOfic]
   875                                          mMov msgErrorEspecificoOficMov, msgErrorInputOfic, 62
    31 00000BF8 B93E000000          <1>  mov rcx, %3
    32 00000BFD 488D3425[D0010000]  <1>  lea rsi, [%2]
    33 00000C05 488D3C25[B5010000]  <1>  lea rdi, [%1]
    34 00000C0D F3A4                <1>  rep movsb
   876 00000C0F E91CF6FFFF                      jmp turnoOficiales
   877                                  
   878                                      errorCasillaInvalidaOficMov:
   879 00000C14 488B0425[0E020000]              mov rax, [msgCasillaInvMovOfic]
   880                                          mMov msgErrorEspecificoOficMov, msgCasillaInvMovOfic, 62
    31 00000C1C B93E000000          <1>  mov rcx, %3
    32 00000C21 488D3425[0E020000]  <1>  lea rsi, [%2]
    33 00000C29 488D3C25[B5010000]  <1>  lea rdi, [%1]
    34 00000C31 F3A4                <1>  rep movsb
   881 00000C33 E9F8F5FFFF                      jmp turnoOficiales
   882                                  
   883                                      imprimirErrorOficMov:
   884                                          mPuts msgErrorEspecificoOficMov
     2 00000C38 48BF-               <1>  mov rdi, %1
     2 00000C3A [B501000000000000]  <1>
     3 00000C42 4883EC08            <1>  sub rsp, 8
     4 00000C46 E8(00000000)        <1>  call puts
     5 00000C4B 4883C408            <1>  add rsp, 8
   885 00000C4F E9DCF5FFFF                      jmp turnoOficiales
   886                                  
   887                                  ; --------------------------------------------------------------------------------------------
   888                                  ; RUTINA PARA VERIFICAR SI UNA CASILLA ESTÁ VACÍA
   889                                  ; --------------------------------------------------------------------------------------------
   890                                  
   891                                  estaVacia:
   892 00000C54 80BF[04000000]20            cmp byte[tableroEnJuego+rdi], ' '
   893 00000C5B 7406                        je okVacia
   894                                  
   895 00000C5D B801000000                  mov rax, 1
   896 00000C62 C3                          ret
   897                                  
   898                                      okVacia:
   899 00000C63 B800000000                      mov rax, 0
   900 00000C68 C3                              ret
   901                                  
   902                                  ; --------------------------------------------------------------------------------------------
   903                                  ; RUTINA PARA CALCULAR EL DESPLAZAMIENTO DE UNA CASILLA EN EL TABLERO
   904                                  ; --------------------------------------------------------------------------------------------
   905                                  
   906                                  calcularDesplazamiento:
   907 00000C69 B800000000                  mov rax, 0
   908 00000C6E 4889F8                      mov rax, rdi
   909 00000C71 48FFC0                      inc rax
   910 00000C74 666BC00B                    imul ax, 11
   911 00000C78 4801F0                      add rax, rsi
   912 00000C7B 48FFC0                      inc rax
   913                                  
   914 00000C7E C3                          ret
   915                                  
   916                                  ; --------------------------------------------------------------------------------------------
   917                                  ; RUTINAS PARA REALIZAR MOVIMIENTOS SIMPLES DE SOLDADOS Y OFICIALES (los que no requieren capturas)
   918                                  ; --------------------------------------------------------------------------------------------
   919                                  
   920                                  realizarMovimientoSold:
   921 00000C7F 488B0425[98000000]          mov rax, qword[desplazCasOrig]
   922 00000C87 488B1C25[B0000000]          mov rbx, qword[desplazCasAMover]
   923                                  
   924 00000C8F C680[04000000]20            mov byte[tableroEnJuego+rax], ' '
   925                                      mMov tableroEnJuego+rbx, simboloSoldados, 1
    31 00000C96 B901000000          <1>  mov rcx, %3
    32 00000C9B 488D3425[A4080000]  <1>  lea rsi, [%2]
    33 00000CA3 488DBB[04000000]    <1>  lea rdi, [%1]
    34 00000CAA F3A4                <1>  rep movsb
   926                                  
   927 00000CAC C3                          ret
   928                                  
   929                                  realizarMovimientoOfic:
   930                                      ; Vemos si el oficial podía capturar un soldado y no lo hizo
   931                                      mMov desplazAux2, desplazCasOrig, 1
    31 00000CAD B901000000          <1>  mov rcx, %3
    32 00000CB2 488D3425[98000000]  <1>  lea rsi, [%2]
    33 00000CBA 488D3C25[D0000000]  <1>  lea rdi, [%1]
    34 00000CC2 F3A4                <1>  rep movsb
   932 00000CC4 E8CD070000                  call podiaCapturarSoldado 
   933 00000CC9 4883F800                    cmp rax, 0 ; Si fue así, significa que el oficial se desentendió de su deber
   934 00000CCD 7430                        je quitarOficial
   935                                  
   936                                      ; Necesitamos chequear si el otro oficial podría haber capturado al soldado
   937 00000CCF E8E30A0000                  call podiaCapturarSoldadoOtroOficial
   938 00000CD4 4883F800                    cmp rax, 0 ; Si fue así, significa que el otro oficial se desentendió de su deber
   939 00000CD8 0F84A0000000                je quitarOtroOficial
   940                                  
   941 00000CDE E9B8000000                  jmp noPodianCapturar
   942                                  
   943                                      imprimirOficInvalidado:
   944                                          mPuts msgErrorEspecificoOficMov
     2 00000CE3 48BF-               <1>  mov rdi, %1
     2 00000CE5 [B501000000000000]  <1>
     3 00000CED 4883EC08            <1>  sub rsp, 8
     4 00000CF1 E8(00000000)        <1>  call puts
     5 00000CF6 4883C408            <1>  add rsp, 8
   945 00000CFA E98BF4FFFF                      jmp todoOkSold
   946                                  
   947                                      quitarOficial:
   948 00000CFF E8CC040000                      call verQueOficialEs
   949 00000D04 4883F801                        cmp rax, 1 ; Si recibimos 1, el oficial 1 es el que se mueve
   950 00000D08 743A                            je quitarOfic1
   951                                  
   952                                          mCalcDesplaz [casillaOfic2], [casillaOfic2+8], qword[desplazAux]
    87 00000D0A 488B3C25[82080000]  <1>  mov rdi, %1
    88 00000D12 488B3425[8A080000]  <1>  mov rsi, %2
    89 00000D1A E84AFFFFFF          <1>  call calcularDesplazamiento
    90 00000D1F 48890425[C8000000]  <1>  mov %3, rax
   953 00000D27 E8320A0000                      call desentenderOficial
   954                                          mMov msgErrorEspecificoOficMov, msgOficialRetirado, 59
    31 00000D2C B93B000000          <1>  mov rcx, %3
    32 00000D31 488D3425[72020000]  <1>  lea rsi, [%2]
    33 00000D39 488D3C25[B5010000]  <1>  lea rdi, [%1]
    34 00000D41 F3A4                <1>  rep movsb
   955 00000D43 C3                              ret
   956                                  
   957                                      quitarOfic1:
   958                                          mCalcDesplaz [casillaOfic1], [casillaOfic1+8], qword[desplazAux]
    87 00000D44 488B3C25[72080000]  <1>  mov rdi, %1
    88 00000D4C 488B3425[7A080000]  <1>  mov rsi, %2
    89 00000D54 E810FFFFFF          <1>  call calcularDesplazamiento
    90 00000D59 48890425[C8000000]  <1>  mov %3, rax
   959 00000D61 E8F8090000                      call desentenderOficial
   960                                          mMov msgErrorEspecificoOficMov, msgOficialRetirado, 59
    31 00000D66 B93B000000          <1>  mov rcx, %3
    32 00000D6B 488D3425[72020000]  <1>  lea rsi, [%2]
    33 00000D73 488D3C25[B5010000]  <1>  lea rdi, [%1]
    34 00000D7B F3A4                <1>  rep movsb
   961 00000D7D C3                              ret
   962                                      
   963                                      quitarOtroOficial:
   964 00000D7E E89F0A0000                      call desentenderOtroOficial
   965                                          mMov msgErrorEspecificoOficMov, msgOficialRetirado, 59
    31 00000D83 B93B000000          <1>  mov rcx, %3
    32 00000D88 488D3425[72020000]  <1>  lea rsi, [%2]
    33 00000D90 488D3C25[B5010000]  <1>  lea rdi, [%1]
    34 00000D98 F3A4                <1>  rep movsb
   966 00000D9A C3                              ret
   967                                  
   968                                      ; Si llegamos acá, el oficial no podía capturar un soldado -> OK!
   969                                      noPodianCapturar:
   970 00000D9B 488B0425[98000000]              mov rax, qword[desplazCasOrig]
   971 00000DA3 488B1C25[B0000000]              mov rbx, qword[desplazCasAMover]
   972                                  
   973 00000DAB C680[04000000]20                mov byte[tableroEnJuego+rax], ' '
   974                                          mMov tableroEnJuego+rbx, simboloOficiales, 1
    31 00000DB2 B901000000          <1>  mov rcx, %3
    32 00000DB7 488D3425[A2080000]  <1>  lea rsi, [%2]
    33 00000DBF 488DBB[04000000]    <1>  lea rdi, [%1]
    34 00000DC6 F3A4                <1>  rep movsb
   975                                  
   976 00000DC8 E803040000                      call verQueOficialEs ; Verificamos qué oficial es el que se quiere mover
   977                                  
   978                                          ; Incrementamos la cantidad de movimientos del oficial correspondiente
   979 00000DCD 4883F801                        cmp rax, 1 ; Si recibimos 1, el oficial 1 es el que se mueve
   980 00000DD1 740B                            je movOfic1
   981                                          
   982                                          ; Si llegamos acá, el oficial 2 es el que se mueve
   983 00000DD3 E8E7040000                      call actualizarContadoresOfic2
   984 00000DD8 E8C2050000                      call refrescarCasActOfic2
   985 00000DDD C3                              ret
   986                                      
   987                                      movOfic1: ; Si llegamos acá, el oficial 1 es el que se mueve
   988 00000DDE E82B040000                      call actualizarContadoresOfic1
   989 00000DE3 E888050000                      call refrescarCasActOfic1
   990                                  
   991 00000DE8 C3                          ret
   992                                      
   993                                  ; --------------------------------------------------------------------------------------------
   994                                  ; RUTINAS PARA CAMBIAR EL TABLERO CON LOS SIMBOLOS PERSONALIZADOS
   995                                  ; --------------------------------------------------------------------------------------------
   996                                  
   997                                  cambiarTableroSoldNuevo:
   998 00000DE9 BB1A000000                  mov rbx, 26 ; Desplazamiento de la primera casilla en donde puede haber piezas
   999                                  
  1000                                      cicloCambiarSoldados:
  1001 00000DEE 80BB[04000000]58                cmp byte[tableroEnJuego+rbx], 'X'
  1002 00000DF5 7516                            jne noCambiarSoldado
  1003                                          mMov tableroEnJuego+rbx, simboloSoldados, 1 ; Cambio el simbolo de los soldados
    31 00000DF7 B901000000          <1>  mov rcx, %3
    32 00000DFC 488D3425[A4080000]  <1>  lea rsi, [%2]
    33 00000E04 488DBB[04000000]    <1>  lea rdi, [%1]
    34 00000E0B F3A4                <1>  rep movsb
  1004                                  
  1005                                          noCambiarSoldado:
  1006 00000E0D 48FFC3                              inc rbx
  1007 00000E10 4883FB4B                            cmp rbx, 75 ; Desplazamiento de la última casilla en donde puede haber piezas
  1008 00000E14 7CD8                                jl cicloCambiarSoldados
  1009                                  
  1010 00000E16 C3                          ret
  1011                                  
  1012                                  cambiarTableroOficNuevo:
  1013                                      mMov tableroEnJuego+83, simboloOficiales, 1 ; Primer oficial (desplazamiento)
    31 00000E17 B901000000          <1>  mov rcx, %3
    32 00000E1C 488D3425[A2080000]  <1>  lea rsi, [%2]
    33 00000E24 488D3C25[57000000]  <1>  lea rdi, [%1]
    34 00000E2C F3A4                <1>  rep movsb
  1014                                      mMov tableroEnJuego+92, simboloOficiales, 1 ; Segundo oficial (desplazamiento)
    31 00000E2E B901000000          <1>  mov rcx, %3
    32 00000E33 488D3425[A2080000]  <1>  lea rsi, [%2]
    33 00000E3B 488D3C25[60000000]  <1>  lea rdi, [%1]
    34 00000E43 F3A4                <1>  rep movsb
  1015 00000E45 C3                          ret
  1016                                  
  1017                                  ; --------------------------------------------------------------------------------------------
  1018                                  ; RUTINA PARA CHEQUEAR SI LA CASILLA DE ORIGEN DE UN SOLDADO ES UNA POSICIÓN ESPECIAL
  1019                                  ; --------------------------------------------------------------------------------------------
  1020                                  
  1021                                  chequearSoldPosEspeciales:
  1022 00000E46 B800000000                  mov rax, 0
  1023                                  
  1024 00000E4B 48833C25[88000000]-         cmp qword[fila], 5
  1024 00000E53 05                 
  1025 00000E54 752C                        jne noEsLugarEspecial ; Si la fila no es 5, no estamos en una posición especial
  1026                                  
  1027                                      ; Si la columna es 1 o 2 (fila 5), estamos en una posición especial: solo podemos movernos a la derecha
  1028 00000E56 48833C25[90000000]-         cmp qword[columna], 1
  1028 00000E5E 01                 
  1029 00000E5F 7428                        je esLugarEspecialADer 
  1030 00000E61 48833C25[90000000]-         cmp qword[columna], 2
  1030 00000E69 02                 
  1031 00000E6A 741D                        je esLugarEspecialADer 
  1032                                  
  1033                                      ; Si la columna es 6 o 7 (fila 5), estamos en una posición especial: solo podemos movernos a la izquierda
  1034 00000E6C 48833C25[90000000]-         cmp qword[columna], 6
  1034 00000E74 06                 
  1035 00000E75 740C                        je esLugarEspecialAIzq 
  1036 00000E77 48833C25[90000000]-         cmp qword[columna], 7
  1036 00000E7F 07                 
  1037 00000E80 7401                        je esLugarEspecialAIzq
  1038                                  
  1039                                      noEsLugarEspecial:
  1040 00000E82 C3                              ret
  1041                                  
  1042                                      esLugarEspecialAIzq:
  1043 00000E83 B802000000                      mov rax, 2
  1044 00000E88 C3                              ret
  1045                                      
  1046                                      esLugarEspecialADer:
  1047 00000E89 B801000000                      mov rax, 1
  1048 00000E8E C3                              ret
  1049                                  
  1050                                  ; --------------------------------------------------------------------------------------------
  1051                                  ; RUTINA PARA VERIFICAR SI HAY UN SOLDADO EN LA CASILLA DESTINO
  1052                                  ; --------------------------------------------------------------------------------------------
  1053                                  
  1054                                  haySoldado:
  1055                                      ; Calculamos desplazamiento en tablero
  1056                                      mCmp byte[tableroEnJuego+rdi], [simboloSoldados], 1
    38 00000E8F B901000000          <1>  mov rcx, %3
    39 00000E94 488DB7[04000000]    <1>  lea rsi, %1
    40 00000E9B 488D3C25[A4080000]  <1>  lea rdi, %2
    41 00000EA3 F3A6                <1>  repe cmpsb
  1057 00000EA5 7406                        je okSoldado
  1058                                  
  1059 00000EA7 B801000000                  mov rax, 1
  1060 00000EAC C3                          ret
  1061                                  
  1062                                      okSoldado:
  1063 00000EAD B800000000                      mov rax, 0
  1064 00000EB2 C3                              ret
  1065                                  
  1066                                  ; --------------------------------------------------------------------------------------------
  1067                                  ; RUTINA PARA VERIFICAR SI UN OFICIAL PUEDE SALTAR SOBRE UN SOLDADO
  1068                                  ; --------------------------------------------------------------------------------------------
  1069                                  
  1070                                  sePuedeSaltarSoldado:
  1071 00000EB3 488B0425[88000000]          mov rax, qword[fila]
  1072 00000EBB 488B1C25[A0000000]          mov rbx, qword[filaAMover]
  1073 00000EC3 4829D8                      sub rax, rbx
  1074 00000EC6 0F8F07010000                jg saltoHaciaArriba ; Si la fila original es mayor que la fila destino, el salto es hacia arriba
  1075 00000ECC 0F8CA3010000                jl saltoHaciaAbajo ; Si la fila original es menor que la fila destino, el salto es hacia abajo
  1076                                  
  1077                                      ; Si estamos acá, el salto es en la misma fila
  1078 00000ED2 488B0425[90000000]          mov rax, qword[columna]
  1079 00000EDA 488B1C25[A8000000]          mov rbx, qword[columnaAMover]
  1080                                  
  1081 00000EE2 4829D8                      sub rax, rbx
  1082 00000EE5 7F02                        jg saltoHaciaIzq ; Si la columna original es mayor que la columna destino, el salto es hacia la izquierda
  1083 00000EE7 7C75                        jl saltoHaciaDer ; Si la columna original es menor que la columna destino, el salto es hacia la derecha
  1084                                  
  1085                                      saltoHaciaIzq:
  1086                                          mMov filaAux, filaAMover, 1
    31 00000EE9 B901000000          <1>  mov rcx, %3
    32 00000EEE 488D3425[A0000000]  <1>  lea rsi, [%2]
    33 00000EF6 488D3C25[B8000000]  <1>  lea rdi, [%1]
    34 00000EFE F3A4                <1>  rep movsb
  1087                                          mMov columnaAux, columnaAMover, 1
    31 00000F00 B901000000          <1>  mov rcx, %3
    32 00000F05 488D3425[A8000000]  <1>  lea rsi, [%2]
    33 00000F0D 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 00000F15 F3A4                <1>  rep movsb
  1088 00000F17 48FF0C25[C0000000]              dec qword[columnaAux]
  1089                                  
  1090                                          mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    87 00000F1F 488B3C25[B8000000]  <1>  mov rdi, %1
    88 00000F27 488B3425[C0000000]  <1>  mov rsi, %2
    89 00000F2F E835FDFFFF          <1>  call calcularDesplazamiento
    90 00000F34 48890425[C8000000]  <1>  mov %3, rax
  1091                                          mEstaVacia qword[desplazAux]
    94 00000F3C B800000000          <1>  mov rax, 0
    95 00000F41 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00000F49 E806FDFFFF          <1>  call estaVacia
  1092 00000F4E 4883F801                        cmp rax, 1
  1093 00000F52 0F84BB010000                    je saltoInvalido
  1094                                  
  1095 00000F58 B800000000                      mov rax, 0
  1096 00000F5D C3                              ret
  1097                                  
  1098                                      saltoHaciaDer:
  1099                                          mMov filaAux, filaAMover, 1
    31 00000F5E B901000000          <1>  mov rcx, %3
    32 00000F63 488D3425[A0000000]  <1>  lea rsi, [%2]
    33 00000F6B 488D3C25[B8000000]  <1>  lea rdi, [%1]
    34 00000F73 F3A4                <1>  rep movsb
  1100                                          mMov columnaAux, columnaAMover, 1
    31 00000F75 B901000000          <1>  mov rcx, %3
    32 00000F7A 488D3425[A8000000]  <1>  lea rsi, [%2]
    33 00000F82 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 00000F8A F3A4                <1>  rep movsb
  1101 00000F8C 48FF0425[C0000000]              inc qword[columnaAux]
  1102                                  
  1103                                          mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    87 00000F94 488B3C25[B8000000]  <1>  mov rdi, %1
    88 00000F9C 488B3425[C0000000]  <1>  mov rsi, %2
    89 00000FA4 E8C0FCFFFF          <1>  call calcularDesplazamiento
    90 00000FA9 48890425[C8000000]  <1>  mov %3, rax
  1104                                          mEstaVacia qword[desplazAux]
    94 00000FB1 B800000000          <1>  mov rax, 0
    95 00000FB6 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00000FBE E891FCFFFF          <1>  call estaVacia
  1105 00000FC3 4883F801                        cmp rax, 1
  1106 00000FC7 0F8446010000                    je saltoInvalido
  1107                                  
  1108 00000FCD B800000000                      mov rax, 0
  1109 00000FD2 C3                              ret
  1110                                  
  1111                                      saltoHaciaArriba:
  1112                                          mMov filaAux, filaAMover, 1
    31 00000FD3 B901000000          <1>  mov rcx, %3
    32 00000FD8 488D3425[A0000000]  <1>  lea rsi, [%2]
    33 00000FE0 488D3C25[B8000000]  <1>  lea rdi, [%1]
    34 00000FE8 F3A4                <1>  rep movsb
  1113                                          mMov columnaAux, columnaAMover, 1
    31 00000FEA B901000000          <1>  mov rcx, %3
    32 00000FEF 488D3425[A8000000]  <1>  lea rsi, [%2]
    33 00000FF7 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 00000FFF F3A4                <1>  rep movsb
  1114 00001001 48FF0C25[B8000000]              dec qword[filaAux]
  1115                                          
  1116                                          mCmp [columna], [columnaAMover], 1
    38 00001009 B901000000          <1>  mov rcx, %3
    39 0000100E 488D3425[90000000]  <1>  lea rsi, %1
    40 00001016 488D3C25[A8000000]  <1>  lea rdi, %2
    41 0000101E F3A6                <1>  repe cmpsb
  1117 00001020 7414                            je seguirSaltoArriba ; Si las columnas son iguales, el salto es hacia arriba y en línea recta
  1118 00001022 7F0A                            jg haciaArribaIzq ; Si la columna original es mayor que la columna destino, el salto es hacia la izquierda
  1119                                  
  1120 00001024 48FF0425[C0000000]              inc qword[columnaAux] ; Salto hacia arriba y a la derecha
  1121 0000102C EB08                            jmp seguirSaltoArriba
  1122                                  
  1123                                          haciaArribaIzq:
  1124 0000102E 48FF0C25[C0000000]                  dec qword[columnaAux] ; Salto hacia arriba y a la izquierda
  1125                                  
  1126                                          seguirSaltoArriba:
  1127                                              mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    87 00001036 488B3C25[B8000000]  <1>  mov rdi, %1
    88 0000103E 488B3425[C0000000]  <1>  mov rsi, %2
    89 00001046 E81EFCFFFF          <1>  call calcularDesplazamiento
    90 0000104B 48890425[C8000000]  <1>  mov %3, rax
  1128                                              mEstaVacia qword[desplazAux]
    94 00001053 B800000000          <1>  mov rax, 0
    95 00001058 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001060 E8EFFBFFFF          <1>  call estaVacia
  1129 00001065 4883F801                            cmp rax, 1
  1130 00001069 0F84A4000000                        je saltoInvalido
  1131                                  
  1132 0000106F B800000000                          mov rax, 0
  1133 00001074 C3                                  ret
  1134                                  
  1135                                      saltoHaciaAbajo:
  1136                                          mMov filaAux, filaAMover, 1
    31 00001075 B901000000          <1>  mov rcx, %3
    32 0000107A 488D3425[A0000000]  <1>  lea rsi, [%2]
    33 00001082 488D3C25[B8000000]  <1>  lea rdi, [%1]
    34 0000108A F3A4                <1>  rep movsb
  1137                                          mMov columnaAux, columnaAMover, 1
    31 0000108C B901000000          <1>  mov rcx, %3
    32 00001091 488D3425[A8000000]  <1>  lea rsi, [%2]
    33 00001099 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 000010A1 F3A4                <1>  rep movsb
  1138 000010A3 48FF0425[B8000000]              inc qword[filaAux]
  1139                                          
  1140                                          mCmp [columna], [columnaAMover], 1
    38 000010AB B901000000          <1>  mov rcx, %3
    39 000010B0 488D3425[90000000]  <1>  lea rsi, %1
    40 000010B8 488D3C25[A8000000]  <1>  lea rdi, %2
    41 000010C0 F3A6                <1>  repe cmpsb
  1141 000010C2 7414                            je seguirSaltoAbajo ; Si las columnas son iguales, el salto es hacia abajo y en línea recta
  1142 000010C4 7F0A                            jg haciaAbajoIzq ; Si la columna original es mayor que la columna destino, el salto es hacia la izquierda
  1143                                  
  1144 000010C6 48FF0425[C0000000]              inc qword[columnaAux] ; Salto hacia abajo y a la derecha
  1145 000010CE EB08                            jmp seguirSaltoAbajo
  1146                                  
  1147                                          haciaAbajoIzq:
  1148 000010D0 48FF0C25[C0000000]                  dec qword[columnaAux] ; Salto hacia abajo y a la izquierda
  1149                                  
  1150                                          seguirSaltoAbajo:
  1151                                              mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    87 000010D8 488B3C25[B8000000]  <1>  mov rdi, %1
    88 000010E0 488B3425[C0000000]  <1>  mov rsi, %2
    89 000010E8 E87CFBFFFF          <1>  call calcularDesplazamiento
    90 000010ED 48890425[C8000000]  <1>  mov %3, rax
  1152                                              mEstaVacia qword[desplazAux]
    94 000010F5 B800000000          <1>  mov rax, 0
    95 000010FA 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001102 E84DFBFFFF          <1>  call estaVacia
  1153 00001107 4883F801                            cmp rax, 1
  1154 0000110B 7406                                je saltoInvalido
  1155                                  
  1156 0000110D B800000000                          mov rax, 0
  1157 00001112 C3                                  ret
  1158                                  
  1159                                      saltoInvalido:
  1160 00001113 B801000000                      mov rax, 1
  1161 00001118 C3                              ret
  1162                                  
  1163 00001119 C3                          ret
  1164                                  
  1165                                  ; --------------------------------------------------------------------------------------------
  1166                                  ; RUTINA PARA CAPTURAR UN SOLDADO
  1167                                  ; --------------------------------------------------------------------------------------------
  1168                                  
  1169                                  capturarSoldado:
  1170 0000111A 488B0425[98000000]          mov rax, qword[desplazCasOrig] ; Oficial a mover
  1171 00001122 488B1C25[B0000000]          mov rbx, qword[desplazCasAMover] ; Soldado a capturar
  1172 0000112A 488B0C25[C8000000]          mov rcx, qword[desplazAux] ; Casilla destino del oficial (donde va a quedar)
  1173                                  
  1174 00001132 C680[04000000]20            mov byte[tableroEnJuego+rax], ' '
  1175 00001139 C683[04000000]20            mov byte[tableroEnJuego+rbx], ' '
  1176                                      
  1177 00001140 8A1425[A2080000]            mov dl, byte[simboloOficiales]
  1178 00001147 8891[04000000]              mov byte[tableroEnJuego+rcx], dl
  1179                                  
  1180 0000114D 48FF0425[62080000]          inc qword[cantSoldCapturados] ; Aumentamos el contador de capturas
  1181                                  
  1182 00001155 E876000000                  call verQueOficialEs ; Verificamos qué oficial es el que se quiere mover
  1183                                  
  1184 0000115A 4883F801                    cmp rax, 1
  1185 0000115E 7446                        je movOfic1Captura
  1186                                  
  1187 00001160 48FF0425[9A080000]          inc qword[cantCapturasOfic2]
  1188 00001168 E852010000                  call actualizarContadoresOfic2
  1189 0000116D E85C020000                  call refrescarCasActOficLuegoCaptura
  1190                                      mMov msgErrorEspecificoOficMov, msgCapturaSold, 38
    31 00001172 B926000000          <1>  mov rcx, %3
    32 00001177 488D3425[4C020000]  <1>  lea rsi, [%2]
    33 0000117F 488D3C25[B5010000]  <1>  lea rdi, [%1]
    34 00001187 F3A4                <1>  rep movsb
  1191 00001189 C3                          ret
  1192                                  
  1193                                      imprimirCapturaSoldado:
  1194                                          mPuts msgErrorEspecificoOficMov
     2 0000118A 48BF-               <1>  mov rdi, %1
     2 0000118C [B501000000000000]  <1>
     3 00001194 4883EC08            <1>  sub rsp, 8
     4 00001198 E8(00000000)        <1>  call puts
     5 0000119D 4883C408            <1>  add rsp, 8
  1195 000011A1 E9E4EFFFFF                      jmp todoOkSold
  1196                                  
  1197                                      movOfic1Captura:
  1198 000011A6 48FF0425[92080000]              inc qword[cantCapturasOfic1]
  1199 000011AE E85B000000                      call actualizarContadoresOfic1
  1200 000011B3 E816020000                      call refrescarCasActOficLuegoCaptura
  1201                                          mMov msgErrorEspecificoOficMov, msgCapturaSold, 38
    31 000011B8 B926000000          <1>  mov rcx, %3
    32 000011BD 488D3425[4C020000]  <1>  lea rsi, [%2]
    33 000011C5 488D3C25[B5010000]  <1>  lea rdi, [%1]
    34 000011CD F3A4                <1>  rep movsb
  1202                                  
  1203 000011CF C3                          ret
  1204                                  
  1205                                  ; --------------------------------------------------------------------------------------------
  1206                                  ; RUTINA PARA VERIFICAR CUÁL OFICIAL SE ESTÁ MOVIENDO
  1207                                  ; --------------------------------------------------------------------------------------------
  1208                                  
  1209                                  verQueOficialEs:
  1210                                      ; Comenzamos verificando si el oficial 1 es el que se está moviendo
  1211                                      mCmp qword[fila], qword[casillaOfic1], 1 ; Fila de la casilla de origen vs. Fila del oficial 1
    38 000011D0 B901000000          <1>  mov rcx, %3
    39 000011D5 488D3425[88000000]  <1>  lea rsi, %1
    40 000011DD 488D3C25[72080000]  <1>  lea rdi, %2
    41 000011E5 F3A6                <1>  repe cmpsb
  1212 000011E7 751F                        jne esOfic2 ; Si las filas no son iguales, el oficial 1 no es el que se está moviendo
  1213                                      mCmp qword[columna], qword[casillaOfic1+8], 1 ; Columna de la casilla de origen vs. Columna del oficial 1
    38 000011E9 B901000000          <1>  mov rcx, %3
    39 000011EE 488D3425[90000000]  <1>  lea rsi, %1
    40 000011F6 488D3C25[7A080000]  <1>  lea rdi, %2
    41 000011FE F3A6                <1>  repe cmpsb
  1214 00001200 7506                        jne esOfic2 ; Si las columnas no son iguales, el oficial 1 no es el que se está moviendo
  1215                                  
  1216 00001202 B801000000                  mov rax, 1 ; es el oficial 1
  1217 00001207 C3                          ret
  1218                                  
  1219                                      esOfic2:
  1220 00001208 B802000000                      mov rax, 2 ; es el oficial 2
  1221                                  
  1222 0000120D C3                          ret
  1223                                  
  1224                                  
  1225                                  ; --------------------------------------------------------------------------------------------
  1226                                  ; RUTINA PARA ACTUALIZAR LOS CONTADORES DE MOVIMIENTOS DE LOS OFICIALES
  1227                                  ; --------------------------------------------------------------------------------------------
  1228                                  
  1229                                  actualizarContadoresOfic1:
  1230 0000120E 48FF0425[C2070000]          inc qword[movimientosOfic1]
  1231 00001216 488B0425[98000000]          mov rax, qword[desplazCasOrig]
  1232 0000121E 482B0425[B0000000]          sub rax, qword[desplazCasAMover] ; rax = desplazOrigen - desplazDestino
  1233 00001226 4883F801                    cmp rax, 1
  1234 0000122A 742B                        je movOfic1Izq
  1235 0000122C 4883F8FF                    cmp rax, -1
  1236 00001230 742E                        je movOfic1Der
  1237 00001232 4883F80B                    cmp rax, 11
  1238 00001236 7431                        je movOfic1Arriba
  1239 00001238 4883F8F5                    cmp rax, -11
  1240 0000123C 7434                        je movOfic1Abajo
  1241 0000123E 4883F80A                    cmp rax, 10
  1242 00001242 7437                        je movOfic1ArrDer
  1243 00001244 4883F8F6                    cmp rax, -10
  1244 00001248 7453                        je movOfic1AbjIzq
  1245 0000124A 4883F80C                    cmp rax, 12
  1246 0000124E 745E                        je movOfic1ArrIzq
  1247 00001250 4883F8F4                    cmp rax, -12
  1248 00001254 7436                        je movOfic1AbjDer
  1249                                  
  1250 00001256 C3                          ret
  1251                                  
  1252                                      movOfic1Izq:
  1253 00001257 48FF0425[E2070000]              inc qword[movOfic1Izquierda]
  1254 0000125F C3                              ret
  1255                                      movOfic1Der:
  1256 00001260 48FF0425[DA070000]              inc qword[movOfic1Derecha]
  1257 00001268 C3                              ret
  1258                                      movOfic1Arriba:
  1259 00001269 48FF0425[D2070000]              inc qword[movOfic1Adelante]
  1260 00001271 C3                              ret
  1261                                      movOfic1Abajo:
  1262 00001272 48FF0425[EA070000]              inc qword[movOfic1Atras]
  1263 0000127A C3                              ret
  1264                                      movOfic1ArrDer:
  1265 0000127B 48FF0425[F2070000]              inc qword[movOfic1Diagonal]
  1266 00001283 48FF0425[FA070000]              inc qword[movOfic1DiagArribaDer]
  1267 0000128B C3                              ret
  1268                                      movOfic1AbjDer:
  1269 0000128C 48FF0425[F2070000]              inc qword[movOfic1Diagonal]
  1270 00001294 48FF0425[0A080000]              inc qword[movOfic1DiagAbajoDer]
  1271 0000129C C3                              ret
  1272                                      movOfic1AbjIzq:
  1273 0000129D 48FF0425[F2070000]              inc qword[movOfic1Diagonal]
  1274 000012A5 48FF0425[12080000]              inc qword[movOfic1DiagAbajoIzq]
  1275 000012AD C3                              ret
  1276                                      movOfic1ArrIzq:
  1277 000012AE 48FF0425[F2070000]              inc qword[movOfic1Diagonal]
  1278 000012B6 48FF0425[02080000]              inc qword[movOfic1DiagArribaIzq]
  1279 000012BE C3                              ret
  1280                                  
  1281                                  actualizarContadoresOfic2:
  1282 000012BF 48FF0425[CA070000]          inc qword[movimientosOfic2]
  1283 000012C7 488B0425[98000000]          mov rax, qword[desplazCasOrig]
  1284 000012CF 482B0425[B0000000]          sub rax, qword[desplazCasAMover] ; rax = desplazOrigen - desplazDestino
  1285 000012D7 4883F801                    cmp rax, 1
  1286 000012DB 742B                        je movOfic2Izq
  1287 000012DD 4883F8FF                    cmp rax, -1
  1288 000012E1 742E                        je movOfic2Der
  1289 000012E3 4883F80B                    cmp rax, 11
  1290 000012E7 7431                        je movOfic2Arriba
  1291 000012E9 4883F8F5                    cmp rax, -11
  1292 000012ED 7434                        je movOfic2Abajo
  1293 000012EF 4883F80A                    cmp rax, 10
  1294 000012F3 7437                        je movOfic2ArrDer
  1295 000012F5 4883F8F6                    cmp rax, -10
  1296 000012F9 7453                        je movOfic2AbjIzq
  1297 000012FB 4883F80C                    cmp rax, 12
  1298 000012FF 745E                        je movOfic2ArrIzq
  1299 00001301 4883F8F4                    cmp rax, -12
  1300 00001305 7436                        je movOfic2AbjDer
  1301                                  
  1302 00001307 C3                          ret
  1303                                  
  1304                                      movOfic2Izq:
  1305 00001308 48FF0425[2A080000]              inc qword[movOfic2Izquierda]
  1306 00001310 C3                              ret
  1307                                      movOfic2Der:
  1308 00001311 48FF0425[22080000]              inc qword[movOfic2Derecha]
  1309 00001319 C3                              ret
  1310                                      movOfic2Arriba:
  1311 0000131A 48FF0425[1A080000]              inc qword[movOfic2Adelante]
  1312 00001322 C3                              ret
  1313                                      movOfic2Abajo:
  1314 00001323 48FF0425[32080000]              inc qword[movOfic2Atras]
  1315 0000132B C3                              ret
  1316                                      movOfic2ArrDer:
  1317 0000132C 48FF0425[3A080000]              inc qword[movOfic2Diagonal]
  1318 00001334 48FF0425[42080000]              inc qword[movOfic2DiagArribaDer]
  1319 0000133C C3                              ret
  1320                                      movOfic2AbjDer:
  1321 0000133D 48FF0425[3A080000]              inc qword[movOfic2Diagonal]
  1322 00001345 48FF0425[52080000]              inc qword[movOfic2DiagAbajoDer]
  1323 0000134D C3                              ret
  1324                                      movOfic2AbjIzq:
  1325 0000134E 48FF0425[3A080000]              inc qword[movOfic2Diagonal]
  1326 00001356 48FF0425[5A080000]              inc qword[movOfic2DiagAbajoIzq]
  1327 0000135E C3                              ret
  1328                                      movOfic2ArrIzq:
  1329 0000135F 48FF0425[3A080000]              inc qword[movOfic2Diagonal]
  1330 00001367 48FF0425[4A080000]              inc qword[movOfic2DiagArribaIzq]
  1331 0000136F C3                              ret
  1332                                  
  1333                                  ; --------------------------------------------------------------------------------------------
  1334                                  ; RUTINA PARA REFRESCAR LA CASILLA ACTUAL DE LOS OFICIALES
  1335                                  ; --------------------------------------------------------------------------------------------
  1336                                  
  1337                                  refrescarCasActOfic1:
  1338                                      mMov casillaOfic1, filaAMover, 1
    31 00001370 B901000000          <1>  mov rcx, %3
    32 00001375 488D3425[A0000000]  <1>  lea rsi, [%2]
    33 0000137D 488D3C25[72080000]  <1>  lea rdi, [%1]
    34 00001385 F3A4                <1>  rep movsb
  1339                                      mMov casillaOfic1+8, columnaAMover, 1
    31 00001387 B901000000          <1>  mov rcx, %3
    32 0000138C 488D3425[A8000000]  <1>  lea rsi, [%2]
    33 00001394 488D3C25[7A080000]  <1>  lea rdi, [%1]
    34 0000139C F3A4                <1>  rep movsb
  1340 0000139E C3                          ret
  1341                                  
  1342                                  refrescarCasActOfic2:
  1343                                      mMov casillaOfic2, filaAMover, 1
    31 0000139F B901000000          <1>  mov rcx, %3
    32 000013A4 488D3425[A0000000]  <1>  lea rsi, [%2]
    33 000013AC 488D3C25[82080000]  <1>  lea rdi, [%1]
    34 000013B4 F3A4                <1>  rep movsb
  1344                                      mMov casillaOfic2+8, columnaAMover, 1
    31 000013B6 B901000000          <1>  mov rcx, %3
    32 000013BB 488D3425[A8000000]  <1>  lea rsi, [%2]
    33 000013C3 488D3C25[8A080000]  <1>  lea rdi, [%1]
    34 000013CB F3A4                <1>  rep movsb
  1345 000013CD C3                          ret    
  1346                                  
  1347                                  refrescarCasActOficLuegoCaptura:
  1348 000013CE 488B0425[B0000000]          mov rax, qword[desplazCasAMover]
  1349 000013D6 488B1C25[C8000000]          mov rbx, qword[desplazAux]
  1350 000013DE 4829D8                      sub rax, rbx ; rax = desplazCasAMover - desplazAux
  1351                                  
  1352 000013E1 4883F801                    cmp rax, 1
  1353 000013E5 742A                        je saltoIzq
  1354 000013E7 4883F8FF                    cmp rax, -1
  1355 000013EB 742E                        je saltoDer
  1356 000013ED 4883F80B                    cmp rax, 11
  1357 000013F1 7432                        je saltoArriba
  1358 000013F3 4883F8F5                    cmp rax, -11
  1359 000013F7 7436                        je saltoAbajo
  1360 000013F9 4883F80A                    cmp rax, 10
  1361 000013FD 743A                        je saltoArrDer
  1362 000013FF 4883F8F6                    cmp rax, -10
  1363 00001403 7446                        je saltoAbjIzq
  1364 00001405 4883F80C                    cmp rax, 12
  1365 00001409 7452                        je saltoArrIzq
  1366 0000140B 4883F8F4                    cmp rax, -12
  1367 0000140F 745E                        je saltoAbjDer
  1368                                  
  1369                                      saltoIzq:
  1370 00001411 48FF0C25[A8000000]              dec qword[columnaAMover]
  1371 00001419 EB64                            jmp finRefrescarCasActOfic
  1372                                      saltoDer:
  1373 0000141B 48FF0425[A8000000]              inc qword[columnaAMover]
  1374 00001423 EB5A                            jmp finRefrescarCasActOfic
  1375                                      saltoArriba:
  1376 00001425 48FF0C25[A0000000]              dec qword[filaAMover]
  1377 0000142D EB50                            jmp finRefrescarCasActOfic
  1378                                      saltoAbajo:
  1379 0000142F 48FF0425[A0000000]              inc qword[filaAMover]
  1380 00001437 EB46                            jmp finRefrescarCasActOfic
  1381                                      saltoArrDer:
  1382 00001439 48FF0C25[A0000000]              dec qword[filaAMover]
  1383 00001441 48FF0425[A8000000]              inc qword[columnaAMover]
  1384 00001449 EB34                            jmp finRefrescarCasActOfic
  1385                                      saltoAbjIzq:
  1386 0000144B 48FF0425[A0000000]              inc qword[filaAMover]
  1387 00001453 48FF0C25[A8000000]              dec qword[columnaAMover]
  1388 0000145B EB22                            jmp finRefrescarCasActOfic
  1389                                      saltoArrIzq:
  1390 0000145D 48FF0C25[A0000000]              dec qword[filaAMover]
  1391 00001465 48FF0C25[A8000000]              dec qword[columnaAMover]
  1392 0000146D EB10                            jmp finRefrescarCasActOfic
  1393                                      saltoAbjDer:
  1394 0000146F 48FF0425[A0000000]              inc qword[filaAMover]
  1395 00001477 48FF0425[A8000000]              inc qword[columnaAMover]
  1396                                  
  1397                                      finRefrescarCasActOfic:
  1398 0000147F E84CFDFFFF                      call verQueOficialEs
  1399                                  
  1400 00001484 4883F801                        cmp rax, 1
  1401 00001488 7406                            je actualizarOfic1
  1402                                  
  1403 0000148A E810FFFFFF                      call refrescarCasActOfic2
  1404 0000148F C3                              ret
  1405                                  
  1406                                          actualizarOfic1:
  1407 00001490 E8DBFEFFFF                          call refrescarCasActOfic1
  1408                                  
  1409 00001495 C3                          ret
  1410                                  
  1411                                  
  1412                                  
  1413                                  ; --------------------------------------------------------------------------------------------
  1414                                  ; RUTINA PARA VERIFICAR SI UN OFICIAL PODÍA CAPTURAR UN SOLDADO Y NO LO HIZO
  1415                                  ; --------------------------------------------------------------------------------------------
  1416                                  
  1417                                  podiaCapturarSoldado:
  1418                                      mMov desplazAux, desplazAux2, 1
    31 00001496 B901000000          <1>  mov rcx, %3
    32 0000149B 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 000014A3 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 000014AB F3A4                <1>  rep movsb
  1419                                  
  1420                                      ; Casilla arriba-izquierda
  1421 000014AD 48832C25[C8000000]-         sub qword[desplazAux], 12
  1421 000014B5 0C                 
  1422                                      mHaySoldado qword[desplazAux]
   100 000014B6 B800000000          <1>  mov rax, 0
   101 000014BB 488B3C25[C8000000]  <1>  mov rdi, %1
   102 000014C3 E8C7F9FFFF          <1>  call haySoldado
  1423 000014C8 4883F800                    cmp rax, 0
  1424 000014CC 7519                        jne verCasArriba
  1425                                  
  1426                                      mPuedeCapturar 12, 1 ; restar 12 a desplazAux
   106 000014CE BF0C000000          <1>  mov rdi, %1
   107 000014D3 BE01000000          <1>  mov rsi, %2
   108 000014D8 E845020000          <1>  call podiaComerPieza
  1427 000014DD 4883F800                    cmp rax, 0
  1428 000014E1 0F8435020000                je podiaCapturar
  1429                                  
  1430                                      ; Casilla arriba
  1431                                      verCasArriba:
  1432                                          mMov desplazAux, desplazAux2, 1
    31 000014E7 B901000000          <1>  mov rcx, %3
    32 000014EC 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 000014F4 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 000014FC F3A4                <1>  rep movsb
  1433 000014FE 48832C25[C8000000]-             sub qword[desplazAux], 11
  1433 00001506 0B                 
  1434                                          mHaySoldado qword[desplazAux]
   100 00001507 B800000000          <1>  mov rax, 0
   101 0000150C 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001514 E876F9FFFF          <1>  call haySoldado
  1435 00001519 4883F800                        cmp rax, 0
  1436 0000151D 7519                            jne verCasArribaDer
  1437                                  
  1438                                          mPuedeCapturar 11, 1 ; restar 11 a desplazAux
   106 0000151F BF0B000000          <1>  mov rdi, %1
   107 00001524 BE01000000          <1>  mov rsi, %2
   108 00001529 E8F4010000          <1>  call podiaComerPieza
  1439 0000152E 4883F800                        cmp rax, 0
  1440 00001532 0F84E4010000                    je podiaCapturar
  1441                                  
  1442                                      ; Casilla arriba-derecha
  1443                                      verCasArribaDer:
  1444                                          mMov desplazAux, desplazAux2, 1
    31 00001538 B901000000          <1>  mov rcx, %3
    32 0000153D 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001545 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 0000154D F3A4                <1>  rep movsb
  1445 0000154F 48832C25[C8000000]-             sub qword[desplazAux], 10
  1445 00001557 0A                 
  1446                                          mHaySoldado qword[desplazAux]
   100 00001558 B800000000          <1>  mov rax, 0
   101 0000155D 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001565 E825F9FFFF          <1>  call haySoldado
  1447 0000156A 4883F800                        cmp rax, 0
  1448 0000156E 7519                            jne verCasIzq
  1449                                          
  1450                                          mPuedeCapturar 10, 1 ; restar 10 a desplazAux
   106 00001570 BF0A000000          <1>  mov rdi, %1
   107 00001575 BE01000000          <1>  mov rsi, %2
   108 0000157A E8A3010000          <1>  call podiaComerPieza
  1451 0000157F 4883F800                        cmp rax, 0
  1452 00001583 0F8493010000                    je podiaCapturar
  1453                                  
  1454                                      ; Casilla izquierda
  1455                                      verCasIzq:
  1456                                          mMov desplazAux, desplazAux2, 1
    31 00001589 B901000000          <1>  mov rcx, %3
    32 0000158E 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001596 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 0000159E F3A4                <1>  rep movsb
  1457 000015A0 48832C25[C8000000]-             sub qword[desplazAux], 1
  1457 000015A8 01                 
  1458                                          mHaySoldado qword[desplazAux]
   100 000015A9 B800000000          <1>  mov rax, 0
   101 000015AE 488B3C25[C8000000]  <1>  mov rdi, %1
   102 000015B6 E8D4F8FFFF          <1>  call haySoldado
  1459 000015BB 4883F800                        cmp rax, 0
  1460 000015BF 7519                            jne verCasDer
  1461                                          
  1462                                          mPuedeCapturar 1, 1 ; restar 1 a desplazAux
   106 000015C1 BF01000000          <1>  mov rdi, %1
   107 000015C6 BE01000000          <1>  mov rsi, %2
   108 000015CB E852010000          <1>  call podiaComerPieza
  1463 000015D0 4883F800                        cmp rax, 0
  1464 000015D4 0F8442010000                    je podiaCapturar
  1465                                  
  1466                                      ; Casilla derecha
  1467                                      verCasDer:
  1468                                          mMov desplazAux, desplazAux2, 1
    31 000015DA B901000000          <1>  mov rcx, %3
    32 000015DF 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 000015E7 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 000015EF F3A4                <1>  rep movsb
  1469 000015F1 48830425[C8000000]-             add qword[desplazAux], 1
  1469 000015F9 01                 
  1470                                          mHaySoldado qword[desplazAux]
   100 000015FA B800000000          <1>  mov rax, 0
   101 000015FF 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001607 E883F8FFFF          <1>  call haySoldado
  1471 0000160C 4883F800                        cmp rax, 0
  1472 00001610 7519                            jne verCasAbajoIzq
  1473                                          
  1474                                          mPuedeCapturar 1, 0 ; sumar 1 a desplazAux
   106 00001612 BF01000000          <1>  mov rdi, %1
   107 00001617 BE00000000          <1>  mov rsi, %2
   108 0000161C E801010000          <1>  call podiaComerPieza
  1475 00001621 4883F800                        cmp rax, 0
  1476 00001625 0F84F1000000                    je podiaCapturar
  1477                                  
  1478                                      ; Casilla abajo-izquierda
  1479                                      verCasAbajoIzq:
  1480                                          mMov desplazAux, desplazAux2, 1
    31 0000162B B901000000          <1>  mov rcx, %3
    32 00001630 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001638 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001640 F3A4                <1>  rep movsb
  1481 00001642 48830425[C8000000]-             add qword[desplazAux], 10
  1481 0000164A 0A                 
  1482                                          mHaySoldado qword[desplazAux]
   100 0000164B B800000000          <1>  mov rax, 0
   101 00001650 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001658 E832F8FFFF          <1>  call haySoldado
  1483 0000165D 4883F800                        cmp rax, 0
  1484 00001661 7519                            jne verCasAbajo
  1485                                          
  1486                                          mPuedeCapturar 10, 0 ; sumar 10 a desplazAux
   106 00001663 BF0A000000          <1>  mov rdi, %1
   107 00001668 BE00000000          <1>  mov rsi, %2
   108 0000166D E8B0000000          <1>  call podiaComerPieza
  1487 00001672 4883F800                        cmp rax, 0
  1488 00001676 0F84A0000000                    je podiaCapturar
  1489                                  
  1490                                      ; Casilla abajo
  1491                                      verCasAbajo:
  1492                                          mMov desplazAux, desplazAux2, 1
    31 0000167C B901000000          <1>  mov rcx, %3
    32 00001681 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001689 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001691 F3A4                <1>  rep movsb
  1493 00001693 48830425[C8000000]-             add qword[desplazAux], 11
  1493 0000169B 0B                 
  1494                                          mHaySoldado qword[desplazAux]
   100 0000169C B800000000          <1>  mov rax, 0
   101 000016A1 488B3C25[C8000000]  <1>  mov rdi, %1
   102 000016A9 E8E1F7FFFF          <1>  call haySoldado
  1495 000016AE 4883F800                        cmp rax, 0
  1496 000016B2 7515                            jne verCasAbajoDer
  1497                                          
  1498                                          mPuedeCapturar 11, 0 ; sumar 11 a desplazAux
   106 000016B4 BF0B000000          <1>  mov rdi, %1
   107 000016B9 BE00000000          <1>  mov rsi, %2
   108 000016BE E85F000000          <1>  call podiaComerPieza
  1499 000016C3 4883F800                        cmp rax, 0
  1500 000016C7 7453                            je podiaCapturar
  1501                                  
  1502                                      ; Casilla abajo-derecha
  1503                                      verCasAbajoDer:
  1504                                          mMov desplazAux, desplazAux2, 1
    31 000016C9 B901000000          <1>  mov rcx, %3
    32 000016CE 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 000016D6 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 000016DE F3A4                <1>  rep movsb
  1505 000016E0 48830425[C8000000]-             add qword[desplazAux], 12
  1505 000016E8 0C                 
  1506                                          mHaySoldado qword[desplazAux]
   100 000016E9 B800000000          <1>  mov rax, 0
   101 000016EE 488B3C25[C8000000]  <1>  mov rdi, %1
   102 000016F6 E894F7FFFF          <1>  call haySoldado
  1507 000016FB 4883F800                        cmp rax, 0
  1508 000016FF 7515                            jne okNoPodiaCapturar
  1509                                          
  1510                                          mPuedeCapturar 12, 0 ; sumar 12 a desplazAux
   106 00001701 BF0C000000          <1>  mov rdi, %1
   107 00001706 BE00000000          <1>  mov rsi, %2
   108 0000170B E812000000          <1>  call podiaComerPieza
  1511 00001710 4883F800                        cmp rax, 0
  1512 00001714 7406                            je podiaCapturar
  1513                                      
  1514                                      okNoPodiaCapturar:
  1515 00001716 B801000000                      mov rax, 1
  1516 0000171B C3                              ret
  1517                                      
  1518                                      podiaCapturar:
  1519 0000171C B800000000                      mov rax, 0
  1520                                  
  1521 00001721 C3                          ret
  1522                                  
  1523                                  podiaComerPieza:
  1524 00001722 4883FE00                    cmp rsi, 0
  1525 00001726 740A                        je sumarDesplaz 
  1526 00001728 48293C25[C8000000]          sub qword[desplazAux], rdi
  1527 00001730 EB08                        jmp verSiEspacioEstaLibre
  1528                                  
  1529                                      sumarDesplaz:
  1530 00001732 48013C25[C8000000]              add qword[desplazAux], rdi
  1531                                  
  1532                                      verSiEspacioEstaLibre:
  1533                                          mEstaVacia qword[desplazAux]
    94 0000173A B800000000          <1>  mov rax, 0
    95 0000173F 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001747 E808F5FFFF          <1>  call estaVacia
  1534 0000174C 4883F800                        cmp rax, 0
  1535 00001750 7406                            je okComerPieza
  1536                                  
  1537 00001752 B801000000                      mov rax, 1
  1538 00001757 C3                              ret
  1539                                  
  1540                                      okComerPieza:
  1541 00001758 B800000000                      mov rax, 0
  1542 0000175D C3                              ret
  1543                                  
  1544                                  ; --------------------------------------------------------------------------------------------
  1545                                  ; RUTINA PARA QUITAR AL OFICIAL QUE SE DESPREOCUPÓ DE CAPTURAR SOLDADOS
  1546                                  ; --------------------------------------------------------------------------------------------
  1547                                  
  1548                                  desentenderOficial:
  1549 0000175E 488B1C25[C8000000]          mov rbx, qword[desplazAux]
  1550 00001766 BA20000000                  mov rdx, ' '
  1551 0000176B 8893[04000000]              mov byte[tableroEnJuego+rbx], dl
  1552                                  
  1553 00001771 E85AFAFFFF                  call verQueOficialEs ; Verificamos qué oficial es el que se quiere mover
  1554                                  
  1555 00001776 4883F801                    cmp rax, 1
  1556 0000177A 741A                        je desentenderOfic1
  1557                                  
  1558                                      desentenderOfic2:
  1559 0000177C 48C70425[82080000]-             mov qword[casillaOfic2], 0
  1559 00001784 00000000           
  1560 00001788 48C70425[8A080000]-             mov qword[casillaOfic2+8], 0
  1560 00001790 00000000           
  1561 00001794 EB18                            jmp agregarOficDesentendido
  1562                                  
  1563                                      desentenderOfic1:
  1564 00001796 48C70425[72080000]-             mov qword[casillaOfic1], 0
  1564 0000179E 00000000           
  1565 000017A2 48C70425[7A080000]-             mov qword[casillaOfic1+8], 0
  1565 000017AA 00000000           
  1566                                  
  1567                                      agregarOficDesentendido:
  1568 000017AE 48FF0425[6A080000]              inc qword[cantOficInvalidados]
  1569                                      
  1570 000017B6 C3                          ret
  1571                                      
  1572                                  ; --------------------------------------------------------------------------------------------
  1573                                  ; RUTINA PARA VERIFICAR SI EL OTRO OFICIAL PODÍA CAPTURAR UN SOLDADO Y NO LO HIZO
  1574                                  ; --------------------------------------------------------------------------------------------
  1575                                  
  1576                                  podiaCapturarSoldadoOtroOficial:
  1577 000017B7 E814FAFFFF                  call verQueOficialEs ; Verificamos qué oficial es el que se quiere mover
  1578 000017BC 4883F801                    cmp rax, 1
  1579 000017C0 742A                        je verificarOfic2
  1580                                  
  1581                                      verificarOfic1:
  1582                                          mCalcDesplaz qword[casillaOfic1], qword[casillaOfic1+8], qword[desplazAux2]
    87 000017C2 488B3C25[72080000]  <1>  mov rdi, %1
    88 000017CA 488B3425[7A080000]  <1>  mov rsi, %2
    89 000017D2 E892F4FFFF          <1>  call calcularDesplazamiento
    90 000017D7 48890425[D0000000]  <1>  mov %3, rax
  1583 000017DF E8B2FCFFFF                      call podiaCapturarSoldado
  1584 000017E4 4883F800                        cmp rax, 0
  1585 000017E8 742C                            je okPodiaComerElOtro
  1586 000017EA EB30                            jmp noPodiaComerElOtro
  1587                                      
  1588                                      verificarOfic2:
  1589                                          mCalcDesplaz qword[casillaOfic2], qword[casillaOfic2+8], qword[desplazAux2]
    87 000017EC 488B3C25[82080000]  <1>  mov rdi, %1
    88 000017F4 488B3425[8A080000]  <1>  mov rsi, %2
    89 000017FC E868F4FFFF          <1>  call calcularDesplazamiento
    90 00001801 48890425[D0000000]  <1>  mov %3, rax
  1590 00001809 E888FCFFFF                      call podiaCapturarSoldado
  1591 0000180E 4883F800                        cmp rax, 0
  1592 00001812 7402                            je okPodiaComerElOtro
  1593 00001814 EB06                            jmp noPodiaComerElOtro
  1594                                  
  1595                                      okPodiaComerElOtro:
  1596 00001816 B800000000                      mov rax, 0
  1597 0000181B C3                              ret
  1598                                  
  1599                                      noPodiaComerElOtro:
  1600 0000181C B801000000                      mov rax, 1
  1601                                  
  1602 00001821 C3                          ret
  1603                                  
  1604                                  ; --------------------------------------------------------------------------------------------
  1605                                  ; RUTINA PARA INVALIDAR AL OTRO OFICIAL QUE NO SE MOVIÓ (el cual podía capturar un soldado)
  1606                                  ; --------------------------------------------------------------------------------------------
  1607                                  
  1608                                  desentenderOtroOficial:
  1609 00001822 E8A9F9FFFF                  call verQueOficialEs ; Verificamos qué oficial es el que se quiere mover
  1610                                  
  1611 00001827 4883F801                    cmp rax, 1
  1612 0000182B 7423                        je otroEsOfic2
  1613                                  
  1614                                      otroEsOfic1:
  1615                                          mCalcDesplaz qword[casillaOfic1], qword[casillaOfic1+8], qword[desplazAux]
    87 0000182D 488B3C25[72080000]  <1>  mov rdi, %1
    88 00001835 488B3425[7A080000]  <1>  mov rsi, %2
    89 0000183D E827F4FFFF          <1>  call calcularDesplazamiento
    90 00001842 48890425[C8000000]  <1>  mov %3, rax
  1616 0000184A E80FFFFFFF                      call desentenderOficial
  1617 0000184F C3                              ret
  1618                                  
  1619                                      otroEsOfic2:
  1620                                          mCalcDesplaz qword[casillaOfic2], qword[casillaOfic2+8], qword[desplazAux]
    87 00001850 488B3C25[82080000]  <1>  mov rdi, %1
    88 00001858 488B3425[8A080000]  <1>  mov rsi, %2
    89 00001860 E804F4FFFF          <1>  call calcularDesplazamiento
    90 00001865 48890425[C8000000]  <1>  mov %3, rax
  1621 0000186D E8ECFEFFFF                      call desentenderOficial
  1622                                      
  1623 00001872 C3                          ret
  1624                                  
  1625                                  ; --------------------------------------------------------------------------------------------
  1626                                  ; RUTINA PARA VER SI EL MOVIMIENTO DE UN OFICIAL RESULTA EN EL FIN DEL JUEGO
  1627                                  ; --------------------------------------------------------------------------------------------
  1628                                  
  1629                                  verificarFinJuegoOficiales:
  1630                                      ; Verificamos si ambos oficiales han sido invalidados
  1631 00001873 48833C25[6A080000]-         cmp qword[cantOficInvalidados], 2
  1631 0000187B 02                 
  1632 0000187C 7411                        je finInvalidados
  1633                                  
  1634                                      ; Verificamos que los oficiales hayan capturado necesarios soldados para ganar
  1635 0000187E 48833C25[62080000]-         cmp qword[cantSoldCapturados], 16
  1635 00001886 10                 
  1636 00001887 7413                        je finSoldCapturados
  1637                                  
  1638 00001889 B801000000                  mov rax, 1
  1639 0000188E C3                          ret
  1640                                  
  1641                                      finInvalidados:
  1642 0000188F C70425[B4040000]6F-             mov dword[varRazonFin], "oInv"
  1642 00001897 496E76             
  1643 0000189A EB0B                            jmp hayFinJuegoOfic
  1644                                  
  1645                                      finSoldCapturados:
  1646 0000189C C70425[B4040000]73-             mov dword[varRazonFin], "sCap"
  1646 000018A4 436170             
  1647                                  
  1648                                      hayFinJuegoOfic:
  1649 000018A7 B800000000                      mov rax, 0
  1650 000018AC C3                              ret
  1651                                  
  1652                                  ; --------------------------------------------------------------------------------------------
  1653                                  ; RUTINA PARA VERIFICAR SI EL MOVIMIENTO DE UN SOLDADO RESULTA EN EL FIN DEL JUEGO
  1654                                  ; --------------------------------------------------------------------------------------------
  1655                                  
  1656                                  verificarFinJuegoSoldados:
  1657 000018AD E835000000                  call soldadosOcupanFortaleza
  1658 000018B2 4883F800                    cmp rax, 0
  1659 000018B6 7411                        je finOcupFortaleza
  1660                                  
  1661 000018B8 E827010000                  call oficialesRodeados
  1662 000018BD 4883F800                    cmp rax, 0
  1663 000018C1 7413                        je finOficRodeados
  1664                                  
  1665 000018C3 B801000000                  mov rax, 1
  1666 000018C8 C3                          ret
  1667                                  
  1668                                      finOcupFortaleza:
  1669 000018C9 C70425[B4040000]73-             mov dword[varRazonFin], "sOcu"
  1669 000018D1 4F6375             
  1670 000018D4 EB0B                            jmp hayFinJuegoSold
  1671                                  
  1672                                      finOficRodeados:
  1673 000018D6 C70425[B4040000]6F-             mov dword[varRazonFin], "oRod"
  1673 000018DE 526F64             
  1674                                  
  1675                                      hayFinJuegoSold:
  1676 000018E1 B800000000                      mov rax, 0
  1677 000018E6 C3                              ret
  1678                                  
  1679                                  ; --------------------------------------------------------------------------------------------
  1680                                  ; RUTINA PARA VERIFICAR SI LOS SOLDADOS OCUPAN LA FORTALEZA
  1681                                  ; --------------------------------------------------------------------------------------------
  1682                                  
  1683                                  soldadosOcupanFortaleza:
  1684                                      mCmp byte[tableroEnJuego+70], [simboloSoldados], 1 ; Fortaleza 1-1
    38 000018E7 B901000000          <1>  mov rcx, %3
    39 000018EC 488D3425[4A000000]  <1>  lea rsi, %1
    40 000018F4 488D3C25[A4080000]  <1>  lea rdi, %2
    41 000018FC F3A6                <1>  repe cmpsb
  1685 000018FE 0F85DA000000                jne noOcupaFortaleza
  1686                                      mCmp byte[tableroEnJuego+71], [simboloSoldados], 1 ; Fortaleza 1-2
    38 00001904 B901000000          <1>  mov rcx, %3
    39 00001909 488D3425[4B000000]  <1>  lea rsi, %1
    40 00001911 488D3C25[A4080000]  <1>  lea rdi, %2
    41 00001919 F3A6                <1>  repe cmpsb
  1687 0000191B 0F85BD000000                jne noOcupaFortaleza
  1688                                      mCmp byte[tableroEnJuego+72], [simboloSoldados], 1 ; Fortaleza 1-3
    38 00001921 B901000000          <1>  mov rcx, %3
    39 00001926 488D3425[4C000000]  <1>  lea rsi, %1
    40 0000192E 488D3C25[A4080000]  <1>  lea rdi, %2
    41 00001936 F3A6                <1>  repe cmpsb
  1689 00001938 0F85A0000000                jne noOcupaFortaleza
  1690                                      mCmp byte[tableroEnJuego+81], [simboloSoldados], 1 ; Fortaleza 2-1
    38 0000193E B901000000          <1>  mov rcx, %3
    39 00001943 488D3425[55000000]  <1>  lea rsi, %1
    40 0000194B 488D3C25[A4080000]  <1>  lea rdi, %2
    41 00001953 F3A6                <1>  repe cmpsb
  1691 00001955 0F8583000000                jne noOcupaFortaleza
  1692                                      mCmp byte[tableroEnJuego+82], [simboloSoldados], 1 ; Fortaleza 2-2
    38 0000195B B901000000          <1>  mov rcx, %3
    39 00001960 488D3425[56000000]  <1>  lea rsi, %1
    40 00001968 488D3C25[A4080000]  <1>  lea rdi, %2
    41 00001970 F3A6                <1>  repe cmpsb
  1693 00001972 756A                        jne noOcupaFortaleza
  1694                                      mCmp byte[tableroEnJuego+83], [simboloSoldados], 1 ; Fortaleza 2-3
    38 00001974 B901000000          <1>  mov rcx, %3
    39 00001979 488D3425[57000000]  <1>  lea rsi, %1
    40 00001981 488D3C25[A4080000]  <1>  lea rdi, %2
    41 00001989 F3A6                <1>  repe cmpsb
  1695 0000198B 7551                        jne noOcupaFortaleza
  1696                                      mCmp byte[tableroEnJuego+92], [simboloSoldados], 1 ; Fortaleza 3-1
    38 0000198D B901000000          <1>  mov rcx, %3
    39 00001992 488D3425[60000000]  <1>  lea rsi, %1
    40 0000199A 488D3C25[A4080000]  <1>  lea rdi, %2
    41 000019A2 F3A6                <1>  repe cmpsb
  1697 000019A4 7538                        jne noOcupaFortaleza
  1698                                      mCmp byte[tableroEnJuego+93], [simboloSoldados], 1 ; Fortaleza 3-2
    38 000019A6 B901000000          <1>  mov rcx, %3
    39 000019AB 488D3425[61000000]  <1>  lea rsi, %1
    40 000019B3 488D3C25[A4080000]  <1>  lea rdi, %2
    41 000019BB F3A6                <1>  repe cmpsb
  1699 000019BD 751F                        jne noOcupaFortaleza
  1700                                      mCmp byte[tableroEnJuego+94], [simboloSoldados], 1 ; Fortaleza 3-3
    38 000019BF B901000000          <1>  mov rcx, %3
    39 000019C4 488D3425[62000000]  <1>  lea rsi, %1
    40 000019CC 488D3C25[A4080000]  <1>  lea rdi, %2
    41 000019D4 F3A6                <1>  repe cmpsb
  1701 000019D6 7506                        jne noOcupaFortaleza
  1702                                  
  1703 000019D8 B800000000                  mov rax, 0
  1704 000019DD C3                          ret
  1705                                  
  1706                                      noOcupaFortaleza:
  1707 000019DE B801000000                      mov rax, 1
  1708                                  
  1709 000019E3 C3                          ret
  1710                                  
  1711                                  ; --------------------------------------------------------------------------------------------
  1712                                  ; RUTINA PARA VERIFICAR SI LOS OFICIALES ESTÁN RODEADOS POR SOLDADOS
  1713                                  ; --------------------------------------------------------------------------------------------
  1714                                  
  1715                                  oficialesRodeados:
  1716 000019E4 E8F8030000                  call ofic1Desentendido
  1717 000019E9 4883F800                    cmp rax, 0
  1718 000019ED 740B                        je rodeanAOfic2
  1719 000019EF E828000000                  call verSiOfic1Rodeado
  1720 000019F4 4883F800                    cmp rax, 0
  1721 000019F8 751C                        jne tienenSalida
  1722                                  
  1723                                      rodeanAOfic2:
  1724 000019FA E8F9030000                      call ofic2Desentendido
  1725 000019FF 4883F800                        cmp rax, 0
  1726 00001A03 740B                            je noHaySalida
  1727 00001A05 E84C000000                      call verSiOfic2Rodeado
  1728 00001A0A 4883F800                        cmp rax, 0
  1729 00001A0E 7506                            jne tienenSalida
  1730                                  
  1731                                      noHaySalida:
  1732 00001A10 B800000000                      mov rax, 0
  1733 00001A15 C3                              ret
  1734                                  
  1735                                      tienenSalida:
  1736 00001A16 B801000000                      mov rax, 1
  1737                                  
  1738 00001A1B C3                          ret
  1739                                  
  1740                                  verSiOfic1Rodeado:
  1741                                      mCalcDesplaz qword[casillaOfic1], qword[casillaOfic1+8], qword[desplazAux]
    87 00001A1C 488B3C25[72080000]  <1>  mov rdi, %1
    88 00001A24 488B3425[7A080000]  <1>  mov rsi, %2
    89 00001A2C E838F2FFFF          <1>  call calcularDesplazamiento
    90 00001A31 48890425[C8000000]  <1>  mov %3, rax
  1742                                      mMov desplazAux2, desplazAux, 1
    31 00001A39 B901000000          <1>  mov rcx, %3
    32 00001A3E 488D3425[C8000000]  <1>  lea rsi, [%2]
    33 00001A46 488D3C25[D0000000]  <1>  lea rdi, [%1]
    34 00001A4E F3A4                <1>  rep movsb
  1743 00001A50 E83B000000                  call verSiOficialRodeado
  1744 00001A55 C3                          ret
  1745                                  
  1746                                  verSiOfic2Rodeado:
  1747                                      mCalcDesplaz qword[casillaOfic2], qword[casillaOfic2+8], qword[desplazAux]
    87 00001A56 488B3C25[82080000]  <1>  mov rdi, %1
    88 00001A5E 488B3425[8A080000]  <1>  mov rsi, %2
    89 00001A66 E8FEF1FFFF          <1>  call calcularDesplazamiento
    90 00001A6B 48890425[C8000000]  <1>  mov %3, rax
  1748                                      mMov desplazAux2, desplazAux, 1
    31 00001A73 B901000000          <1>  mov rcx, %3
    32 00001A78 488D3425[C8000000]  <1>  lea rsi, [%2]
    33 00001A80 488D3C25[D0000000]  <1>  lea rdi, [%1]
    34 00001A88 F3A4                <1>  rep movsb
  1749 00001A8A E801000000                  call verSiOficialRodeado
  1750 00001A8F C3                          ret
  1751                                  
  1752                                  verSiOficialRodeado:
  1753                                      ; Casilla arriba-izquierda
  1754 00001A90 48832C25[C8000000]-         sub qword[desplazAux], 12
  1754 00001A98 0C                 
  1755                                      mEstaVacia qword[desplazAux]
    94 00001A99 B800000000          <1>  mov rax, 0
    95 00001A9E 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001AA6 E8A9F1FFFF          <1>  call estaVacia
  1756 00001AAB 4883F800                    cmp rax, 0 ; Si el oficial tiene una casilla vacía, puede moverse -> no está rodeado 
  1757 00001AAF 0F8426030000                je okPuedeMoverse
  1758                                      mHaySoldado qword[desplazAux]
   100 00001AB5 B800000000          <1>  mov rax, 0
   101 00001ABA 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001AC2 E8C8F3FFFF          <1>  call haySoldado
  1759 00001AC7 4883F801                    cmp rax, 1 ; Si no hay soldado, significa que es un límite del tablero -> me fijo en otra casilla
  1760 00001ACB 7419                        je verEspacioArr
  1761                                      mPuedeCapturar 12, 1 ; restar 12 a desplazAux
   106 00001ACD BF0C000000          <1>  mov rdi, %1
   107 00001AD2 BE01000000          <1>  mov rsi, %2
   108 00001AD7 E846FCFFFF          <1>  call podiaComerPieza
  1762 00001ADC 4883F800                    cmp rax, 0 ; Si el oficial puede capturar un soldado, no está rodeado
  1763 00001AE0 0F84F5020000                je okPuedeMoverse
  1764                                  
  1765                                      ; Casilla arriba
  1766                                      verEspacioArr:
  1767                                          mMov desplazAux, desplazAux2, 1
    31 00001AE6 B901000000          <1>  mov rcx, %3
    32 00001AEB 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001AF3 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001AFB F3A4                <1>  rep movsb
  1768 00001AFD 48832C25[C8000000]-             sub qword[desplazAux], 11
  1768 00001B05 0B                 
  1769                                          mEstaVacia qword[desplazAux]
    94 00001B06 B800000000          <1>  mov rax, 0
    95 00001B0B 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001B13 E83CF1FFFF          <1>  call estaVacia
  1770 00001B18 4883F800                        cmp rax, 0  
  1771 00001B1C 0F84B9020000                    je okPuedeMoverse
  1772                                          mHaySoldado qword[desplazAux]
   100 00001B22 B800000000          <1>  mov rax, 0
   101 00001B27 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001B2F E85BF3FFFF          <1>  call haySoldado
  1773 00001B34 4883F801                        cmp rax, 1
  1774 00001B38 7419                            je verEspacioArrDer
  1775                                          mPuedeCapturar 11, 1 ; restar 11 a desplazAux
   106 00001B3A BF0B000000          <1>  mov rdi, %1
   107 00001B3F BE01000000          <1>  mov rsi, %2
   108 00001B44 E8D9FBFFFF          <1>  call podiaComerPieza
  1776 00001B49 4883F800                        cmp rax, 0
  1777 00001B4D 0F8488020000                    je okPuedeMoverse
  1778                                  
  1779                                      ; Casilla arriba-derecha
  1780                                      verEspacioArrDer:
  1781                                          mMov desplazAux, desplazAux2, 1
    31 00001B53 B901000000          <1>  mov rcx, %3
    32 00001B58 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001B60 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001B68 F3A4                <1>  rep movsb
  1782 00001B6A 48832C25[C8000000]-             sub qword[desplazAux], 10
  1782 00001B72 0A                 
  1783                                          mEstaVacia qword[desplazAux]
    94 00001B73 B800000000          <1>  mov rax, 0
    95 00001B78 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001B80 E8CFF0FFFF          <1>  call estaVacia
  1784 00001B85 4883F800                        cmp rax, 0  
  1785 00001B89 0F844C020000                    je okPuedeMoverse
  1786                                          mHaySoldado qword[desplazAux]
   100 00001B8F B800000000          <1>  mov rax, 0
   101 00001B94 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001B9C E8EEF2FFFF          <1>  call haySoldado
  1787 00001BA1 4883F801                        cmp rax, 1
  1788 00001BA5 7419                            je verEspacioIzq
  1789                                          mPuedeCapturar 10, 1 ; restar 10 a desplazAux
   106 00001BA7 BF0A000000          <1>  mov rdi, %1
   107 00001BAC BE01000000          <1>  mov rsi, %2
   108 00001BB1 E86CFBFFFF          <1>  call podiaComerPieza
  1790 00001BB6 4883F800                        cmp rax, 0
  1791 00001BBA 0F841B020000                    je okPuedeMoverse
  1792                                  
  1793                                      ; Casilla izquierda
  1794                                      verEspacioIzq:
  1795                                          mMov desplazAux, desplazAux2, 1
    31 00001BC0 B901000000          <1>  mov rcx, %3
    32 00001BC5 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001BCD 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001BD5 F3A4                <1>  rep movsb
  1796 00001BD7 48832C25[C8000000]-             sub qword[desplazAux], 1
  1796 00001BDF 01                 
  1797                                          mEstaVacia qword[desplazAux]
    94 00001BE0 B800000000          <1>  mov rax, 0
    95 00001BE5 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001BED E862F0FFFF          <1>  call estaVacia
  1798 00001BF2 4883F800                        cmp rax, 0  
  1799 00001BF6 0F84DF010000                    je okPuedeMoverse
  1800                                          mHaySoldado qword[desplazAux]
   100 00001BFC B800000000          <1>  mov rax, 0
   101 00001C01 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001C09 E881F2FFFF          <1>  call haySoldado
  1801 00001C0E 4883F801                        cmp rax, 1
  1802 00001C12 7419                            je verEspacioDer
  1803                                          mPuedeCapturar 1, 1 ; restar 1 a desplazAux 
   106 00001C14 BF01000000          <1>  mov rdi, %1
   107 00001C19 BE01000000          <1>  mov rsi, %2
   108 00001C1E E8FFFAFFFF          <1>  call podiaComerPieza
  1804 00001C23 4883F800                        cmp rax, 0
  1805 00001C27 0F84AE010000                    je okPuedeMoverse
  1806                                  
  1807                                      ; Casilla derecha
  1808                                      verEspacioDer:
  1809                                          mMov desplazAux, desplazAux2, 1
    31 00001C2D B901000000          <1>  mov rcx, %3
    32 00001C32 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001C3A 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001C42 F3A4                <1>  rep movsb
  1810 00001C44 48830425[C8000000]-             add qword[desplazAux], 1
  1810 00001C4C 01                 
  1811                                          mEstaVacia qword[desplazAux]
    94 00001C4D B800000000          <1>  mov rax, 0
    95 00001C52 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001C5A E8F5EFFFFF          <1>  call estaVacia
  1812 00001C5F 4883F800                        cmp rax, 0  
  1813 00001C63 0F8472010000                    je okPuedeMoverse
  1814                                          mHaySoldado qword[desplazAux]
   100 00001C69 B800000000          <1>  mov rax, 0
   101 00001C6E 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001C76 E814F2FFFF          <1>  call haySoldado
  1815 00001C7B 4883F801                        cmp rax, 1
  1816 00001C7F 7419                            je verEspacioAbjIzq
  1817                                          mPuedeCapturar 1, 0 ; sumar 1 a desplazAux 
   106 00001C81 BF01000000          <1>  mov rdi, %1
   107 00001C86 BE00000000          <1>  mov rsi, %2
   108 00001C8B E892FAFFFF          <1>  call podiaComerPieza
  1818 00001C90 4883F800                        cmp rax, 0
  1819 00001C94 0F8441010000                    je okPuedeMoverse
  1820                                  
  1821                                      ; Casilla abajo-izquierda
  1822                                      verEspacioAbjIzq:
  1823                                          mMov desplazAux, desplazAux2, 1
    31 00001C9A B901000000          <1>  mov rcx, %3
    32 00001C9F 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001CA7 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001CAF F3A4                <1>  rep movsb
  1824 00001CB1 48830425[C8000000]-             add qword[desplazAux], 10
  1824 00001CB9 0A                 
  1825                                          mEstaVacia qword[desplazAux]
    94 00001CBA B800000000          <1>  mov rax, 0
    95 00001CBF 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001CC7 E888EFFFFF          <1>  call estaVacia
  1826 00001CCC 4883F800                        cmp rax, 0  
  1827 00001CD0 0F8405010000                    je okPuedeMoverse
  1828                                          mHaySoldado qword[desplazAux]
   100 00001CD6 B800000000          <1>  mov rax, 0
   101 00001CDB 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001CE3 E8A7F1FFFF          <1>  call haySoldado
  1829 00001CE8 4883F801                        cmp rax, 1
  1830 00001CEC 7419                            je verEspacioAbajo
  1831                                          mPuedeCapturar 10, 0 ; sumar 10 a desplazAux 
   106 00001CEE BF0A000000          <1>  mov rdi, %1
   107 00001CF3 BE00000000          <1>  mov rsi, %2
   108 00001CF8 E825FAFFFF          <1>  call podiaComerPieza
  1832 00001CFD 4883F800                        cmp rax, 0
  1833 00001D01 0F84D4000000                    je okPuedeMoverse
  1834                                  
  1835                                      ; Casilla abajo
  1836                                      verEspacioAbajo:
  1837                                          mMov desplazAux, desplazAux2, 1
    31 00001D07 B901000000          <1>  mov rcx, %3
    32 00001D0C 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001D14 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001D1C F3A4                <1>  rep movsb
  1838 00001D1E 48830425[C8000000]-             add qword[desplazAux], 11
  1838 00001D26 0B                 
  1839                                          mEstaVacia qword[desplazAux]
    94 00001D27 B800000000          <1>  mov rax, 0
    95 00001D2C 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001D34 E81BEFFFFF          <1>  call estaVacia
  1840 00001D39 4883F800                        cmp rax, 0  
  1841 00001D3D 0F8498000000                    je okPuedeMoverse
  1842                                          mHaySoldado qword[desplazAux]
   100 00001D43 B800000000          <1>  mov rax, 0
   101 00001D48 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001D50 E83AF1FFFF          <1>  call haySoldado
  1843 00001D55 4883F801                        cmp rax, 1
  1844 00001D59 7415                            je verEspacioAbjDer
  1845                                          mPuedeCapturar 11, 0 ; sumar 11 a desplazAux
   106 00001D5B BF0B000000          <1>  mov rdi, %1
   107 00001D60 BE00000000          <1>  mov rsi, %2
   108 00001D65 E8B8F9FFFF          <1>  call podiaComerPieza
  1846 00001D6A 4883F800                        cmp rax, 0
  1847 00001D6E 746B                            je okPuedeMoverse
  1848                                  
  1849                                      ; Casilla abajo-derecha
  1850                                      verEspacioAbjDer:
  1851                                          mMov desplazAux, desplazAux2, 1
    31 00001D70 B901000000          <1>  mov rcx, %3
    32 00001D75 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001D7D 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001D85 F3A4                <1>  rep movsb
  1852 00001D87 48830425[C8000000]-             add qword[desplazAux], 12
  1852 00001D8F 0C                 
  1853                                          mEstaVacia qword[desplazAux]
    94 00001D90 B800000000          <1>  mov rax, 0
    95 00001D95 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001D9D E8B2EEFFFF          <1>  call estaVacia
  1854 00001DA2 4883F800                        cmp rax, 0  
  1855 00001DA6 7433                            je okPuedeMoverse
  1856                                          mHaySoldado qword[desplazAux]
   100 00001DA8 B800000000          <1>  mov rax, 0
   101 00001DAD 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001DB5 E8D5F0FFFF          <1>  call haySoldado
  1857 00001DBA 4883F801                        cmp rax, 1
  1858 00001DBE 7415                            je noPuedeMoverse
  1859                                          mPuedeCapturar 12, 0 ; sumar 12 a desplazAux
   106 00001DC0 BF0C000000          <1>  mov rdi, %1
   107 00001DC5 BE00000000          <1>  mov rsi, %2
   108 00001DCA E853F9FFFF          <1>  call podiaComerPieza
  1860 00001DCF 4883F800                        cmp rax, 0
  1861 00001DD3 7406                            je okPuedeMoverse
  1862                                  
  1863                                      ; Si llegamos acá, el oficial está rodeado -> no puede realizar ningún movimiento
  1864                                      noPuedeMoverse:
  1865 00001DD5 B800000000                      mov rax, 0
  1866 00001DDA C3                              ret
  1867                                  
  1868                                      ; Si llegamos acá, el oficial puede moverse
  1869                                      okPuedeMoverse:
  1870 00001DDB B801000000                      mov rax, 1
  1871 00001DE0 C3                              ret
  1872                                  
  1873                                  ofic1Desentendido:
  1874 00001DE1 48833C25[72080000]-         cmp qword[casillaOfic1], 0
  1874 00001DE9 00                 
  1875 00001DEA 7406                        je el1EstaDesentendido
  1876                                  
  1877 00001DEC B801000000                  mov rax, 1
  1878 00001DF1 C3                          ret
  1879                                  
  1880                                      el1EstaDesentendido:
  1881 00001DF2 B800000000                      mov rax, 0
  1882 00001DF7 C3                              ret
  1883                                  
  1884                                  ofic2Desentendido:
  1885 00001DF8 48833C25[82080000]-         cmp qword[casillaOfic2], 0
  1885 00001E00 00                 
  1886 00001E01 7406                        je el2EstaDesentendido
  1887                                  
  1888 00001E03 B801000000                  mov rax, 1
  1889 00001E08 C3                          ret
  1890                                  
  1891                                      el2EstaDesentendido:
  1892 00001E09 B800000000                      mov rax, 0
  1893 00001E0E C3                              ret
  1894                                  
  1895                                  ; --------------------------------------------------------------------------------------------
  1896                                  ; RUTINAS PARA TERMINAR EL JUEGO Y MOSTRAR LAS ESTADÍSTICAS
  1897                                  ; --------------------------------------------------------------------------------------------
  1898                                  
  1899                                  finDeJuego:
  1900                                      mCommand cmdBorrarArchivoPartida
    24 00001E0F 48BF-               <1>  mov rdi, %1
    24 00001E11 [C808000000000000]  <1>
    25 00001E19 4883EC08            <1>  sub rsp, 8
    26 00001E1D E8(00000000)        <1>  call system
    27 00001E22 4883C408            <1>  add rsp, 8
  1901                                      mCommand cmdLimpiarPantalla
    24 00001E26 48BF-               <1>  mov rdi, %1
    24 00001E28 [A808000000000000]  <1>
    25 00001E30 4883EC08            <1>  sub rsp, 8
    26 00001E34 E8(00000000)        <1>  call system
    27 00001E39 4883C408            <1>  add rsp, 8
  1902                                      mPuts msgJuegoTerminado
     2 00001E3D 48BF-               <1>  mov rdi, %1
     2 00001E3F [5504000000000000]  <1>
     3 00001E47 4883EC08            <1>  sub rsp, 8
     4 00001E4B E8(00000000)        <1>  call puts
     5 00001E50 4883C408            <1>  add rsp, 8
  1903                                  
  1904 00001E54 813C25[B4040000]73-         cmp dword[varRazonFin], "sOcu"
  1904 00001E5C 4F6375             
  1905 00001E5F 7430                        je soldadosFortaleza
  1906                                  
  1907 00001E61 813C25[B4040000]6F-         cmp dword[varRazonFin], "oRod"
  1907 00001E69 526F64             
  1908 00001E6C 746A                        je soldadosRodeanOficiales
  1909                                  
  1910 00001E6E 813C25[B4040000]6F-         cmp dword[varRazonFin], "oInv"
  1910 00001E76 496E76             
  1911 00001E79 0F84A0000000                je oficialesInvalidados
  1912                                  
  1913 00001E7F 813C25[B4040000]73-         cmp dword[varRazonFin], "sCap"
  1913 00001E87 436170             
  1914 00001E8A 0F84D3000000                je soldadosCapturados
  1915                                  
  1916 00001E90 C3                          ret
  1917                                  
  1918                                      soldadosFortaleza:
  1919                                          mPrint msgGanador, stringSoldados
     9 00001E91 48BF-               <1>  mov rdi, %1
     9 00001E93 [6F04000000000000]  <1>
    10 00001E9B 48BE-               <1>  mov rsi, %2
    10 00001E9D [9504000000000000]  <1>
    11 00001EA5 4883EC08            <1>  sub rsp, 8
    12 00001EA9 E8(00000000)        <1>  call printf
    13 00001EAE 4883C408            <1>  add rsp, 8
  1920                                          mPrint msgRazonGanador, msgSoldadosFortaleza
     9 00001EB2 48BF-               <1>  mov rdi, %1
     9 00001EB4 [A804000000000000]  <1>
    10 00001EBC 48BE-               <1>  mov rsi, %2
    10 00001EBE [CD05000000000000]  <1>
    11 00001EC6 4883EC08            <1>  sub rsp, 8
    12 00001ECA E8(00000000)        <1>  call printf
    13 00001ECF 4883C408            <1>  add rsp, 8
  1921 00001ED3 E9CF000000                      jmp mostrarEstadisticas
  1922                                  
  1923                                      soldadosRodeanOficiales:
  1924                                          mPrint msgGanador, stringSoldados
     9 00001ED8 48BF-               <1>  mov rdi, %1
     9 00001EDA [6F04000000000000]  <1>
    10 00001EE2 48BE-               <1>  mov rsi, %2
    10 00001EE4 [9504000000000000]  <1>
    11 00001EEC 4883EC08            <1>  sub rsp, 8
    12 00001EF0 E8(00000000)        <1>  call printf
    13 00001EF5 4883C408            <1>  add rsp, 8
  1925                                          mPrint msgRazonGanador, msgSoldadosRodean
     9 00001EF9 48BF-               <1>  mov rdi, %1
     9 00001EFB [A804000000000000]  <1>
    10 00001F03 48BE-               <1>  mov rsi, %2
    10 00001F05 [0806000000000000]  <1>
    11 00001F0D 4883EC08            <1>  sub rsp, 8
    12 00001F11 E8(00000000)        <1>  call printf
    13 00001F16 4883C408            <1>  add rsp, 8
  1926 00001F1A E988000000                      jmp mostrarEstadisticas
  1927                                  
  1928                                      oficialesInvalidados:
  1929                                          mPrint msgGanador, stringSoldados
     9 00001F1F 48BF-               <1>  mov rdi, %1
     9 00001F21 [6F04000000000000]  <1>
    10 00001F29 48BE-               <1>  mov rsi, %2
    10 00001F2B [9504000000000000]  <1>
    11 00001F33 4883EC08            <1>  sub rsp, 8
    12 00001F37 E8(00000000)        <1>  call printf
    13 00001F3C 4883C408            <1>  add rsp, 8
  1930                                          mPrint msgRazonGanador, msgSoldadosInvalidar
     9 00001F40 48BF-               <1>  mov rdi, %1
     9 00001F42 [A804000000000000]  <1>
    10 00001F4A 48BE-               <1>  mov rsi, %2
    10 00001F4C [3206000000000000]  <1>
    11 00001F54 4883EC08            <1>  sub rsp, 8
    12 00001F58 E8(00000000)        <1>  call printf
    13 00001F5D 4883C408            <1>  add rsp, 8
  1931 00001F61 EB44                            jmp mostrarEstadisticas
  1932                                  
  1933                                      soldadosCapturados:
  1934                                          mPrint msgGanador, stringOficiales
     9 00001F63 48BF-               <1>  mov rdi, %1
     9 00001F65 [6F04000000000000]  <1>
    10 00001F6D 48BE-               <1>  mov rsi, %2
    10 00001F6F [9E04000000000000]  <1>
    11 00001F77 4883EC08            <1>  sub rsp, 8
    12 00001F7B E8(00000000)        <1>  call printf
    13 00001F80 4883C408            <1>  add rsp, 8
  1935                                          mPrint msgRazonGanador, msgOficialesGanan
     9 00001F84 48BF-               <1>  mov rdi, %1
     9 00001F86 [A804000000000000]  <1>
    10 00001F8E 48BE-               <1>  mov rsi, %2
    10 00001F90 [5806000000000000]  <1>
    11 00001F98 4883EC08            <1>  sub rsp, 8
    12 00001F9C E8(00000000)        <1>  call printf
    13 00001FA1 4883C408            <1>  add rsp, 8
  1936 00001FA5 EB00                            jmp mostrarEstadisticas
  1937                                  
  1938                                  
  1939                                  mostrarEstadisticas:
  1940                                      mPuts msgEstadisticas
     2 00001FA7 48BF-               <1>  mov rdi, %1
     2 00001FA9 [E502000000000000]  <1>
     3 00001FB1 4883EC08            <1>  sub rsp, 8
     4 00001FB5 E8(00000000)        <1>  call puts
     5 00001FBA 4883C408            <1>  add rsp, 8
  1941                                  
  1942                                      mPrint msgCantTotalCapturas, qword[cantSoldCapturados]
     9 00001FBE 48BF-               <1>  mov rdi, %1
     9 00001FC0 [0603000000000000]  <1>
    10 00001FC8 488B3425[62080000]  <1>  mov rsi, %2
    11 00001FD0 4883EC08            <1>  sub rsp, 8
    12 00001FD4 E8(00000000)        <1>  call printf
    13 00001FD9 4883C408            <1>  add rsp, 8
  1943                                  
  1944                                      ; Estadísticas del oficial 1
  1945                                      mPuts msgOficial1
     2 00001FDD 48BF-               <1>  mov rdi, %1
     2 00001FDF [2703000000000000]  <1>
     3 00001FE7 4883EC08            <1>  sub rsp, 8
     4 00001FEB E8(00000000)        <1>  call puts
     5 00001FF0 4883C408            <1>  add rsp, 8
  1946                                      mPrint msgCantMovimientos, qword[movimientosOfic1]
     9 00001FF4 48BF-               <1>  mov rdi, %1
     9 00001FF6 [3F03000000000000]  <1>
    10 00001FFE 488B3425[C2070000]  <1>  mov rsi, %2
    11 00002006 4883EC08            <1>  sub rsp, 8
    12 0000200A E8(00000000)        <1>  call printf
    13 0000200F 4883C408            <1>  add rsp, 8
  1947                                      mPrint msgCantAdelante, qword[movOfic1Adelante]
     9 00002013 48BF-               <1>  mov rdi, %1
     9 00002015 [5803000000000000]  <1>
    10 0000201D 488B3425[D2070000]  <1>  mov rsi, %2
    11 00002025 4883EC08            <1>  sub rsp, 8
    12 00002029 E8(00000000)        <1>  call printf
    13 0000202E 4883C408            <1>  add rsp, 8
  1948                                      mPrint msgCantDerecha, qword[movOfic1Derecha]
     9 00002032 48BF-               <1>  mov rdi, %1
     9 00002034 [6E03000000000000]  <1>
    10 0000203C 488B3425[DA070000]  <1>  mov rsi, %2
    11 00002044 4883EC08            <1>  sub rsp, 8
    12 00002048 E8(00000000)        <1>  call printf
    13 0000204D 4883C408            <1>  add rsp, 8
  1949                                      mPrint msgCantIzquierda, qword[movOfic1Izquierda]
     9 00002051 48BF-               <1>  mov rdi, %1
     9 00002053 [8603000000000000]  <1>
    10 0000205B 488B3425[E2070000]  <1>  mov rsi, %2
    11 00002063 4883EC08            <1>  sub rsp, 8
    12 00002067 E8(00000000)        <1>  call printf
    13 0000206C 4883C408            <1>  add rsp, 8
  1950                                      mPrint msgCantAtras, qword[movOfic1Atras]
     9 00002070 48BF-               <1>  mov rdi, %1
     9 00002072 [A003000000000000]  <1>
    10 0000207A 488B3425[EA070000]  <1>  mov rsi, %2
    11 00002082 4883EC08            <1>  sub rsp, 8
    12 00002086 E8(00000000)        <1>  call printf
    13 0000208B 4883C408            <1>  add rsp, 8
  1951                                      mPrint msgCantDiagonal, qword[movOfic1Diagonal]
     9 0000208F 48BF-               <1>  mov rdi, %1
     9 00002091 [B403000000000000]  <1>
    10 00002099 488B3425[F2070000]  <1>  mov rsi, %2
    11 000020A1 4883EC08            <1>  sub rsp, 8
    12 000020A5 E8(00000000)        <1>  call printf
    13 000020AA 4883C408            <1>  add rsp, 8
  1952                                      mPrint msgCantDiagArribaDer, qword[movOfic1DiagArribaDer]
     9 000020AE 48BF-               <1>  mov rdi, %1
     9 000020B0 [C703000000000000]  <1>
    10 000020B8 488B3425[FA070000]  <1>  mov rsi, %2
    11 000020C0 4883EC08            <1>  sub rsp, 8
    12 000020C4 E8(00000000)        <1>  call printf
    13 000020C9 4883C408            <1>  add rsp, 8
  1953                                      mPrint msgCantDiagArribaIzq, qword[movOfic1DiagArribaIzq]
     9 000020CD 48BF-               <1>  mov rdi, %1
     9 000020CF [E103000000000000]  <1>
    10 000020D7 488B3425[02080000]  <1>  mov rsi, %2
    11 000020DF 4883EC08            <1>  sub rsp, 8
    12 000020E3 E8(00000000)        <1>  call printf
    13 000020E8 4883C408            <1>  add rsp, 8
  1954                                      mPrint msgCantDiagAbajoDer, qword[movOfic1DiagAbajoDer]
     9 000020EC 48BF-               <1>  mov rdi, %1
     9 000020EE [FD03000000000000]  <1>
    10 000020F6 488B3425[0A080000]  <1>  mov rsi, %2
    11 000020FE 4883EC08            <1>  sub rsp, 8
    12 00002102 E8(00000000)        <1>  call printf
    13 00002107 4883C408            <1>  add rsp, 8
  1955                                      mPrint msgCantDiagAbajoIzq, qword[movOfic1DiagAbajoIzq]
     9 0000210B 48BF-               <1>  mov rdi, %1
     9 0000210D [1504000000000000]  <1>
    10 00002115 488B3425[12080000]  <1>  mov rsi, %2
    11 0000211D 4883EC08            <1>  sub rsp, 8
    12 00002121 E8(00000000)        <1>  call printf
    13 00002126 4883C408            <1>  add rsp, 8
  1956                                      mPrint msgCantSoldadosCapt, qword[cantCapturasOfic1]
     9 0000212A 48BF-               <1>  mov rdi, %1
     9 0000212C [2F04000000000000]  <1>
    10 00002134 488B3425[92080000]  <1>  mov rsi, %2
    11 0000213C 4883EC08            <1>  sub rsp, 8
    12 00002140 E8(00000000)        <1>  call printf
    13 00002145 4883C408            <1>  add rsp, 8
  1957                                  
  1958                                      ; Estadísticas del oficial 2
  1959                                      mPuts msgOficial2
     2 00002149 48BF-               <1>  mov rdi, %1
     2 0000214B [3303000000000000]  <1>
     3 00002153 4883EC08            <1>  sub rsp, 8
     4 00002157 E8(00000000)        <1>  call puts
     5 0000215C 4883C408            <1>  add rsp, 8
  1960                                      mPrint msgCantMovimientos, qword[movimientosOfic2]
     9 00002160 48BF-               <1>  mov rdi, %1
     9 00002162 [3F03000000000000]  <1>
    10 0000216A 488B3425[CA070000]  <1>  mov rsi, %2
    11 00002172 4883EC08            <1>  sub rsp, 8
    12 00002176 E8(00000000)        <1>  call printf
    13 0000217B 4883C408            <1>  add rsp, 8
  1961                                      mPrint msgCantAdelante, qword[movOfic2Adelante]
     9 0000217F 48BF-               <1>  mov rdi, %1
     9 00002181 [5803000000000000]  <1>
    10 00002189 488B3425[1A080000]  <1>  mov rsi, %2
    11 00002191 4883EC08            <1>  sub rsp, 8
    12 00002195 E8(00000000)        <1>  call printf
    13 0000219A 4883C408            <1>  add rsp, 8
  1962                                      mPrint msgCantDerecha, qword[movOfic2Derecha]
     9 0000219E 48BF-               <1>  mov rdi, %1
     9 000021A0 [6E03000000000000]  <1>
    10 000021A8 488B3425[22080000]  <1>  mov rsi, %2
    11 000021B0 4883EC08            <1>  sub rsp, 8
    12 000021B4 E8(00000000)        <1>  call printf
    13 000021B9 4883C408            <1>  add rsp, 8
  1963                                      mPrint msgCantIzquierda, qword[movOfic2Izquierda]
     9 000021BD 48BF-               <1>  mov rdi, %1
     9 000021BF [8603000000000000]  <1>
    10 000021C7 488B3425[2A080000]  <1>  mov rsi, %2
    11 000021CF 4883EC08            <1>  sub rsp, 8
    12 000021D3 E8(00000000)        <1>  call printf
    13 000021D8 4883C408            <1>  add rsp, 8
  1964                                      mPrint msgCantAtras, qword[movOfic2Atras]
     9 000021DC 48BF-               <1>  mov rdi, %1
     9 000021DE [A003000000000000]  <1>
    10 000021E6 488B3425[32080000]  <1>  mov rsi, %2
    11 000021EE 4883EC08            <1>  sub rsp, 8
    12 000021F2 E8(00000000)        <1>  call printf
    13 000021F7 4883C408            <1>  add rsp, 8
  1965                                      mPrint msgCantDiagonal, qword[movOfic2Diagonal]
     9 000021FB 48BF-               <1>  mov rdi, %1
     9 000021FD [B403000000000000]  <1>
    10 00002205 488B3425[3A080000]  <1>  mov rsi, %2
    11 0000220D 4883EC08            <1>  sub rsp, 8
    12 00002211 E8(00000000)        <1>  call printf
    13 00002216 4883C408            <1>  add rsp, 8
  1966                                      mPrint msgCantDiagArribaDer, qword[movOfic2DiagArribaDer]
     9 0000221A 48BF-               <1>  mov rdi, %1
     9 0000221C [C703000000000000]  <1>
    10 00002224 488B3425[42080000]  <1>  mov rsi, %2
    11 0000222C 4883EC08            <1>  sub rsp, 8
    12 00002230 E8(00000000)        <1>  call printf
    13 00002235 4883C408            <1>  add rsp, 8
  1967                                      mPrint msgCantDiagArribaIzq, qword[movOfic2DiagArribaIzq]
     9 00002239 48BF-               <1>  mov rdi, %1
     9 0000223B [E103000000000000]  <1>
    10 00002243 488B3425[4A080000]  <1>  mov rsi, %2
    11 0000224B 4883EC08            <1>  sub rsp, 8
    12 0000224F E8(00000000)        <1>  call printf
    13 00002254 4883C408            <1>  add rsp, 8
  1968                                      mPrint msgCantDiagAbajoDer, qword[movOfic2DiagAbajoDer]
     9 00002258 48BF-               <1>  mov rdi, %1
     9 0000225A [FD03000000000000]  <1>
    10 00002262 488B3425[52080000]  <1>  mov rsi, %2
    11 0000226A 4883EC08            <1>  sub rsp, 8
    12 0000226E E8(00000000)        <1>  call printf
    13 00002273 4883C408            <1>  add rsp, 8
  1969                                      mPrint msgCantDiagAbajoIzq, qword[movOfic2DiagAbajoIzq]
     9 00002277 48BF-               <1>  mov rdi, %1
     9 00002279 [1504000000000000]  <1>
    10 00002281 488B3425[5A080000]  <1>  mov rsi, %2
    11 00002289 4883EC08            <1>  sub rsp, 8
    12 0000228D E8(00000000)        <1>  call printf
    13 00002292 4883C408            <1>  add rsp, 8
  1970                                      mPrint msgCantSoldadosCapt, qword[cantCapturasOfic2]
     9 00002296 48BF-               <1>  mov rdi, %1
     9 00002298 [2F04000000000000]  <1>
    10 000022A0 488B3425[9A080000]  <1>  mov rsi, %2
    11 000022A8 4883EC08            <1>  sub rsp, 8
    12 000022AC E8(00000000)        <1>  call printf
    13 000022B1 4883C408            <1>  add rsp, 8
  1971                                  
  1972 000022B5 EB00                        jmp salirSinGuardar
  1973                                  
  1974                                  ; --------------------------------------------------------------------------------------------
  1975                                  ; RUTINAS PARA SALIR DEL JUEGO (guardando o no la partida)
  1976                                  ; --------------------------------------------------------------------------------------------
  1977                                  
  1978                                  salirSinGuardar:
  1979 000022B7 B800000000                  mov rax, 0
  1980 000022BC C3                          ret
  1981                                  
  1982                                  salirDelJuego:
  1983                                      mCommand cmdLimpiarPantalla
    24 000022BD 48BF-               <1>  mov rdi, %1
    24 000022BF [A808000000000000]  <1>
    25 000022C7 4883EC08            <1>  sub rsp, 8
    26 000022CB E8(00000000)        <1>  call system
    27 000022D0 4883C408            <1>  add rsp, 8
  1984                                  
  1985                                      mPuts msgSalidaPartida
     2 000022D4 48BF-               <1>  mov rdi, %1
     2 000022D6 [B904000000000000]  <1>
     3 000022DE 4883EC08            <1>  sub rsp, 8
     4 000022E2 E8(00000000)        <1>  call puts
     5 000022E7 4883C408            <1>  add rsp, 8
  1986                                      mPuts msgAclaracionSalida
     2 000022EB 48BF-               <1>  mov rdi, %1
     2 000022ED [F604000000000000]  <1>
     3 000022F5 4883EC08            <1>  sub rsp, 8
     4 000022F9 E8(00000000)        <1>  call puts
     5 000022FE 4883C408            <1>  add rsp, 8
  1987                                  
  1988                                      recibirOpcionGuardado:
  1989                                          mGets guardadoPartida
    17 00002302 48BF-               <1>  mov rdi, %1
    17 00002304 [8D05000000000000]  <1>
    18 0000230C 4883EC08            <1>  sub rsp, 8
    19 00002310 E8(00000000)        <1>  call gets
    20 00002315 4883C408            <1>  add rsp, 8
  1990                                  
  1991 00002319 803C25[8E050000]00          cmp byte[guardadoPartida+1], 0
  1992 00002321 7514                        jne guardadoInvalido
  1993                                  
  1994 00002323 803C25[8D050000]73          cmp byte[guardadoPartida], 's'
  1995 0000232B 7455                        je guardarPartida
  1996                                  
  1997 0000232D 803C25[8D050000]6E          cmp byte[guardadoPartida], 'n'
  1998 00002335 7419                        je removerArchivo
  1999                                  
  2000                                      guardadoInvalido:
  2001                                          mPuts msgOpcionInvalida
     2 00002337 48BF-               <1>  mov rdi, %1
     2 00002339 [A100000000000000]  <1>
     3 00002341 4883EC08            <1>  sub rsp, 8
     4 00002345 E8(00000000)        <1>  call puts
     5 0000234A 4883C408            <1>  add rsp, 8
  2002 0000234E EBB2                            jmp recibirOpcionGuardado
  2003                                  
  2004                                      removerArchivo:
  2005 00002350 803C25[8F050000]73              cmp byte[yaHabiaGuardado], 's' ; Si ya había guardado la partida, la borramos
  2006 00002358 0F8559FFFFFF                    jne salirSinGuardar
  2007                                          
  2008                                          mCommand cmdBorrarArchivoPartida
    24 0000235E 48BF-               <1>  mov rdi, %1
    24 00002360 [C808000000000000]  <1>
    25 00002368 4883EC08            <1>  sub rsp, 8
    26 0000236C E8(00000000)        <1>  call system
    27 00002371 4883C408            <1>  add rsp, 8
  2009 00002375 C60425[8F050000]6E              mov byte[yaHabiaGuardado], 'n' ; Para la próxima vez que se quiera salir, no se borra nada
  2010 0000237D E935FFFFFF                      jmp salirSinGuardar
  2011                                  
  2012                                  
  2013                                  guardarPartida:
  2014 00002382 C60425[8F050000]73          mov byte[yaHabiaGuardado], 's'
  2015                                      mOpenFile nombreArchivo, modoEscritura
   112 0000238A 48BF-               <1>  mov rdi, %1
   112 0000238C [0C09000000000000]  <1>
   113 00002394 48BE-               <1>  mov rsi, %2
   113 00002396 [0609000000000000]  <1>
   114 0000239E 4883EC08            <1>  sub rsp, 8
   115 000023A2 E8(00000000)        <1>  call fopen
   116 000023A7 4883C408            <1>  add rsp, 8
   117                              <1> 
   118 000023AB 4883F800            <1>  cmp rax, 0
   119 000023AF 48890425[D8000000]  <1>  mov qword[idArchGuardado], rax
  2016 000023B7 E82D000000                  call agregarDatosPartida
  2017                                      mCloseFile idArchGuardado
   123 000023BC 488B3C25[D8000000]  <1>  mov rdi, [%1]
   124 000023C4 4883EC08            <1>  sub rsp, 8
   125 000023C8 E8(00000000)        <1>  call fclose
   126 000023CD 4883C408            <1>  add rsp, 8
  2018                                  
  2019                                      mPuts msgPartidaGuardada
     2 000023D1 48BF-               <1>  mov rdi, %1
     2 000023D3 [9305000000000000]  <1>
     3 000023DB 4883EC08            <1>  sub rsp, 8
     4 000023DF E8(00000000)        <1>  call puts
     5 000023E4 4883C408            <1>  add rsp, 8
  2020 000023E8 C3                          ret    
  2021                                  
  2022                                  agregarDatosPartida:
  2023                                      mWriteLine tableroEnJuego, 116, 1
   140 000023E9 48BF-               <1>  mov rdi, %1
   140 000023EB [0400000000000000]  <1>
   141 000023F3 BE74000000          <1>  mov rsi, %2
   142 000023F8 BA01000000          <1>  mov rdx, %3
   143 000023FD 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002405 4883EC08            <1>  sub rsp, 8
   145 00002409 E8(00000000)        <1>  call fwrite
   146 0000240E 4883C408            <1>  add rsp, 8
  2024                                  
  2025                                      mWriteLine yaHabiaGuardado, 1, 1 ; Guardamos si ya había guardado la partida
   140 00002412 48BF-               <1>  mov rdi, %1
   140 00002414 [8F05000000000000]  <1>
   141 0000241C BE01000000          <1>  mov rsi, %2
   142 00002421 BA01000000          <1>  mov rdx, %3
   143 00002426 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 0000242E 4883EC08            <1>  sub rsp, 8
   145 00002432 E8(00000000)        <1>  call fwrite
   146 00002437 4883C408            <1>  add rsp, 8
  2026                                  
  2027                                      mWriteLine turnoDe, 1, 1 ; Guardamos el turno actual
   140 0000243B 48BF-               <1>  mov rdi, %1
   140 0000243D [9105000000000000]  <1>
   141 00002445 BE01000000          <1>  mov rsi, %2
   142 0000244A BA01000000          <1>  mov rdx, %3
   143 0000244F 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002457 4883EC08            <1>  sub rsp, 8
   145 0000245B E8(00000000)        <1>  call fwrite
   146 00002460 4883C408            <1>  add rsp, 8
  2028                                  
  2029                                      mWriteLine movimientosOfic1, 8, 1
   140 00002464 48BF-               <1>  mov rdi, %1
   140 00002466 [C207000000000000]  <1>
   141 0000246E BE08000000          <1>  mov rsi, %2
   142 00002473 BA01000000          <1>  mov rdx, %3
   143 00002478 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002480 4883EC08            <1>  sub rsp, 8
   145 00002484 E8(00000000)        <1>  call fwrite
   146 00002489 4883C408            <1>  add rsp, 8
  2030                                      mWriteLine movimientosOfic2, 8, 1
   140 0000248D 48BF-               <1>  mov rdi, %1
   140 0000248F [CA07000000000000]  <1>
   141 00002497 BE08000000          <1>  mov rsi, %2
   142 0000249C BA01000000          <1>  mov rdx, %3
   143 000024A1 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000024A9 4883EC08            <1>  sub rsp, 8
   145 000024AD E8(00000000)        <1>  call fwrite
   146 000024B2 4883C408            <1>  add rsp, 8
  2031                                  
  2032                                      mWriteLine movOfic1Adelante, 8, 1
   140 000024B6 48BF-               <1>  mov rdi, %1
   140 000024B8 [D207000000000000]  <1>
   141 000024C0 BE08000000          <1>  mov rsi, %2
   142 000024C5 BA01000000          <1>  mov rdx, %3
   143 000024CA 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000024D2 4883EC08            <1>  sub rsp, 8
   145 000024D6 E8(00000000)        <1>  call fwrite
   146 000024DB 4883C408            <1>  add rsp, 8
  2033                                      mWriteLine movOfic1Derecha, 8, 1
   140 000024DF 48BF-               <1>  mov rdi, %1
   140 000024E1 [DA07000000000000]  <1>
   141 000024E9 BE08000000          <1>  mov rsi, %2
   142 000024EE BA01000000          <1>  mov rdx, %3
   143 000024F3 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000024FB 4883EC08            <1>  sub rsp, 8
   145 000024FF E8(00000000)        <1>  call fwrite
   146 00002504 4883C408            <1>  add rsp, 8
  2034                                      mWriteLine movOfic1Izquierda, 8, 1
   140 00002508 48BF-               <1>  mov rdi, %1
   140 0000250A [E207000000000000]  <1>
   141 00002512 BE08000000          <1>  mov rsi, %2
   142 00002517 BA01000000          <1>  mov rdx, %3
   143 0000251C 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002524 4883EC08            <1>  sub rsp, 8
   145 00002528 E8(00000000)        <1>  call fwrite
   146 0000252D 4883C408            <1>  add rsp, 8
  2035                                      mWriteLine movOfic1Atras, 8, 1
   140 00002531 48BF-               <1>  mov rdi, %1
   140 00002533 [EA07000000000000]  <1>
   141 0000253B BE08000000          <1>  mov rsi, %2
   142 00002540 BA01000000          <1>  mov rdx, %3
   143 00002545 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 0000254D 4883EC08            <1>  sub rsp, 8
   145 00002551 E8(00000000)        <1>  call fwrite
   146 00002556 4883C408            <1>  add rsp, 8
  2036                                      mWriteLine movOfic1Diagonal, 8, 1
   140 0000255A 48BF-               <1>  mov rdi, %1
   140 0000255C [F207000000000000]  <1>
   141 00002564 BE08000000          <1>  mov rsi, %2
   142 00002569 BA01000000          <1>  mov rdx, %3
   143 0000256E 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002576 4883EC08            <1>  sub rsp, 8
   145 0000257A E8(00000000)        <1>  call fwrite
   146 0000257F 4883C408            <1>  add rsp, 8
  2037                                      mWriteLine movOfic1DiagArribaDer, 8, 1
   140 00002583 48BF-               <1>  mov rdi, %1
   140 00002585 [FA07000000000000]  <1>
   141 0000258D BE08000000          <1>  mov rsi, %2
   142 00002592 BA01000000          <1>  mov rdx, %3
   143 00002597 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 0000259F 4883EC08            <1>  sub rsp, 8
   145 000025A3 E8(00000000)        <1>  call fwrite
   146 000025A8 4883C408            <1>  add rsp, 8
  2038                                      mWriteLine movOfic1DiagArribaIzq, 8, 1
   140 000025AC 48BF-               <1>  mov rdi, %1
   140 000025AE [0208000000000000]  <1>
   141 000025B6 BE08000000          <1>  mov rsi, %2
   142 000025BB BA01000000          <1>  mov rdx, %3
   143 000025C0 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000025C8 4883EC08            <1>  sub rsp, 8
   145 000025CC E8(00000000)        <1>  call fwrite
   146 000025D1 4883C408            <1>  add rsp, 8
  2039                                      mWriteLine movOfic1DiagAbajoDer, 8, 1
   140 000025D5 48BF-               <1>  mov rdi, %1
   140 000025D7 [0A08000000000000]  <1>
   141 000025DF BE08000000          <1>  mov rsi, %2
   142 000025E4 BA01000000          <1>  mov rdx, %3
   143 000025E9 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000025F1 4883EC08            <1>  sub rsp, 8
   145 000025F5 E8(00000000)        <1>  call fwrite
   146 000025FA 4883C408            <1>  add rsp, 8
  2040                                      mWriteLine movOfic1DiagAbajoIzq, 8, 1
   140 000025FE 48BF-               <1>  mov rdi, %1
   140 00002600 [1208000000000000]  <1>
   141 00002608 BE08000000          <1>  mov rsi, %2
   142 0000260D BA01000000          <1>  mov rdx, %3
   143 00002612 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 0000261A 4883EC08            <1>  sub rsp, 8
   145 0000261E E8(00000000)        <1>  call fwrite
   146 00002623 4883C408            <1>  add rsp, 8
  2041                                  
  2042                                      mWriteLine movOfic2Adelante, 8, 1
   140 00002627 48BF-               <1>  mov rdi, %1
   140 00002629 [1A08000000000000]  <1>
   141 00002631 BE08000000          <1>  mov rsi, %2
   142 00002636 BA01000000          <1>  mov rdx, %3
   143 0000263B 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002643 4883EC08            <1>  sub rsp, 8
   145 00002647 E8(00000000)        <1>  call fwrite
   146 0000264C 4883C408            <1>  add rsp, 8
  2043                                      mWriteLine movOfic2Derecha, 8, 1
   140 00002650 48BF-               <1>  mov rdi, %1
   140 00002652 [2208000000000000]  <1>
   141 0000265A BE08000000          <1>  mov rsi, %2
   142 0000265F BA01000000          <1>  mov rdx, %3
   143 00002664 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 0000266C 4883EC08            <1>  sub rsp, 8
   145 00002670 E8(00000000)        <1>  call fwrite
   146 00002675 4883C408            <1>  add rsp, 8
  2044                                      mWriteLine movOfic2Izquierda, 8, 1
   140 00002679 48BF-               <1>  mov rdi, %1
   140 0000267B [2A08000000000000]  <1>
   141 00002683 BE08000000          <1>  mov rsi, %2
   142 00002688 BA01000000          <1>  mov rdx, %3
   143 0000268D 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002695 4883EC08            <1>  sub rsp, 8
   145 00002699 E8(00000000)        <1>  call fwrite
   146 0000269E 4883C408            <1>  add rsp, 8
  2045                                      mWriteLine movOfic2Atras, 8, 1
   140 000026A2 48BF-               <1>  mov rdi, %1
   140 000026A4 [3208000000000000]  <1>
   141 000026AC BE08000000          <1>  mov rsi, %2
   142 000026B1 BA01000000          <1>  mov rdx, %3
   143 000026B6 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000026BE 4883EC08            <1>  sub rsp, 8
   145 000026C2 E8(00000000)        <1>  call fwrite
   146 000026C7 4883C408            <1>  add rsp, 8
  2046                                      mWriteLine movOfic2Diagonal, 8, 1
   140 000026CB 48BF-               <1>  mov rdi, %1
   140 000026CD [3A08000000000000]  <1>
   141 000026D5 BE08000000          <1>  mov rsi, %2
   142 000026DA BA01000000          <1>  mov rdx, %3
   143 000026DF 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000026E7 4883EC08            <1>  sub rsp, 8
   145 000026EB E8(00000000)        <1>  call fwrite
   146 000026F0 4883C408            <1>  add rsp, 8
  2047                                      mWriteLine movOfic2DiagArribaDer, 8, 1
   140 000026F4 48BF-               <1>  mov rdi, %1
   140 000026F6 [4208000000000000]  <1>
   141 000026FE BE08000000          <1>  mov rsi, %2
   142 00002703 BA01000000          <1>  mov rdx, %3
   143 00002708 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002710 4883EC08            <1>  sub rsp, 8
   145 00002714 E8(00000000)        <1>  call fwrite
   146 00002719 4883C408            <1>  add rsp, 8
  2048                                      mWriteLine movOfic2DiagArribaIzq, 8, 1
   140 0000271D 48BF-               <1>  mov rdi, %1
   140 0000271F [4A08000000000000]  <1>
   141 00002727 BE08000000          <1>  mov rsi, %2
   142 0000272C BA01000000          <1>  mov rdx, %3
   143 00002731 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002739 4883EC08            <1>  sub rsp, 8
   145 0000273D E8(00000000)        <1>  call fwrite
   146 00002742 4883C408            <1>  add rsp, 8
  2049                                      mWriteLine movOfic2DiagAbajoDer, 8, 1
   140 00002746 48BF-               <1>  mov rdi, %1
   140 00002748 [5208000000000000]  <1>
   141 00002750 BE08000000          <1>  mov rsi, %2
   142 00002755 BA01000000          <1>  mov rdx, %3
   143 0000275A 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002762 4883EC08            <1>  sub rsp, 8
   145 00002766 E8(00000000)        <1>  call fwrite
   146 0000276B 4883C408            <1>  add rsp, 8
  2050                                      mWriteLine movOfic2DiagAbajoIzq, 8, 1
   140 0000276F 48BF-               <1>  mov rdi, %1
   140 00002771 [5A08000000000000]  <1>
   141 00002779 BE08000000          <1>  mov rsi, %2
   142 0000277E BA01000000          <1>  mov rdx, %3
   143 00002783 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 0000278B 4883EC08            <1>  sub rsp, 8
   145 0000278F E8(00000000)        <1>  call fwrite
   146 00002794 4883C408            <1>  add rsp, 8
  2051                                  
  2052                                      mWriteLine cantSoldCapturados, 8, 1
   140 00002798 48BF-               <1>  mov rdi, %1
   140 0000279A [6208000000000000]  <1>
   141 000027A2 BE08000000          <1>  mov rsi, %2
   142 000027A7 BA01000000          <1>  mov rdx, %3
   143 000027AC 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000027B4 4883EC08            <1>  sub rsp, 8
   145 000027B8 E8(00000000)        <1>  call fwrite
   146 000027BD 4883C408            <1>  add rsp, 8
  2053                                      mWriteLine cantOficInvalidados, 8, 1
   140 000027C1 48BF-               <1>  mov rdi, %1
   140 000027C3 [6A08000000000000]  <1>
   141 000027CB BE08000000          <1>  mov rsi, %2
   142 000027D0 BA01000000          <1>  mov rdx, %3
   143 000027D5 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000027DD 4883EC08            <1>  sub rsp, 8
   145 000027E1 E8(00000000)        <1>  call fwrite
   146 000027E6 4883C408            <1>  add rsp, 8
  2054                                  
  2055                                      mWriteLine casillaOfic1, 8, 1
   140 000027EA 48BF-               <1>  mov rdi, %1
   140 000027EC [7208000000000000]  <1>
   141 000027F4 BE08000000          <1>  mov rsi, %2
   142 000027F9 BA01000000          <1>  mov rdx, %3
   143 000027FE 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002806 4883EC08            <1>  sub rsp, 8
   145 0000280A E8(00000000)        <1>  call fwrite
   146 0000280F 4883C408            <1>  add rsp, 8
  2056                                      mWriteLine casillaOfic1+8, 8, 1
   140 00002813 48BF-               <1>  mov rdi, %1
   140 00002815 [7A08000000000000]  <1>
   141 0000281D BE08000000          <1>  mov rsi, %2
   142 00002822 BA01000000          <1>  mov rdx, %3
   143 00002827 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 0000282F 4883EC08            <1>  sub rsp, 8
   145 00002833 E8(00000000)        <1>  call fwrite
   146 00002838 4883C408            <1>  add rsp, 8
  2057                                  
  2058                                      mWriteLine casillaOfic2, 8, 1
   140 0000283C 48BF-               <1>  mov rdi, %1
   140 0000283E [8208000000000000]  <1>
   141 00002846 BE08000000          <1>  mov rsi, %2
   142 0000284B BA01000000          <1>  mov rdx, %3
   143 00002850 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002858 4883EC08            <1>  sub rsp, 8
   145 0000285C E8(00000000)        <1>  call fwrite
   146 00002861 4883C408            <1>  add rsp, 8
  2059                                      mWriteLine casillaOfic2+8, 8, 1
   140 00002865 48BF-               <1>  mov rdi, %1
   140 00002867 [8A08000000000000]  <1>
   141 0000286F BE08000000          <1>  mov rsi, %2
   142 00002874 BA01000000          <1>  mov rdx, %3
   143 00002879 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002881 4883EC08            <1>  sub rsp, 8
   145 00002885 E8(00000000)        <1>  call fwrite
   146 0000288A 4883C408            <1>  add rsp, 8
  2060                                  
  2061                                      mWriteLine cantCapturasOfic1, 8, 1
   140 0000288E 48BF-               <1>  mov rdi, %1
   140 00002890 [9208000000000000]  <1>
   141 00002898 BE08000000          <1>  mov rsi, %2
   142 0000289D BA01000000          <1>  mov rdx, %3
   143 000028A2 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000028AA 4883EC08            <1>  sub rsp, 8
   145 000028AE E8(00000000)        <1>  call fwrite
   146 000028B3 4883C408            <1>  add rsp, 8
  2062                                      mWriteLine cantCapturasOfic2, 8, 1
   140 000028B7 48BF-               <1>  mov rdi, %1
   140 000028B9 [9A08000000000000]  <1>
   141 000028C1 BE08000000          <1>  mov rsi, %2
   142 000028C6 BA01000000          <1>  mov rdx, %3
   143 000028CB 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000028D3 4883EC08            <1>  sub rsp, 8
   145 000028D7 E8(00000000)        <1>  call fwrite
   146 000028DC 4883C408            <1>  add rsp, 8
  2063                                  
  2064 000028E0 C3                          ret
  2065                                  
  2066                                  ; --------------------------------------------------------------------------------------------
  2067                                  ; RUTINA PARA OBTENER LOS DATOS DE UNA PARTIDA GUARDADA
  2068                                  ; --------------------------------------------------------------------------------------------
  2069                                  
  2070                                  abrirPartidaGuardada:
  2071                                      ; Recreamos el tablero guardado
  2072                                      mReadLine tableroEnJuego, 116, 1
   130 000028E1 48BF-               <1>  mov rdi, %1
   130 000028E3 [0400000000000000]  <1>
   131 000028EB BE74000000          <1>  mov rsi, %2
   132 000028F0 BA01000000          <1>  mov rdx, %3
   133 000028F5 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 000028FD 4883EC08            <1>  sub rsp, 8
   135 00002901 E8(00000000)        <1>  call fread
   136 00002906 4883C408            <1>  add rsp, 8
  2073                                  
  2074                                      mReadLine yaHabiaGuardado, 1, 1
   130 0000290A 48BF-               <1>  mov rdi, %1
   130 0000290C [8F05000000000000]  <1>
   131 00002914 BE01000000          <1>  mov rsi, %2
   132 00002919 BA01000000          <1>  mov rdx, %3
   133 0000291E 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002926 4883EC08            <1>  sub rsp, 8
   135 0000292A E8(00000000)        <1>  call fread
   136 0000292F 4883C408            <1>  add rsp, 8
  2075                                      mReadLine turnoDe, 1, 1
   130 00002933 48BF-               <1>  mov rdi, %1
   130 00002935 [9105000000000000]  <1>
   131 0000293D BE01000000          <1>  mov rsi, %2
   132 00002942 BA01000000          <1>  mov rdx, %3
   133 00002947 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 0000294F 4883EC08            <1>  sub rsp, 8
   135 00002953 E8(00000000)        <1>  call fread
   136 00002958 4883C408            <1>  add rsp, 8
  2076                                  
  2077                                      mReadLine movimientosOfic1, 8, 1
   130 0000295C 48BF-               <1>  mov rdi, %1
   130 0000295E [C207000000000000]  <1>
   131 00002966 BE08000000          <1>  mov rsi, %2
   132 0000296B BA01000000          <1>  mov rdx, %3
   133 00002970 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002978 4883EC08            <1>  sub rsp, 8
   135 0000297C E8(00000000)        <1>  call fread
   136 00002981 4883C408            <1>  add rsp, 8
  2078                                      mReadLine movimientosOfic2, 8, 1
   130 00002985 48BF-               <1>  mov rdi, %1
   130 00002987 [CA07000000000000]  <1>
   131 0000298F BE08000000          <1>  mov rsi, %2
   132 00002994 BA01000000          <1>  mov rdx, %3
   133 00002999 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 000029A1 4883EC08            <1>  sub rsp, 8
   135 000029A5 E8(00000000)        <1>  call fread
   136 000029AA 4883C408            <1>  add rsp, 8
  2079                                  
  2080                                      mReadLine movOfic1Adelante, 8, 1
   130 000029AE 48BF-               <1>  mov rdi, %1
   130 000029B0 [D207000000000000]  <1>
   131 000029B8 BE08000000          <1>  mov rsi, %2
   132 000029BD BA01000000          <1>  mov rdx, %3
   133 000029C2 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 000029CA 4883EC08            <1>  sub rsp, 8
   135 000029CE E8(00000000)        <1>  call fread
   136 000029D3 4883C408            <1>  add rsp, 8
  2081                                      mReadLine movOfic1Derecha, 8, 1
   130 000029D7 48BF-               <1>  mov rdi, %1
   130 000029D9 [DA07000000000000]  <1>
   131 000029E1 BE08000000          <1>  mov rsi, %2
   132 000029E6 BA01000000          <1>  mov rdx, %3
   133 000029EB 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 000029F3 4883EC08            <1>  sub rsp, 8
   135 000029F7 E8(00000000)        <1>  call fread
   136 000029FC 4883C408            <1>  add rsp, 8
  2082                                      mReadLine movOfic1Izquierda, 8, 1
   130 00002A00 48BF-               <1>  mov rdi, %1
   130 00002A02 [E207000000000000]  <1>
   131 00002A0A BE08000000          <1>  mov rsi, %2
   132 00002A0F BA01000000          <1>  mov rdx, %3
   133 00002A14 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002A1C 4883EC08            <1>  sub rsp, 8
   135 00002A20 E8(00000000)        <1>  call fread
   136 00002A25 4883C408            <1>  add rsp, 8
  2083                                      mReadLine movOfic1Atras, 8, 1
   130 00002A29 48BF-               <1>  mov rdi, %1
   130 00002A2B [EA07000000000000]  <1>
   131 00002A33 BE08000000          <1>  mov rsi, %2
   132 00002A38 BA01000000          <1>  mov rdx, %3
   133 00002A3D 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002A45 4883EC08            <1>  sub rsp, 8
   135 00002A49 E8(00000000)        <1>  call fread
   136 00002A4E 4883C408            <1>  add rsp, 8
  2084                                      mReadLine movOfic1Diagonal, 8, 1
   130 00002A52 48BF-               <1>  mov rdi, %1
   130 00002A54 [F207000000000000]  <1>
   131 00002A5C BE08000000          <1>  mov rsi, %2
   132 00002A61 BA01000000          <1>  mov rdx, %3
   133 00002A66 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002A6E 4883EC08            <1>  sub rsp, 8
   135 00002A72 E8(00000000)        <1>  call fread
   136 00002A77 4883C408            <1>  add rsp, 8
  2085                                      mReadLine movOfic1DiagArribaDer, 8, 1
   130 00002A7B 48BF-               <1>  mov rdi, %1
   130 00002A7D [FA07000000000000]  <1>
   131 00002A85 BE08000000          <1>  mov rsi, %2
   132 00002A8A BA01000000          <1>  mov rdx, %3
   133 00002A8F 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002A97 4883EC08            <1>  sub rsp, 8
   135 00002A9B E8(00000000)        <1>  call fread
   136 00002AA0 4883C408            <1>  add rsp, 8
  2086                                      mReadLine movOfic1DiagArribaIzq, 8, 1
   130 00002AA4 48BF-               <1>  mov rdi, %1
   130 00002AA6 [0208000000000000]  <1>
   131 00002AAE BE08000000          <1>  mov rsi, %2
   132 00002AB3 BA01000000          <1>  mov rdx, %3
   133 00002AB8 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002AC0 4883EC08            <1>  sub rsp, 8
   135 00002AC4 E8(00000000)        <1>  call fread
   136 00002AC9 4883C408            <1>  add rsp, 8
  2087                                      mReadLine movOfic1DiagAbajoDer, 8, 1
   130 00002ACD 48BF-               <1>  mov rdi, %1
   130 00002ACF [0A08000000000000]  <1>
   131 00002AD7 BE08000000          <1>  mov rsi, %2
   132 00002ADC BA01000000          <1>  mov rdx, %3
   133 00002AE1 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002AE9 4883EC08            <1>  sub rsp, 8
   135 00002AED E8(00000000)        <1>  call fread
   136 00002AF2 4883C408            <1>  add rsp, 8
  2088                                      mReadLine movOfic1DiagAbajoIzq, 8, 1
   130 00002AF6 48BF-               <1>  mov rdi, %1
   130 00002AF8 [1208000000000000]  <1>
   131 00002B00 BE08000000          <1>  mov rsi, %2
   132 00002B05 BA01000000          <1>  mov rdx, %3
   133 00002B0A 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002B12 4883EC08            <1>  sub rsp, 8
   135 00002B16 E8(00000000)        <1>  call fread
   136 00002B1B 4883C408            <1>  add rsp, 8
  2089                                  
  2090                                      mReadLine movOfic2Adelante, 8, 1
   130 00002B1F 48BF-               <1>  mov rdi, %1
   130 00002B21 [1A08000000000000]  <1>
   131 00002B29 BE08000000          <1>  mov rsi, %2
   132 00002B2E BA01000000          <1>  mov rdx, %3
   133 00002B33 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002B3B 4883EC08            <1>  sub rsp, 8
   135 00002B3F E8(00000000)        <1>  call fread
   136 00002B44 4883C408            <1>  add rsp, 8
  2091                                      mReadLine movOfic2Derecha, 8, 1
   130 00002B48 48BF-               <1>  mov rdi, %1
   130 00002B4A [2208000000000000]  <1>
   131 00002B52 BE08000000          <1>  mov rsi, %2
   132 00002B57 BA01000000          <1>  mov rdx, %3
   133 00002B5C 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002B64 4883EC08            <1>  sub rsp, 8
   135 00002B68 E8(00000000)        <1>  call fread
   136 00002B6D 4883C408            <1>  add rsp, 8
  2092                                      mReadLine movOfic2Izquierda, 8, 1
   130 00002B71 48BF-               <1>  mov rdi, %1
   130 00002B73 [2A08000000000000]  <1>
   131 00002B7B BE08000000          <1>  mov rsi, %2
   132 00002B80 BA01000000          <1>  mov rdx, %3
   133 00002B85 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002B8D 4883EC08            <1>  sub rsp, 8
   135 00002B91 E8(00000000)        <1>  call fread
   136 00002B96 4883C408            <1>  add rsp, 8
  2093                                      mReadLine movOfic2Atras, 8, 1
   130 00002B9A 48BF-               <1>  mov rdi, %1
   130 00002B9C [3208000000000000]  <1>
   131 00002BA4 BE08000000          <1>  mov rsi, %2
   132 00002BA9 BA01000000          <1>  mov rdx, %3
   133 00002BAE 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002BB6 4883EC08            <1>  sub rsp, 8
   135 00002BBA E8(00000000)        <1>  call fread
   136 00002BBF 4883C408            <1>  add rsp, 8
  2094                                      mReadLine movOfic2Diagonal, 8, 1
   130 00002BC3 48BF-               <1>  mov rdi, %1
   130 00002BC5 [3A08000000000000]  <1>
   131 00002BCD BE08000000          <1>  mov rsi, %2
   132 00002BD2 BA01000000          <1>  mov rdx, %3
   133 00002BD7 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002BDF 4883EC08            <1>  sub rsp, 8
   135 00002BE3 E8(00000000)        <1>  call fread
   136 00002BE8 4883C408            <1>  add rsp, 8
  2095                                      mReadLine movOfic2DiagArribaDer, 8, 1
   130 00002BEC 48BF-               <1>  mov rdi, %1
   130 00002BEE [4208000000000000]  <1>
   131 00002BF6 BE08000000          <1>  mov rsi, %2
   132 00002BFB BA01000000          <1>  mov rdx, %3
   133 00002C00 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002C08 4883EC08            <1>  sub rsp, 8
   135 00002C0C E8(00000000)        <1>  call fread
   136 00002C11 4883C408            <1>  add rsp, 8
  2096                                      mReadLine movOfic2DiagArribaIzq, 8, 1
   130 00002C15 48BF-               <1>  mov rdi, %1
   130 00002C17 [4A08000000000000]  <1>
   131 00002C1F BE08000000          <1>  mov rsi, %2
   132 00002C24 BA01000000          <1>  mov rdx, %3
   133 00002C29 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002C31 4883EC08            <1>  sub rsp, 8
   135 00002C35 E8(00000000)        <1>  call fread
   136 00002C3A 4883C408            <1>  add rsp, 8
  2097                                      mReadLine movOfic2DiagAbajoDer, 8, 1
   130 00002C3E 48BF-               <1>  mov rdi, %1
   130 00002C40 [5208000000000000]  <1>
   131 00002C48 BE08000000          <1>  mov rsi, %2
   132 00002C4D BA01000000          <1>  mov rdx, %3
   133 00002C52 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002C5A 4883EC08            <1>  sub rsp, 8
   135 00002C5E E8(00000000)        <1>  call fread
   136 00002C63 4883C408            <1>  add rsp, 8
  2098                                      mReadLine movOfic2DiagAbajoIzq, 8, 1
   130 00002C67 48BF-               <1>  mov rdi, %1
   130 00002C69 [5A08000000000000]  <1>
   131 00002C71 BE08000000          <1>  mov rsi, %2
   132 00002C76 BA01000000          <1>  mov rdx, %3
   133 00002C7B 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002C83 4883EC08            <1>  sub rsp, 8
   135 00002C87 E8(00000000)        <1>  call fread
   136 00002C8C 4883C408            <1>  add rsp, 8
  2099                                  
  2100                                      mReadLine cantSoldCapturados, 8, 1
   130 00002C90 48BF-               <1>  mov rdi, %1
   130 00002C92 [6208000000000000]  <1>
   131 00002C9A BE08000000          <1>  mov rsi, %2
   132 00002C9F BA01000000          <1>  mov rdx, %3
   133 00002CA4 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002CAC 4883EC08            <1>  sub rsp, 8
   135 00002CB0 E8(00000000)        <1>  call fread
   136 00002CB5 4883C408            <1>  add rsp, 8
  2101                                      mReadLine cantOficInvalidados, 8, 1
   130 00002CB9 48BF-               <1>  mov rdi, %1
   130 00002CBB [6A08000000000000]  <1>
   131 00002CC3 BE08000000          <1>  mov rsi, %2
   132 00002CC8 BA01000000          <1>  mov rdx, %3
   133 00002CCD 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002CD5 4883EC08            <1>  sub rsp, 8
   135 00002CD9 E8(00000000)        <1>  call fread
   136 00002CDE 4883C408            <1>  add rsp, 8
  2102                                  
  2103                                      mReadLine casillaOfic1, 8, 1
   130 00002CE2 48BF-               <1>  mov rdi, %1
   130 00002CE4 [7208000000000000]  <1>
   131 00002CEC BE08000000          <1>  mov rsi, %2
   132 00002CF1 BA01000000          <1>  mov rdx, %3
   133 00002CF6 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002CFE 4883EC08            <1>  sub rsp, 8
   135 00002D02 E8(00000000)        <1>  call fread
   136 00002D07 4883C408            <1>  add rsp, 8
  2104                                      mReadLine casillaOfic1+8, 8, 1
   130 00002D0B 48BF-               <1>  mov rdi, %1
   130 00002D0D [7A08000000000000]  <1>
   131 00002D15 BE08000000          <1>  mov rsi, %2
   132 00002D1A BA01000000          <1>  mov rdx, %3
   133 00002D1F 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002D27 4883EC08            <1>  sub rsp, 8
   135 00002D2B E8(00000000)        <1>  call fread
   136 00002D30 4883C408            <1>  add rsp, 8
  2105                                  
  2106                                      mReadLine casillaOfic2, 8, 1
   130 00002D34 48BF-               <1>  mov rdi, %1
   130 00002D36 [8208000000000000]  <1>
   131 00002D3E BE08000000          <1>  mov rsi, %2
   132 00002D43 BA01000000          <1>  mov rdx, %3
   133 00002D48 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002D50 4883EC08            <1>  sub rsp, 8
   135 00002D54 E8(00000000)        <1>  call fread
   136 00002D59 4883C408            <1>  add rsp, 8
  2107                                      mReadLine casillaOfic2+8, 8, 1
   130 00002D5D 48BF-               <1>  mov rdi, %1
   130 00002D5F [8A08000000000000]  <1>
   131 00002D67 BE08000000          <1>  mov rsi, %2
   132 00002D6C BA01000000          <1>  mov rdx, %3
   133 00002D71 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002D79 4883EC08            <1>  sub rsp, 8
   135 00002D7D E8(00000000)        <1>  call fread
   136 00002D82 4883C408            <1>  add rsp, 8
  2108                                  
  2109                                      mReadLine cantCapturasOfic1, 8, 1
   130 00002D86 48BF-               <1>  mov rdi, %1
   130 00002D88 [9208000000000000]  <1>
   131 00002D90 BE08000000          <1>  mov rsi, %2
   132 00002D95 BA01000000          <1>  mov rdx, %3
   133 00002D9A 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002DA2 4883EC08            <1>  sub rsp, 8
   135 00002DA6 E8(00000000)        <1>  call fread
   136 00002DAB 4883C408            <1>  add rsp, 8
  2110                                      mReadLine cantCapturasOfic2, 8, 1
   130 00002DAF 48BF-               <1>  mov rdi, %1
   130 00002DB1 [9A08000000000000]  <1>
   131 00002DB9 BE08000000          <1>  mov rsi, %2
   132 00002DBE BA01000000          <1>  mov rdx, %3
   133 00002DC3 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002DCB 4883EC08            <1>  sub rsp, 8
   135 00002DCF E8(00000000)        <1>  call fread
   136 00002DD4 4883C408            <1>  add rsp, 8
  2111                                  
  2112 00002DD8 C3                          ret
