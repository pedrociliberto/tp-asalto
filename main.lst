     1                                  %macro mPuts 1 ; Imprime el string %1, hasta encontrar un 0
     2                                      mov rdi, %1
     3                                      sub rsp, 8
     4                                      call puts
     5                                      add rsp, 8
     6                                  %endmacro
     7                                  
     8                                  %macro mPrint 2 ; Imprime el string %2 con formato %1
     9                                      mov rdi, %1
    10                                      mov rsi, %2
    11                                      sub rsp, 8
    12                                      call printf
    13                                      add rsp, 8
    14                                  %endmacro
    15                                  
    16                                  %macro mGets 1 ; Obtiene un string por teclado, guard√°ndolo en %1
    17                                      mov rdi, %1
    18                                      sub rsp, 8
    19                                      call gets
    20                                      add rsp, 8
    21                                  %endmacro
    22                                  
    23                                  %macro mCommand 1 ; Ejecuta el comando %1 de la terminal
    24                                      mov rdi, %1
    25                                      sub rsp, 8
    26                                      call system
    27                                      add rsp, 8
    28                                  %endmacro
    29                                  
    30                                  %macro mMov 3 ; Copia %3 bytes del campo de memoria %2 al campo de memoria %1
    31                                      mov rcx, %3
    32                                      lea rsi, [%2]
    33                                      lea rdi, [%1]
    34                                      rep movsb
    35                                  %endmacro
    36                                  
    37                                  %macro mCmp 3 ; Compara %3 bytes del campo %1 con %2
    38                                      mov rcx, %3
    39                                      lea rsi, %1
    40                                      lea rdi, %2
    41                                      repe cmpsb
    42                                  %endmacro 
    43                                  
    44                                  %macro mErrorJump 2 ; Imprime el mensaje de error %1 y salta a la etiqueta %2
    45                                      mPuts %1
    46                                      jmp %2
    47                                  %endmacro
    48                                  
    49                                  %macro mfGets 2
    50                                      mov rdi, %1
    51                                      mov rsi, %2
    52                                      mov rdx, [stdin]
    53                                      sub rsp, 8
    54                                      call fgets
    55                                      add rsp, 8
    56                                  %endmacro
    57                                  
    58                                  %macro mLeerEntradaEstandar 2
    59                                      mov rax, 0      ; syscall: read
    60                                      mov rdi, 0      ; 0: stdin
    61                                      mov rsi, %1   ; buffer (direccion de guardado de lo leido)
    62                                      mov rdx, %2     ; Cuantos bytes queremos leer
    63                                      syscall
    64                                  
    65                                      mov byte[rsi+rax], 0
    66                                  %endmacro
    67                                  
    68                                  %macro mSscanf 3
    69                                      lea rdi, %1     ; Variable Original string
    70                                      mov rsi, %2     ; Formato
    71                                      mov rdx, %3     ; Variable a guardar el int
    72                                      sub rsp, 8
    73                                      call sscanf
    74                                      add rsp, 8
    75                                  %endmacro
    76                                  
    77                                  %macro mAtoi 2
    78                                      lea rdi, %1
    79                                      sub rsp, 8
    80                                      call atoi
    81                                      add rsp, 8
    82                                      mov [%2], eax
    83                                  %endmacro
    84                                  
    85                                  %macro mCalcDesplaz 3
    86                                      mov rdi, %1
    87                                      mov rsi, %2
    88                                      call calcularDesplazamiento
    89                                      mov %3, rax
    90                                  %endmacro
    91                                  
    92                                  %macro mEstaVacia 1 
    93                                      mov rax, 0
    94                                      mov rdi, %1 ; recibe el desplazamiento
    95                                      call estaVacia
    96                                  %endmacro
    97                                  
    98                                  extern puts, printf
    99                                  extern gets
   100                                  extern system, stdin
   101                                  extern fgets
   102                                  extern atoi
   103                                  extern sscanf
   104                                  
   105                                  section .data
   106                                  
   107                                      ; Tableros y sus posibles estados
   108                                  
   109 00000000 202031323334353637-         tableroOrig         db " "," ","1","2","3","4","5","6","7"," ",10
   109 00000009 200A               
   110 0000000B 2020202D5F5F5F2D20-                             db " "," "," ","-","_","_","_","-"," "," ",10 
   110 00000014 200A               
   111 00000016 3120207C5858587C20-                             db "1"," "," ","|","X","X","X","|"," "," ",10
   111 0000001F 200A               
   112 00000021 322D5F7C5858587C5F-                             db "2","-","_","|","X","X","X","|","_","-",10
   112 0000002A 2D0A               
   113 0000002C 337C58585858585858-                             db "3","|","X","X","X","X","X","X","X","|",10 
   113 00000035 7C0A               
   114 00000037 347C58585858585858-                             db "4","|","X","X","X","X","X","X","X","|",10 
   114 00000040 7C0A               
   115 00000042 357C58582020205858-                             db "5","|","X","X"," "," "," ","X","X","|",10 
   115 0000004B 7C0A               
   116 0000004D 362D2D7C20204F7C2D-                             db "6","-","-","|"," "," ","O","|","-","-",10 
   116 00000056 2D0A               
   117 00000058 3720207C4F20207C20-                             db "7"," "," ","|","O"," "," ","|"," "," ",10 
   117 00000061 200A               
   118 00000063 2020202D2D2D2D2D20-                             db " "," "," ","-","-","-","-","-"," "," ",10,0
   118 0000006C 200A00             
   119                                  
   120 0000006F 202031323334353637-         tableroInv          db " "," ","1","2","3","4","5","6","7"," ",10
   120 00000078 200A               
   121 0000007A 202020205F5F5F2020-                             db " "," "," "," ","_","_","_"," "," "," ",10 
   121 00000083 200A               
   122 00000085 3120207C4F20207C20-                             db "1"," "," ","|","O"," "," ","|"," "," ",10
   122 0000008E 200A               
   123 00000090 32205F7C20204F7C5F-                             db "2"," ","_","|"," "," ","O","|","_"," ",10
   123 00000099 200A               
   124 0000009B 337C58582020205858-                             db "3","|","X","X"," "," "," ","X","X","|",10 
   124 000000A4 7C0A               
   125 000000A6 347C58585858585858-                             db "4","|","X","X","X","X","X","X","X","|",10 
   125 000000AF 7C0A               
   126 000000B1 357C58585858585858-                             db "5","|","X","X","X","X","X","X","X","|",10 
   126 000000BA 7C0A               
   127 000000BC 36202D7C5858587C2D-                             db "6"," ","-","|","X","X","X","|","-"," ",10 
   127 000000C5 200A               
   128 000000C7 3720207C5858587C20-                             db "7"," "," ","|","X","X","X","|"," "," ",10 
   128 000000D0 200A               
   129 000000D2 202020202D2D2D2020-                             db " "," "," "," ","-","-","-"," "," "," ",10,0
   129 000000DB 200A00             
   130                                  
   131 000000DE 202031323334353637-         tableroDer          db " "," ","1","2","3","4","5","6","7"," ",10
   131 000000E7 200A               
   132 000000E9 202020205F5F5F2020-                             db " "," "," "," ","_","_","_"," "," "," ",10 
   132 000000F2 200A               
   133 000000F4 3120207C5858587C20-                             db "1"," "," ","|","X","X","X","|"," "," ",10
   133 000000FD 200A               
   134 000000FF 32205F7C5858587C5F-                             db "2"," ","_","|","X","X","X","|","_"," ",10
   134 00000108 200A               
   135 0000010A 337C5858585820204F-                             db "3","|","X","X","X","X"," "," ","O","|",10 
   135 00000113 7C0A               
   136 00000115 347C58585858202020-                             db "4","|","X","X","X","X"," "," "," ","|",10 
   136 0000011E 7C0A               
   137 00000120 357C58585858204F20-                             db "5","|","X","X","X","X"," ","O"," ","|",10 
   137 00000129 7C0A               
   138 0000012B 36202D7C5858587C2D-                             db "6"," ","-","|","X","X","X","|","-"," ",10 
   138 00000134 200A               
   139 00000136 3720207C5858587C20-                             db "7"," "," ","|","X","X","X","|"," "," ",10 
   139 0000013F 200A               
   140 00000141 202020202D2D2D2020-                             db " "," "," "," ","-","-","-"," "," "," ",10,0
   140 0000014A 200A00             
   141                                  
   142 0000014D 202031323334353637-         tableroIzq          db " "," ","1","2","3","4","5","6","7"," ",10
   142 00000156 200A               
   143 00000158 202020205F5F5F2020-                             db " "," "," "," ","_","_","_"," "," "," ",10 
   143 00000161 200A               
   144 00000163 3120207C5858587C20-                             db "1"," "," ","|","X","X","X","|"," "," ",10
   144 0000016C 200A               
   145 0000016E 32205F7C5858587C5F-                             db "2"," ","_","|","X","X","X","|","_"," ",10
   145 00000177 200A               
   146 00000179 337C4F202058585858-                             db "3","|","O"," "," ","X","X","X","X","|",10 
   146 00000182 7C0A               
   147 00000184 347C20202058585858-                             db "4","|"," "," "," ","X","X","X","X","|",10 
   147 0000018D 7C0A               
   148 0000018F 357C204F2058585858-                             db "5","|"," ","O"," ","X","X","X","X","|",10 
   148 00000198 7C0A               
   149 0000019A 36202D7C5858587C2D-                             db "6"," ","-","|","X","X","X","|","-"," ",10 
   149 000001A3 200A               
   150 000001A5 3720207C5858587C20-                             db "7"," "," ","|","X","X","X","|"," "," ",10 
   150 000001AE 200A               
   151 000001B0 202020202D2D2D2020-                             db " "," "," "," ","-","-","-"," "," "," ",10,0
   151 000001B9 200A00             
   152                                  
   153                                      ; Mensajes
   154                                  
   155 000001BC C2A14269656E76656E-         msgBienvenida           db "¬°Bienvenido al juego El Asalto!", 0
   155 000001C5 69646F20616C206A75-
   155 000001CE 65676F20456C204173-
   155 000001D7 616C746F2100       
   156                                  
   157 000001DD C2BF44657365612070-         msgPersonalizarTablero  db "¬øDesea personalizar el tablero? (s/n): ", 0 
   157 000001E6 6572736F6E616C697A-
   157 000001EF 617220656C20746162-
   157 000001F8 6C65726F3F2028732F-
   157 00000201 6E293A2000         
   158                                  
   159 00000206 4F706369C3B36E2069-         msgOpcionInvalida       db "Opci√≥n inv√°lida. Intente de nuevo.", 0
   159 0000020F 6E76C3A16C6964612E-
   159 00000218 20496E74656E746520-
   159 00000221 6465206E7565766F2E-
   159 0000022A 00                 
   160                                      
   161 0000022B 436173696C6C612069-         msgCasillaInvalidaSold  db "Casilla inv√°lida: no hay un soldado en esa casilla. Intente de nuevo.", 0
   161 00000234 6E76C3A16C6964613A-
   161 0000023D 206E6F206861792075-
   161 00000246 6E20736F6C6461646F-
   161 0000024F 20656E206573612063-
   161 00000258 6173696C6C612E2049-
   161 00000261 6E74656E7465206465-
   161 0000026A 206E7565766F2E00   
   162 00000272 4572726F7220656E20-         msgErrorInputSold       db "Error en el formato de entrada del soldado. Intente de nuevo.", 0
   162 0000027B 656C20666F726D6174-
   162 00000284 6F20646520656E7472-
   162 0000028D 6164612064656C2073-
   162 00000296 6F6C6461646F2E2049-
   162 0000029F 6E74656E7465206465-
   162 000002A8 206E7565766F2E00   
   163 000002B0 4E6F20736520707565-         msgCasillaInvMovSold    db "No se puede mover el soldado a esa casilla. Intente de nuevo.", 0
   163 000002B9 6465206D6F76657220-
   163 000002C2 656C20736F6C646164-
   163 000002CB 6F2061206573612063-
   163 000002D4 6173696C6C612E2049-
   163 000002DD 6E74656E7465206465-
   163 000002E6 206E7565766F2E00   
   164                                  
   165 000002EE 436173696C6C612069-         msgCasillaInvalidaOfic  db "Casilla inv√°lida: no hay un oficial en esa casilla. Intente de nuevo.", 0
   165 000002F7 6E76C3A16C6964613A-
   165 00000300 206E6F206861792075-
   165 00000309 6E206F66696369616C-
   165 00000312 20656E206573612063-
   165 0000031B 6173696C6C612E2049-
   165 00000324 6E74656E7465206465-
   165 0000032D 206E7565766F2E00   
   166 00000335 4572726F7220656E20-         msgErrorInputOfic       db "Error en el formato de entrada del oficial. Intente de nuevo.", 0
   166 0000033E 656C20666F726D6174-
   166 00000347 6F20646520656E7472-
   166 00000350 6164612064656C206F-
   166 00000359 66696369616C2E2049-
   166 00000362 6E74656E7465206465-
   166 0000036B 206E7565766F2E00   
   167 00000373 4E6F20736520707565-         msgCasillaInvMovOfic    db "No se puede mover el oficial a esa casilla. Intente de nuevo.", 0
   167 0000037C 6465206D6F76657220-
   167 00000385 656C206F6669636961-
   167 0000038E 6C2061206573612063-
   167 00000397 6173696C6C612E2049-
   167 000003A0 6E74656E7465206465-
   167 000003A9 206E7565766F2E00   
   168                                  
   169 000003B1 C2A153652070756564-         msgPregRotacion         db "¬°Se puede rotar el tablero! Elija una de las opciones (1-4):", 0
   169 000003BA 6520726F7461722065-
   169 000003C3 6C207461626C65726F-
   169 000003CC 2120456C696A612075-
   169 000003D5 6E61206465206C6173-
   169 000003DE 206F7063696F6E6573-
   169 000003E7 2028312D34293A00   
   170 000003EF 312E20526F74617220-         msgRotacionesPosibles   db "1. Rotar a la izquierda", 10
   170 000003F8 61206C6120697A7175-
   170 00000401 69657264610A       
   171 00000407 322E20526F74617220-                                 db "2. Rotar a la derecha", 10
   171 00000410 61206C612064657265-
   171 00000419 6368610A           
   172 0000041D 332E20496E76657274-                                 db "3. Invertir el tablero", 10
   172 00000426 697220656C20746162-
   172 0000042F 6C65726F0A         
   173 00000434 342E204E6F20726F74-                                 db "4. No rotar", 0
   173 0000043D 617200             
   174                                      
   175 00000440 C2A1456C696A616D6F-         msgPersonalizarSimb     db "¬°Elijamos los s√≠mbolos para cada personaje! Escriba UN (1) solo caracter para cada uno.", 0
   175 00000449 73206C6F732073C3AD-
   175 00000452 6D626F6C6F73207061-
   175 0000045B 726120636164612070-
   175 00000464 6572736F6E616A6521-
   175 0000046D 204573637269626120-
   175 00000476 554E2028312920736F-
   175 0000047F 6C6F20636172616374-
   175 00000488 657220706172612063-
   175 00000491 61646120756E6F2E00 
   176 0000049A 53C3AD6D626F6C6F20-         msgSimboloOficiales     db "S√≠mbolo para los oficiales:", 0
   176 000004A3 70617261206C6F7320-
   176 000004AC 6F66696369616C6573-
   176 000004B5 3A00               
   177 000004B7 53C3AD6D626F6C6F20-         msgSimboloSoldados      db "S√≠mbolo para los soldados:", 0
   177 000004C0 70617261206C6F7320-
   177 000004C9 736F6C6461646F733A-
   177 000004D2 00                 
   178                                  
   179 000004D3 C2BF517569C3A96E20-         msgQuienInicia          db "¬øQui√©n inicia el juego: oficiales o soldados? (o/s): ", 0
   179 000004DC 696E6963696120656C-
   179 000004E5 206A7565676F3A206F-
   179 000004EE 66696369616C657320-
   179 000004F7 6F20736F6C6461646F-
   179 00000500 733F20286F2F73293A-
   179 00000509 2000               
   180                                  
   181 0000050B C2A1556E206F666963-         msgOficialRetirado      db "¬°Un oficial ha sido retirado del juego! Se ha olvidado de atrapar a un soldado.", 0
   181 00000514 69616C206861207369-
   181 0000051D 646F20726574697261-
   181 00000526 646F2064656C206A75-
   181 0000052F 65676F212053652068-
   181 00000538 61206F6C7669646164-
   181 00000541 6F2064652061747261-
   181 0000054A 706172206120756E20-
   181 00000553 736F6C6461646F2E00 
   182                                  
   183 0000055C 4F66696369616C2031-         msgOficial1             db "Oficial 1:", 0
   183 00000565 3A00               
   184 00000567 4F66696369616C2032-         msgOficial2             db "Oficial 2:", 0
   184 00000570 3A00               
   185                                  
   186 00000572 4D6F76696D69656E74-         msgCantMovimientos      db "Movimientos totales: %d", 0
   186 0000057B 6F7320746F74616C65-
   186 00000584 733A20256400       
   187 0000058A 2D2048616369612061-         msgCantAdelante         db "- Hacia adelante: %d", 0
   187 00000593 64656C616E74653A20-
   187 0000059C 256400             
   188 0000059F 2D204861636961206C-         msgCantDerecha          db "- Hacia la derecha: %d", 0
   188 000005A8 612064657265636861-
   188 000005B1 3A20256400         
   189 000005B6 2D204861636961206C-         msgCantIzquierda        db "- Hacia la izquierda: %d", 0
   189 000005BF 6120697A7175696572-
   189 000005C8 64613A20256400     
   190 000005CF 2D2048616369612061-         msgCantAtras            db "- Hacia atr√°s: %d", 0
   190 000005D8 7472C3A1733A202564-
   190 000005E1 00                 
   191 000005E2 2D20456E2064696167-         msgCantDiagonal         db "- En diagonal: %d", 0
   191 000005EB 6F6E616C3A20256400 
   192                                  
   193 000005F4 C2A1456C206A756567-         msgJuegoTerminado       db "¬°El juego ha terminado!", 0
   193 000005FD 6F206861207465726D-
   193 00000606 696E61646F2100     
   194 0000060D C2A1456C2067616E61-         msgGanador              db "¬°El ganador es el equipo de los %s!", 10, 0
   194 00000616 646F7220657320656C-
   194 0000061F 2065717569706F2064-
   194 00000628 65206C6F7320257321-
   194 00000631 0A00               
   195 00000633 736F6C6461646F7300          stringSoldados          db "soldados", 0
   196 0000063C 6F66696369616C6573-         stringOficiales         db "oficiales", 0
   196 00000645 00                 
   197                                  
   198 00000646 52617AC3B36E3A2025-         msgRazonGanador         db "Raz√≥n: %s", 0
   198 0000064F 7300               
   199                                  
   200                                      ; Se ha decidido salir de la partida
   201 00000651 536520686120646563-         msgSalidaPartida        db "Se ha decidido salir de la partida. ¬øDesea guardarla? (y/n)", 0
   201 0000065A 696469646F2073616C-
   201 00000663 6972206465206C6120-
   201 0000066C 706172746964612E20-
   201 00000675 C2BF44657365612067-
   201 0000067E 7561726461726C613F-
   201 00000687 2028792F6E2900     
   202 0000068E 6E                          guardadoPartida         db 'n' ; guardar (y), no guardar (n)
   203                                  
   204                                      ; Razones de victoria de soldados
   205 0000068F 6C6F7320736F6C6461-         msgSoldadosFortaleza    db "los soldados han ocupado todos los puntos de la fortaleza.", 0
   205 00000698 646F732068616E206F-
   205 000006A1 63757061646F20746F-
   205 000006AA 646F73206C6F732070-
   205 000006B3 756E746F7320646520-
   205 000006BC 6C6120666F7274616C-
   205 000006C5 657A612E00         
   206 000006CA 6C6F7320736F6C6461-         msgSoldadosRodean       db "los soldados han rodeado a los oficiales.", 0
   206 000006D3 646F732068616E2072-
   206 000006DC 6F646561646F206120-
   206 000006E5 6C6F73206F66696369-
   206 000006EE 616C65732E00       
   207 000006F4 616D626F73206F6669-         msgSoldadosInvalidar    db "ambos oficiales han sido invalidados."
   207 000006FD 6369616C6573206861-
   207 00000706 6E207369646F20696E-
   207 0000070F 76616C696461646F73-
   207 00000718 2E                 
   208                                  
   209                                      ; Razones de victoria de oficiales
   210 00000719 6E6F2071756564616E-         msgOficialesGanan       db "no quedan suficientes soldados para ocupar la fortaleza.", 0
   210 00000722 20737566696369656E-
   210 0000072B 74657320736F6C6461-
   210 00000734 646F73207061726120-
   210 0000073D 6F6375706172206C61-
   210 00000746 20666F7274616C657A-
   210 0000074F 612E00             
   211                                  
   212                                      ; Turnos
   213 00000752 4573207475726E6F20-         msgTurnoSoldados        db "Es turno de los soldados. Decida a qu√© soldado desea mover: (<numFila>-<numColumna>)", 0
   213 0000075B 6465206C6F7320736F-
   213 00000764 6C6461646F732E2044-
   213 0000076D 656369646120612071-
   213 00000776 75C3A920736F6C6461-
   213 0000077F 646F20646573656120-
   213 00000788 6D6F7665723A20283C-
   213 00000791 6E756D46696C613E2D-
   213 0000079A 3C6E756D436F6C756D-
   213 000007A3 6E613E2900         
   214 000007A8 4573207475726E6F20-         msgTurnoOficiales       db "Es turno de los oficiales. Decida a qu√© oficial desea mover: (<numFila>-<numColumna>)", 0
   214 000007B1 6465206C6F73206F66-
   214 000007BA 696369616C65732E20-
   214 000007C3 446563696461206120-
   214 000007CC 7175C3A9206F666963-
   214 000007D5 69616C206465736561-
   214 000007DE 206D6F7665723A2028-
   214 000007E7 3C6E756D46696C613E-
   214 000007F0 2D3C6E756D436F6C75-
   214 000007F9 6D6E613E2900       
   215 000007FF C2BF41207175C3A920-         msgTurnoMovSold         db "¬øA qu√© casilla desea mover el soldado? (<numFila>-<numColumna>)", 0
   215 00000808 636173696C6C612064-
   215 00000811 65736561206D6F7665-
   215 0000081A 7220656C20736F6C64-
   215 00000823 61646F3F20283C6E75-
   215 0000082C 6D46696C613E2D3C6E-
   215 00000835 756D436F6C756D6E61-
   215 0000083E 3E2900             
   216 00000841 C2BF41207175C3A920-         msgTurnoMovOfic         db "¬øA qu√© casilla desea mover el oficial? (<numFila>-<numColumna>)", 0
   216 0000084A 636173696C6C612064-
   216 00000853 65736561206D6F7665-
   216 0000085C 7220656C206F666963-
   216 00000865 69616C3F20283C6E75-
   216 0000086E 6D46696C613E2D3C6E-
   216 00000877 756D436F6C756D6E61-
   216 00000880 3E2900             
   217                                  
   218 00000883 556E206F6669636961-         msgCapturaSold          db "Un oficial ha capturado a un soldado.", 0
   218 0000088C 6C2068612063617074-
   218 00000895 757261646F20612075-
   218 0000089E 6E20736F6C6461646F-
   218 000008A7 2E00               
   219 000008A9 C2A1556E206F666963-         msgInvalidOfic          db "¬°Un oficial ha sido invalidado! No ha capturado a un soldado regalado.", 0
   219 000008B2 69616C206861207369-
   219 000008BB 646F20696E76616C69-
   219 000008C4 6461646F21204E6F20-
   219 000008CD 686120636170747572-
   219 000008D6 61646F206120756E20-
   219 000008DF 736F6C6461646F2072-
   219 000008E8 6567616C61646F2E00 
   220                                      
   221                                      ; Contadores
   222                                  
   223 000008F1 00                          movimientosOfic1        db 0
   224 000008F2 00                          movimientosOfic2        db 0
   225                                      
   226 000008F3 00                          movOfic1Adelante        db 0
   227 000008F4 00                          movOfic1Derecha         db 0
   228 000008F5 00                          movOfic1Izquierda       db 0
   229 000008F6 00                          movOfic1Atras           db 0
   230 000008F7 00                          movOfic1Diagonal        db 0
   231                                  
   232 000008F8 00                          movOfic2Adelante        db 0
   233 000008F9 00                          movOfic2Derecha         db 0
   234 000008FA 00                          movOfic2Izquierda       db 0
   235 000008FB 00                          movOfic2Atras           db 0
   236 000008FC 00                          movOfic2Diagonal        db 0
   237                                  
   238 000008FD 00                          cantSoldCapturados      db 0
   239 000008FE 00                          cantOficInvalidados     db 0
   240                                  
   241 000008FF 4F00                        simboloOficiales        db 'O', 0
   242 00000901 5800                        simboloSoldados         db 'X', 0
   243                                      
   244 00000903 04                          orientacionTablero      db  4       ; 4 -> no rotar (default) 
   245 00000904 73                          piezaDeInicio           db 's'      ; soldados (s), oficiales (o)
   246                                  
   247                                      ; Comandos 
   248 00000905 636C65617200                cmdLimpiarPantalla      db "clear", 0
   249                                  
   250                                      ; Formatos
   251 0000090B 257500                      formatoAtoi             db "%u", 0
   252                                  
   253                                  section .bss
   254                                  
   255 00000000 ????????                    eleccionRotar       resd 1  ; Variable pivote para la elecci√≥n de rotar el tablero
   256 00000004 ????????                    rotacionElegida     resd 1  ; Variable pivote para la rotaci√≥n del tablero
   257                                  
   258 00000008 ????                        simbOficElegido     resb 2  ; Variable pivote para el s√≠mbolo de los oficiales
   259 0000000A ????                        simbSoldElegido     resb 2  ; Variable pivote para el s√≠mbolo de los soldados
   260                                  
   261 0000000C ????????                    piezaIniElegida     resd 1  ; Variable pivote para la pieza que inicia
   262                                  
   263 00000010 <res 74h>                   tableroEnJuego      resb 116 ; Tablero en juego
   264                                  
   265 00000084 ????????                    soldadoElegido      resb 4  ; Fila y columna del soldado a mover
   266 00000088 ????????                    casillaMovSold      resb 4  ; Fila y columna de la casilla de destino del soldado
   267                                  
   268 0000008C ????????                    oficialElegido      resb 4  ; Fila y columna del oficial a mover
   269 00000090 ????????                    casillaMovOfic      resb 4  ; Fila y columna de la casilla de destino del oficial
   270                                  
   271 00000094 ????????????????            fila                resq 1
   272 0000009C ????????????????            columna             resq 1   
   273 000000A4 ????????????????            desplazCasOrig      resq 1
   274                                  
   275 000000AC ????????????????            filaAMover          resq 1
   276 000000B4 ????????????????            columnaAMover       resq 1
   277 000000BC ????????????????            desplazCasAMover    resq 1
   278                                  
   279 000000C4 ????????????????            filaAux             resq 1
   280 000000CC ????????????????            columnaAux          resq 1
   281 000000D4 ????????????????            desplazAux       resq 1
   282                                      
   283 000000DC <res 47h>                   msgErrorEspecificoSold  resb 71 ; M√°ximo largo de mensaje de error para soldados
   284 00000123 <res 47h>                   msgErrorEspecificoOfic  resb 71 ; M√°ximo largo de mensaje de error para oficiales
   285                                  
   286 0000016A <res 47h>                   msgErrorEspecificoSoldMov   resb 71 ; M√°ximo largo de mensaje de error para movimientos de soldados
   287 000001B1 <res 47h>                   msgErrorEspecificoOficMov   resb 71 ; M√°ximo largo de mensaje de error para movimientos de oficiales
   288                                  
   289                                  section .text
   290                                      global main
   291                                  
   292                                  main:
   293                                  
   294                                      mPuts msgBienvenida
     2 00000000 48BF-               <1>  mov rdi, %1
     2 00000002 [BC01000000000000]  <1>
     3 0000000A 4883EC08            <1>  sub rsp, 8
     4 0000000E E8(00000000)        <1>  call puts
     5 00000013 4883C408            <1>  add rsp, 8
   295                                  
   296                                      ; Espacio de personalizaci√≥n del tablero
   297                                      personalizar:
   298 00000017 C70425[00000000]00-             mov dword[eleccionRotar], ''    ; vaciar variable
   298 0000001F 000000             
   299                                          mPuts msgPersonalizarTablero
     2 00000022 48BF-               <1>  mov rdi, %1
     2 00000024 [DD01000000000000]  <1>
     3 0000002C 4883EC08            <1>  sub rsp, 8
     4 00000030 E8(00000000)        <1>  call puts
     5 00000035 4883C408            <1>  add rsp, 8
   300                                          mGets eleccionRotar
    17 00000039 48BF-               <1>  mov rdi, %1
    17 0000003B [0000000000000000]  <1>
    18 00000043 4883EC08            <1>  sub rsp, 8
    19 00000047 E8(00000000)        <1>  call gets
    20 0000004C 4883C408            <1>  add rsp, 8
   301                                  
   302 00000050 833C25[00000000]6E              cmp dword[eleccionRotar], 'n' 
   303 00000058 0F8408020000                    je dejarTableroOrig
   304 0000005E 833C25[00000000]73              cmp dword[eleccionRotar], 's'
   305 00000066 7419                            je personalizarRotacion
   306                                  
   307                                          mErrorJump msgOpcionInvalida, personalizar
    45                              <1>  mPuts %1
     2 00000068 48BF-               <2>  mov rdi, %1
     2 0000006A [0602000000000000]  <2>
     3 00000072 4883EC08            <2>  sub rsp, 8
     4 00000076 E8(00000000)        <2>  call puts
     5 0000007B 4883C408            <2>  add rsp, 8
    46 0000007F EB96                <1>  jmp %2
   308                                  
   309                                      ; En caso de querer personalizar, se debe elegir la rotaci√≥n
   310                                      personalizarRotacion:
   311                                          mPuts msgPregRotacion
     2 00000081 48BF-               <1>  mov rdi, %1
     2 00000083 [B103000000000000]  <1>
     3 0000008B 4883EC08            <1>  sub rsp, 8
     4 0000008F E8(00000000)        <1>  call puts
     5 00000094 4883C408            <1>  add rsp, 8
   312                                          mPuts msgRotacionesPosibles
     2 00000098 48BF-               <1>  mov rdi, %1
     2 0000009A [EF03000000000000]  <1>
     3 000000A2 4883EC08            <1>  sub rsp, 8
     4 000000A6 E8(00000000)        <1>  call puts
     5 000000AB 4883C408            <1>  add rsp, 8
   313                                  
   314 000000AF C70425[04000000]00-             mov dword[rotacionElegida], '' ; limpiar variable
   314 000000B7 000000             
   315                                          mGets rotacionElegida
    17 000000BA 48BF-               <1>  mov rdi, %1
    17 000000BC [0400000000000000]  <1>
    18 000000C4 4883EC08            <1>  sub rsp, 8
    19 000000C8 E8(00000000)        <1>  call gets
    20 000000CD 4883C408            <1>  add rsp, 8
   316                                  
   317                                          mMov orientacionTablero, rotacionElegida, 1
    31 000000D1 B901000000          <1>  mov rcx, %3
    32 000000D6 488D3425[04000000]  <1>  lea rsi, [%2]
    33 000000DE 488D3C25[03090000]  <1>  lea rdi, [%1]
    34 000000E6 F3A4                <1>  rep movsb
   318                                          
   319 000000E8 833C25[04000000]31              cmp dword[rotacionElegida], '1'
   320 000000F0 7C0F                            jl invalidaRotacion
   321 000000F2 833C25[04000000]34              cmp dword[rotacionElegida], '4'
   322 000000FA 7F05                            jg invalidaRotacion
   323                                  
   324 000000FC E9BF000000                      jmp rotarTablero
   325                                  
   326                                      invalidaRotacion:
   327                                          mErrorJump msgOpcionInvalida, personalizarRotacion
    45                              <1>  mPuts %1
     2 00000101 48BF-               <2>  mov rdi, %1
     2 00000103 [0602000000000000]  <2>
     3 0000010B 4883EC08            <2>  sub rsp, 8
     4 0000010F E8(00000000)        <2>  call puts
     5 00000114 4883C408            <2>  add rsp, 8
    46 00000118 E964FFFFFF          <1>  jmp %2
   328                                  
   329                                      ; Luego de elegir la rotaci√≥n, se debe personalizar los s√≠mbolos
   330                                      personalizarSimbolos:
   331                                          mPuts msgPersonalizarSimb
     2 0000011D 48BF-               <1>  mov rdi, %1
     2 0000011F [4004000000000000]  <1>
     3 00000127 4883EC08            <1>  sub rsp, 8
     4 0000012B E8(00000000)        <1>  call puts
     5 00000130 4883C408            <1>  add rsp, 8
   332                                  
   333 00000134 E8C2020000                      call setearSimbSoldados
   334 00000139 E84B030000                      call setearSimbOficiales
   335                                          
   336                                      ; Luego de personalizar los s√≠mbolos, se debe elegir qui√©n inicia la partida
   337                                      personalizarQuienInicia:
   338 0000013E C70425[0C000000]00-             mov dword[piezaIniElegida], ''    ; vaciar variable
   338 00000146 000000             
   339                                          mPuts msgQuienInicia
     2 00000149 48BF-               <1>  mov rdi, %1
     2 0000014B [D304000000000000]  <1>
     3 00000153 4883EC08            <1>  sub rsp, 8
     4 00000157 E8(00000000)        <1>  call puts
     5 0000015C 4883C408            <1>  add rsp, 8
   340                                          mGets piezaIniElegida
    17 00000160 48BF-               <1>  mov rdi, %1
    17 00000162 [0C00000000000000]  <1>
    18 0000016A 4883EC08            <1>  sub rsp, 8
    19 0000016E E8(00000000)        <1>  call gets
    20 00000173 4883C408            <1>  add rsp, 8
   341                                  
   342 00000177 833C25[0C000000]6F              cmp dword[piezaIniElegida], 'o' 
   343 0000017F 7423                            je setearPiezaInicio
   344 00000181 833C25[0C000000]73              cmp dword[piezaIniElegida], 's'
   345 00000189 7419                            je setearPiezaInicio
   346                                  
   347                                          mErrorJump msgOpcionInvalida, personalizarQuienInicia
    45                              <1>  mPuts %1
     2 0000018B 48BF-               <2>  mov rdi, %1
     2 0000018D [0602000000000000]  <2>
     3 00000195 4883EC08            <2>  sub rsp, 8
     4 00000199 E8(00000000)        <2>  call puts
     5 0000019E 4883C408            <2>  add rsp, 8
    46 000001A2 EB9A                <1>  jmp %2
   348                                  
   349                                          setearPiezaInicio:
   350                                              mMov piezaDeInicio, piezaIniElegida, 1
    31 000001A4 B901000000          <1>  mov rcx, %3
    32 000001A9 488D3425[0C000000]  <1>  lea rsi, [%2]
    33 000001B1 488D3C25[04090000]  <1>  lea rdi, [%1]
    34 000001B9 F3A4                <1>  rep movsb
   351 000001BB E98E000000                          jmp comenzarPorInicio
   352                                  
   353                                  ; --------------------------------------------------------------------------------------------
   354                                  ; RUTINA PARA ROTAR EL TABLERO EN BASE A LA ELECCI√ìN DEL USUARIO
   355                                  ; --------------------------------------------------------------------------------------------
   356                                  
   357                                  rotarTablero:
   358                                      ; Se debe mostrar el tablero (en la orientacion indicada y con los simbolos indicados), 
   359                                      ; y se debe mostrar el mensaje de turno en base a lo que haya personalizado el usuario.
   360 000001C0 803C25[03090000]31              cmp byte[orientacionTablero], '1'
   361 000001C8 7430                            je rotarIzquierda
   362 000001CA 803C25[03090000]32              cmp byte[orientacionTablero], '2'
   363 000001D2 7442                            je rotarDerecha
   364 000001D4 803C25[03090000]33              cmp byte[orientacionTablero], '3'
   365 000001DC 7454                            je rotarInvertir
   366                                  
   367                                          mMov tableroEnJuego, tableroOrig, 116
    31 000001DE B974000000          <1>  mov rcx, %3
    32 000001E3 488D3425[00000000]  <1>  lea rsi, [%2]
    33 000001EB 488D3C25[10000000]  <1>  lea rdi, [%1]
    34 000001F3 F3A4                <1>  rep movsb
   368 000001F5 E923FFFFFF                      jmp personalizarSimbolos
   369                                  
   370                                      rotarIzquierda:
   371                                          mMov tableroEnJuego, tableroIzq, 116
    31 000001FA B974000000          <1>  mov rcx, %3
    32 000001FF 488D3425[4D010000]  <1>  lea rsi, [%2]
    33 00000207 488D3C25[10000000]  <1>  lea rdi, [%1]
    34 0000020F F3A4                <1>  rep movsb
   372 00000211 E907FFFFFF                      jmp personalizarSimbolos
   373                                      
   374                                      rotarDerecha:
   375                                          mMov tableroEnJuego, tableroDer, 116
    31 00000216 B974000000          <1>  mov rcx, %3
    32 0000021B 488D3425[DE000000]  <1>  lea rsi, [%2]
    33 00000223 488D3C25[10000000]  <1>  lea rdi, [%1]
    34 0000022B F3A4                <1>  rep movsb
   376 0000022D E9EBFEFFFF                      jmp personalizarSimbolos
   377                                  
   378                                      rotarInvertir:
   379                                          mMov tableroEnJuego, tableroInv, 116
    31 00000232 B974000000          <1>  mov rcx, %3
    32 00000237 488D3425[6F000000]  <1>  lea rsi, [%2]
    33 0000023F 488D3C25[10000000]  <1>  lea rdi, [%1]
    34 00000247 F3A4                <1>  rep movsb
   380 00000249 E9CFFEFFFF                      jmp personalizarSimbolos
   381                                  
   382                                  ; --------------------------------------------------------------------------------------------
   383                                  ; RUTINA PARA COMENZAR EL JUEGO -> Se comienza desde el jugador elegido (o el default)
   384                                  ; --------------------------------------------------------------------------------------------
   385                                  
   386                                  comenzarPorInicio:
   387 0000024E 803C25[04090000]73          cmp byte[piezaDeInicio], 's'
   388 00000256 7425                        je loopMovimientos
   389 00000258 803C25[04090000]6F          cmp byte[piezaDeInicio], 'o'
   390 00000260 0F84D6000000                je turnoOficiales
   391                                  
   392                                  
   393                                  ; En caso de no haber personalizado el tablero, se debe dejar el tablero original
   394                                  dejarTableroOrig:
   395                                      mMov tableroEnJuego, tableroOrig, 116
    31 00000266 B974000000          <1>  mov rcx, %3
    32 0000026B 488D3425[00000000]  <1>  lea rsi, [%2]
    33 00000273 488D3C25[10000000]  <1>  lea rdi, [%1]
    34 0000027B F3A4                <1>  rep movsb
   396                                  
   397                                  ; COMIENZA EL JUEGO
   398                                  loopMovimientos:; mostrarTablero, mostrarTurno, realizarMovimiento, verificarFinJuego
   399 0000027D C60425[DC000000]00          mov byte[msgErrorEspecificoSold], 0
   400                                      turnoSoldados:
   401 00000285 C60425[84000000]30              mov byte [soldadoElegido], '0'
   402                                      
   403                                          mCommand cmdLimpiarPantalla ; Limpia la pantalla para mostrar el tablero
    24 0000028D 48BF-               <1>  mov rdi, %1
    24 0000028F [0509000000000000]  <1>
    25 00000297 4883EC08            <1>  sub rsp, 8
    26 0000029B E8(00000000)        <1>  call system
    27 000002A0 4883C408            <1>  add rsp, 8
   404                                  
   405                                          mPuts tableroEnJuego ; Muestro el tablero
     2 000002A4 48BF-               <1>  mov rdi, %1
     2 000002A6 [1000000000000000]  <1>
     3 000002AE 4883EC08            <1>  sub rsp, 8
     4 000002B2 E8(00000000)        <1>  call puts
     5 000002B7 4883C408            <1>  add rsp, 8
   406                                  
   407 000002BB 803C25[DC000000]00              cmp byte[msgErrorEspecificoSold], 0
   408 000002C3 0F85AD030000                    jne imprimirErrorSold
   409                                  
   410                                          todoOkSold:
   411                                  
   412                                              mPuts msgTurnoSoldados      ; Muestra el mensaje de seleccionar ficha a mover
     2 000002C9 48BF-               <1>  mov rdi, %1
     2 000002CB [5207000000000000]  <1>
     3 000002D3 4883EC08            <1>  sub rsp, 8
     4 000002D7 E8(00000000)        <1>  call puts
     5 000002DC 4883C408            <1>  add rsp, 8
   413                                              mGets soldadoElegido        ; Obtiene la ficha a mover
    17 000002E0 48BF-               <1>  mov rdi, %1
    17 000002E2 [8400000000000000]  <1>
    18 000002EA 4883EC08            <1>  sub rsp, 8
    19 000002EE E8(00000000)        <1>  call gets
    20 000002F3 4883C408            <1>  add rsp, 8
   414                                              
   415 000002F7 E91E020000                          jmp verificarFichaSold ; Verifica si la ficha elegida es valida
   416                                  
   417                                              casillaAMoverseSold:
   418                                                  
   419                                                  mPuts msgTurnoMovSold   ; Muestra el mensaje de seleccionar casilla a mover
     2 000002FC 48BF-               <1>  mov rdi, %1
     2 000002FE [FF07000000000000]  <1>
     3 00000306 4883EC08            <1>  sub rsp, 8
     4 0000030A E8(00000000)        <1>  call puts
     5 0000030F 4883C408            <1>  add rsp, 8
   420                                                  mGets casillaMovSold    ; Obtiene la casilla a mover
    17 00000313 48BF-               <1>  mov rdi, %1
    17 00000315 [8800000000000000]  <1>
    18 0000031D 4883EC08            <1>  sub rsp, 8
    19 00000321 E8(00000000)        <1>  call gets
    20 00000326 4883C408            <1>  add rsp, 8
   421                                  
   422 0000032A E9E1040000                              jmp verificarMovimientoSold ; Verifica si el movimiento es valido
   423                                  
   424                                                  moverSoldado:
   425 0000032F E81C0B0000                                  call realizarMovimientoSold ; Realiza el movimiento
   426                                  
   427 00000334 C60425[23010000]00          mov byte[msgErrorEspecificoOfic], 0
   428                                      turnoOficiales:
   429 0000033C C60425[8C000000]30              mov byte[oficialElegido], '0'
   430                                          
   431                                          mCommand cmdLimpiarPantalla ; Limpia la pantalla para mostrar el tablero
    24 00000344 48BF-               <1>  mov rdi, %1
    24 00000346 [0509000000000000]  <1>
    25 0000034E 4883EC08            <1>  sub rsp, 8
    26 00000352 E8(00000000)        <1>  call system
    27 00000357 4883C408            <1>  add rsp, 8
   432                                  
   433                                          mPuts tableroEnJuego ; Muestra el tablero
     2 0000035B 48BF-               <1>  mov rdi, %1
     2 0000035D [1000000000000000]  <1>
     3 00000365 4883EC08            <1>  sub rsp, 8
     4 00000369 E8(00000000)        <1>  call puts
     5 0000036E 4883C408            <1>  add rsp, 8
   434                                  
   435 00000372 803C25[23010000]00              cmp byte[msgErrorEspecificoOfic], 0
   436 0000037A 0F8574040000                    jne imprimirErrorOfic
   437                                  
   438                                          todoOkOfic:
   439                                  
   440                                              mPuts msgTurnoOficiales ; Muestra el mensaje de seleccionar ficha a mover
     2 00000380 48BF-               <1>  mov rdi, %1
     2 00000382 [A807000000000000]  <1>
     3 0000038A 4883EC08            <1>  sub rsp, 8
     4 0000038E E8(00000000)        <1>  call puts
     5 00000393 4883C408            <1>  add rsp, 8
   441                                              mGets oficialElegido    ; Obtiene la ficha a mover
    17 00000397 48BF-               <1>  mov rdi, %1
    17 00000399 [8C00000000000000]  <1>
    18 000003A1 4883EC08            <1>  sub rsp, 8
    19 000003A5 E8(00000000)        <1>  call gets
    20 000003AA 4883C408            <1>  add rsp, 8
   442                                  
   443 000003AE E9DF020000                          jmp verificarFichaOfic ; Verifica si la ficha elegida es valida
   444                                  
   445                                              casillaAMoverseOfic:
   446                                  
   447                                                  mPuts msgTurnoMovOfic   ; Muestra el mensaje de seleccionar casilla a mover
     2 000003B3 48BF-               <1>  mov rdi, %1
     2 000003B5 [4108000000000000]  <1>
     3 000003BD 4883EC08            <1>  sub rsp, 8
     4 000003C1 E8(00000000)        <1>  call puts
     5 000003C6 4883C408            <1>  add rsp, 8
   448                                                  mGets casillaMovOfic    ; Obtiene la casilla a mover
    17 000003CA 48BF-               <1>  mov rdi, %1
    17 000003CC [9000000000000000]  <1>
    18 000003D4 4883EC08            <1>  sub rsp, 8
    19 000003D8 E8(00000000)        <1>  call gets
    20 000003DD 4883C408            <1>  add rsp, 8
   449                                                  
   450 000003E1 E9C4070000                              jmp verificarMovimientoOfic ; Verifica si el movimiento es valido
   451                                  
   452                                                  moverOficial:
   453 000003E6 E8930A0000                                  call realizarMovimientoOfic ; Realiza el movimiento
   454 000003EB E98DFEFFFF                                  jmp loopMovimientos
   455                                                  
   456                                                  capturar:
   457 000003F0 E80D0E0000                                  call capturarSoldado ; Captura soldado
   458                                                      
   459                                                  ; Repetir en loop
   460 000003F5 E983FEFFFF                              jmp loopMovimientos
   461                                  
   462 000003FA C3                          ret
   463                                      ; Aqu√≠ termina el main !!!
   464                                  
   465                                  
   466                                  ; --------------------------------------------------------------------------------------------
   467                                  ; RUTINAS PARA SETEAR LOS S√çMBOLOS PERSONALIZADOS DE SOLDADOS Y OFICIALES
   468                                  ; --------------------------------------------------------------------------------------------
   469                                  
   470                                  setearSimbSoldados:
   471                                      mPuts msgSimboloSoldados
     2 000003FB 48BF-               <1>  mov rdi, %1
     2 000003FD [B704000000000000]  <1>
     3 00000405 4883EC08            <1>  sub rsp, 8
     4 00000409 E8(00000000)        <1>  call puts
     5 0000040E 4883C408            <1>  add rsp, 8
   472 00000412 C60425[0A000000]00          mov byte[simbSoldElegido], ''
   473                                      mGets simbSoldElegido
    17 0000041A 48BF-               <1>  mov rdi, %1
    17 0000041C [0A00000000000000]  <1>
    18 00000424 4883EC08            <1>  sub rsp, 8
    19 00000428 E8(00000000)        <1>  call gets
    20 0000042D 4883C408            <1>  add rsp, 8
   474                                  
   475 00000431 803C25[0A000000]20          cmp byte[simbSoldElegido], ' '
   476 00000439 7432                        je errSeteoSoldado
   477 0000043B 803C25[0A000000]00          cmp byte[simbSoldElegido], ''
   478 00000443 7428                        je errSeteoSoldado
   479                                  
   480 00000445 8A0425[0B000000]            mov al, byte[simbSoldElegido+1]
   481 0000044C 3C00                        cmp al, 0
   482 0000044E 751D                        jne errSeteoSoldado
   483                                  
   484                                      mMov simboloSoldados, simbSoldElegido, 1
    31 00000450 B901000000          <1>  mov rcx, %3
    32 00000455 488D3425[0A000000]  <1>  lea rsi, [%2]
    33 0000045D 488D3C25[01090000]  <1>  lea rdi, [%1]
    34 00000465 F3A4                <1>  rep movsb
   485                                  
   486 00000467 E8400A0000                  call cambiarTableroSoldNuevo
   487                                  
   488 0000046C C3                          ret
   489                                  
   490                                      errSeteoSoldado:
   491                                          mErrorJump msgOpcionInvalida, setearSimbSoldados
    45                              <1>  mPuts %1
     2 0000046D 48BF-               <2>  mov rdi, %1
     2 0000046F [0602000000000000]  <2>
     3 00000477 4883EC08            <2>  sub rsp, 8
     4 0000047B E8(00000000)        <2>  call puts
     5 00000480 4883C408            <2>  add rsp, 8
    46 00000484 E972FFFFFF          <1>  jmp %2
   492                                  
   493                                  setearSimbOficiales:
   494                                      mPuts msgSimboloOficiales
     2 00000489 48BF-               <1>  mov rdi, %1
     2 0000048B [9A04000000000000]  <1>
     3 00000493 4883EC08            <1>  sub rsp, 8
     4 00000497 E8(00000000)        <1>  call puts
     5 0000049C 4883C408            <1>  add rsp, 8
   495 000004A0 C70425[08000000]00-         mov dword[simbOficElegido], ''
   495 000004A8 000000             
   496                                      mGets simbOficElegido
    17 000004AB 48BF-               <1>  mov rdi, %1
    17 000004AD [0800000000000000]  <1>
    18 000004B5 4883EC08            <1>  sub rsp, 8
    19 000004B9 E8(00000000)        <1>  call gets
    20 000004BE 4883C408            <1>  add rsp, 8
   497                                  
   498 000004C2 803C25[08000000]20          cmp byte[simbOficElegido], ' '
   499 000004CA 7432                        je errSeteoOficial
   500 000004CC 803C25[08000000]00          cmp byte[simbOficElegido], ''
   501 000004D4 7428                        je errSeteoOficial
   502                                  
   503 000004D6 8A0425[09000000]            mov al, byte[simbOficElegido+1]
   504 000004DD 3C00                        cmp al, 0
   505 000004DF 751D                        jne errSeteoOficial
   506                                  
   507                                      mMov simboloOficiales, simbOficElegido, 1
    31 000004E1 B901000000          <1>  mov rcx, %3
    32 000004E6 488D3425[08000000]  <1>  lea rsi, [%2]
    33 000004EE 488D3C25[FF080000]  <1>  lea rdi, [%1]
    34 000004F6 F3A4                <1>  rep movsb
   508                                  
   509 000004F8 E8DD090000                  call cambiarTableroOficNuevo
   510                                  
   511 000004FD C3                          ret
   512                                  
   513                                      errSeteoOficial:
   514                                          mPuts msgOpcionInvalida
     2 000004FE 48BF-               <1>  mov rdi, %1
     2 00000500 [0602000000000000]  <1>
     3 00000508 4883EC08            <1>  sub rsp, 8
     4 0000050C E8(00000000)        <1>  call puts
     5 00000511 4883C408            <1>  add rsp, 8
   515 00000515 E96FFFFFFF                      jmp setearSimbOficiales
   516                                  
   517                                  ; --------------------------------------------------------------------------------------------
   518                                  ; VERIFICACIONES DE PIEZAS ORIGINALES A MOVER PARA SOLDADOS Y OFICIALES
   519                                  ; --------------------------------------------------------------------------------------------
   520                                  
   521                                  verificarFichaSold:
   522 0000051A 8A0425[84000000]            mov al, byte[soldadoElegido] ; Numero de fila
   523                                      
   524 00000521 3C31                        cmp al, '1'
   525 00000523 0F8C05010000                jl errorInputSold
   526 00000529 3C37                        cmp al, '7'
   527 0000052B 0F8FFD000000                jg errorInputSold
   528                                  
   529 00000531 48C70425[94000000]-         mov qword[fila], 0
   529 00000539 00000000           
   530                                      mSscanf byte[soldadoElegido], formatoAtoi, fila
    69 0000053D 488D3C25[84000000]  <1>  lea rdi, %1
    70 00000545 48BE-               <1>  mov rsi, %2
    70 00000547 [0B09000000000000]  <1>
    71 0000054F 48BA-               <1>  mov rdx, %3
    71 00000551 [9400000000000000]  <1>
    72 00000559 4883EC08            <1>  sub rsp, 8
    73 0000055D E8(00000000)        <1>  call sscanf
    74 00000562 4883C408            <1>  add rsp, 8
   531                                  
   532 00000566 4883F801                    cmp rax, 1
   533 0000056A 0F8CBE000000                jl errorInputSold
   534                                  
   535 00000570 8A0425[85000000]            mov al, byte[soldadoElegido+1] ; Caracter '-'
   536 00000577 3C2D                        cmp al, '-'
   537 00000579 0F85AF000000                jne errorInputSold
   538                                      
   539 0000057F 8A0425[86000000]            mov al, byte[soldadoElegido+2] ; Numero de columna
   540 00000586 3C31                        cmp al, '1'
   541 00000588 0F8CA0000000                jl errorInputSold
   542 0000058E 3C37                        cmp al, '7'
   543 00000590 0F8F98000000                jg errorInputSold
   544                                  
   545 00000596 48C70425[9C000000]-         mov qword[columna], 0
   545 0000059E 00000000           
   546                                      mSscanf byte[soldadoElegido+2], formatoAtoi, columna
    69 000005A2 488D3C25[86000000]  <1>  lea rdi, %1
    70 000005AA 48BE-               <1>  mov rsi, %2
    70 000005AC [0B09000000000000]  <1>
    71 000005B4 48BA-               <1>  mov rdx, %3
    71 000005B6 [9C00000000000000]  <1>
    72 000005BE 4883EC08            <1>  sub rsp, 8
    73 000005C2 E8(00000000)        <1>  call sscanf
    74 000005C7 4883C408            <1>  add rsp, 8
   547                                  
   548 000005CB 4883F801                    cmp rax, 1
   549 000005CF 7C5D                        jl errorInputSold
   550                                  
   551 000005D1 8A0425[87000000]            mov al, byte[soldadoElegido+3] ; Caracter nulo
   552 000005D8 3C00                        cmp al, 0
   553 000005DA 7552                        jne errorInputSold
   554                                  
   555                                      ; Calculamos desplazamiento en tablero
   556                                      mCalcDesplaz [fila], [columna], qword[desplazCasOrig]
    86 000005DC 488B3C25[94000000]  <1>  mov rdi, %1
    87 000005E4 488B3425[9C000000]  <1>  mov rsi, %2
    88 000005EC E849080000          <1>  call calcularDesplazamiento
    89 000005F1 48890425[A4000000]  <1>  mov %3, rax
   557 000005F9 488B1C25[A4000000]          mov rbx, qword[desplazCasOrig]
   558                                      
   559 00000601 B800000000                  mov rax,0
   560 00000606 BA00000000                  mov rdx, 0
   561                                  
   562 0000060B 8A93[10000000]              mov dl, byte[tableroEnJuego+rbx]
   563 00000611 8A0425[01090000]            mov al, [simboloSoldados]
   564                                  
   565 00000618 38C2                        cmp dl, al
   566 0000061A 7536                        jne errorCasillaInvalidaSold
   567                                      
   568 0000061C B800000000                  mov rax, 0
   569 00000621 48890425[DC000000]          mov [msgErrorEspecificoSold], rax
   570 00000629 E9CEFCFFFF                  jmp casillaAMoverseSold
   571                                  
   572                                      errorInputSold:
   573 0000062E 488B0425[72020000]              mov rax, [msgErrorInputSold]
   574                                          mMov msgErrorEspecificoSold, msgErrorInputSold, 61
    31 00000636 B93D000000          <1>  mov rcx, %3
    32 0000063B 488D3425[72020000]  <1>  lea rsi, [%2]
    33 00000643 488D3C25[DC000000]  <1>  lea rdi, [%1]
    34 0000064B F3A4                <1>  rep movsb
   575 0000064D E933FCFFFF                      jmp turnoSoldados
   576                                  
   577                                      errorCasillaInvalidaSold:
   578 00000652 488B0425[2B020000]              mov rax, [msgCasillaInvalidaSold]
   579                                          mMov msgErrorEspecificoSold, msgCasillaInvalidaSold, 71
    31 0000065A B947000000          <1>  mov rcx, %3
    32 0000065F 488D3425[2B020000]  <1>  lea rsi, [%2]
    33 00000667 488D3C25[DC000000]  <1>  lea rdi, [%1]
    34 0000066F F3A4                <1>  rep movsb
   580 00000671 E90FFCFFFF                      jmp turnoSoldados
   581                                  
   582                                      imprimirErrorSold:
   583                                          mPuts msgErrorEspecificoSold
     2 00000676 48BF-               <1>  mov rdi, %1
     2 00000678 [DC00000000000000]  <1>
     3 00000680 4883EC08            <1>  sub rsp, 8
     4 00000684 E8(00000000)        <1>  call puts
     5 00000689 4883C408            <1>  add rsp, 8
   584 0000068D E937FCFFFF                      jmp todoOkSold
   585                                      
   586                                  
   587                                  verificarFichaOfic:
   588 00000692 8A0C25[8C000000]            mov cl, byte[oficialElegido] ; Numero de fila
   589                                      
   590 00000699 80F931                      cmp cl, '1'
   591 0000069C 0F8C0A010000                jl errorInputOfic
   592 000006A2 80F937                      cmp cl, '7'
   593 000006A5 0F8F01010000                jg errorInputOfic
   594                                      
   595 000006AB 48C70425[94000000]-         mov qword[fila], 0
   595 000006B3 00000000           
   596                                      mSscanf byte[oficialElegido], formatoAtoi, fila
    69 000006B7 488D3C25[8C000000]  <1>  lea rdi, %1
    70 000006BF 48BE-               <1>  mov rsi, %2
    70 000006C1 [0B09000000000000]  <1>
    71 000006C9 48BA-               <1>  mov rdx, %3
    71 000006CB [9400000000000000]  <1>
    72 000006D3 4883EC08            <1>  sub rsp, 8
    73 000006D7 E8(00000000)        <1>  call sscanf
    74 000006DC 4883C408            <1>  add rsp, 8
   597                                  
   598 000006E0 4883F801                    cmp rax, 1
   599 000006E4 0F8CC2000000                jl errorInputOfic
   600                                  
   601 000006EA 8A0C25[8D000000]            mov cl, byte[oficialElegido+1] ; Caracter '-'
   602 000006F1 80F92D                      cmp cl, '-'
   603 000006F4 0F85B2000000                jne errorInputOfic
   604                                      
   605 000006FA 8A0C25[8E000000]            mov cl, byte[oficialElegido+2] ; Numero de columna
   606 00000701 80F931                      cmp cl, '1'
   607 00000704 0F8CA2000000                jl errorInputOfic
   608 0000070A 80F937                      cmp cl, '7'
   609 0000070D 0F8F99000000                jg errorInputOfic
   610                                  
   611 00000713 48C70425[9C000000]-         mov qword[columna], 0
   611 0000071B 00000000           
   612                                      mSscanf byte[oficialElegido+2], formatoAtoi, columna
    69 0000071F 488D3C25[8E000000]  <1>  lea rdi, %1
    70 00000727 48BE-               <1>  mov rsi, %2
    70 00000729 [0B09000000000000]  <1>
    71 00000731 48BA-               <1>  mov rdx, %3
    71 00000733 [9C00000000000000]  <1>
    72 0000073B 4883EC08            <1>  sub rsp, 8
    73 0000073F E8(00000000)        <1>  call sscanf
    74 00000744 4883C408            <1>  add rsp, 8
   613                                  
   614 00000748 4883F801                    cmp rax, 1
   615 0000074C 7C5E                        jl errorInputOfic
   616                                  
   617 0000074E 8A0C25[8F000000]            mov cl, byte[oficialElegido+3] ; Caracter nulo
   618 00000755 80F900                      cmp cl, 0
   619 00000758 7552                        jne errorInputOfic
   620                                  
   621                                      ; Calculamos desplazamiento en tablero
   622                                      mCalcDesplaz [fila], [columna], qword[desplazCasOrig]
    86 0000075A 488B3C25[94000000]  <1>  mov rdi, %1
    87 00000762 488B3425[9C000000]  <1>  mov rsi, %2
    88 0000076A E8CB060000          <1>  call calcularDesplazamiento
    89 0000076F 48890425[A4000000]  <1>  mov %3, rax
   623 00000777 488B1C25[A4000000]          mov rbx, qword[desplazCasOrig]
   624                                      
   625 0000077F B800000000                  mov rax, 0
   626 00000784 BA00000000                  mov rdx, 0
   627                                  
   628 00000789 8A93[10000000]              mov dl, byte[tableroEnJuego+rbx]
   629 0000078F 8A0C25[FF080000]            mov cl, [simboloOficiales]
   630                                  
   631 00000796 38CA                        cmp dl, cl
   632 00000798 7536                        jne errorCasillaInvalidaOfic
   633                                      
   634 0000079A B800000000                  mov rax, 0
   635 0000079F 48890425[23010000]          mov [msgErrorEspecificoOfic], rax
   636 000007A7 E907FCFFFF                  jmp casillaAMoverseOfic
   637                                  
   638                                      errorInputOfic:
   639 000007AC 488B0425[35030000]              mov rax, [msgErrorInputOfic]
   640                                          mMov msgErrorEspecificoOfic, msgErrorInputOfic, 61
    31 000007B4 B93D000000          <1>  mov rcx, %3
    32 000007B9 488D3425[35030000]  <1>  lea rsi, [%2]
    33 000007C1 488D3C25[23010000]  <1>  lea rdi, [%1]
    34 000007C9 F3A4                <1>  rep movsb
   641 000007CB E96CFBFFFF                      jmp turnoOficiales
   642                                  
   643                                      errorCasillaInvalidaOfic:
   644 000007D0 488B0425[35030000]              mov rax, [msgErrorInputOfic]
   645                                          mMov msgErrorEspecificoOfic, msgCasillaInvalidaOfic, 71
    31 000007D8 B947000000          <1>  mov rcx, %3
    32 000007DD 488D3425[EE020000]  <1>  lea rsi, [%2]
    33 000007E5 488D3C25[23010000]  <1>  lea rdi, [%1]
    34 000007ED F3A4                <1>  rep movsb
   646 000007EF E948FBFFFF                      jmp turnoOficiales
   647                                  
   648                                      imprimirErrorOfic:
   649                                          mPuts msgErrorEspecificoOfic
     2 000007F4 48BF-               <1>  mov rdi, %1
     2 000007F6 [2301000000000000]  <1>
     3 000007FE 4883EC08            <1>  sub rsp, 8
     4 00000802 E8(00000000)        <1>  call puts
     5 00000807 4883C408            <1>  add rsp, 8
   650 0000080B E970FBFFFF                      jmp todoOkOfic
   651                                  
   652                                  ; --------------------------------------------------------------------------------------------
   653                                  ; VERFICIACIONES DE CASILLAS DESTINO PARA SOLDADOS Y OFICIALES
   654                                  ; --------------------------------------------------------------------------------------------
   655                                  
   656                                  verificarMovimientoSold:
   657 00000810 8A0425[88000000]            mov al, byte[casillaMovSold] ; Numero de fila
   658                                      
   659 00000817 3C31                        cmp al, '1'
   660 00000819 0F8CE0010000                jl errorInputSoldMov
   661 0000081F 3C37                        cmp al, '7'
   662 00000821 0F8FD8010000                jg errorInputSoldMov
   663                                  
   664 00000827 48C70425[AC000000]-         mov qword[filaAMover], 0
   664 0000082F 00000000           
   665                                      mSscanf byte[casillaMovSold], formatoAtoi, filaAMover
    69 00000833 488D3C25[88000000]  <1>  lea rdi, %1
    70 0000083B 48BE-               <1>  mov rsi, %2
    70 0000083D [0B09000000000000]  <1>
    71 00000845 48BA-               <1>  mov rdx, %3
    71 00000847 [AC00000000000000]  <1>
    72 0000084F 4883EC08            <1>  sub rsp, 8
    73 00000853 E8(00000000)        <1>  call sscanf
    74 00000858 4883C408            <1>  add rsp, 8
   666                                  
   667 0000085C 4883F801                    cmp rax, 1
   668 00000860 0F8C99010000                jl errorInputSoldMov
   669                                  
   670 00000866 8A0425[89000000]            mov al, byte[casillaMovSold+1] ; Caracter '-'
   671 0000086D 3C2D                        cmp al, '-'
   672 0000086F 0F858A010000                jne errorInputSoldMov
   673                                      
   674 00000875 8A0425[8A000000]            mov al, byte[casillaMovSold+2] ; Numero de columna
   675 0000087C 3C31                        cmp al, '1'
   676 0000087E 0F8C7B010000                jl errorInputSoldMov
   677 00000884 3C37                        cmp al, '7'
   678 00000886 0F8F73010000                jg errorInputSoldMov
   679                                  
   680 0000088C 48C70425[B4000000]-         mov qword[columnaAMover], 0
   680 00000894 00000000           
   681                                      mSscanf byte[casillaMovSold+2], formatoAtoi, columnaAMover
    69 00000898 488D3C25[8A000000]  <1>  lea rdi, %1
    70 000008A0 48BE-               <1>  mov rsi, %2
    70 000008A2 [0B09000000000000]  <1>
    71 000008AA 48BA-               <1>  mov rdx, %3
    71 000008AC [B400000000000000]  <1>
    72 000008B4 4883EC08            <1>  sub rsp, 8
    73 000008B8 E8(00000000)        <1>  call sscanf
    74 000008BD 4883C408            <1>  add rsp, 8
   682                                  
   683 000008C1 4883F801                    cmp rax, 1
   684 000008C5 0F8C34010000                jl errorInputSoldMov
   685                                  
   686 000008CB 8A0425[8B000000]            mov al, byte[casillaMovSold+3] ; Caracter nulo
   687 000008D2 3C00                        cmp al, 0
   688 000008D4 0F8525010000                jne errorInputSoldMov
   689                                  
   690                                      ; Primero chequeamos si el soldado original est√° en alguna de las posiciones especiales
   691 000008DA E82A060000                  call chequearSoldPosEspeciales
   692 000008DF 4883F800                    cmp rax, 0
   693 000008E3 7423                        je lugaresComunesSold ; Si recibimos 1, la casilla original es un lugar com√∫n: intentamos hacer el movimiento normal
   694                                      
   695 000008E5 4883F801                    cmp rax, 1 ; Si recibimos 1, la casilla original es un lugar especial: solo podemos movernos a la derecha
   696 000008E9 0F8474010000                je soloDerechaSold
   697 000008EF 4883F802                    cmp rax, 2 ; Si recibimos 2, la casilla original es un lugar especial: solo podemos movernos a la izquierda
   698 000008F3 0F840D020000                je soloIzquierdaSold
   699                                      
   700                                      casillaEspecialAMover:
   701 000008F9 4983F800                        cmp r8, 0
   702 000008FD 0F8520010000                    jne errorCasillaInvalidaSoldMov
   703 00000903 E927FAFFFF                      jmp moverSoldado
   704                                  
   705                                      lugaresComunesSold:
   706                                          ; Comparamos la fila a mover con la fila actual
   707                                          mMov filaAux, fila, 1
    31 00000908 B901000000          <1>  mov rcx, %3
    32 0000090D 488D3425[94000000]  <1>  lea rsi, [%2]
    33 00000915 488D3C25[C4000000]  <1>  lea rdi, [%1]
    34 0000091D F3A4                <1>  rep movsb
   708 0000091F 48FF0425[C4000000]              inc qword[filaAux]
   709                                          mCmp [filaAux], [filaAMover], 1
    38 00000927 B901000000          <1>  mov rcx, %3
    39 0000092C 488D3425[C4000000]  <1>  lea rsi, %1
    40 00000934 488D3C25[AC000000]  <1>  lea rdi, %2
    41 0000093C F3A6                <1>  repe cmpsb
   710 0000093E 0F85DF000000                    jne errorCasillaInvalidaSoldMov
   711                                  
   712                                          ; Comparamos la columna a mover con la columna actual
   713 00000944 48C70425[CC000000]-             mov qword[columnaAux], 0 ; Reiniciamos la columna auxiliar
   713 0000094C 00000000           
   714                                          mMov columnaAux, columna, 1
    31 00000950 B901000000          <1>  mov rcx, %3
    32 00000955 488D3425[9C000000]  <1>  lea rsi, [%2]
    33 0000095D 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 00000965 F3A4                <1>  rep movsb
   715                                  
   716                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento hacia adelante
    38 00000967 B901000000          <1>  mov rcx, %3
    39 0000096C 488D3425[CC000000]  <1>  lea rsi, %1
    40 00000974 488D3C25[B4000000]  <1>  lea rdi, %2
    41 0000097C F3A6                <1>  repe cmpsb
   717 0000097E 7445                            je columnaSoldAMoverValida
   718                                  
   719 00000980 48FF0425[CC000000]              inc qword[columnaAux]
   720                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la izquierda
    38 00000988 B901000000          <1>  mov rcx, %3
    39 0000098D 488D3425[CC000000]  <1>  lea rsi, %1
    40 00000995 488D3C25[B4000000]  <1>  lea rdi, %2
    41 0000099D F3A6                <1>  repe cmpsb
   721 0000099F 7424                            je columnaSoldAMoverValida
   722                                  
   723 000009A1 48832C25[CC000000]-             sub qword[columnaAux], 2
   723 000009A9 02                 
   724                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la derecha
    38 000009AA B901000000          <1>  mov rcx, %3
    39 000009AF 488D3425[CC000000]  <1>  lea rsi, %1
    40 000009B7 488D3C25[B4000000]  <1>  lea rdi, %2
    41 000009BF F3A6                <1>  repe cmpsb
   725 000009C1 7402                            je columnaSoldAMoverValida
   726                                  
   727 000009C3 EB5E                            jmp errorCasillaInvalidaSoldMov
   728                                  
   729                                      columnaSoldAMoverValida: ; Queda ver si en esa casilla est√° vac√≠a o no
   730                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    86 000009C5 488B3C25[AC000000]  <1>  mov rdi, %1
    87 000009CD 488B3425[B4000000]  <1>  mov rsi, %2
    88 000009D5 E860040000          <1>  call calcularDesplazamiento
    89 000009DA 48890425[BC000000]  <1>  mov %3, rax
   731                                          mEstaVacia qword[desplazCasAMover]
    93 000009E2 B800000000          <1>  mov rax, 0
    94 000009E7 488B3C25[BC000000]  <1>  mov rdi, %1
    95 000009EF E831040000          <1>  call estaVacia
   732 000009F4 4883F801                        cmp rax, 1
   733 000009F8 7429                            je errorCasillaInvalidaSoldMov ; Si recibimos 1, la casilla est√° ocupada (o est√° fuera del tablero)
   734                                          
   735 000009FA E930F9FFFF                      jmp moverSoldado 
   736                                  
   737                                  
   738                                      errorInputSoldMov:
   739 000009FF 488B0425[72020000]              mov rax, [msgErrorInputSold]
   740                                          mMov msgErrorEspecificoSold, msgErrorInputSold, 61
    31 00000A07 B93D000000          <1>  mov rcx, %3
    32 00000A0C 488D3425[72020000]  <1>  lea rsi, [%2]
    33 00000A14 488D3C25[DC000000]  <1>  lea rdi, [%1]
    34 00000A1C F3A4                <1>  rep movsb
   741 00000A1E E962F8FFFF                      jmp turnoSoldados
   742                                  
   743                                      errorCasillaInvalidaSoldMov:
   744 00000A23 488B0425[B0020000]              mov rax, [msgCasillaInvMovSold]
   745                                          mMov msgErrorEspecificoSold, msgCasillaInvMovSold, 61
    31 00000A2B B93D000000          <1>  mov rcx, %3
    32 00000A30 488D3425[B0020000]  <1>  lea rsi, [%2]
    33 00000A38 488D3C25[DC000000]  <1>  lea rdi, [%1]
    34 00000A40 F3A4                <1>  rep movsb
   746 00000A42 E93EF8FFFF                      jmp turnoSoldados
   747                                  
   748                                      imprimirErrorSoldMov:
   749                                          mPuts msgErrorEspecificoSold
     2 00000A47 48BF-               <1>  mov rdi, %1
     2 00000A49 [DC00000000000000]  <1>
     3 00000A51 4883EC08            <1>  sub rsp, 8
     4 00000A55 E8(00000000)        <1>  call puts
     5 00000A5A 4883C408            <1>  add rsp, 8
   750 00000A5E E922F8FFFF                      jmp turnoSoldados
   751                                  
   752                                      soloDerechaSold:
   753 00000A63 41B801000000                    mov r8, 1 ; Suponemos que el movimiento es inv√°lido
   754                                  
   755                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    86 00000A69 488B3C25[AC000000]  <1>  mov rdi, %1
    87 00000A71 488B3425[B4000000]  <1>  mov rsi, %2
    88 00000A79 E8BC030000          <1>  call calcularDesplazamiento
    89 00000A7E 48890425[BC000000]  <1>  mov %3, rax
   756                                          mEstaVacia qword[desplazCasAMover]
    93 00000A86 B800000000          <1>  mov rax, 0
    94 00000A8B 488B3C25[BC000000]  <1>  mov rdi, %1
    95 00000A93 E88D030000          <1>  call estaVacia
   757 00000A98 4883F801                        cmp rax, 1 
   758 00000A9C 0F8457FEFFFF                    je casillaEspecialAMover
   759                                  
   760                                          mCmp [fila], [filaAMover], 1 ; Las filas deben ser iguales (el movimiento especial es para el costado)
    38 00000AA2 B901000000          <1>  mov rcx, %3
    39 00000AA7 488D3425[94000000]  <1>  lea rsi, %1
    40 00000AAF 488D3C25[AC000000]  <1>  lea rdi, %2
    41 00000AB7 F3A6                <1>  repe cmpsb
   761 00000AB9 0F853AFEFFFF                    jne casillaEspecialAMover
   762                                  
   763                                          mMov columnaAux, columna, 1
    31 00000ABF B901000000          <1>  mov rcx, %3
    32 00000AC4 488D3425[9C000000]  <1>  lea rsi, [%2]
    33 00000ACC 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 00000AD4 F3A4                <1>  rep movsb
   764 00000AD6 48FF0425[CC000000]              inc qword[columnaAux]
   765                                          mCmp [columnaAux], [columnaAMover], 1
    38 00000ADE B901000000          <1>  mov rcx, %3
    39 00000AE3 488D3425[CC000000]  <1>  lea rsi, %1
    40 00000AEB 488D3C25[B4000000]  <1>  lea rdi, %2
    41 00000AF3 F3A6                <1>  repe cmpsb
   766 00000AF5 0F85FEFDFFFF                    jne casillaEspecialAMover
   767                                          
   768 00000AFB 41B800000000                    mov r8, 0 ; Si llegamos ac√°, el movimiento es v√°lido
   769 00000B01 E9F3FDFFFF                      jmp casillaEspecialAMover
   770                                      
   771                                      soloIzquierdaSold:
   772 00000B06 41B801000000                    mov r8, 1 ; Suponemos que el movimiento es inv√°lido
   773                                  
   774                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    86 00000B0C 488B3C25[AC000000]  <1>  mov rdi, %1
    87 00000B14 488B3425[B4000000]  <1>  mov rsi, %2
    88 00000B1C E819030000          <1>  call calcularDesplazamiento
    89 00000B21 48890425[BC000000]  <1>  mov %3, rax
   775                                          mEstaVacia qword[desplazCasAMover]
    93 00000B29 B800000000          <1>  mov rax, 0
    94 00000B2E 488B3C25[BC000000]  <1>  mov rdi, %1
    95 00000B36 E8EA020000          <1>  call estaVacia
   776 00000B3B 4883F801                        cmp rax, 1 
   777 00000B3F 0F84B4FDFFFF                    je casillaEspecialAMover
   778                                  
   779                                          mCmp [fila], [filaAMover], 1 ; Las filas deben ser iguales (el movimiento especial es para el costado)
    38 00000B45 B901000000          <1>  mov rcx, %3
    39 00000B4A 488D3425[94000000]  <1>  lea rsi, %1
    40 00000B52 488D3C25[AC000000]  <1>  lea rdi, %2
    41 00000B5A F3A6                <1>  repe cmpsb
   780 00000B5C 0F8597FDFFFF                    jne casillaEspecialAMover
   781                                  
   782                                          mMov columnaAux, columna, 1
    31 00000B62 B901000000          <1>  mov rcx, %3
    32 00000B67 488D3425[9C000000]  <1>  lea rsi, [%2]
    33 00000B6F 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 00000B77 F3A4                <1>  rep movsb
   783 00000B79 48FF0C25[CC000000]              dec qword[columnaAux]
   784                                          mCmp [columnaAux], [columnaAMover], 1
    38 00000B81 B901000000          <1>  mov rcx, %3
    39 00000B86 488D3425[CC000000]  <1>  lea rsi, %1
    40 00000B8E 488D3C25[B4000000]  <1>  lea rdi, %2
    41 00000B96 F3A6                <1>  repe cmpsb
   785 00000B98 0F855BFDFFFF                    jne casillaEspecialAMover
   786                                  
   787 00000B9E 41B800000000                    mov r8, 0 ; Si llegamos ac√°, el movimiento es v√°lido
   788 00000BA4 E950FDFFFF                      jmp casillaEspecialAMover
   789                                      
   790 00000BA9 C3                          ret
   791                                  
   792                                  verificarMovimientoOfic:
   793 00000BAA 8A0425[90000000]            mov al, byte[casillaMovOfic] ; Numero de fila
   794                                      
   795 00000BB1 3C31                        cmp al, '1'
   796 00000BB3 0F8C08020000                jl errorInputOficMov
   797 00000BB9 3C37                        cmp al, '7'
   798 00000BBB 0F8F00020000                jg errorInputOficMov
   799                                  
   800 00000BC1 48C70425[AC000000]-         mov qword[filaAMover], 0
   800 00000BC9 00000000           
   801                                      mSscanf byte[casillaMovOfic], formatoAtoi, filaAMover
    69 00000BCD 488D3C25[90000000]  <1>  lea rdi, %1
    70 00000BD5 48BE-               <1>  mov rsi, %2
    70 00000BD7 [0B09000000000000]  <1>
    71 00000BDF 48BA-               <1>  mov rdx, %3
    71 00000BE1 [AC00000000000000]  <1>
    72 00000BE9 4883EC08            <1>  sub rsp, 8
    73 00000BED E8(00000000)        <1>  call sscanf
    74 00000BF2 4883C408            <1>  add rsp, 8
   802                                  
   803 00000BF6 4883F801                    cmp rax, 1
   804 00000BFA 0F8CC1010000                jl errorInputOficMov
   805                                  
   806 00000C00 8A0425[91000000]            mov al, byte[casillaMovOfic+1] ; Caracter '-'
   807 00000C07 3C2D                        cmp al, '-'
   808 00000C09 0F85B2010000                jne errorInputOficMov
   809                                      
   810 00000C0F 8A0425[92000000]            mov al, byte[casillaMovOfic+2] ; Numero de columna
   811 00000C16 3C31                        cmp al, '1'
   812 00000C18 0F8CA3010000                jl errorInputOficMov
   813 00000C1E 3C37                        cmp al, '7'
   814 00000C20 0F8F9B010000                jg errorInputOficMov
   815                                  
   816 00000C26 48C70425[B4000000]-         mov qword[columnaAMover], 0
   816 00000C2E 00000000           
   817                                      mSscanf byte[casillaMovOfic+2], formatoAtoi, columnaAMover
    69 00000C32 488D3C25[92000000]  <1>  lea rdi, %1
    70 00000C3A 48BE-               <1>  mov rsi, %2
    70 00000C3C [0B09000000000000]  <1>
    71 00000C44 48BA-               <1>  mov rdx, %3
    71 00000C46 [B400000000000000]  <1>
    72 00000C4E 4883EC08            <1>  sub rsp, 8
    73 00000C52 E8(00000000)        <1>  call sscanf
    74 00000C57 4883C408            <1>  add rsp, 8
   818                                  
   819 00000C5B 4883F801                    cmp rax, 1
   820 00000C5F 0F8C5C010000                jl errorInputOficMov
   821                                  
   822 00000C65 8A0425[93000000]            mov al, byte[casillaMovOfic+3] ; Caracter nulo
   823 00000C6C 3C00                        cmp al, 0
   824 00000C6E 0F854D010000                jne errorInputOficMov
   825                                  
   826                                      ; Comparamos la fila a mover con la fila actual
   827                                      mMov filaAux, fila, 1
    31 00000C74 B901000000          <1>  mov rcx, %3
    32 00000C79 488D3425[94000000]  <1>  lea rsi, [%2]
    33 00000C81 488D3C25[C4000000]  <1>  lea rdi, [%1]
    34 00000C89 F3A4                <1>  rep movsb
   828                                  
   829                                      mCmp [filaAux], [filaAMover], 1
    38 00000C8B B901000000          <1>  mov rcx, %3
    39 00000C90 488D3425[C4000000]  <1>  lea rsi, %1
    40 00000C98 488D3C25[AC000000]  <1>  lea rdi, %2
    41 00000CA0 F3A6                <1>  repe cmpsb
   830 00000CA2 7448                        je filaOficAMoverValida ; Filas iguales -> v√°lido
   831 00000CA4 48FF0425[C4000000]          inc qword[filaAux]
   832                                      mCmp [filaAux], [filaAMover], 1
    38 00000CAC B901000000          <1>  mov rcx, %3
    39 00000CB1 488D3425[C4000000]  <1>  lea rsi, %1
    40 00000CB9 488D3C25[AC000000]  <1>  lea rdi, %2
    41 00000CC1 F3A6                <1>  repe cmpsb
   833 00000CC3 7427                        je filaOficAMoverValida
   834 00000CC5 48832C25[C4000000]-         sub qword[filaAux], 2
   834 00000CCD 02                 
   835                                      mCmp [filaAux], [filaAMover], 1
    38 00000CCE B901000000          <1>  mov rcx, %3
    39 00000CD3 488D3425[C4000000]  <1>  lea rsi, %1
    40 00000CDB 488D3C25[AC000000]  <1>  lea rdi, %2
    41 00000CE3 F3A6                <1>  repe cmpsb
   836 00000CE5 7405                        je filaOficAMoverValida
   837                                  
   838 00000CE7 E9F9000000                  jmp errorCasillaInvalidaOficMov
   839                                  
   840                                      filaOficAMoverValida:
   841                                          ; Comparamos la columna a mover con la columna actual
   842 00000CEC 48C70425[CC000000]-             mov qword[columnaAux], 0 ; Reiniciamos la columna auxiliar
   842 00000CF4 00000000           
   843                                          mMov columnaAux, columna, 1
    31 00000CF8 B901000000          <1>  mov rcx, %3
    32 00000CFD 488D3425[9C000000]  <1>  lea rsi, [%2]
    33 00000D05 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 00000D0D F3A4                <1>  rep movsb
   844                                  
   845                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento hacia adelante
    38 00000D0F B901000000          <1>  mov rcx, %3
    39 00000D14 488D3425[CC000000]  <1>  lea rsi, %1
    40 00000D1C 488D3C25[B4000000]  <1>  lea rdi, %2
    41 00000D24 F3A6                <1>  repe cmpsb
   846 00000D26 7445                            je columnaOficAMoverValida
   847                                  
   848 00000D28 48FF0425[CC000000]              inc qword[columnaAux]
   849                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la izquierda
    38 00000D30 B901000000          <1>  mov rcx, %3
    39 00000D35 488D3425[CC000000]  <1>  lea rsi, %1
    40 00000D3D 488D3C25[B4000000]  <1>  lea rdi, %2
    41 00000D45 F3A6                <1>  repe cmpsb
   850 00000D47 7424                            je columnaOficAMoverValida
   851                                  
   852 00000D49 48832C25[CC000000]-             sub qword[columnaAux], 2
   852 00000D51 02                 
   853                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la derecha
    38 00000D52 B901000000          <1>  mov rcx, %3
    39 00000D57 488D3425[CC000000]  <1>  lea rsi, %1
    40 00000D5F 488D3C25[B4000000]  <1>  lea rdi, %2
    41 00000D67 F3A6                <1>  repe cmpsb
   854 00000D69 7402                            je columnaOficAMoverValida
   855                                  
   856 00000D6B EB78                            jmp errorCasillaInvalidaOficMov
   857                                  
   858                                      columnaOficAMoverValida: ; Podr√≠amos hacer un movimiento normal (casilla vac√≠a) o capturar un soldado...
   859                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    86 00000D6D 488B3C25[AC000000]  <1>  mov rdi, %1
    87 00000D75 488B3425[B4000000]  <1>  mov rsi, %2
    88 00000D7D E8B8000000          <1>  call calcularDesplazamiento
    89 00000D82 48890425[BC000000]  <1>  mov %3, rax
   860                                          mEstaVacia qword[desplazCasAMover]
    93 00000D8A B800000000          <1>  mov rax, 0
    94 00000D8F 488B3C25[BC000000]  <1>  mov rdi, %1
    95 00000D97 E889000000          <1>  call estaVacia
   861 00000D9C 4883F800                        cmp rax, 0
   862 00000DA0 0F8440F6FFFF                    je moverOficial ; Si llegamos ac√°, la casilla a mover est√° vac√≠a -> movimiento normal
   863                                          
   864                                          ; Si llegamos ac√°, la casilla no est√° vac√≠a: ver si hay un soldado para capturar
   865 00000DA6 E8A7010000                      call casillaAMoverHaySoldado
   866 00000DAB 4883F801                        cmp rax, 1
   867 00000DAF 7434                            je errorCasillaInvalidaOficMov ; Si recibimos 1, la casilla a ocupar no tiene un soldado -> movimiento inv√°lido
   868                                  
   869                                          ; Si llegamos ac√°, la casilla a ocupar tiene un soldado: debemos ver si el oficial puede saltar sobre √©l...
   870 00000DB1 E8E5010000                      call sePuedeSaltarSoldado
   871 00000DB6 4883F801                        cmp rax, 1
   872 00000DBA 7429                            je errorCasillaInvalidaOficMov ; Si recibimos 1, el oficial no puede saltar sobre el soldado -> movimiento inv√°lido
   873                                  
   874 00000DBC E92FF6FFFF                      jmp capturar
   875                                  
   876                                  
   877                                      errorInputOficMov:
   878 00000DC1 488B0425[35030000]              mov rax, [msgErrorInputOfic]
   879                                          mMov msgErrorEspecificoOfic, msgErrorInputOfic, 61
    31 00000DC9 B93D000000          <1>  mov rcx, %3
    32 00000DCE 488D3425[35030000]  <1>  lea rsi, [%2]
    33 00000DD6 488D3C25[23010000]  <1>  lea rdi, [%1]
    34 00000DDE F3A4                <1>  rep movsb
   880 00000DE0 E957F5FFFF                      jmp turnoOficiales
   881                                  
   882                                      errorCasillaInvalidaOficMov:
   883 00000DE5 488B0425[73030000]              mov rax, [msgCasillaInvMovOfic]
   884                                          mMov msgErrorEspecificoOfic, msgCasillaInvMovOfic, 61
    31 00000DED B93D000000          <1>  mov rcx, %3
    32 00000DF2 488D3425[73030000]  <1>  lea rsi, [%2]
    33 00000DFA 488D3C25[23010000]  <1>  lea rdi, [%1]
    34 00000E02 F3A4                <1>  rep movsb
   885 00000E04 E933F5FFFF                      jmp turnoOficiales
   886                                  
   887                                      imprimirErrorOficMov:
   888                                          mPuts msgErrorEspecificoOfic
     2 00000E09 48BF-               <1>  mov rdi, %1
     2 00000E0B [2301000000000000]  <1>
     3 00000E13 4883EC08            <1>  sub rsp, 8
     4 00000E17 E8(00000000)        <1>  call puts
     5 00000E1C 4883C408            <1>  add rsp, 8
   889 00000E20 E917F5FFFF                      jmp turnoOficiales
   890                                  
   891                                  ; --------------------------------------------------------------------------------------------
   892                                  ; RUTINA PARA VERIFICAR SI UNA CASILLA EST√Å VAC√çA
   893                                  ; --------------------------------------------------------------------------------------------
   894                                  
   895                                  estaVacia:
   896 00000E25 80BF[10000000]20            cmp byte[tableroEnJuego+rdi], ' '
   897 00000E2C 7406                        je okVacia
   898                                  
   899 00000E2E B801000000                  mov rax, 1
   900 00000E33 C3                          ret
   901                                  
   902                                      okVacia:
   903 00000E34 B800000000                      mov rax, 0
   904 00000E39 C3                              ret
   905                                  
   906                                  ; --------------------------------------------------------------------------------------------
   907                                  ; RUTINA PARA CALCULAR EL DESPLAZAMIENTO DE UNA CASILLA EN EL TABLERO
   908                                  ; --------------------------------------------------------------------------------------------
   909                                  
   910                                  calcularDesplazamiento:
   911 00000E3A B800000000                  mov rax, 0
   912 00000E3F 4889F8                      mov rax, rdi
   913 00000E42 48FFC0                      inc rax
   914 00000E45 666BC00B                    imul ax, 11
   915 00000E49 4801F0                      add rax, rsi
   916 00000E4C 48FFC0                      inc rax
   917                                  
   918 00000E4F C3                          ret
   919                                  
   920                                  ; --------------------------------------------------------------------------------------------
   921                                  ; RUTINAS PARA REALIZAR MOVIMIENTOS SIMPLES DE SOLDADOS Y OFICIALES (los que no requieren capturas)
   922                                  ; --------------------------------------------------------------------------------------------
   923                                  
   924                                  realizarMovimientoSold:
   925 00000E50 488B0425[A4000000]          mov rax, qword[desplazCasOrig]
   926 00000E58 488B1C25[BC000000]          mov rbx, qword[desplazCasAMover]
   927                                  
   928 00000E60 C680[10000000]20            mov byte[tableroEnJuego+rax], ' '
   929                                      mMov tableroEnJuego+rbx, simboloSoldados, 1
    31 00000E67 B901000000          <1>  mov rcx, %3
    32 00000E6C 488D3425[01090000]  <1>  lea rsi, [%2]
    33 00000E74 488DBB[10000000]    <1>  lea rdi, [%1]
    34 00000E7B F3A4                <1>  rep movsb
   930                                  
   931 00000E7D C3                          ret
   932                                  
   933                                  realizarMovimientoOfic:
   934 00000E7E 488B0425[A4000000]          mov rax, qword[desplazCasOrig]
   935 00000E86 488B1C25[BC000000]          mov rbx, qword[desplazCasAMover]
   936                                  
   937 00000E8E C680[10000000]20            mov byte[tableroEnJuego+rax], ' '
   938                                      mMov tableroEnJuego+rbx, simboloOficiales, 1
    31 00000E95 B901000000          <1>  mov rcx, %3
    32 00000E9A 488D3425[FF080000]  <1>  lea rsi, [%2]
    33 00000EA2 488DBB[10000000]    <1>  lea rdi, [%1]
    34 00000EA9 F3A4                <1>  rep movsb
   939                                  
   940 00000EAB C3                          ret
   941                                      
   942                                  ; --------------------------------------------------------------------------------------------
   943                                  ; RUTINAS PARA CAMBIAR EL TABLERO CON LOS SIMBOLOS PERSONALIZADOS
   944                                  ; --------------------------------------------------------------------------------------------
   945                                  
   946                                  cambiarTableroSoldNuevo:
   947 00000EAC BB1A000000                  mov rbx, 26 ; Desplazamiento de la primera casilla en donde puede haber piezas
   948                                  
   949                                      cicloCambiarSoldados:
   950 00000EB1 80BB[10000000]58                cmp byte[tableroEnJuego+rbx], 'X'
   951 00000EB8 7516                            jne noCambiarSoldado
   952                                          mMov tableroEnJuego+rbx, simboloSoldados, 1 ; Cambio el simbolo de los soldados
    31 00000EBA B901000000          <1>  mov rcx, %3
    32 00000EBF 488D3425[01090000]  <1>  lea rsi, [%2]
    33 00000EC7 488DBB[10000000]    <1>  lea rdi, [%1]
    34 00000ECE F3A4                <1>  rep movsb
   953                                  
   954                                          noCambiarSoldado:
   955 00000ED0 48FFC3                              inc rbx
   956 00000ED3 4883FB4B                            cmp rbx, 75 ; Desplazamiento de la √∫ltima casilla en donde puede haber piezas
   957 00000ED7 7CD8                                jl cicloCambiarSoldados
   958                                  
   959 00000ED9 C3                          ret
   960                                  
   961                                  cambiarTableroOficNuevo:
   962                                      mMov tableroEnJuego+83, simboloOficiales, 1 ; Primer oficial (desplazamiento)
    31 00000EDA B901000000          <1>  mov rcx, %3
    32 00000EDF 488D3425[FF080000]  <1>  lea rsi, [%2]
    33 00000EE7 488D3C25[63000000]  <1>  lea rdi, [%1]
    34 00000EEF F3A4                <1>  rep movsb
   963                                      mMov tableroEnJuego+92, simboloOficiales, 1 ; Segundo oficial (desplazamiento)
    31 00000EF1 B901000000          <1>  mov rcx, %3
    32 00000EF6 488D3425[FF080000]  <1>  lea rsi, [%2]
    33 00000EFE 488D3C25[6C000000]  <1>  lea rdi, [%1]
    34 00000F06 F3A4                <1>  rep movsb
   964 00000F08 C3                          ret
   965                                  
   966                                  ; --------------------------------------------------------------------------------------------
   967                                  ; RUTINA PARA CHEQUEAR SI LA CASILLA DE ORIGEN DE UN SOLDADO ES UNA POSICI√ìN ESPECIAL
   968                                  ; --------------------------------------------------------------------------------------------
   969                                  
   970                                  chequearSoldPosEspeciales:
   971 00000F09 B800000000                  mov rax, 0
   972                                  
   973 00000F0E 48833C25[94000000]-         cmp qword[fila], 5
   973 00000F16 05                 
   974 00000F17 752C                        jne noEsLugarEspecial ; Si la fila no es 5, no estamos en una posici√≥n especial
   975                                  
   976                                      ; Si la columna es 1 o 2 (fila 5), estamos en una posici√≥n especial: solo podemos movernos a la derecha
   977 00000F19 48833C25[9C000000]-         cmp qword[columna], 1
   977 00000F21 01                 
   978 00000F22 7428                        je esLugarEspecialADer 
   979 00000F24 48833C25[9C000000]-         cmp qword[columna], 2
   979 00000F2C 02                 
   980 00000F2D 741D                        je esLugarEspecialADer 
   981                                  
   982                                      ; Si la columna es 6 o 7 (fila 5), estamos en una posici√≥n especial: solo podemos movernos a la izquierda
   983 00000F2F 48833C25[9C000000]-         cmp qword[columna], 6
   983 00000F37 06                 
   984 00000F38 740C                        je esLugarEspecialAIzq 
   985 00000F3A 48833C25[9C000000]-         cmp qword[columna], 7
   985 00000F42 07                 
   986 00000F43 7401                        je esLugarEspecialAIzq
   987                                  
   988                                      noEsLugarEspecial:
   989 00000F45 C3                              ret
   990                                  
   991                                      esLugarEspecialAIzq:
   992 00000F46 B802000000                      mov rax, 2
   993 00000F4B C3                              ret
   994                                      
   995                                      esLugarEspecialADer:
   996 00000F4C B801000000                      mov rax, 1
   997 00000F51 C3                              ret
   998                                  
   999                                  ; --------------------------------------------------------------------------------------------
  1000                                  ; RUTINA PARA VERIFICAR SI HAY UN SOLDADO EN LA CASILLA DESTINO
  1001                                  ; --------------------------------------------------------------------------------------------
  1002                                  
  1003                                  casillaAMoverHaySoldado:
  1004                                      ; Calculamos desplazamiento en tablero
  1005                                      mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    86 00000F52 488B3C25[AC000000]  <1>  mov rdi, %1
    87 00000F5A 488B3425[B4000000]  <1>  mov rsi, %2
    88 00000F62 E8D3FEFFFF          <1>  call calcularDesplazamiento
    89 00000F67 48890425[BC000000]  <1>  mov %3, rax
  1006 00000F6F 488B1C25[BC000000]          mov rbx, qword[desplazCasAMover]
  1007                                  
  1008                                      mCmp byte[tableroEnJuego+rbx], simboloSoldados, 1
    38 00000F77 B901000000          <1>  mov rcx, %3
    39 00000F7C 488DB3[10000000]    <1>  lea rsi, %1
    40 00000F83 488D3C25[01090000]  <1>  lea rdi, %2
    41 00000F8B F3A6                <1>  repe cmpsb
  1009 00000F8D 7406                        je casillaConSoldado
  1010                                  
  1011 00000F8F B801000000                  mov rax, 1
  1012 00000F94 C3                          ret
  1013                                  
  1014                                      casillaConSoldado:
  1015 00000F95 B800000000                      mov rax, 0
  1016 00000F9A C3                              ret
  1017                                  
  1018                                  ; --------------------------------------------------------------------------------------------
  1019                                  ; RUTINA PARA VERIFICAR SI UN OFICIAL PUEDE SALTAR SOBRE UN SOLDADO
  1020                                  ; --------------------------------------------------------------------------------------------
  1021                                  
  1022                                  sePuedeSaltarSoldado:
  1023 00000F9B 488B0425[94000000]          mov rax, qword[fila]
  1024 00000FA3 488B1C25[AC000000]          mov rbx, qword[filaAMover]
  1025 00000FAB 4829D8                      sub rax, rbx
  1026 00000FAE 0F8F07010000                jg saltoHaciaArriba ; Si la fila original es mayor que la fila destino, el salto es hacia arriba
  1027 00000FB4 0F8CA3010000                jl saltoHaciaAbajo ; Si la fila original es menor que la fila destino, el salto es hacia abajo
  1028                                  
  1029                                      ; Si estamos ac√°, el salto es en la misma fila
  1030 00000FBA 488B0425[9C000000]          mov rax, qword[columna]
  1031 00000FC2 488B1C25[B4000000]          mov rbx, qword[columnaAMover]
  1032                                  
  1033 00000FCA 4829D8                      sub rax, rbx
  1034 00000FCD 7F02                        jg saltoHaciaIzq ; Si la columna original es mayor que la columna destino, el salto es hacia la izquierda
  1035 00000FCF 7C75                        jl saltoHaciaDer ; Si la columna original es menor que la columna destino, el salto es hacia la derecha
  1036                                  
  1037                                      saltoHaciaIzq:
  1038                                          mMov filaAux, filaAMover, 1
    31 00000FD1 B901000000          <1>  mov rcx, %3
    32 00000FD6 488D3425[AC000000]  <1>  lea rsi, [%2]
    33 00000FDE 488D3C25[C4000000]  <1>  lea rdi, [%1]
    34 00000FE6 F3A4                <1>  rep movsb
  1039                                          mMov columnaAux, columnaAMover, 1
    31 00000FE8 B901000000          <1>  mov rcx, %3
    32 00000FED 488D3425[B4000000]  <1>  lea rsi, [%2]
    33 00000FF5 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 00000FFD F3A4                <1>  rep movsb
  1040 00000FFF 48FF0C25[CC000000]              dec qword[columnaAux]
  1041                                  
  1042                                          mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    86 00001007 488B3C25[C4000000]  <1>  mov rdi, %1
    87 0000100F 488B3425[CC000000]  <1>  mov rsi, %2
    88 00001017 E81EFEFFFF          <1>  call calcularDesplazamiento
    89 0000101C 48890425[D4000000]  <1>  mov %3, rax
  1043                                          mEstaVacia qword[desplazAux]
    93 00001024 B800000000          <1>  mov rax, 0
    94 00001029 488B3C25[D4000000]  <1>  mov rdi, %1
    95 00001031 E8EFFDFFFF          <1>  call estaVacia
  1044 00001036 4883F801                        cmp rax, 1
  1045 0000103A 0F84BB010000                    je saltoInvalido
  1046                                  
  1047 00001040 B800000000                      mov rax, 0
  1048 00001045 C3                              ret
  1049                                  
  1050                                      saltoHaciaDer:
  1051                                          mMov filaAux, filaAMover, 1
    31 00001046 B901000000          <1>  mov rcx, %3
    32 0000104B 488D3425[AC000000]  <1>  lea rsi, [%2]
    33 00001053 488D3C25[C4000000]  <1>  lea rdi, [%1]
    34 0000105B F3A4                <1>  rep movsb
  1052                                          mMov columnaAux, columnaAMover, 1
    31 0000105D B901000000          <1>  mov rcx, %3
    32 00001062 488D3425[B4000000]  <1>  lea rsi, [%2]
    33 0000106A 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 00001072 F3A4                <1>  rep movsb
  1053 00001074 48FF0425[CC000000]              inc qword[columnaAux]
  1054                                  
  1055                                          mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    86 0000107C 488B3C25[C4000000]  <1>  mov rdi, %1
    87 00001084 488B3425[CC000000]  <1>  mov rsi, %2
    88 0000108C E8A9FDFFFF          <1>  call calcularDesplazamiento
    89 00001091 48890425[D4000000]  <1>  mov %3, rax
  1056                                          mEstaVacia qword[desplazAux]
    93 00001099 B800000000          <1>  mov rax, 0
    94 0000109E 488B3C25[D4000000]  <1>  mov rdi, %1
    95 000010A6 E87AFDFFFF          <1>  call estaVacia
  1057 000010AB 4883F801                        cmp rax, 1
  1058 000010AF 0F8446010000                    je saltoInvalido
  1059                                  
  1060 000010B5 B800000000                      mov rax, 0
  1061 000010BA C3                              ret
  1062                                  
  1063                                      saltoHaciaArriba:
  1064                                          mMov filaAux, filaAMover, 1
    31 000010BB B901000000          <1>  mov rcx, %3
    32 000010C0 488D3425[AC000000]  <1>  lea rsi, [%2]
    33 000010C8 488D3C25[C4000000]  <1>  lea rdi, [%1]
    34 000010D0 F3A4                <1>  rep movsb
  1065                                          mMov columnaAux, columnaAMover, 1
    31 000010D2 B901000000          <1>  mov rcx, %3
    32 000010D7 488D3425[B4000000]  <1>  lea rsi, [%2]
    33 000010DF 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 000010E7 F3A4                <1>  rep movsb
  1066 000010E9 48FF0C25[C4000000]              dec qword[filaAux]
  1067                                          
  1068                                          mCmp [columna], [columnaAMover], 1
    38 000010F1 B901000000          <1>  mov rcx, %3
    39 000010F6 488D3425[9C000000]  <1>  lea rsi, %1
    40 000010FE 488D3C25[B4000000]  <1>  lea rdi, %2
    41 00001106 F3A6                <1>  repe cmpsb
  1069 00001108 7414                            je seguirSaltoArriba ; Si las columnas son iguales, el salto es hacia arriba y en l√≠nea recta
  1070 0000110A 7F0A                            jg haciaArribaIzq
  1071                                  
  1072 0000110C 48FF0425[CC000000]              inc qword[columnaAux] ; Salto hacia arriba y a la derecha
  1073 00001114 EB08                            jmp seguirSaltoArriba
  1074                                  
  1075                                          haciaArribaIzq:
  1076 00001116 48FF0C25[CC000000]                  dec qword[columnaAux] ; Salto hacia arriba y a la izquierda
  1077                                  
  1078                                          seguirSaltoArriba:
  1079                                              mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    86 0000111E 488B3C25[C4000000]  <1>  mov rdi, %1
    87 00001126 488B3425[CC000000]  <1>  mov rsi, %2
    88 0000112E E807FDFFFF          <1>  call calcularDesplazamiento
    89 00001133 48890425[D4000000]  <1>  mov %3, rax
  1080                                              mEstaVacia qword[desplazAux]
    93 0000113B B800000000          <1>  mov rax, 0
    94 00001140 488B3C25[D4000000]  <1>  mov rdi, %1
    95 00001148 E8D8FCFFFF          <1>  call estaVacia
  1081 0000114D 4883F801                            cmp rax, 1
  1082 00001151 0F84A4000000                        je saltoInvalido
  1083                                  
  1084 00001157 B800000000                          mov rax, 0
  1085 0000115C C3                                  ret
  1086                                  
  1087                                      saltoHaciaAbajo:
  1088                                          mMov filaAux, filaAMover, 1
    31 0000115D B901000000          <1>  mov rcx, %3
    32 00001162 488D3425[AC000000]  <1>  lea rsi, [%2]
    33 0000116A 488D3C25[C4000000]  <1>  lea rdi, [%1]
    34 00001172 F3A4                <1>  rep movsb
  1089                                          mMov columnaAux, columnaAMover, 1
    31 00001174 B901000000          <1>  mov rcx, %3
    32 00001179 488D3425[B4000000]  <1>  lea rsi, [%2]
    33 00001181 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 00001189 F3A4                <1>  rep movsb
  1090 0000118B 48FF0425[C4000000]              inc qword[filaAux]
  1091                                          
  1092                                          mCmp [columna], [columnaAMover], 1
    38 00001193 B901000000          <1>  mov rcx, %3
    39 00001198 488D3425[9C000000]  <1>  lea rsi, %1
    40 000011A0 488D3C25[B4000000]  <1>  lea rdi, %2
    41 000011A8 F3A6                <1>  repe cmpsb
  1093 000011AA 7414                            je seguirSaltoAbajo ; Si las columnas son iguales, el salto es hacia abajo y en l√≠nea recta
  1094 000011AC 7F0A                            jg haciaAbajoIzq
  1095                                  
  1096 000011AE 48FF0425[CC000000]              inc qword[columnaAux] ; Salto hacia abajo y a la derecha
  1097 000011B6 EB08                            jmp seguirSaltoAbajo
  1098                                  
  1099                                          haciaAbajoIzq:
  1100 000011B8 48FF0C25[CC000000]                  dec qword[columnaAux] ; Salto hacia abajo y a la izquierda
  1101                                  
  1102                                          seguirSaltoAbajo:
  1103                                              mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    86 000011C0 488B3C25[C4000000]  <1>  mov rdi, %1
    87 000011C8 488B3425[CC000000]  <1>  mov rsi, %2
    88 000011D0 E865FCFFFF          <1>  call calcularDesplazamiento
    89 000011D5 48890425[D4000000]  <1>  mov %3, rax
  1104                                              mEstaVacia qword[desplazAux]
    93 000011DD B800000000          <1>  mov rax, 0
    94 000011E2 488B3C25[D4000000]  <1>  mov rdi, %1
    95 000011EA E836FCFFFF          <1>  call estaVacia
  1105 000011EF 4883F801                            cmp rax, 1
  1106 000011F3 7406                                je saltoInvalido
  1107                                  
  1108 000011F5 B800000000                          mov rax, 0
  1109 000011FA C3                                  ret
  1110                                  
  1111                                      saltoInvalido:
  1112 000011FB B801000000                      mov rax, 1
  1113 00001200 C3                              ret
  1114                                  
  1115 00001201 C3                          ret
  1116                                  
  1117                                  ; --------------------------------------------------------------------------------------------
  1118                                  ; RUTINA PARA CAPTURAR UN SOLDADO
  1119                                  ; --------------------------------------------------------------------------------------------
  1120                                  
  1121                                  capturarSoldado:
  1122 00001202 488B0425[A4000000]          mov rax, qword[desplazCasOrig] ; Oficial a mover
  1123 0000120A 488B1C25[BC000000]          mov rbx, qword[desplazCasAMover] ; Soldado a capturar
  1124 00001212 488B0C25[D4000000]          mov rcx, qword[desplazAux] ; Casilla destino del oficial (donde va a quedar)
  1125                                  
  1126 0000121A C680[10000000]20            mov byte[tableroEnJuego+rax], ' '
  1127 00001221 C683[10000000]20            mov byte[tableroEnJuego+rbx], ' '
  1128                                      
  1129 00001228 8A1425[FF080000]            mov dl, byte[simboloOficiales]
  1130 0000122F 8891[10000000]              mov byte[tableroEnJuego+rcx], dl
  1131                                  
  1132 00001235 48FF0425[FD080000]          inc qword[cantSoldCapturados] ; Aumentamos el contador de capturas
  1133                                  
  1134 0000123D C3                          ret
