     1                                  %macro mPuts 1 ; Imprime el string %1, hasta encontrar un 0
     2                                      mov rdi, %1
     3                                      sub rsp, 8
     4                                      call puts
     5                                      add rsp, 8
     6                                  %endmacro
     7                                  
     8                                  %macro mPrint 2 ; Imprime el string %2 con formato %1
     9                                      mov rdi, %1
    10                                      mov rsi, %2
    11                                      sub rsp, 8
    12                                      call printf
    13                                      add rsp, 8
    14                                  %endmacro
    15                                  
    16                                  %macro mGets 1 ; Obtiene un string por teclado, guardándolo en %1
    17                                      mov rdi, %1
    18                                      sub rsp, 8
    19                                      call gets
    20                                      add rsp, 8
    21                                  %endmacro
    22                                  
    23                                  %macro mCommand 1 ; Ejecuta el comando %1 de la terminal
    24                                      mov rdi, %1
    25                                      sub rsp, 8
    26                                      call system
    27                                      add rsp, 8
    28                                  %endmacro
    29                                  
    30                                  %macro mMov 3 ; Copia %3 bytes del campo de memoria %2 al campo de memoria %1
    31                                      mov rcx, %3
    32                                      lea rsi, [%2]
    33                                      lea rdi, [%1]
    34                                      rep movsb
    35                                  %endmacro
    36                                  
    37                                  %macro mCmp 3 ; Compara %3 bytes del campo %1 con %2
    38                                      mov rcx, %3
    39                                      lea rsi, %1
    40                                      lea rdi, %2
    41                                      repe cmpsb
    42                                  %endmacro 
    43                                  
    44                                  %macro mErrorJump 2 ; Imprime el mensaje de error %1 y salta a la etiqueta %2
    45                                      mPuts %1
    46                                      jmp %2
    47                                  %endmacro
    48                                  
    49                                  %macro mfGets 2
    50                                      mov rdi, %1
    51                                      mov rsi, %2
    52                                      mov rdx, [stdin]
    53                                      sub rsp, 8
    54                                      call fgets
    55                                      add rsp, 8
    56                                  %endmacro
    57                                  
    58                                  %macro mLeerEntradaEstandar 2
    59                                      mov rax, 0      ; syscall: read
    60                                      mov rdi, 0      ; 0: stdin
    61                                      mov rsi, %1   ; buffer (direccion de guardado de lo leido)
    62                                      mov rdx, %2     ; Cuantos bytes queremos leer
    63                                      syscall
    64                                  
    65                                      mov byte[rsi+rax], 0
    66                                  %endmacro
    67                                  
    68                                  %macro mSscanf 3
    69                                      lea rdi, %1     ; Variable Original string
    70                                      mov rsi, %2     ; Formato
    71                                      mov rdx, %3     ; Variable a guardar el int
    72                                      sub rsp, 8
    73                                      call sscanf
    74                                      add rsp, 8
    75                                  %endmacro
    76                                  
    77                                  %macro mSprintf 3
    78                                      mov rdi, %1     ; Variable donde se guardará el string
    79                                      mov rsi, %2     ; Formato
    80                                      mov rdx, %3     ; Variable a guardar en el string
    81                                      sub rsp, 8
    82                                      call sprintf
    83                                      add rsp, 8
    84                                  %endmacro
    85                                  
    86                                  %macro mCalcDesplaz 3
    87                                      mov rdi, %1
    88                                      mov rsi, %2
    89                                      call calcularDesplazamiento
    90                                      mov %3, rax
    91                                  %endmacro
    92                                  
    93                                  %macro mEstaVacia 1 
    94                                      mov rax, 0
    95                                      mov rdi, %1 ; recibe el desplazamiento
    96                                      call estaVacia
    97                                  %endmacro
    98                                  
    99                                  %macro mHaySoldado 1
   100                                      mov rax, 0
   101                                      mov rdi, %1 ; recibe el desplazamiento
   102                                      call haySoldado
   103                                  %endmacro
   104                                  
   105                                  %macro mPuedeCapturar 2
   106                                      mov rdi, %1 ; diferencia de desplazamiento
   107                                      mov rsi, %2 ; 0 para sumar [rdi] al desplazamiento, 1 para restar
   108                                      call podiaComerPieza
   109                                  %endmacro
   110                                  
   111                                  %macro mOpenFile 2
   112                                      mov rdi, %1 ; nombre del archivo
   113                                      mov rsi, %2 ; modo de apertura
   114                                      sub rsp, 8
   115                                      call fopen
   116                                      add rsp, 8
   117                                  
   118                                      cmp rax, 0
   119                                      mov qword[idArchGuardado], rax ; Guardamos el ID del archivo
   120                                  %endmacro
   121                                  
   122                                  %macro mCloseFile 1
   123                                      mov rdi, [%1] ; ID del archivo
   124                                      sub rsp, 8
   125                                      call fclose
   126                                      add rsp, 8
   127                                  %endmacro
   128                                  
   129                                  %macro mReadLine 3 
   130                                      mov rdi, %1 ; lugar a dejar lo leido
   131                                      mov rsi, %2 ; cantidad de bytes a leer
   132                                      mov rdx, %3 ; bloques de lectura
   133                                      mov rcx, [idArchGuardado] ; ID del archivo
   134                                      sub rsp, 8
   135                                      call fread
   136                                      add rsp, 8
   137                                  %endmacro
   138                                  
   139                                  %macro mWriteLine 3
   140                                      mov rdi, %1 ; string a escribir
   141                                      mov rsi, %2 ; cantidad de bytes a escribir
   142                                      mov rdx, %3 ; bloques de escritura
   143                                      mov rcx, [idArchGuardado] ; ID del archivo
   144                                      sub rsp, 8
   145                                      call fwrite
   146                                      add rsp, 8
   147                                  %endmacro
   148                                  
   149                                  ; Importación de funciones de la librería C
   150                                  extern puts, printf
   151                                  extern gets
   152                                  extern system, stdin
   153                                  extern sscanf, sprintf
   154                                  extern fopen, fclose, fread, fwrite, fgets
   155                                  
   156                                  section .data
   157                                  
   158                                      ; Tableros y sus posibles estados
   159                                  
   160 00000000 202031323334353637-         tableroOrig         db " "," ","1","2","3","4","5","6","7"," ",10
   160 00000009 200A               
   161 0000000B 2020202D5F5F5F2D20-                             db " "," "," ","-","_","_","_","-"," "," ",10 
   161 00000014 200A               
   162 00000016 3120207C5858587C20-                             db "1"," "," ","|","X","X","X","|"," "," ",10
   162 0000001F 200A               
   163 00000021 322D5F7C5858587C5F-                             db "2","-","_","|","X","X","X","|","_","-",10
   163 0000002A 2D0A               
   164 0000002C 337C58585858585858-                             db "3","|","X","X","X","X","X","X","X","|",10 
   164 00000035 7C0A               
   165 00000037 347C58585858585858-                             db "4","|","X","X","X","X","X","X","X","|",10 
   165 00000040 7C0A               
   166 00000042 357C58582020205858-                             db "5","|","X","X"," "," "," ","X","X","|",10 
   166 0000004B 7C0A               
   167 0000004D 362D2D7C20204F7C2D-                             db "6","-","-","|"," "," ","O","|","-","-",10 
   167 00000056 2D0A               
   168 00000058 3720207C4F20207C20-                             db "7"," "," ","|","O"," "," ","|"," "," ",10 
   168 00000061 200A               
   169 00000063 2020202D2D2D2D2D20-                             db " "," "," ","-","-","-","-","-"," "," ",10,0
   169 0000006C 200A00             
   170                                  
   171                                      ; Mensajes
   172                                  
   173 0000006F C2A14269656E76656E-         msgBienvenida           db "¡Bienvenido al juego El Asalto! ('#' para salir)", 0
   173 00000078 69646F20616C206A75-
   173 00000081 65676F20456C204173-
   173 0000008A 616C746F2120282723-
   173 00000093 272070617261207361-
   173 0000009C 6C69722900         
   174                                  
   175 000000A1 4F706369C3B36E2069-         msgOpcionInvalida       db "Opción inválida. Intente de nuevo.", 0
   175 000000AA 6E76C3A16C6964612E-
   175 000000B3 20496E74656E746520-
   175 000000BC 6465206E7565766F2E-
   175 000000C5 00                 
   176                                      
   177 000000C6 436173696C6C612069-         msgCasillaInvalidaSold  db "Casilla inválida: no hay un soldado en esa casilla. Intente de nuevo.", 0
   177 000000CF 6E76C3A16C6964613A-
   177 000000D8 206E6F206861792075-
   177 000000E1 6E20736F6C6461646F-
   177 000000EA 20656E206573612063-
   177 000000F3 6173696C6C612E2049-
   177 000000FC 6E74656E7465206465-
   177 00000105 206E7565766F2E00   
   178 0000010D 4572726F7220656E20-         msgErrorInputSold       db "Error en el formato de entrada del soldado. Intente de nuevo.", 0
   178 00000116 656C20666F726D6174-
   178 0000011F 6F20646520656E7472-
   178 00000128 6164612064656C2073-
   178 00000131 6F6C6461646F2E2049-
   178 0000013A 6E74656E7465206465-
   178 00000143 206E7565766F2E00   
   179 0000014B 4E6F20736520707565-         msgCasillaInvMovSold    db "No se puede mover el soldado a esa casilla. Intente de nuevo.", 0
   179 00000154 6465206D6F76657220-
   179 0000015D 656C20736F6C646164-
   179 00000166 6F2061206573612063-
   179 0000016F 6173696C6C612E2049-
   179 00000178 6E74656E7465206465-
   179 00000181 206E7565766F2E00   
   180                                  
   181 00000189 436173696C6C612069-         msgCasillaInvalidaOfic  db "Casilla inválida: no hay un oficial en esa casilla. Intente de nuevo.", 0
   181 00000192 6E76C3A16C6964613A-
   181 0000019B 206E6F206861792075-
   181 000001A4 6E206F66696369616C-
   181 000001AD 20656E206573612063-
   181 000001B6 6173696C6C612E2049-
   181 000001BF 6E74656E7465206465-
   181 000001C8 206E7565766F2E00   
   182 000001D0 4572726F7220656E20-         msgErrorInputOfic       db "Error en el formato de entrada del oficial. Intente de nuevo.", 0
   182 000001D9 656C20666F726D6174-
   182 000001E2 6F20646520656E7472-
   182 000001EB 6164612064656C206F-
   182 000001F4 66696369616C2E2049-
   182 000001FD 6E74656E7465206465-
   182 00000206 206E7565766F2E00   
   183 0000020E 4E6F20736520707565-         msgCasillaInvMovOfic    db "No se puede mover el oficial a esa casilla. Intente de nuevo.", 0
   183 00000217 6465206D6F76657220-
   183 00000220 656C206F6669636961-
   183 00000229 6C2061206573612063-
   183 00000232 6173696C6C612E2049-
   183 0000023B 6E74656E7465206465-
   183 00000244 206E7565766F2E00   
   184                                  
   185 0000024C C2BF517569C3A96E20-         msgQuienInicia          db "¿Quién inicia el juego: oficiales o soldados? (o/s): ", 0
   185 00000255 696E6963696120656C-
   185 0000025E 206A7565676F3A206F-
   185 00000267 66696369616C657320-
   185 00000270 6F20736F6C6461646F-
   185 00000279 733F20286F2F73293A-
   185 00000282 2000               
   186                                  
   187 00000284 C2A1556E206F666963-         msgOficialRetirado      db "¡Un oficial ha sido retirado del juego! Se ha olvidado de atrapar a un soldado.", 0
   187 0000028D 69616C206861207369-
   187 00000296 646F20726574697261-
   187 0000029F 646F2064656C206A75-
   187 000002A8 65676F212053652068-
   187 000002B1 61206F6C7669646164-
   187 000002BA 6F2064652061747261-
   187 000002C3 706172206120756E20-
   187 000002CC 736F6C6461646F2E00 
   188                                  
   189 000002D5 4573746164C3AD7374-         msgEstadisticas         db "Estadísticas de los oficiales:", 10, 0
   189 000002DE 69636173206465206C-
   189 000002E7 6F73206F6669636961-
   189 000002F0 6C65733A0A00       
   190                                  
   191 000002F6 43616E746964616420-         msgCantTotalCapturas    db "Cantidad total de capturas: %d", 10, 10, 0
   191 000002FF 746F74616C20646520-
   191 00000308 63617074757261733A-
   191 00000311 2025640A0A00       
   192                                  
   193 00000317 4F66696369616C2031-         msgOficial1             db "Oficial 1:", 10, 0
   193 00000320 3A0A00             
   194 00000323 4F66696369616C2032-         msgOficial2             db "Oficial 2:", 10, 0
   194 0000032C 3A0A00             
   195                                  
   196 0000032F 4D6F76696D69656E74-         msgCantMovimientos      db "Movimientos totales: %d", 10, 0
   196 00000338 6F7320746F74616C65-
   196 00000341 733A2025640A00     
   197 00000348 2D2048616369612061-         msgCantAdelante         db "- Hacia adelante: %d", 10, 0
   197 00000351 64656C616E74653A20-
   197 0000035A 25640A00           
   198 0000035E 2D204861636961206C-         msgCantDerecha          db "- Hacia la derecha: %d", 10, 0
   198 00000367 612064657265636861-
   198 00000370 3A2025640A00       
   199 00000376 2D204861636961206C-         msgCantIzquierda        db "- Hacia la izquierda: %d", 10, 0
   199 0000037F 6120697A7175696572-
   199 00000388 64613A2025640A00   
   200 00000390 2D2048616369612061-         msgCantAtras            db "- Hacia atrás: %d", 10, 0
   200 00000399 7472C3A1733A202564-
   200 000003A2 0A00               
   201 000003A4 2D20456E2064696167-         msgCantDiagonal         db "- En diagonal: %d", 10, 0
   201 000003AD 6F6E616C3A2025640A-
   201 000003B6 00                 
   202 000003B7 2D2D2D204164656C61-         msgCantDiagArribaDer    db "--- Adelante-derecha: %d", 10, 0
   202 000003C0 6E74652D6465726563-
   202 000003C9 68613A2025640A00   
   203 000003D1 2D2D2D204164656C61-         msgCantDiagArribaIzq    db "--- Adelante-izquierda: %d", 10, 0
   203 000003DA 6E74652D697A717569-
   203 000003E3 657264613A2025640A-
   203 000003EC 00                 
   204 000003ED 2D2D2D20417472C3A1-         msgCantDiagAbajoDer     db "--- Atrás-derecha: %d", 10, 0
   204 000003F6 732D64657265636861-
   204 000003FF 3A2025640A00       
   205 00000405 2D2D2D20417472C3A1-         msgCantDiagAbajoIzq     db "--- Atrás-izquierda: %d", 10, 0
   205 0000040E 732D697A7175696572-
   205 00000417 64613A2025640A00   
   206                                  
   207 0000041F 43616E746964616420-         msgCantSoldadosCapt     db "Cantidad de soldados capturados: %d", 10, 10, 0
   207 00000428 646520736F6C646164-
   207 00000431 6F7320636170747572-
   207 0000043A 61646F733A2025640A-
   207 00000443 0A00               
   208                                  
   209 00000445 C2A1456C206A756567-         msgJuegoTerminado       db "¡El juego ha terminado!", 10, 0
   209 0000044E 6F206861207465726D-
   209 00000457 696E61646F210A00   
   210 0000045F C2A1456C2067616E61-         msgGanador              db "¡El ganador es el equipo de los %s!", 10, 0
   210 00000468 646F7220657320656C-
   210 00000471 2065717569706F2064-
   210 0000047A 65206C6F7320257321-
   210 00000483 0A00               
   211 00000485 736F6C6461646F7300          stringSoldados          db "soldados", 0
   212 0000048E 6F66696369616C6573-         stringOficiales         db "oficiales", 0
   212 00000497 00                 
   213                                  
   214 00000498 52617AC3B36E3A2025-         msgRazonGanador         db "Razón: %s", 10, 0
   214 000004A1 730A00             
   215                                  
   216 000004A4 2D2D2D2D00                  varRazonFin             db '----', 0 ; Razón de fin de juego (a llenar)          
   217                                  
   218                                      ; Se ha decidido salir de la partida
   219 000004A9 536520686120646563-         msgSalidaPartida        db "Se ha decidido salir de la partida. ¿Desea guardarla? (s/n)", 0
   219 000004B2 696469646F2073616C-
   219 000004BB 6972206465206C6120-
   219 000004C4 706172746964612E20-
   219 000004CD C2BF44657365612067-
   219 000004D6 7561726461726C613F-
   219 000004DF 2028732F6E2900     
   220 000004E6 4E4F54413A20536920-         msgAclaracionSalida     db "NOTA: Si decide no guardar la partida, se perderá todo el progreso. En cambio, si decide guardarla y tenía una partida guardada, se sobreescribirá.", 0
   220 000004EF 646563696465206E6F-
   220 000004F8 206775617264617220-
   220 00000501 6C6120706172746964-
   220 0000050A 612C20736520706572-
   220 00000513 646572C3A120746F64-
   220 0000051C 6F20656C2070726F67-
   220 00000525 7265736F2E20456E20-
   220 0000052E 63616D62696F2C2073-
   220 00000537 692064656369646520-
   220 00000540 677561726461726C61-
   220 00000549 20792074656EC3AD61-
   220 00000552 20756E612070617274-
   220 0000055B 696461206775617264-
   220 00000564 6164612C2073652073-
   220 0000056D 6F6272656573637269-
   220 00000576 626972C3A12E00     
   221 0000057D 6E00                        guardadoPartida         db 'n', 0 ; guardar (s), no guardar (n)
   222                                  
   223 0000057F 6E00                        yaHabiaGuardado         db 'n', 0 ; ya había guardado (s), no había guardado (n)
   224                                  
   225 00000581 7300                        turnoDe                 db 's', 0 ; soldados (s), oficiales (o)
   226                                  
   227 00000583 C2A150617274696461-         msgPartidaGuardada      db "¡Partida guardada con éxito!", 0
   227 0000058C 206775617264616461-
   227 00000595 20636F6E20C3A97869-
   227 0000059E 746F2100           
   228                                  
   229 000005A2 4572726F7220616C20-         msgErrorOpenFile        db "Error al abrir el archivo.", 0
   229 000005AB 616272697220656C20-
   229 000005B4 6172636869766F2E00 
   230                                  
   231                                      ; Razones de victoria de soldados
   232 000005BD 6C6F7320736F6C6461-         msgSoldadosFortaleza    db "los soldados han ocupado todos los puntos de la fortaleza.", 0
   232 000005C6 646F732068616E206F-
   232 000005CF 63757061646F20746F-
   232 000005D8 646F73206C6F732070-
   232 000005E1 756E746F7320646520-
   232 000005EA 6C6120666F7274616C-
   232 000005F3 657A612E00         
   233 000005F8 6C6F7320736F6C6461-         msgSoldadosRodean       db "los soldados han rodeado a los oficiales.", 0
   233 00000601 646F732068616E2072-
   233 0000060A 6F646561646F206120-
   233 00000613 6C6F73206F66696369-
   233 0000061C 616C65732E00       
   234 00000622 616D626F73206F6669-         msgSoldadosInvalidar    db "ambos oficiales han sido invalidados.", 0
   234 0000062B 6369616C6573206861-
   234 00000634 6E207369646F20696E-
   234 0000063D 76616C696461646F73-
   234 00000646 2E00               
   235                                  
   236                                      ; Razones de victoria de oficiales
   237 00000648 6E6F2071756564616E-         msgOficialesGanan       db "no quedan suficientes soldados para ocupar la fortaleza.", 0
   237 00000651 20737566696369656E-
   237 0000065A 74657320736F6C6461-
   237 00000663 646F73207061726120-
   237 0000066C 6F6375706172206C61-
   237 00000675 20666F7274616C657A-
   237 0000067E 612E00             
   238                                  
   239                                      ; Turnos
   240 00000681 4573207475726E6F20-         msgTurnoSoldados        db "Es turno de los soldados. Decida a qué soldado desea mover: (<numFila>-<numColumna>)", 0
   240 0000068A 6465206C6F7320736F-
   240 00000693 6C6461646F732E2044-
   240 0000069C 656369646120612071-
   240 000006A5 75C3A920736F6C6461-
   240 000006AE 646F20646573656120-
   240 000006B7 6D6F7665723A20283C-
   240 000006C0 6E756D46696C613E2D-
   240 000006C9 3C6E756D436F6C756D-
   240 000006D2 6E613E2900         
   241 000006D7 4573207475726E6F20-         msgTurnoOficiales       db "Es turno de los oficiales. Decida a qué oficial desea mover: (<numFila>-<numColumna>)", 0
   241 000006E0 6465206C6F73206F66-
   241 000006E9 696369616C65732E20-
   241 000006F2 446563696461206120-
   241 000006FB 7175C3A9206F666963-
   241 00000704 69616C206465736561-
   241 0000070D 206D6F7665723A2028-
   241 00000716 3C6E756D46696C613E-
   241 0000071F 2D3C6E756D436F6C75-
   241 00000728 6D6E613E2900       
   242 0000072E C2BF41207175C3A920-         msgTurnoMovSold         db "¿A qué casilla desea mover el soldado? (<numFila>-<numColumna>)", 0
   242 00000737 636173696C6C612064-
   242 00000740 65736561206D6F7665-
   242 00000749 7220656C20736F6C64-
   242 00000752 61646F3F20283C6E75-
   242 0000075B 6D46696C613E2D3C6E-
   242 00000764 756D436F6C756D6E61-
   242 0000076D 3E2900             
   243 00000770 C2BF41207175C3A920-         msgTurnoMovOfic         db "¿A qué casilla desea mover el oficial? (<numFila>-<numColumna>)", 0
   243 00000779 636173696C6C612064-
   243 00000782 65736561206D6F7665-
   243 0000078B 7220656C206F666963-
   243 00000794 69616C3F20283C6E75-
   243 0000079D 6D46696C613E2D3C6E-
   243 000007A6 756D436F6C756D6E61-
   243 000007AF 3E2900             
   244                                  
   245 000007B2 556E206F6669636961-         msgCapturaSold          db "Un oficial ha capturado a un soldado.", 0
   245 000007BB 6C2068612063617074-
   245 000007C4 757261646F20612075-
   245 000007CD 6E20736F6C6461646F-
   245 000007D6 2E00               
   246 000007D8 C2A1556E206F666963-         msgInvalidOfic          db "¡Un oficial ha sido invalidado! No ha capturado a un soldado regalado.", 0
   246 000007E1 69616C206861207369-
   246 000007EA 646F20696E76616C69-
   246 000007F3 6461646F21204E6F20-
   246 000007FC 686120636170747572-
   246 00000805 61646F206120756E20-
   246 0000080E 736F6C6461646F2072-
   246 00000817 6567616C61646F2E00 
   247                                      
   248                                      ; Contadores
   249                                  
   250 00000820 0000000000000000            movimientosOfic1        dq 0
   251 00000828 0000000000000000            movimientosOfic2        dq 0
   252                                      
   253 00000830 0000000000000000            movOfic1Adelante        dq 0
   254 00000838 0000000000000000            movOfic1Derecha         dq 0
   255 00000840 0000000000000000            movOfic1Izquierda       dq 0
   256 00000848 0000000000000000            movOfic1Atras           dq 0
   257 00000850 0000000000000000            movOfic1Diagonal        dq 0
   258 00000858 0000000000000000            movOfic1DiagArribaDer   dq 0
   259 00000860 0000000000000000            movOfic1DiagArribaIzq   dq 0
   260 00000868 0000000000000000            movOfic1DiagAbajoDer    dq 0
   261 00000870 0000000000000000            movOfic1DiagAbajoIzq    dq 0
   262                                  
   263 00000878 0000000000000000            movOfic2Adelante        dq 0
   264 00000880 0000000000000000            movOfic2Derecha         dq 0
   265 00000888 0000000000000000            movOfic2Izquierda       dq 0
   266 00000890 0000000000000000            movOfic2Atras           dq 0
   267 00000898 0000000000000000            movOfic2Diagonal        dq 0
   268 000008A0 0000000000000000            movOfic2DiagArribaDer   dq 0
   269 000008A8 0000000000000000            movOfic2DiagArribaIzq   dq 0
   270 000008B0 0000000000000000            movOfic2DiagAbajoDer    dq 0
   271 000008B8 0000000000000000            movOfic2DiagAbajoIzq    dq 0
   272                                  
   273 000008C0 0000000000000000            cantSoldCapturados      dq 0 ; Cuando haya 16 soldados capturados, los oficiales ganan
   274 000008C8 0000000000000000            cantOficInvalidados     dq 0 ; Cuando haya 2 oficiales invalidados, los soldados ganan
   275                                  
   276 000008D0 070000000000000003-         casillaOfic1            dq 7,3
   276 000008D9 00000000000000     
   277 000008E0 060000000000000005-         casillaOfic2            dq 6,5
   277 000008E9 00000000000000     
   278                                  
   279 000008F0 0000000000000000            cantCapturasOfic1       dq 0
   280 000008F8 0000000000000000            cantCapturasOfic2       dq 0
   281                                  
   282 00000900 4F00                        simboloOficiales        db 'O', 0
   283 00000902 5800                        simboloSoldados         db 'X', 0
   284                                      
   285 00000904 04                          orientacionTablero      db  4       ; 4 -> no rotar (default) 
   286 00000905 73                          piezaDeInicio           db 's'      ; soldados (s), oficiales (o)
   287                                  
   288                                      ; Comandos 
   289 00000906 636C65617200                cmdLimpiarPantalla          db "clear", 0
   290 0000090C 746F75636820706172-         cmdCrearArchivoPartida      db "touch partidaGuardada.dat", 0
   290 00000915 746964614775617264-
   290 0000091E 6164612E64617400   
   291 00000926 726D20706172746964-         cmdBorrarArchivoPartida     db "rm partidaGuardada.dat", 0
   291 0000092F 614775617264616461-
   291 00000938 2E64617400         
   292 0000093D 6563686F202D6E203E-         cmdLimpiarArchivo           db "echo -n > partidaGuardada.dat", 0
   292 00000946 207061727469646147-
   292 0000094F 756172646164612E64-
   292 00000958 617400             
   293                                  
   294                                      ; Formatos
   295 0000095B 257500                      formatoAtoi             db "%u", 0
   296 0000095E 257300                      formatoItoa             db "%s", 0
   297                                  
   298                                      ; Modos de apertura de archivos
   299 00000961 726200                      modoLectura             db "rb", 0
   300 00000964 776200                      modoEscritura           db "wb", 0
   301 00000967 616200                      modoAppend              db "ab", 0
   302                                  
   303 0000096A 706172746964614775-         nombreArchivo           db "partidaGuardada.dat", 0
   303 00000973 6172646164612E6461-
   303 0000097C 7400               
   304                                  
   305                                  section .bss
   306                                  
   307 00000000 ????????                    piezaIniElegida     resd 1  ; Variable pivote para la pieza que inicia
   308                                  
   309 00000004 <res 74h>                   tableroEnJuego      resb 116 ; Tablero en juego
   310                                  
   311 00000078 ????????                    soldadoElegido      resb 4  ; Fila y columna del soldado a mover
   312 0000007C ????????                    casillaMovSold      resb 4  ; Fila y columna de la casilla de destino del soldado
   313                                  
   314 00000080 ????????                    oficialElegido      resb 4  ; Fila y columna del oficial a mover
   315 00000084 ????????                    casillaMovOfic      resb 4  ; Fila y columna de la casilla de destino del oficial
   316                                  
   317 00000088 ????????????????            fila                resq 1
   318 00000090 ????????????????            columna             resq 1   
   319 00000098 ????????????????            desplazCasOrig      resq 1
   320                                  
   321 000000A0 ????????????????            filaAMover          resq 1
   322 000000A8 ????????????????            columnaAMover       resq 1
   323 000000B0 ????????????????            desplazCasAMover    resq 1
   324                                  
   325 000000B8 ????????????????            filaAux             resq 1
   326 000000C0 ????????????????            columnaAux          resq 1
   327 000000C8 ????????????????            desplazAux          resq 1
   328 000000D0 ????????????????            desplazAux2         resq 1
   329                                  
   330 000000D8 ????????????????            idArchGuardado      resq 1 ; ID del archivo de la partida guardada
   331                                      
   332 000000E0 <res 47h>                   msgErrorEspecificoSold  resb 71 ; Máximo largo de mensaje de error para soldados
   333 00000127 <res 47h>                   msgErrorEspecificoOfic  resb 71 ; Máximo largo de mensaje de error para oficiales
   334                                  
   335 0000016E <res 47h>                   msgErrorEspecificoSoldMov   resb 71 ; Máximo largo de mensaje de error para movimientos de soldados
   336 000001B5 <res 47h>                   msgErrorEspecificoOficMov   resb 71 ; Máximo largo de mensaje de error para movimientos de oficiales
   337                                  
   338                                  section .text
   339                                      global main
   340                                  
   341                                  main:
   342                                      ; Vemos si hay una partida guardada
   343                                      mOpenFile nombreArchivo, modoLectura
   112 00000000 48BF-               <1>  mov rdi, %1
   112 00000002 [6A09000000000000]  <1>
   113 0000000A 48BE-               <1>  mov rsi, %2
   113 0000000C [6109000000000000]  <1>
   114 00000014 4883EC08            <1>  sub rsp, 8
   115 00000018 E8(00000000)        <1>  call fopen
   116 0000001D 4883C408            <1>  add rsp, 8
   117                              <1> 
   118 00000021 4883F800            <1>  cmp rax, 0
   119 00000025 48890425[D8000000]  <1>  mov qword[idArchGuardado], rax
   344 0000002D 4883F800                    cmp rax, 0
   345 00000031 7F02                        jg partidaGuardada
   346 00000033 EB18                        jmp bienvenida
   347                                  
   348                                      partidaGuardada:
   349 00000035 E8CF270000                      call abrirPartidaGuardada
   350 0000003A 803C25[81050000]73              cmp byte[turnoDe], 's'
   351 00000042 0F84D8000000                    je loopMovimientos
   352 00000048 E9C5010000                      jmp turnoOficiales
   353                                  
   354                                      bienvenida:
   355                                          mPuts msgBienvenida
     2 0000004D 48BF-               <1>  mov rdi, %1
     2 0000004F [6F00000000000000]  <1>
     3 00000057 4883EC08            <1>  sub rsp, 8
     4 0000005B E8(00000000)        <1>  call puts
     5 00000060 4883C408            <1>  add rsp, 8
   356                                          
   357                                      ; Se debe elegir quién inicia la partida
   358                                      personalizarQuienInicia:
   359 00000064 C70425[00000000]00-             mov dword[piezaIniElegida], ''    ; vaciar variable
   359 0000006C 000000             
   360                                          mPuts msgQuienInicia
     2 0000006F 48BF-               <1>  mov rdi, %1
     2 00000071 [4C02000000000000]  <1>
     3 00000079 4883EC08            <1>  sub rsp, 8
     4 0000007D E8(00000000)        <1>  call puts
     5 00000082 4883C408            <1>  add rsp, 8
   361                                          mGets piezaIniElegida
    17 00000086 48BF-               <1>  mov rdi, %1
    17 00000088 [0000000000000000]  <1>
    18 00000090 4883EC08            <1>  sub rsp, 8
    19 00000094 E8(00000000)        <1>  call gets
    20 00000099 4883C408            <1>  add rsp, 8
   362                                  
   363 0000009D 833C25[00000000]23              cmp dword[piezaIniElegida], '#'
   364 000000A5 0F8434210000                    je salirSinGuardar
   365                                  
   366 000000AB 833C25[00000000]6F              cmp dword[piezaIniElegida], 'o' 
   367 000000B3 7423                            je setearPiezaInicio
   368 000000B5 833C25[00000000]73              cmp dword[piezaIniElegida], 's'
   369 000000BD 7419                            je setearPiezaInicio
   370                                  
   371                                          mErrorJump msgOpcionInvalida, personalizarQuienInicia
    45                              <1>  mPuts %1
     2 000000BF 48BF-               <2>  mov rdi, %1
     2 000000C1 [A100000000000000]  <2>
     3 000000C9 4883EC08            <2>  sub rsp, 8
     4 000000CD E8(00000000)        <2>  call puts
     5 000000D2 4883C408            <2>  add rsp, 8
    46 000000D6 EB8C                <1>  jmp %2
   372                                  
   373                                          setearPiezaInicio:
   374                                              mMov piezaDeInicio, piezaIniElegida, 1
    31 000000D8 B901000000          <1>  mov rcx, %3
    32 000000DD 488D3425[00000000]  <1>  lea rsi, [%2]
    33 000000E5 488D3C25[05090000]  <1>  lea rdi, [%1]
    34 000000ED F3A4                <1>  rep movsb
   375 000000EF EB00                                jmp comenzarPorInicio
   376                                  
   377                                  ; --------------------------------------------------------------------------------------------
   378                                  ; RUTINA PARA COMENZAR EL JUEGO -> Se comienza desde el jugador elegido (o el default)
   379                                  ; --------------------------------------------------------------------------------------------
   380                                  
   381                                  comenzarPorInicio:
   382                                      mMov tableroEnJuego, tableroOrig, 116
    31 000000F1 B974000000          <1>  mov rcx, %3
    32 000000F6 488D3425[00000000]  <1>  lea rsi, [%2]
    33 000000FE 488D3C25[04000000]  <1>  lea rdi, [%1]
    34 00000106 F3A4                <1>  rep movsb
   383                                  
   384 00000108 803C25[05090000]73          cmp byte[piezaDeInicio], 's'
   385 00000110 740E                        je loopMovimientos
   386 00000112 803C25[05090000]6F          cmp byte[piezaDeInicio], 'o'
   387 0000011A 0F84F2000000                je turnoOficiales
   388                                  
   389                                  
   390                                  ; COMIENZA EL JUEGO
   391                                  loopMovimientos:; mostrarTablero, mostrarTurno, realizarMovimiento, verificarFinJuego
   392 00000120 C60425[E0000000]00          mov byte[msgErrorEspecificoSold], 0
   393                                      turnoSoldados:
   394 00000128 C60425[81050000]73              mov byte[turnoDe], 's'
   395 00000130 C60425[78000000]30              mov byte [soldadoElegido], '0'
   396                                      
   397                                          mCommand cmdLimpiarPantalla ; Limpia la pantalla para mostrar el tablero
    24 00000138 48BF-               <1>  mov rdi, %1
    24 0000013A [0609000000000000]  <1>
    25 00000142 4883EC08            <1>  sub rsp, 8
    26 00000146 E8(00000000)        <1>  call system
    27 0000014B 4883C408            <1>  add rsp, 8
   398                                  
   399                                          mPuts tableroEnJuego ; Muestro el tablero
     2 0000014F 48BF-               <1>  mov rdi, %1
     2 00000151 [0400000000000000]  <1>
     3 00000159 4883EC08            <1>  sub rsp, 8
     4 0000015D E8(00000000)        <1>  call puts
     5 00000162 4883C408            <1>  add rsp, 8
   400                                  
   401 00000166 803C25[E0000000]00              cmp byte[msgErrorEspecificoSold], 0
   402 0000016E 0F85FB020000                    jne imprimirErrorSold
   403                                  
   404                                          todoOkSold:
   405                                  
   406                                              mPuts msgTurnoSoldados      ; Muestra el mensaje de seleccionar ficha a mover
     2 00000174 48BF-               <1>  mov rdi, %1
     2 00000176 [8106000000000000]  <1>
     3 0000017E 4883EC08            <1>  sub rsp, 8
     4 00000182 E8(00000000)        <1>  call puts
     5 00000187 4883C408            <1>  add rsp, 8
   407                                              mGets soldadoElegido        ; Obtiene la ficha a mover
    17 0000018B 48BF-               <1>  mov rdi, %1
    17 0000018D [7800000000000000]  <1>
    18 00000195 4883EC08            <1>  sub rsp, 8
    19 00000199 E8(00000000)        <1>  call gets
    20 0000019E 4883C408            <1>  add rsp, 8
   408                                  
   409 000001A2 803C25[78000000]23                  cmp byte[soldadoElegido], '#'
   410 000001AA 0F8435200000                        je salirDelJuego
   411                                              
   412 000001B0 E95E010000                          jmp verificarFichaSold ; Verifica si la ficha elegida es valida
   413                                  
   414                                              casillaAMoverseSold:
   415                                                  
   416                                                  mPuts msgTurnoMovSold   ; Muestra el mensaje de seleccionar casilla a mover
     2 000001B5 48BF-               <1>  mov rdi, %1
     2 000001B7 [2E07000000000000]  <1>
     3 000001BF 4883EC08            <1>  sub rsp, 8
     4 000001C3 E8(00000000)        <1>  call puts
     5 000001C8 4883C408            <1>  add rsp, 8
   417                                                  mGets casillaMovSold    ; Obtiene la casilla a mover
    17 000001CC 48BF-               <1>  mov rdi, %1
    17 000001CE [7C00000000000000]  <1>
    18 000001D6 4883EC08            <1>  sub rsp, 8
    19 000001DA E8(00000000)        <1>  call gets
    20 000001DF 4883C408            <1>  add rsp, 8
   418                                  
   419 000001E3 803C25[7C000000]23                      cmp byte[casillaMovSold], '#'
   420 000001EB 0F84F41F0000                            je salirDelJuego
   421                                  
   422 000001F1 E913040000                              jmp verificarMovimientoSold ; Verifica si el movimiento es valido
   423                                  
   424                                                  moverSoldado:
   425 000001F6 E85E0A0000                                  call realizarMovimientoSold ; Realiza el movimiento
   426                                                      
   427 000001FB E8D5150000                                  call verificarFinJuegoSoldados ; Verificar fin de juego por algún movimiento de soldado
   428 00000200 4883F800                                    cmp rax, 0
   429 00000204 0F842D1B0000                                je finDeJuego
   430                                  
   431 0000020A C60425[27010000]00          mov byte[msgErrorEspecificoOfic], 0
   432                                      turnoOficiales:
   433 00000212 C60425[81050000]6F              mov byte[turnoDe], 'o'
   434 0000021A C60425[80000000]30              mov byte[oficialElegido], '0'
   435                                          
   436                                          mCommand cmdLimpiarPantalla ; Limpia la pantalla para mostrar el tablero
    24 00000222 48BF-               <1>  mov rdi, %1
    24 00000224 [0609000000000000]  <1>
    25 0000022C 4883EC08            <1>  sub rsp, 8
    26 00000230 E8(00000000)        <1>  call system
    27 00000235 4883C408            <1>  add rsp, 8
   437                                  
   438                                          mPuts tableroEnJuego ; Muestra el tablero
     2 00000239 48BF-               <1>  mov rdi, %1
     2 0000023B [0400000000000000]  <1>
     3 00000243 4883EC08            <1>  sub rsp, 8
     4 00000247 E8(00000000)        <1>  call puts
     5 0000024C 4883C408            <1>  add rsp, 8
   439                                  
   440 00000250 803C25[27010000]00              cmp byte[msgErrorEspecificoOfic], 0
   441 00000258 0F858F030000                    jne imprimirErrorOfic
   442                                  
   443                                          todoOkOfic:
   444                                  
   445                                              mPuts msgTurnoOficiales ; Muestra el mensaje de seleccionar ficha a mover
     2 0000025E 48BF-               <1>  mov rdi, %1
     2 00000260 [D706000000000000]  <1>
     3 00000268 4883EC08            <1>  sub rsp, 8
     4 0000026C E8(00000000)        <1>  call puts
     5 00000271 4883C408            <1>  add rsp, 8
   446                                              mGets oficialElegido    ; Obtiene la ficha a mover
    17 00000275 48BF-               <1>  mov rdi, %1
    17 00000277 [8000000000000000]  <1>
    18 0000027F 4883EC08            <1>  sub rsp, 8
    19 00000283 E8(00000000)        <1>  call gets
    20 00000288 4883C408            <1>  add rsp, 8
   447                                  
   448 0000028C 803C25[80000000]23                  cmp byte[oficialElegido], '#'
   449 00000294 0F844B1F0000                        je salirDelJuego
   450                                  
   451 0000029A E9EC010000                          jmp verificarFichaOfic ; Verifica si la ficha elegida es valida
   452                                  
   453                                              casillaAMoverseOfic:
   454                                  
   455                                                  mPuts msgTurnoMovOfic   ; Muestra el mensaje de seleccionar casilla a mover
     2 0000029F 48BF-               <1>  mov rdi, %1
     2 000002A1 [7007000000000000]  <1>
     3 000002A9 4883EC08            <1>  sub rsp, 8
     4 000002AD E8(00000000)        <1>  call puts
     5 000002B2 4883C408            <1>  add rsp, 8
   456                                                  mGets casillaMovOfic    ; Obtiene la casilla a mover
    17 000002B6 48BF-               <1>  mov rdi, %1
    17 000002B8 [8400000000000000]  <1>
    18 000002C0 4883EC08            <1>  sub rsp, 8
    19 000002C4 E8(00000000)        <1>  call gets
    20 000002C9 4883C408            <1>  add rsp, 8
   457                                  
   458 000002CD 803C25[84000000]23                      cmp byte[casillaMovOfic], '#'
   459 000002D5 0F840A1F0000                            je salirDelJuego
   460                                                  
   461 000002DB E9C3060000                              jmp verificarMovimientoOfic ; Verifica si el movimiento es valido
   462                                  
   463                                                  moverOficial:
   464 000002E0 E8A2090000                                  call realizarMovimientoOfic ; Realiza el movimiento
   465                                                      ; Verificar fin de juego por algún movimiento de oficial
   466 000002E5 E8B1140000                                  call verificarFinJuegoOficiales
   467 000002EA 4883F800                                    cmp rax, 0
   468 000002EE 0F84431A0000                                je finDeJuego
   469                                                      
   470 000002F4 E927FEFFFF                                  jmp loopMovimientos
   471                                                  
   472                                                  capturar:
   473 000002F9 E88E0D0000                                  call capturarSoldado ; Captura soldado
   474                                                      ; Verificar fin de juego por captura de soldado
   475 000002FE E898140000                                  call verificarFinJuegoOficiales
   476 00000303 4883F800                                    cmp rax, 0
   477 00000307 0F842A1A0000                                je finDeJuego
   478                                                      
   479                                                  ; Repetir en loop
   480 0000030D E90EFEFFFF                              jmp loopMovimientos
   481                                  
   482 00000312 C3                          ret
   483                                  
   484                                  ; --------------------------------------------------------------------------------------------
   485                                  ; VERIFICACIONES DE PIEZAS ORIGINALES A MOVER PARA SOLDADOS Y OFICIALES
   486                                  ; --------------------------------------------------------------------------------------------
   487                                  
   488                                  verificarFichaSold:
   489 00000313 8A0425[78000000]            mov al, byte[soldadoElegido] ; Numero de fila
   490                                      
   491 0000031A 3C31                        cmp al, '1'
   492 0000031C 0F8C05010000                jl errorInputSold
   493 00000322 3C37                        cmp al, '7'
   494 00000324 0F8FFD000000                jg errorInputSold
   495                                  
   496 0000032A 48C70425[88000000]-         mov qword[fila], 0
   496 00000332 00000000           
   497                                      mSscanf byte[soldadoElegido], formatoAtoi, fila
    69 00000336 488D3C25[78000000]  <1>  lea rdi, %1
    70 0000033E 48BE-               <1>  mov rsi, %2
    70 00000340 [5B09000000000000]  <1>
    71 00000348 48BA-               <1>  mov rdx, %3
    71 0000034A [8800000000000000]  <1>
    72 00000352 4883EC08            <1>  sub rsp, 8
    73 00000356 E8(00000000)        <1>  call sscanf
    74 0000035B 4883C408            <1>  add rsp, 8
   498                                  
   499 0000035F 4883F801                    cmp rax, 1
   500 00000363 0F8CBE000000                jl errorInputSold
   501                                  
   502 00000369 8A0425[79000000]            mov al, byte[soldadoElegido+1] ; Caracter '-'
   503 00000370 3C2D                        cmp al, '-'
   504 00000372 0F85AF000000                jne errorInputSold
   505                                      
   506 00000378 8A0425[7A000000]            mov al, byte[soldadoElegido+2] ; Numero de columna
   507 0000037F 3C31                        cmp al, '1'
   508 00000381 0F8CA0000000                jl errorInputSold
   509 00000387 3C37                        cmp al, '7'
   510 00000389 0F8F98000000                jg errorInputSold
   511                                  
   512 0000038F 48C70425[90000000]-         mov qword[columna], 0
   512 00000397 00000000           
   513                                      mSscanf byte[soldadoElegido+2], formatoAtoi, columna
    69 0000039B 488D3C25[7A000000]  <1>  lea rdi, %1
    70 000003A3 48BE-               <1>  mov rsi, %2
    70 000003A5 [5B09000000000000]  <1>
    71 000003AD 48BA-               <1>  mov rdx, %3
    71 000003AF [9000000000000000]  <1>
    72 000003B7 4883EC08            <1>  sub rsp, 8
    73 000003BB E8(00000000)        <1>  call sscanf
    74 000003C0 4883C408            <1>  add rsp, 8
   514                                  
   515 000003C4 4883F801                    cmp rax, 1
   516 000003C8 7C5D                        jl errorInputSold
   517                                  
   518 000003CA 8A0425[7B000000]            mov al, byte[soldadoElegido+3] ; Caracter nulo
   519 000003D1 3C00                        cmp al, 0
   520 000003D3 7552                        jne errorInputSold
   521                                  
   522                                      ; Calculamos desplazamiento en tablero
   523                                      mCalcDesplaz [fila], [columna], qword[desplazCasOrig]
    87 000003D5 488B3C25[88000000]  <1>  mov rdi, %1
    88 000003DD 488B3425[90000000]  <1>  mov rsi, %2
    89 000003E5 E859080000          <1>  call calcularDesplazamiento
    90 000003EA 48890425[98000000]  <1>  mov %3, rax
   524 000003F2 488B1C25[98000000]          mov rbx, qword[desplazCasOrig]
   525                                      
   526 000003FA B800000000                  mov rax,0
   527 000003FF BA00000000                  mov rdx, 0
   528                                  
   529 00000404 8A93[04000000]              mov dl, byte[tableroEnJuego+rbx]
   530 0000040A 8A0425[02090000]            mov al, [simboloSoldados]
   531                                  
   532 00000411 38C2                        cmp dl, al
   533 00000413 7536                        jne errorCasillaInvalidaSold
   534                                      
   535 00000415 B800000000                  mov rax, 0
   536 0000041A 48890425[E0000000]          mov [msgErrorEspecificoSold], rax
   537 00000422 E98EFDFFFF                  jmp casillaAMoverseSold
   538                                  
   539                                      errorInputSold:
   540 00000427 488B0425[0D010000]              mov rax, [msgErrorInputSold]
   541                                          mMov msgErrorEspecificoSold, msgErrorInputSold, 62
    31 0000042F B93E000000          <1>  mov rcx, %3
    32 00000434 488D3425[0D010000]  <1>  lea rsi, [%2]
    33 0000043C 488D3C25[E0000000]  <1>  lea rdi, [%1]
    34 00000444 F3A4                <1>  rep movsb
   542 00000446 E9DDFCFFFF                      jmp turnoSoldados
   543                                  
   544                                      errorCasillaInvalidaSold:
   545 0000044B 488B0425[C6000000]              mov rax, [msgCasillaInvalidaSold]
   546                                          mMov msgErrorEspecificoSold, msgCasillaInvalidaSold, 71
    31 00000453 B947000000          <1>  mov rcx, %3
    32 00000458 488D3425[C6000000]  <1>  lea rsi, [%2]
    33 00000460 488D3C25[E0000000]  <1>  lea rdi, [%1]
    34 00000468 F3A4                <1>  rep movsb
   547 0000046A E9B9FCFFFF                      jmp turnoSoldados
   548                                  
   549                                      imprimirErrorSold:
   550                                          mPuts msgErrorEspecificoSold
     2 0000046F 48BF-               <1>  mov rdi, %1
     2 00000471 [E000000000000000]  <1>
     3 00000479 4883EC08            <1>  sub rsp, 8
     4 0000047D E8(00000000)        <1>  call puts
     5 00000482 4883C408            <1>  add rsp, 8
   551 00000486 E9E9FCFFFF                      jmp todoOkSold
   552                                      
   553                                  
   554                                  verificarFichaOfic:
   555 0000048B 8A0C25[80000000]            mov cl, byte[oficialElegido] ; Numero de fila
   556                                      
   557 00000492 80F931                      cmp cl, '1'
   558 00000495 0F8C0A010000                jl errorInputOfic
   559 0000049B 80F937                      cmp cl, '7'
   560 0000049E 0F8F01010000                jg errorInputOfic
   561                                      
   562 000004A4 48C70425[88000000]-         mov qword[fila], 0
   562 000004AC 00000000           
   563                                      mSscanf byte[oficialElegido], formatoAtoi, fila
    69 000004B0 488D3C25[80000000]  <1>  lea rdi, %1
    70 000004B8 48BE-               <1>  mov rsi, %2
    70 000004BA [5B09000000000000]  <1>
    71 000004C2 48BA-               <1>  mov rdx, %3
    71 000004C4 [8800000000000000]  <1>
    72 000004CC 4883EC08            <1>  sub rsp, 8
    73 000004D0 E8(00000000)        <1>  call sscanf
    74 000004D5 4883C408            <1>  add rsp, 8
   564                                  
   565 000004D9 4883F801                    cmp rax, 1
   566 000004DD 0F8CC2000000                jl errorInputOfic
   567                                  
   568 000004E3 8A0C25[81000000]            mov cl, byte[oficialElegido+1] ; Caracter '-'
   569 000004EA 80F92D                      cmp cl, '-'
   570 000004ED 0F85B2000000                jne errorInputOfic
   571                                      
   572 000004F3 8A0C25[82000000]            mov cl, byte[oficialElegido+2] ; Numero de columna
   573 000004FA 80F931                      cmp cl, '1'
   574 000004FD 0F8CA2000000                jl errorInputOfic
   575 00000503 80F937                      cmp cl, '7'
   576 00000506 0F8F99000000                jg errorInputOfic
   577                                  
   578 0000050C 48C70425[90000000]-         mov qword[columna], 0
   578 00000514 00000000           
   579                                      mSscanf byte[oficialElegido+2], formatoAtoi, columna
    69 00000518 488D3C25[82000000]  <1>  lea rdi, %1
    70 00000520 48BE-               <1>  mov rsi, %2
    70 00000522 [5B09000000000000]  <1>
    71 0000052A 48BA-               <1>  mov rdx, %3
    71 0000052C [9000000000000000]  <1>
    72 00000534 4883EC08            <1>  sub rsp, 8
    73 00000538 E8(00000000)        <1>  call sscanf
    74 0000053D 4883C408            <1>  add rsp, 8
   580                                  
   581 00000541 4883F801                    cmp rax, 1
   582 00000545 7C5E                        jl errorInputOfic
   583                                  
   584 00000547 8A0C25[83000000]            mov cl, byte[oficialElegido+3] ; Caracter nulo
   585 0000054E 80F900                      cmp cl, 0
   586 00000551 7552                        jne errorInputOfic
   587                                  
   588                                      ; Calculamos desplazamiento en tablero
   589                                      mCalcDesplaz [fila], [columna], qword[desplazCasOrig]
    87 00000553 488B3C25[88000000]  <1>  mov rdi, %1
    88 0000055B 488B3425[90000000]  <1>  mov rsi, %2
    89 00000563 E8DB060000          <1>  call calcularDesplazamiento
    90 00000568 48890425[98000000]  <1>  mov %3, rax
   590 00000570 488B1C25[98000000]          mov rbx, qword[desplazCasOrig]
   591                                      
   592 00000578 B800000000                  mov rax, 0
   593 0000057D BA00000000                  mov rdx, 0
   594                                  
   595 00000582 8A93[04000000]              mov dl, byte[tableroEnJuego+rbx]
   596 00000588 8A0C25[00090000]            mov cl, [simboloOficiales]
   597                                  
   598 0000058F 38CA                        cmp dl, cl
   599 00000591 7536                        jne errorCasillaInvalidaOfic
   600                                      
   601 00000593 B800000000                  mov rax, 0
   602 00000598 48890425[27010000]          mov [msgErrorEspecificoOfic], rax
   603 000005A0 E9FAFCFFFF                  jmp casillaAMoverseOfic
   604                                  
   605                                      errorInputOfic:
   606 000005A5 488B0425[D0010000]              mov rax, [msgErrorInputOfic]
   607                                          mMov msgErrorEspecificoOfic, msgErrorInputOfic, 62
    31 000005AD B93E000000          <1>  mov rcx, %3
    32 000005B2 488D3425[D0010000]  <1>  lea rsi, [%2]
    33 000005BA 488D3C25[27010000]  <1>  lea rdi, [%1]
    34 000005C2 F3A4                <1>  rep movsb
   608 000005C4 E949FCFFFF                      jmp turnoOficiales
   609                                  
   610                                      errorCasillaInvalidaOfic:
   611 000005C9 488B0425[89010000]              mov rax, [msgCasillaInvalidaOfic]
   612                                          mMov msgErrorEspecificoOfic, msgCasillaInvalidaOfic, 71
    31 000005D1 B947000000          <1>  mov rcx, %3
    32 000005D6 488D3425[89010000]  <1>  lea rsi, [%2]
    33 000005DE 488D3C25[27010000]  <1>  lea rdi, [%1]
    34 000005E6 F3A4                <1>  rep movsb
   613 000005E8 E925FCFFFF                      jmp turnoOficiales
   614                                  
   615                                      imprimirErrorOfic:
   616                                          mPuts msgErrorEspecificoOfic
     2 000005ED 48BF-               <1>  mov rdi, %1
     2 000005EF [2701000000000000]  <1>
     3 000005F7 4883EC08            <1>  sub rsp, 8
     4 000005FB E8(00000000)        <1>  call puts
     5 00000600 4883C408            <1>  add rsp, 8
   617 00000604 E955FCFFFF                      jmp todoOkOfic
   618                                  
   619                                  ; --------------------------------------------------------------------------------------------
   620                                  ; VERFICIACIONES DE CASILLAS DESTINO PARA SOLDADOS Y OFICIALES
   621                                  ; --------------------------------------------------------------------------------------------
   622                                  
   623                                  verificarMovimientoSold:
   624 00000609 8A0425[7C000000]            mov al, byte[casillaMovSold] ; Numero de fila
   625                                      
   626 00000610 3C31                        cmp al, '1'
   627 00000612 0F8CE0010000                jl errorInputSoldMov
   628 00000618 3C37                        cmp al, '7'
   629 0000061A 0F8FD8010000                jg errorInputSoldMov
   630                                  
   631 00000620 48C70425[A0000000]-         mov qword[filaAMover], 0
   631 00000628 00000000           
   632                                      mSscanf byte[casillaMovSold], formatoAtoi, filaAMover
    69 0000062C 488D3C25[7C000000]  <1>  lea rdi, %1
    70 00000634 48BE-               <1>  mov rsi, %2
    70 00000636 [5B09000000000000]  <1>
    71 0000063E 48BA-               <1>  mov rdx, %3
    71 00000640 [A000000000000000]  <1>
    72 00000648 4883EC08            <1>  sub rsp, 8
    73 0000064C E8(00000000)        <1>  call sscanf
    74 00000651 4883C408            <1>  add rsp, 8
   633                                  
   634 00000655 4883F801                    cmp rax, 1
   635 00000659 0F8C99010000                jl errorInputSoldMov
   636                                  
   637 0000065F 8A0425[7D000000]            mov al, byte[casillaMovSold+1] ; Caracter '-'
   638 00000666 3C2D                        cmp al, '-'
   639 00000668 0F858A010000                jne errorInputSoldMov
   640                                      
   641 0000066E 8A0425[7E000000]            mov al, byte[casillaMovSold+2] ; Numero de columna
   642 00000675 3C31                        cmp al, '1'
   643 00000677 0F8C7B010000                jl errorInputSoldMov
   644 0000067D 3C37                        cmp al, '7'
   645 0000067F 0F8F73010000                jg errorInputSoldMov
   646                                  
   647 00000685 48C70425[A8000000]-         mov qword[columnaAMover], 0
   647 0000068D 00000000           
   648                                      mSscanf byte[casillaMovSold+2], formatoAtoi, columnaAMover
    69 00000691 488D3C25[7E000000]  <1>  lea rdi, %1
    70 00000699 48BE-               <1>  mov rsi, %2
    70 0000069B [5B09000000000000]  <1>
    71 000006A3 48BA-               <1>  mov rdx, %3
    71 000006A5 [A800000000000000]  <1>
    72 000006AD 4883EC08            <1>  sub rsp, 8
    73 000006B1 E8(00000000)        <1>  call sscanf
    74 000006B6 4883C408            <1>  add rsp, 8
   649                                  
   650 000006BA 4883F801                    cmp rax, 1
   651 000006BE 0F8C34010000                jl errorInputSoldMov
   652                                  
   653 000006C4 8A0425[7F000000]            mov al, byte[casillaMovSold+3] ; Caracter nulo
   654 000006CB 3C00                        cmp al, 0
   655 000006CD 0F8525010000                jne errorInputSoldMov
   656                                  
   657                                      ; Primero chequeamos si el soldado original está en alguna de las posiciones especiales
   658 000006D3 E8E0060000                  call chequearSoldPosEspeciales
   659 000006D8 4883F800                    cmp rax, 0
   660 000006DC 7423                        je lugaresComunesSold ; Si recibimos 1, la casilla original es un lugar común: intentamos hacer el movimiento normal
   661                                      
   662 000006DE 4883F801                    cmp rax, 1 ; Si recibimos 1, la casilla original es un lugar especial: solo podemos movernos a la derecha
   663 000006E2 0F8474010000                je soloDerechaSold
   664 000006E8 4883F802                    cmp rax, 2 ; Si recibimos 2, la casilla original es un lugar especial: solo podemos movernos a la izquierda
   665 000006EC 0F840D020000                je soloIzquierdaSold
   666                                      
   667                                      casillaEspecialAMover:
   668 000006F2 4983F800                        cmp r8, 0
   669 000006F6 0F8520010000                    jne errorCasillaInvalidaSoldMov
   670 000006FC E9F5FAFFFF                      jmp moverSoldado
   671                                  
   672                                      lugaresComunesSold:
   673                                          ; Comparamos la fila a mover con la fila actual
   674                                          mMov filaAux, fila, 1
    31 00000701 B901000000          <1>  mov rcx, %3
    32 00000706 488D3425[88000000]  <1>  lea rsi, [%2]
    33 0000070E 488D3C25[B8000000]  <1>  lea rdi, [%1]
    34 00000716 F3A4                <1>  rep movsb
   675 00000718 48FF0425[B8000000]              inc qword[filaAux]
   676                                          mCmp [filaAux], [filaAMover], 1
    38 00000720 B901000000          <1>  mov rcx, %3
    39 00000725 488D3425[B8000000]  <1>  lea rsi, %1
    40 0000072D 488D3C25[A0000000]  <1>  lea rdi, %2
    41 00000735 F3A6                <1>  repe cmpsb
   677 00000737 0F85DF000000                    jne errorCasillaInvalidaSoldMov
   678                                  
   679                                          ; Comparamos la columna a mover con la columna actual
   680 0000073D 48C70425[C0000000]-             mov qword[columnaAux], 0 ; Reiniciamos la columna auxiliar
   680 00000745 00000000           
   681                                          mMov columnaAux, columna, 1
    31 00000749 B901000000          <1>  mov rcx, %3
    32 0000074E 488D3425[90000000]  <1>  lea rsi, [%2]
    33 00000756 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 0000075E F3A4                <1>  rep movsb
   682                                  
   683                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento hacia adelante
    38 00000760 B901000000          <1>  mov rcx, %3
    39 00000765 488D3425[C0000000]  <1>  lea rsi, %1
    40 0000076D 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00000775 F3A6                <1>  repe cmpsb
   684 00000777 7445                            je columnaSoldAMoverValida
   685                                  
   686 00000779 48FF0425[C0000000]              inc qword[columnaAux]
   687                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la izquierda
    38 00000781 B901000000          <1>  mov rcx, %3
    39 00000786 488D3425[C0000000]  <1>  lea rsi, %1
    40 0000078E 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00000796 F3A6                <1>  repe cmpsb
   688 00000798 7424                            je columnaSoldAMoverValida
   689                                  
   690 0000079A 48832C25[C0000000]-             sub qword[columnaAux], 2
   690 000007A2 02                 
   691                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la derecha
    38 000007A3 B901000000          <1>  mov rcx, %3
    39 000007A8 488D3425[C0000000]  <1>  lea rsi, %1
    40 000007B0 488D3C25[A8000000]  <1>  lea rdi, %2
    41 000007B8 F3A6                <1>  repe cmpsb
   692 000007BA 7402                            je columnaSoldAMoverValida
   693                                  
   694 000007BC EB5E                            jmp errorCasillaInvalidaSoldMov
   695                                  
   696                                      columnaSoldAMoverValida: ; Queda ver si en esa casilla está vacía o no
   697                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    87 000007BE 488B3C25[A0000000]  <1>  mov rdi, %1
    88 000007C6 488B3425[A8000000]  <1>  mov rsi, %2
    89 000007CE E870040000          <1>  call calcularDesplazamiento
    90 000007D3 48890425[B0000000]  <1>  mov %3, rax
   698                                          mEstaVacia qword[desplazCasAMover]
    94 000007DB B800000000          <1>  mov rax, 0
    95 000007E0 488B3C25[B0000000]  <1>  mov rdi, %1
    96 000007E8 E841040000          <1>  call estaVacia
   699 000007ED 4883F801                        cmp rax, 1
   700 000007F1 7429                            je errorCasillaInvalidaSoldMov ; Si recibimos 1, la casilla está ocupada (o está fuera del tablero)
   701                                          
   702 000007F3 E9FEF9FFFF                      jmp moverSoldado 
   703                                  
   704                                  
   705                                      errorInputSoldMov:
   706 000007F8 488B0425[0D010000]              mov rax, [msgErrorInputSold]
   707                                          mMov msgErrorEspecificoSold, msgErrorInputSold, 62
    31 00000800 B93E000000          <1>  mov rcx, %3
    32 00000805 488D3425[0D010000]  <1>  lea rsi, [%2]
    33 0000080D 488D3C25[E0000000]  <1>  lea rdi, [%1]
    34 00000815 F3A4                <1>  rep movsb
   708 00000817 E90CF9FFFF                      jmp turnoSoldados
   709                                  
   710                                      errorCasillaInvalidaSoldMov:
   711 0000081C 488B0425[4B010000]              mov rax, [msgCasillaInvMovSold]
   712                                          mMov msgErrorEspecificoSold, msgCasillaInvMovSold, 62
    31 00000824 B93E000000          <1>  mov rcx, %3
    32 00000829 488D3425[4B010000]  <1>  lea rsi, [%2]
    33 00000831 488D3C25[E0000000]  <1>  lea rdi, [%1]
    34 00000839 F3A4                <1>  rep movsb
   713 0000083B E9E8F8FFFF                      jmp turnoSoldados
   714                                  
   715                                      imprimirErrorSoldMov:
   716                                          mPuts msgErrorEspecificoSold
     2 00000840 48BF-               <1>  mov rdi, %1
     2 00000842 [E000000000000000]  <1>
     3 0000084A 4883EC08            <1>  sub rsp, 8
     4 0000084E E8(00000000)        <1>  call puts
     5 00000853 4883C408            <1>  add rsp, 8
   717 00000857 E9CCF8FFFF                      jmp turnoSoldados
   718                                  
   719                                      soloDerechaSold:
   720 0000085C 41B801000000                    mov r8, 1 ; Suponemos que el movimiento es inválido
   721                                  
   722                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    87 00000862 488B3C25[A0000000]  <1>  mov rdi, %1
    88 0000086A 488B3425[A8000000]  <1>  mov rsi, %2
    89 00000872 E8CC030000          <1>  call calcularDesplazamiento
    90 00000877 48890425[B0000000]  <1>  mov %3, rax
   723                                          mEstaVacia qword[desplazCasAMover]
    94 0000087F B800000000          <1>  mov rax, 0
    95 00000884 488B3C25[B0000000]  <1>  mov rdi, %1
    96 0000088C E89D030000          <1>  call estaVacia
   724 00000891 4883F801                        cmp rax, 1 
   725 00000895 0F8457FEFFFF                    je casillaEspecialAMover
   726                                  
   727                                          mCmp [fila], [filaAMover], 1 ; Las filas deben ser iguales (el movimiento especial es para el costado)
    38 0000089B B901000000          <1>  mov rcx, %3
    39 000008A0 488D3425[88000000]  <1>  lea rsi, %1
    40 000008A8 488D3C25[A0000000]  <1>  lea rdi, %2
    41 000008B0 F3A6                <1>  repe cmpsb
   728 000008B2 0F853AFEFFFF                    jne casillaEspecialAMover
   729                                  
   730                                          mMov columnaAux, columna, 1
    31 000008B8 B901000000          <1>  mov rcx, %3
    32 000008BD 488D3425[90000000]  <1>  lea rsi, [%2]
    33 000008C5 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 000008CD F3A4                <1>  rep movsb
   731 000008CF 48FF0425[C0000000]              inc qword[columnaAux]
   732                                          mCmp [columnaAux], [columnaAMover], 1
    38 000008D7 B901000000          <1>  mov rcx, %3
    39 000008DC 488D3425[C0000000]  <1>  lea rsi, %1
    40 000008E4 488D3C25[A8000000]  <1>  lea rdi, %2
    41 000008EC F3A6                <1>  repe cmpsb
   733 000008EE 0F85FEFDFFFF                    jne casillaEspecialAMover
   734                                          
   735 000008F4 41B800000000                    mov r8, 0 ; Si llegamos acá, el movimiento es válido
   736 000008FA E9F3FDFFFF                      jmp casillaEspecialAMover
   737                                      
   738                                      soloIzquierdaSold:
   739 000008FF 41B801000000                    mov r8, 1 ; Suponemos que el movimiento es inválido
   740                                  
   741                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    87 00000905 488B3C25[A0000000]  <1>  mov rdi, %1
    88 0000090D 488B3425[A8000000]  <1>  mov rsi, %2
    89 00000915 E829030000          <1>  call calcularDesplazamiento
    90 0000091A 48890425[B0000000]  <1>  mov %3, rax
   742                                          mEstaVacia qword[desplazCasAMover]
    94 00000922 B800000000          <1>  mov rax, 0
    95 00000927 488B3C25[B0000000]  <1>  mov rdi, %1
    96 0000092F E8FA020000          <1>  call estaVacia
   743 00000934 4883F801                        cmp rax, 1 
   744 00000938 0F84B4FDFFFF                    je casillaEspecialAMover
   745                                  
   746                                          mCmp [fila], [filaAMover], 1 ; Las filas deben ser iguales (el movimiento especial es para el costado)
    38 0000093E B901000000          <1>  mov rcx, %3
    39 00000943 488D3425[88000000]  <1>  lea rsi, %1
    40 0000094B 488D3C25[A0000000]  <1>  lea rdi, %2
    41 00000953 F3A6                <1>  repe cmpsb
   747 00000955 0F8597FDFFFF                    jne casillaEspecialAMover
   748                                  
   749                                          mMov columnaAux, columna, 1
    31 0000095B B901000000          <1>  mov rcx, %3
    32 00000960 488D3425[90000000]  <1>  lea rsi, [%2]
    33 00000968 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 00000970 F3A4                <1>  rep movsb
   750 00000972 48FF0C25[C0000000]              dec qword[columnaAux]
   751                                          mCmp [columnaAux], [columnaAMover], 1
    38 0000097A B901000000          <1>  mov rcx, %3
    39 0000097F 488D3425[C0000000]  <1>  lea rsi, %1
    40 00000987 488D3C25[A8000000]  <1>  lea rdi, %2
    41 0000098F F3A6                <1>  repe cmpsb
   752 00000991 0F855BFDFFFF                    jne casillaEspecialAMover
   753                                  
   754 00000997 41B800000000                    mov r8, 0 ; Si llegamos acá, el movimiento es válido
   755 0000099D E950FDFFFF                      jmp casillaEspecialAMover
   756                                      
   757 000009A2 C3                          ret
   758                                  
   759                                  verificarMovimientoOfic:
   760 000009A3 8A0425[84000000]            mov al, byte[casillaMovOfic] ; Numero de fila
   761                                      
   762 000009AA 3C31                        cmp al, '1'
   763 000009AC 0F8C18020000                jl errorInputOficMov
   764 000009B2 3C37                        cmp al, '7'
   765 000009B4 0F8F10020000                jg errorInputOficMov
   766                                  
   767 000009BA 48C70425[A0000000]-         mov qword[filaAMover], 0
   767 000009C2 00000000           
   768                                      mSscanf byte[casillaMovOfic], formatoAtoi, filaAMover
    69 000009C6 488D3C25[84000000]  <1>  lea rdi, %1
    70 000009CE 48BE-               <1>  mov rsi, %2
    70 000009D0 [5B09000000000000]  <1>
    71 000009D8 48BA-               <1>  mov rdx, %3
    71 000009DA [A000000000000000]  <1>
    72 000009E2 4883EC08            <1>  sub rsp, 8
    73 000009E6 E8(00000000)        <1>  call sscanf
    74 000009EB 4883C408            <1>  add rsp, 8
   769                                  
   770 000009EF 4883F801                    cmp rax, 1
   771 000009F3 0F8CD1010000                jl errorInputOficMov
   772                                  
   773 000009F9 8A0425[85000000]            mov al, byte[casillaMovOfic+1] ; Caracter '-'
   774 00000A00 3C2D                        cmp al, '-'
   775 00000A02 0F85C2010000                jne errorInputOficMov
   776                                      
   777 00000A08 8A0425[86000000]            mov al, byte[casillaMovOfic+2] ; Numero de columna
   778 00000A0F 3C31                        cmp al, '1'
   779 00000A11 0F8CB3010000                jl errorInputOficMov
   780 00000A17 3C37                        cmp al, '7'
   781 00000A19 0F8FAB010000                jg errorInputOficMov
   782                                  
   783 00000A1F 48C70425[A8000000]-         mov qword[columnaAMover], 0
   783 00000A27 00000000           
   784                                      mSscanf byte[casillaMovOfic+2], formatoAtoi, columnaAMover
    69 00000A2B 488D3C25[86000000]  <1>  lea rdi, %1
    70 00000A33 48BE-               <1>  mov rsi, %2
    70 00000A35 [5B09000000000000]  <1>
    71 00000A3D 48BA-               <1>  mov rdx, %3
    71 00000A3F [A800000000000000]  <1>
    72 00000A47 4883EC08            <1>  sub rsp, 8
    73 00000A4B E8(00000000)        <1>  call sscanf
    74 00000A50 4883C408            <1>  add rsp, 8
   785                                  
   786 00000A54 4883F801                    cmp rax, 1
   787 00000A58 0F8C6C010000                jl errorInputOficMov
   788                                  
   789 00000A5E 8A0425[87000000]            mov al, byte[casillaMovOfic+3] ; Caracter nulo
   790 00000A65 3C00                        cmp al, 0
   791 00000A67 0F855D010000                jne errorInputOficMov
   792                                  
   793                                      ; Comparamos la fila a mover con la fila actual
   794                                      mMov filaAux, fila, 1
    31 00000A6D B901000000          <1>  mov rcx, %3
    32 00000A72 488D3425[88000000]  <1>  lea rsi, [%2]
    33 00000A7A 488D3C25[B8000000]  <1>  lea rdi, [%1]
    34 00000A82 F3A4                <1>  rep movsb
   795                                  
   796                                      mCmp [filaAux], [filaAMover], 1
    38 00000A84 B901000000          <1>  mov rcx, %3
    39 00000A89 488D3425[B8000000]  <1>  lea rsi, %1
    40 00000A91 488D3C25[A0000000]  <1>  lea rdi, %2
    41 00000A99 F3A6                <1>  repe cmpsb
   797 00000A9B 7448                        je filaOficAMoverValida ; Filas iguales -> válido
   798 00000A9D 48FF0425[B8000000]          inc qword[filaAux]
   799                                      mCmp [filaAux], [filaAMover], 1
    38 00000AA5 B901000000          <1>  mov rcx, %3
    39 00000AAA 488D3425[B8000000]  <1>  lea rsi, %1
    40 00000AB2 488D3C25[A0000000]  <1>  lea rdi, %2
    41 00000ABA F3A6                <1>  repe cmpsb
   800 00000ABC 7427                        je filaOficAMoverValida
   801 00000ABE 48832C25[B8000000]-         sub qword[filaAux], 2
   801 00000AC6 02                 
   802                                      mCmp [filaAux], [filaAMover], 1
    38 00000AC7 B901000000          <1>  mov rcx, %3
    39 00000ACC 488D3425[B8000000]  <1>  lea rsi, %1
    40 00000AD4 488D3C25[A0000000]  <1>  lea rdi, %2
    41 00000ADC F3A6                <1>  repe cmpsb
   803 00000ADE 7405                        je filaOficAMoverValida
   804                                  
   805 00000AE0 E909010000                  jmp errorCasillaInvalidaOficMov
   806                                  
   807                                      filaOficAMoverValida:
   808                                          ; Comparamos la columna a mover con la columna actual
   809 00000AE5 48C70425[C0000000]-             mov qword[columnaAux], 0 ; Reiniciamos la columna auxiliar
   809 00000AED 00000000           
   810                                          mMov columnaAux, columna, 1
    31 00000AF1 B901000000          <1>  mov rcx, %3
    32 00000AF6 488D3425[90000000]  <1>  lea rsi, [%2]
    33 00000AFE 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 00000B06 F3A4                <1>  rep movsb
   811                                  
   812                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento hacia adelante
    38 00000B08 B901000000          <1>  mov rcx, %3
    39 00000B0D 488D3425[C0000000]  <1>  lea rsi, %1
    40 00000B15 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00000B1D F3A6                <1>  repe cmpsb
   813 00000B1F 7448                            je columnaOficAMoverValida
   814                                  
   815 00000B21 48FF0425[C0000000]              inc qword[columnaAux]
   816                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la izquierda
    38 00000B29 B901000000          <1>  mov rcx, %3
    39 00000B2E 488D3425[C0000000]  <1>  lea rsi, %1
    40 00000B36 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00000B3E F3A6                <1>  repe cmpsb
   817 00000B40 7427                            je columnaOficAMoverValida
   818                                  
   819 00000B42 48832C25[C0000000]-             sub qword[columnaAux], 2
   819 00000B4A 02                 
   820                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la derecha
    38 00000B4B B901000000          <1>  mov rcx, %3
    39 00000B50 488D3425[C0000000]  <1>  lea rsi, %1
    40 00000B58 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00000B60 F3A6                <1>  repe cmpsb
   821 00000B62 7405                            je columnaOficAMoverValida
   822                                  
   823 00000B64 E985000000                      jmp errorCasillaInvalidaOficMov
   824                                  
   825                                      columnaOficAMoverValida: ; Podríamos hacer un movimiento normal (casilla vacía) o capturar un soldado...
   826                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    87 00000B69 488B3C25[A0000000]  <1>  mov rdi, %1
    88 00000B71 488B3425[A8000000]  <1>  mov rsi, %2
    89 00000B79 E8C5000000          <1>  call calcularDesplazamiento
    90 00000B7E 48890425[B0000000]  <1>  mov %3, rax
   827                                          mEstaVacia qword[desplazCasAMover]
    94 00000B86 B800000000          <1>  mov rax, 0
    95 00000B8B 488B3C25[B0000000]  <1>  mov rdi, %1
    96 00000B93 E896000000          <1>  call estaVacia
   828 00000B98 4883F800                        cmp rax, 0
   829 00000B9C 0F843EF7FFFF                    je moverOficial ; Si llegamos acá, la casilla a mover está vacía -> movimiento normal
   830                                          
   831                                          ; Si llegamos acá, la casilla no está vacía: ver si hay un soldado para capturar
   832                                          mHaySoldado qword[desplazCasAMover]
   100 00000BA2 B800000000          <1>  mov rax, 0
   101 00000BA7 488B3C25[B0000000]  <1>  mov rdi, %1
   102 00000BAF E84D020000          <1>  call haySoldado
   833 00000BB4 4883F801                        cmp rax, 1
   834 00000BB8 7434                            je errorCasillaInvalidaOficMov ; Si recibimos 1, la casilla a ocupar no tiene un soldado -> movimiento inválido
   835                                  
   836                                          ; Si llegamos acá, la casilla a ocupar tiene un soldado: debemos ver si el oficial puede saltar sobre él...
   837 00000BBA E866020000                      call sePuedeSaltarSoldado
   838 00000BBF 4883F801                        cmp rax, 1
   839 00000BC3 7429                            je errorCasillaInvalidaOficMov ; Si recibimos 1, el oficial no puede saltar sobre el soldado -> movimiento inválido
   840                                  
   841 00000BC5 E92FF7FFFF                      jmp capturar
   842                                  
   843                                  
   844                                      errorInputOficMov:
   845 00000BCA 488B0425[D0010000]              mov rax, [msgErrorInputOfic]
   846                                          mMov msgErrorEspecificoOfic, msgErrorInputOfic, 62
    31 00000BD2 B93E000000          <1>  mov rcx, %3
    32 00000BD7 488D3425[D0010000]  <1>  lea rsi, [%2]
    33 00000BDF 488D3C25[27010000]  <1>  lea rdi, [%1]
    34 00000BE7 F3A4                <1>  rep movsb
   847 00000BE9 E924F6FFFF                      jmp turnoOficiales
   848                                  
   849                                      errorCasillaInvalidaOficMov:
   850 00000BEE 488B0425[0E020000]              mov rax, [msgCasillaInvMovOfic]
   851                                          mMov msgErrorEspecificoOfic, msgCasillaInvMovOfic, 62
    31 00000BF6 B93E000000          <1>  mov rcx, %3
    32 00000BFB 488D3425[0E020000]  <1>  lea rsi, [%2]
    33 00000C03 488D3C25[27010000]  <1>  lea rdi, [%1]
    34 00000C0B F3A4                <1>  rep movsb
   852 00000C0D E900F6FFFF                      jmp turnoOficiales
   853                                  
   854                                      imprimirErrorOficMov:
   855                                          mPuts msgErrorEspecificoOfic
     2 00000C12 48BF-               <1>  mov rdi, %1
     2 00000C14 [2701000000000000]  <1>
     3 00000C1C 4883EC08            <1>  sub rsp, 8
     4 00000C20 E8(00000000)        <1>  call puts
     5 00000C25 4883C408            <1>  add rsp, 8
   856 00000C29 E9E4F5FFFF                      jmp turnoOficiales
   857                                  
   858                                  ; --------------------------------------------------------------------------------------------
   859                                  ; RUTINA PARA VERIFICAR SI UNA CASILLA ESTÁ VACÍA
   860                                  ; --------------------------------------------------------------------------------------------
   861                                  
   862                                  estaVacia:
   863 00000C2E 80BF[04000000]20            cmp byte[tableroEnJuego+rdi], ' '
   864 00000C35 7406                        je okVacia
   865                                  
   866 00000C37 B801000000                  mov rax, 1
   867 00000C3C C3                          ret
   868                                  
   869                                      okVacia:
   870 00000C3D B800000000                      mov rax, 0
   871 00000C42 C3                              ret
   872                                  
   873                                  ; --------------------------------------------------------------------------------------------
   874                                  ; RUTINA PARA CALCULAR EL DESPLAZAMIENTO DE UNA CASILLA EN EL TABLERO
   875                                  ; --------------------------------------------------------------------------------------------
   876                                  
   877                                  calcularDesplazamiento:
   878 00000C43 B800000000                  mov rax, 0
   879 00000C48 4889F8                      mov rax, rdi
   880 00000C4B 48FFC0                      inc rax
   881 00000C4E 666BC00B                    imul ax, 11
   882 00000C52 4801F0                      add rax, rsi
   883 00000C55 48FFC0                      inc rax
   884                                  
   885 00000C58 C3                          ret
   886                                  
   887                                  ; --------------------------------------------------------------------------------------------
   888                                  ; RUTINAS PARA REALIZAR MOVIMIENTOS SIMPLES DE SOLDADOS Y OFICIALES (los que no requieren capturas)
   889                                  ; --------------------------------------------------------------------------------------------
   890                                  
   891                                  realizarMovimientoSold:
   892 00000C59 488B0425[98000000]          mov rax, qword[desplazCasOrig]
   893 00000C61 488B1C25[B0000000]          mov rbx, qword[desplazCasAMover]
   894                                  
   895 00000C69 C680[04000000]20            mov byte[tableroEnJuego+rax], ' '
   896                                      mMov tableroEnJuego+rbx, simboloSoldados, 1
    31 00000C70 B901000000          <1>  mov rcx, %3
    32 00000C75 488D3425[02090000]  <1>  lea rsi, [%2]
    33 00000C7D 488DBB[04000000]    <1>  lea rdi, [%1]
    34 00000C84 F3A4                <1>  rep movsb
   897                                  
   898 00000C86 C3                          ret
   899                                  
   900                                  realizarMovimientoOfic:
   901                                      ; Vemos si el oficial podía capturar un soldado y no lo hizo
   902                                      mMov desplazAux2, desplazCasOrig, 1
    31 00000C87 B901000000          <1>  mov rcx, %3
    32 00000C8C 488D3425[98000000]  <1>  lea rsi, [%2]
    33 00000C94 488D3C25[D0000000]  <1>  lea rdi, [%1]
    34 00000C9C F3A4                <1>  rep movsb
   903 00000C9E E81B070000                  call podiaCapturarSoldado 
   904 00000CA3 4883F800                    cmp rax, 0 ; Si fue así, significa que el oficial se desentendió de su deber
   905 00000CA7 740D                        je quitarOficial
   906                                  
   907                                      ; Necesitamos chequear si el otro oficial podría haber capturado al soldado
   908 00000CA9 E8310A0000                  call podiaCapturarSoldadoOtroOficial
   909 00000CAE 4883F800                    cmp rax, 0 ; Si fue así, significa que el otro oficial se desentendió de su deber
   910 00000CB2 7453                        je quitarOtroOficial
   911                                  
   912 00000CB4 EB57                        jmp noPodianCapturar
   913                                  
   914                                      quitarOficial:
   915 00000CB6 E83D040000                      call verQueOficialEs
   916 00000CBB 4883F801                        cmp rax, 1 ; Si recibimos 1, el oficial 1 es el que se mueve
   917 00000CBF 7423                            je quitarOfic1
   918                                  
   919                                          mCalcDesplaz [casillaOfic2], [casillaOfic2+8], qword[desplazAux]
    87 00000CC1 488B3C25[E0080000]  <1>  mov rdi, %1
    88 00000CC9 488B3425[E8080000]  <1>  mov rsi, %2
    89 00000CD1 E86DFFFFFF          <1>  call calcularDesplazamiento
    90 00000CD6 48890425[C8000000]  <1>  mov %3, rax
   920 00000CDE E8A3090000                      call desentenderOficial
   921 00000CE3 C3                              ret
   922                                  
   923                                      quitarOfic1:
   924                                          mCalcDesplaz [casillaOfic1], [casillaOfic1+8], qword[desplazAux]
    87 00000CE4 488B3C25[D0080000]  <1>  mov rdi, %1
    88 00000CEC 488B3425[D8080000]  <1>  mov rsi, %2
    89 00000CF4 E84AFFFFFF          <1>  call calcularDesplazamiento
    90 00000CF9 48890425[C8000000]  <1>  mov %3, rax
   925 00000D01 E880090000                      call desentenderOficial
   926 00000D06 C3                              ret
   927                                      
   928                                      quitarOtroOficial:
   929 00000D07 E83E0A0000                      call desentenderOtroOficial
   930 00000D0C C3                              ret
   931                                  
   932                                      ; Si llegamos acá, el oficial no podía capturar un soldado -> OK!
   933                                      noPodianCapturar:
   934 00000D0D 488B0425[98000000]              mov rax, qword[desplazCasOrig]
   935 00000D15 488B1C25[B0000000]              mov rbx, qword[desplazCasAMover]
   936                                  
   937 00000D1D C680[04000000]20                mov byte[tableroEnJuego+rax], ' '
   938                                          mMov tableroEnJuego+rbx, simboloOficiales, 1
    31 00000D24 B901000000          <1>  mov rcx, %3
    32 00000D29 488D3425[00090000]  <1>  lea rsi, [%2]
    33 00000D31 488DBB[04000000]    <1>  lea rdi, [%1]
    34 00000D38 F3A4                <1>  rep movsb
   939                                  
   940 00000D3A E8B9030000                      call verQueOficialEs ; Verificamos qué oficial es el que se quiere mover
   941                                  
   942                                          ; Incrementamos la cantidad de movimientos del oficial correspondiente
   943 00000D3F 4883F801                        cmp rax, 1 ; Si recibimos 1, el oficial 1 es el que se mueve
   944 00000D43 740B                            je movOfic1
   945                                          
   946                                          ; Si llegamos acá, el oficial 2 es el que se mueve
   947 00000D45 E89D040000                      call actualizarContadoresOfic2
   948 00000D4A E878050000                      call refrescarCasActOfic2
   949 00000D4F C3                              ret
   950                                      
   951                                      movOfic1: ; Si llegamos acá, el oficial 1 es el que se mueve
   952 00000D50 E8E1030000                      call actualizarContadoresOfic1
   953 00000D55 E83E050000                      call refrescarCasActOfic1
   954                                  
   955 00000D5A C3                          ret
   956                                      
   957                                  ; --------------------------------------------------------------------------------------------
   958                                  ; RUTINAS PARA CAMBIAR EL TABLERO CON LOS SIMBOLOS PERSONALIZADOS
   959                                  ; --------------------------------------------------------------------------------------------
   960                                  
   961                                  cambiarTableroSoldNuevo:
   962 00000D5B BB1A000000                  mov rbx, 26 ; Desplazamiento de la primera casilla en donde puede haber piezas
   963                                  
   964                                      cicloCambiarSoldados:
   965 00000D60 80BB[04000000]58                cmp byte[tableroEnJuego+rbx], 'X'
   966 00000D67 7516                            jne noCambiarSoldado
   967                                          mMov tableroEnJuego+rbx, simboloSoldados, 1 ; Cambio el simbolo de los soldados
    31 00000D69 B901000000          <1>  mov rcx, %3
    32 00000D6E 488D3425[02090000]  <1>  lea rsi, [%2]
    33 00000D76 488DBB[04000000]    <1>  lea rdi, [%1]
    34 00000D7D F3A4                <1>  rep movsb
   968                                  
   969                                          noCambiarSoldado:
   970 00000D7F 48FFC3                              inc rbx
   971 00000D82 4883FB4B                            cmp rbx, 75 ; Desplazamiento de la última casilla en donde puede haber piezas
   972 00000D86 7CD8                                jl cicloCambiarSoldados
   973                                  
   974 00000D88 C3                          ret
   975                                  
   976                                  cambiarTableroOficNuevo:
   977                                      mMov tableroEnJuego+83, simboloOficiales, 1 ; Primer oficial (desplazamiento)
    31 00000D89 B901000000          <1>  mov rcx, %3
    32 00000D8E 488D3425[00090000]  <1>  lea rsi, [%2]
    33 00000D96 488D3C25[57000000]  <1>  lea rdi, [%1]
    34 00000D9E F3A4                <1>  rep movsb
   978                                      mMov tableroEnJuego+92, simboloOficiales, 1 ; Segundo oficial (desplazamiento)
    31 00000DA0 B901000000          <1>  mov rcx, %3
    32 00000DA5 488D3425[00090000]  <1>  lea rsi, [%2]
    33 00000DAD 488D3C25[60000000]  <1>  lea rdi, [%1]
    34 00000DB5 F3A4                <1>  rep movsb
   979 00000DB7 C3                          ret
   980                                  
   981                                  ; --------------------------------------------------------------------------------------------
   982                                  ; RUTINA PARA CHEQUEAR SI LA CASILLA DE ORIGEN DE UN SOLDADO ES UNA POSICIÓN ESPECIAL
   983                                  ; --------------------------------------------------------------------------------------------
   984                                  
   985                                  chequearSoldPosEspeciales:
   986 00000DB8 B800000000                  mov rax, 0
   987                                  
   988 00000DBD 48833C25[88000000]-         cmp qword[fila], 5
   988 00000DC5 05                 
   989 00000DC6 752C                        jne noEsLugarEspecial ; Si la fila no es 5, no estamos en una posición especial
   990                                  
   991                                      ; Si la columna es 1 o 2 (fila 5), estamos en una posición especial: solo podemos movernos a la derecha
   992 00000DC8 48833C25[90000000]-         cmp qword[columna], 1
   992 00000DD0 01                 
   993 00000DD1 7428                        je esLugarEspecialADer 
   994 00000DD3 48833C25[90000000]-         cmp qword[columna], 2
   994 00000DDB 02                 
   995 00000DDC 741D                        je esLugarEspecialADer 
   996                                  
   997                                      ; Si la columna es 6 o 7 (fila 5), estamos en una posición especial: solo podemos movernos a la izquierda
   998 00000DDE 48833C25[90000000]-         cmp qword[columna], 6
   998 00000DE6 06                 
   999 00000DE7 740C                        je esLugarEspecialAIzq 
  1000 00000DE9 48833C25[90000000]-         cmp qword[columna], 7
  1000 00000DF1 07                 
  1001 00000DF2 7401                        je esLugarEspecialAIzq
  1002                                  
  1003                                      noEsLugarEspecial:
  1004 00000DF4 C3                              ret
  1005                                  
  1006                                      esLugarEspecialAIzq:
  1007 00000DF5 B802000000                      mov rax, 2
  1008 00000DFA C3                              ret
  1009                                      
  1010                                      esLugarEspecialADer:
  1011 00000DFB B801000000                      mov rax, 1
  1012 00000E00 C3                              ret
  1013                                  
  1014                                  ; --------------------------------------------------------------------------------------------
  1015                                  ; RUTINA PARA VERIFICAR SI HAY UN SOLDADO EN LA CASILLA DESTINO
  1016                                  ; --------------------------------------------------------------------------------------------
  1017                                  
  1018                                  haySoldado:
  1019                                      ; Calculamos desplazamiento en tablero
  1020                                      mCmp byte[tableroEnJuego+rdi], [simboloSoldados], 1
    38 00000E01 B901000000          <1>  mov rcx, %3
    39 00000E06 488DB7[04000000]    <1>  lea rsi, %1
    40 00000E0D 488D3C25[02090000]  <1>  lea rdi, %2
    41 00000E15 F3A6                <1>  repe cmpsb
  1021 00000E17 7406                        je okSoldado
  1022                                  
  1023 00000E19 B801000000                  mov rax, 1
  1024 00000E1E C3                          ret
  1025                                  
  1026                                      okSoldado:
  1027 00000E1F B800000000                      mov rax, 0
  1028 00000E24 C3                              ret
  1029                                  
  1030                                  ; --------------------------------------------------------------------------------------------
  1031                                  ; RUTINA PARA VERIFICAR SI UN OFICIAL PUEDE SALTAR SOBRE UN SOLDADO
  1032                                  ; --------------------------------------------------------------------------------------------
  1033                                  
  1034                                  sePuedeSaltarSoldado:
  1035 00000E25 488B0425[88000000]          mov rax, qword[fila]
  1036 00000E2D 488B1C25[A0000000]          mov rbx, qword[filaAMover]
  1037 00000E35 4829D8                      sub rax, rbx
  1038 00000E38 0F8F07010000                jg saltoHaciaArriba ; Si la fila original es mayor que la fila destino, el salto es hacia arriba
  1039 00000E3E 0F8CA3010000                jl saltoHaciaAbajo ; Si la fila original es menor que la fila destino, el salto es hacia abajo
  1040                                  
  1041                                      ; Si estamos acá, el salto es en la misma fila
  1042 00000E44 488B0425[90000000]          mov rax, qword[columna]
  1043 00000E4C 488B1C25[A8000000]          mov rbx, qword[columnaAMover]
  1044                                  
  1045 00000E54 4829D8                      sub rax, rbx
  1046 00000E57 7F02                        jg saltoHaciaIzq ; Si la columna original es mayor que la columna destino, el salto es hacia la izquierda
  1047 00000E59 7C75                        jl saltoHaciaDer ; Si la columna original es menor que la columna destino, el salto es hacia la derecha
  1048                                  
  1049                                      saltoHaciaIzq:
  1050                                          mMov filaAux, filaAMover, 1
    31 00000E5B B901000000          <1>  mov rcx, %3
    32 00000E60 488D3425[A0000000]  <1>  lea rsi, [%2]
    33 00000E68 488D3C25[B8000000]  <1>  lea rdi, [%1]
    34 00000E70 F3A4                <1>  rep movsb
  1051                                          mMov columnaAux, columnaAMover, 1
    31 00000E72 B901000000          <1>  mov rcx, %3
    32 00000E77 488D3425[A8000000]  <1>  lea rsi, [%2]
    33 00000E7F 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 00000E87 F3A4                <1>  rep movsb
  1052 00000E89 48FF0C25[C0000000]              dec qword[columnaAux]
  1053                                  
  1054                                          mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    87 00000E91 488B3C25[B8000000]  <1>  mov rdi, %1
    88 00000E99 488B3425[C0000000]  <1>  mov rsi, %2
    89 00000EA1 E89DFDFFFF          <1>  call calcularDesplazamiento
    90 00000EA6 48890425[C8000000]  <1>  mov %3, rax
  1055                                          mEstaVacia qword[desplazAux]
    94 00000EAE B800000000          <1>  mov rax, 0
    95 00000EB3 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00000EBB E86EFDFFFF          <1>  call estaVacia
  1056 00000EC0 4883F801                        cmp rax, 1
  1057 00000EC4 0F84BB010000                    je saltoInvalido
  1058                                  
  1059 00000ECA B800000000                      mov rax, 0
  1060 00000ECF C3                              ret
  1061                                  
  1062                                      saltoHaciaDer:
  1063                                          mMov filaAux, filaAMover, 1
    31 00000ED0 B901000000          <1>  mov rcx, %3
    32 00000ED5 488D3425[A0000000]  <1>  lea rsi, [%2]
    33 00000EDD 488D3C25[B8000000]  <1>  lea rdi, [%1]
    34 00000EE5 F3A4                <1>  rep movsb
  1064                                          mMov columnaAux, columnaAMover, 1
    31 00000EE7 B901000000          <1>  mov rcx, %3
    32 00000EEC 488D3425[A8000000]  <1>  lea rsi, [%2]
    33 00000EF4 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 00000EFC F3A4                <1>  rep movsb
  1065 00000EFE 48FF0425[C0000000]              inc qword[columnaAux]
  1066                                  
  1067                                          mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    87 00000F06 488B3C25[B8000000]  <1>  mov rdi, %1
    88 00000F0E 488B3425[C0000000]  <1>  mov rsi, %2
    89 00000F16 E828FDFFFF          <1>  call calcularDesplazamiento
    90 00000F1B 48890425[C8000000]  <1>  mov %3, rax
  1068                                          mEstaVacia qword[desplazAux]
    94 00000F23 B800000000          <1>  mov rax, 0
    95 00000F28 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00000F30 E8F9FCFFFF          <1>  call estaVacia
  1069 00000F35 4883F801                        cmp rax, 1
  1070 00000F39 0F8446010000                    je saltoInvalido
  1071                                  
  1072 00000F3F B800000000                      mov rax, 0
  1073 00000F44 C3                              ret
  1074                                  
  1075                                      saltoHaciaArriba:
  1076                                          mMov filaAux, filaAMover, 1
    31 00000F45 B901000000          <1>  mov rcx, %3
    32 00000F4A 488D3425[A0000000]  <1>  lea rsi, [%2]
    33 00000F52 488D3C25[B8000000]  <1>  lea rdi, [%1]
    34 00000F5A F3A4                <1>  rep movsb
  1077                                          mMov columnaAux, columnaAMover, 1
    31 00000F5C B901000000          <1>  mov rcx, %3
    32 00000F61 488D3425[A8000000]  <1>  lea rsi, [%2]
    33 00000F69 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 00000F71 F3A4                <1>  rep movsb
  1078 00000F73 48FF0C25[B8000000]              dec qword[filaAux]
  1079                                          
  1080                                          mCmp [columna], [columnaAMover], 1
    38 00000F7B B901000000          <1>  mov rcx, %3
    39 00000F80 488D3425[90000000]  <1>  lea rsi, %1
    40 00000F88 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00000F90 F3A6                <1>  repe cmpsb
  1081 00000F92 7414                            je seguirSaltoArriba ; Si las columnas son iguales, el salto es hacia arriba y en línea recta
  1082 00000F94 7F0A                            jg haciaArribaIzq ; Si la columna original es mayor que la columna destino, el salto es hacia la izquierda
  1083                                  
  1084 00000F96 48FF0425[C0000000]              inc qword[columnaAux] ; Salto hacia arriba y a la derecha
  1085 00000F9E EB08                            jmp seguirSaltoArriba
  1086                                  
  1087                                          haciaArribaIzq:
  1088 00000FA0 48FF0C25[C0000000]                  dec qword[columnaAux] ; Salto hacia arriba y a la izquierda
  1089                                  
  1090                                          seguirSaltoArriba:
  1091                                              mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    87 00000FA8 488B3C25[B8000000]  <1>  mov rdi, %1
    88 00000FB0 488B3425[C0000000]  <1>  mov rsi, %2
    89 00000FB8 E886FCFFFF          <1>  call calcularDesplazamiento
    90 00000FBD 48890425[C8000000]  <1>  mov %3, rax
  1092                                              mEstaVacia qword[desplazAux]
    94 00000FC5 B800000000          <1>  mov rax, 0
    95 00000FCA 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00000FD2 E857FCFFFF          <1>  call estaVacia
  1093 00000FD7 4883F801                            cmp rax, 1
  1094 00000FDB 0F84A4000000                        je saltoInvalido
  1095                                  
  1096 00000FE1 B800000000                          mov rax, 0
  1097 00000FE6 C3                                  ret
  1098                                  
  1099                                      saltoHaciaAbajo:
  1100                                          mMov filaAux, filaAMover, 1
    31 00000FE7 B901000000          <1>  mov rcx, %3
    32 00000FEC 488D3425[A0000000]  <1>  lea rsi, [%2]
    33 00000FF4 488D3C25[B8000000]  <1>  lea rdi, [%1]
    34 00000FFC F3A4                <1>  rep movsb
  1101                                          mMov columnaAux, columnaAMover, 1
    31 00000FFE B901000000          <1>  mov rcx, %3
    32 00001003 488D3425[A8000000]  <1>  lea rsi, [%2]
    33 0000100B 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 00001013 F3A4                <1>  rep movsb
  1102 00001015 48FF0425[B8000000]              inc qword[filaAux]
  1103                                          
  1104                                          mCmp [columna], [columnaAMover], 1
    38 0000101D B901000000          <1>  mov rcx, %3
    39 00001022 488D3425[90000000]  <1>  lea rsi, %1
    40 0000102A 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00001032 F3A6                <1>  repe cmpsb
  1105 00001034 7414                            je seguirSaltoAbajo ; Si las columnas son iguales, el salto es hacia abajo y en línea recta
  1106 00001036 7F0A                            jg haciaAbajoIzq ; Si la columna original es mayor que la columna destino, el salto es hacia la izquierda
  1107                                  
  1108 00001038 48FF0425[C0000000]              inc qword[columnaAux] ; Salto hacia abajo y a la derecha
  1109 00001040 EB08                            jmp seguirSaltoAbajo
  1110                                  
  1111                                          haciaAbajoIzq:
  1112 00001042 48FF0C25[C0000000]                  dec qword[columnaAux] ; Salto hacia abajo y a la izquierda
  1113                                  
  1114                                          seguirSaltoAbajo:
  1115                                              mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    87 0000104A 488B3C25[B8000000]  <1>  mov rdi, %1
    88 00001052 488B3425[C0000000]  <1>  mov rsi, %2
    89 0000105A E8E4FBFFFF          <1>  call calcularDesplazamiento
    90 0000105F 48890425[C8000000]  <1>  mov %3, rax
  1116                                              mEstaVacia qword[desplazAux]
    94 00001067 B800000000          <1>  mov rax, 0
    95 0000106C 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001074 E8B5FBFFFF          <1>  call estaVacia
  1117 00001079 4883F801                            cmp rax, 1
  1118 0000107D 7406                                je saltoInvalido
  1119                                  
  1120 0000107F B800000000                          mov rax, 0
  1121 00001084 C3                                  ret
  1122                                  
  1123                                      saltoInvalido:
  1124 00001085 B801000000                      mov rax, 1
  1125 0000108A C3                              ret
  1126                                  
  1127 0000108B C3                          ret
  1128                                  
  1129                                  ; --------------------------------------------------------------------------------------------
  1130                                  ; RUTINA PARA CAPTURAR UN SOLDADO
  1131                                  ; --------------------------------------------------------------------------------------------
  1132                                  
  1133                                  capturarSoldado:
  1134 0000108C 488B0425[98000000]          mov rax, qword[desplazCasOrig] ; Oficial a mover
  1135 00001094 488B1C25[B0000000]          mov rbx, qword[desplazCasAMover] ; Soldado a capturar
  1136 0000109C 488B0C25[C8000000]          mov rcx, qword[desplazAux] ; Casilla destino del oficial (donde va a quedar)
  1137                                  
  1138 000010A4 C680[04000000]20            mov byte[tableroEnJuego+rax], ' '
  1139 000010AB C683[04000000]20            mov byte[tableroEnJuego+rbx], ' '
  1140                                      
  1141 000010B2 8A1425[00090000]            mov dl, byte[simboloOficiales]
  1142 000010B9 8891[04000000]              mov byte[tableroEnJuego+rcx], dl
  1143                                  
  1144 000010BF 48FF0425[C0080000]          inc qword[cantSoldCapturados] ; Aumentamos el contador de capturas
  1145                                  
  1146 000010C7 E82C000000                  call verQueOficialEs ; Verificamos qué oficial es el que se quiere mover
  1147                                  
  1148 000010CC 4883F801                    cmp rax, 1
  1149 000010D0 7413                        je movOfic1Captura
  1150                                  
  1151 000010D2 48FF0425[F8080000]          inc qword[cantCapturasOfic2]
  1152 000010DA E808010000                  call actualizarContadoresOfic2
  1153 000010DF E812020000                  call refrescarCasActOficLuegoCaptura
  1154 000010E4 C3                          ret
  1155                                  
  1156                                      movOfic1Captura:
  1157 000010E5 48FF0425[F0080000]              inc qword[cantCapturasOfic1]
  1158 000010ED E844000000                      call actualizarContadoresOfic1
  1159 000010F2 E8FF010000                      call refrescarCasActOficLuegoCaptura
  1160                                  
  1161 000010F7 C3                          ret
  1162                                  
  1163                                  ; --------------------------------------------------------------------------------------------
  1164                                  ; RUTINA PARA VERIFICAR CUÁL OFICIAL SE ESTÁ MOVIENDO
  1165                                  ; --------------------------------------------------------------------------------------------
  1166                                  
  1167                                  verQueOficialEs:
  1168                                      ; Comenzamos verificando si el oficial 1 es el que se está moviendo
  1169                                      mCmp qword[fila], qword[casillaOfic1], 1 ; Fila de la casilla de origen vs. Fila del oficial 1
    38 000010F8 B901000000          <1>  mov rcx, %3
    39 000010FD 488D3425[88000000]  <1>  lea rsi, %1
    40 00001105 488D3C25[D0080000]  <1>  lea rdi, %2
    41 0000110D F3A6                <1>  repe cmpsb
  1170 0000110F 751F                        jne esOfic2 ; Si las filas no son iguales, el oficial 1 no es el que se está moviendo
  1171                                      mCmp qword[columna], qword[casillaOfic1+8], 1 ; Columna de la casilla de origen vs. Columna del oficial 1
    38 00001111 B901000000          <1>  mov rcx, %3
    39 00001116 488D3425[90000000]  <1>  lea rsi, %1
    40 0000111E 488D3C25[D8080000]  <1>  lea rdi, %2
    41 00001126 F3A6                <1>  repe cmpsb
  1172 00001128 7506                        jne esOfic2 ; Si las columnas no son iguales, el oficial 1 no es el que se está moviendo
  1173                                  
  1174 0000112A B801000000                  mov rax, 1 ; es el oficial 1
  1175 0000112F C3                          ret
  1176                                  
  1177                                      esOfic2:
  1178 00001130 B802000000                      mov rax, 2 ; es el oficial 2
  1179                                  
  1180 00001135 C3                          ret
  1181                                  
  1182                                  
  1183                                  ; --------------------------------------------------------------------------------------------
  1184                                  ; RUTINA PARA ACTUALIZAR LOS CONTADORES DE MOVIMIENTOS DE LOS OFICIALES
  1185                                  ; --------------------------------------------------------------------------------------------
  1186                                  
  1187                                  actualizarContadoresOfic1:
  1188 00001136 48FF0425[20080000]          inc qword[movimientosOfic1]
  1189 0000113E 488B0425[98000000]          mov rax, qword[desplazCasOrig]
  1190 00001146 482B0425[B0000000]          sub rax, qword[desplazCasAMover] ; rax = desplazOrigen - desplazDestino
  1191 0000114E 4883F801                    cmp rax, 1
  1192 00001152 742B                        je movOfic1Izq
  1193 00001154 4883F8FF                    cmp rax, -1
  1194 00001158 742E                        je movOfic1Der
  1195 0000115A 4883F80B                    cmp rax, 11
  1196 0000115E 7431                        je movOfic1Arriba
  1197 00001160 4883F8F5                    cmp rax, -11
  1198 00001164 7434                        je movOfic1Abajo
  1199 00001166 4883F80A                    cmp rax, 10
  1200 0000116A 7437                        je movOfic1ArrDer
  1201 0000116C 4883F8F6                    cmp rax, -10
  1202 00001170 7453                        je movOfic1AbjIzq
  1203 00001172 4883F80C                    cmp rax, 12
  1204 00001176 745E                        je movOfic1ArrIzq
  1205 00001178 4883F8F4                    cmp rax, -12
  1206 0000117C 7436                        je movOfic1AbjDer
  1207                                  
  1208 0000117E C3                          ret
  1209                                  
  1210                                      movOfic1Izq:
  1211 0000117F 48FF0425[40080000]              inc qword[movOfic1Izquierda]
  1212 00001187 C3                              ret
  1213                                      movOfic1Der:
  1214 00001188 48FF0425[38080000]              inc qword[movOfic1Derecha]
  1215 00001190 C3                              ret
  1216                                      movOfic1Arriba:
  1217 00001191 48FF0425[30080000]              inc qword[movOfic1Adelante]
  1218 00001199 C3                              ret
  1219                                      movOfic1Abajo:
  1220 0000119A 48FF0425[48080000]              inc qword[movOfic1Atras]
  1221 000011A2 C3                              ret
  1222                                      movOfic1ArrDer:
  1223 000011A3 48FF0425[50080000]              inc qword[movOfic1Diagonal]
  1224 000011AB 48FF0425[58080000]              inc qword[movOfic1DiagArribaDer]
  1225 000011B3 C3                              ret
  1226                                      movOfic1AbjDer:
  1227 000011B4 48FF0425[50080000]              inc qword[movOfic1Diagonal]
  1228 000011BC 48FF0425[68080000]              inc qword[movOfic1DiagAbajoDer]
  1229 000011C4 C3                              ret
  1230                                      movOfic1AbjIzq:
  1231 000011C5 48FF0425[50080000]              inc qword[movOfic1Diagonal]
  1232 000011CD 48FF0425[70080000]              inc qword[movOfic1DiagAbajoIzq]
  1233 000011D5 C3                              ret
  1234                                      movOfic1ArrIzq:
  1235 000011D6 48FF0425[50080000]              inc qword[movOfic1Diagonal]
  1236 000011DE 48FF0425[60080000]              inc qword[movOfic1DiagArribaIzq]
  1237 000011E6 C3                              ret
  1238                                  
  1239                                  actualizarContadoresOfic2:
  1240 000011E7 48FF0425[28080000]          inc qword[movimientosOfic2]
  1241 000011EF 488B0425[98000000]          mov rax, qword[desplazCasOrig]
  1242 000011F7 482B0425[B0000000]          sub rax, qword[desplazCasAMover] ; rax = desplazOrigen - desplazDestino
  1243 000011FF 4883F801                    cmp rax, 1
  1244 00001203 742B                        je movOfic2Izq
  1245 00001205 4883F8FF                    cmp rax, -1
  1246 00001209 742E                        je movOfic2Der
  1247 0000120B 4883F80B                    cmp rax, 11
  1248 0000120F 7431                        je movOfic2Arriba
  1249 00001211 4883F8F5                    cmp rax, -11
  1250 00001215 7434                        je movOfic2Abajo
  1251 00001217 4883F80A                    cmp rax, 10
  1252 0000121B 7437                        je movOfic2ArrDer
  1253 0000121D 4883F8F6                    cmp rax, -10
  1254 00001221 7453                        je movOfic2AbjIzq
  1255 00001223 4883F80C                    cmp rax, 12
  1256 00001227 745E                        je movOfic2ArrIzq
  1257 00001229 4883F8F4                    cmp rax, -12
  1258 0000122D 7436                        je movOfic2AbjDer
  1259                                  
  1260 0000122F C3                          ret
  1261                                  
  1262                                      movOfic2Izq:
  1263 00001230 48FF0425[88080000]              inc qword[movOfic2Izquierda]
  1264 00001238 C3                              ret
  1265                                      movOfic2Der:
  1266 00001239 48FF0425[80080000]              inc qword[movOfic2Derecha]
  1267 00001241 C3                              ret
  1268                                      movOfic2Arriba:
  1269 00001242 48FF0425[78080000]              inc qword[movOfic2Adelante]
  1270 0000124A C3                              ret
  1271                                      movOfic2Abajo:
  1272 0000124B 48FF0425[90080000]              inc qword[movOfic2Atras]
  1273 00001253 C3                              ret
  1274                                      movOfic2ArrDer:
  1275 00001254 48FF0425[98080000]              inc qword[movOfic2Diagonal]
  1276 0000125C 48FF0425[A0080000]              inc qword[movOfic2DiagArribaDer]
  1277 00001264 C3                              ret
  1278                                      movOfic2AbjDer:
  1279 00001265 48FF0425[98080000]              inc qword[movOfic2Diagonal]
  1280 0000126D 48FF0425[B0080000]              inc qword[movOfic2DiagAbajoDer]
  1281 00001275 C3                              ret
  1282                                      movOfic2AbjIzq:
  1283 00001276 48FF0425[98080000]              inc qword[movOfic2Diagonal]
  1284 0000127E 48FF0425[B8080000]              inc qword[movOfic2DiagAbajoIzq]
  1285 00001286 C3                              ret
  1286                                      movOfic2ArrIzq:
  1287 00001287 48FF0425[98080000]              inc qword[movOfic2Diagonal]
  1288 0000128F 48FF0425[A8080000]              inc qword[movOfic2DiagArribaIzq]
  1289 00001297 C3                              ret
  1290                                  
  1291                                  ; --------------------------------------------------------------------------------------------
  1292                                  ; RUTINA PARA REFRESCAR LA CASILLA ACTUAL DE LOS OFICIALES
  1293                                  ; --------------------------------------------------------------------------------------------
  1294                                  
  1295                                  refrescarCasActOfic1:
  1296                                      mMov casillaOfic1, filaAMover, 1
    31 00001298 B901000000          <1>  mov rcx, %3
    32 0000129D 488D3425[A0000000]  <1>  lea rsi, [%2]
    33 000012A5 488D3C25[D0080000]  <1>  lea rdi, [%1]
    34 000012AD F3A4                <1>  rep movsb
  1297                                      mMov casillaOfic1+8, columnaAMover, 1
    31 000012AF B901000000          <1>  mov rcx, %3
    32 000012B4 488D3425[A8000000]  <1>  lea rsi, [%2]
    33 000012BC 488D3C25[D8080000]  <1>  lea rdi, [%1]
    34 000012C4 F3A4                <1>  rep movsb
  1298 000012C6 C3                          ret
  1299                                  
  1300                                  refrescarCasActOfic2:
  1301                                      mMov casillaOfic2, filaAMover, 1
    31 000012C7 B901000000          <1>  mov rcx, %3
    32 000012CC 488D3425[A0000000]  <1>  lea rsi, [%2]
    33 000012D4 488D3C25[E0080000]  <1>  lea rdi, [%1]
    34 000012DC F3A4                <1>  rep movsb
  1302                                      mMov casillaOfic2+8, columnaAMover, 1
    31 000012DE B901000000          <1>  mov rcx, %3
    32 000012E3 488D3425[A8000000]  <1>  lea rsi, [%2]
    33 000012EB 488D3C25[E8080000]  <1>  lea rdi, [%1]
    34 000012F3 F3A4                <1>  rep movsb
  1303 000012F5 C3                          ret    
  1304                                  
  1305                                  refrescarCasActOficLuegoCaptura:
  1306 000012F6 488B0425[B0000000]          mov rax, qword[desplazCasAMover]
  1307 000012FE 488B1C25[C8000000]          mov rbx, qword[desplazAux]
  1308 00001306 4829D8                      sub rax, rbx ; rax = desplazCasAMover - desplazAux
  1309                                  
  1310 00001309 4883F801                    cmp rax, 1
  1311 0000130D 742A                        je saltoIzq
  1312 0000130F 4883F8FF                    cmp rax, -1
  1313 00001313 742E                        je saltoDer
  1314 00001315 4883F80B                    cmp rax, 11
  1315 00001319 7432                        je saltoArriba
  1316 0000131B 4883F8F5                    cmp rax, -11
  1317 0000131F 7436                        je saltoAbajo
  1318 00001321 4883F80A                    cmp rax, 10
  1319 00001325 743A                        je saltoArrDer
  1320 00001327 4883F8F6                    cmp rax, -10
  1321 0000132B 7446                        je saltoAbjIzq
  1322 0000132D 4883F80C                    cmp rax, 12
  1323 00001331 7452                        je saltoArrIzq
  1324 00001333 4883F8F4                    cmp rax, -12
  1325 00001337 745E                        je saltoAbjDer
  1326                                  
  1327                                      saltoIzq:
  1328 00001339 48FF0C25[A8000000]              dec qword[columnaAMover]
  1329 00001341 EB64                            jmp finRefrescarCasActOfic
  1330                                      saltoDer:
  1331 00001343 48FF0425[A8000000]              inc qword[columnaAMover]
  1332 0000134B EB5A                            jmp finRefrescarCasActOfic
  1333                                      saltoArriba:
  1334 0000134D 48FF0C25[A0000000]              dec qword[filaAMover]
  1335 00001355 EB50                            jmp finRefrescarCasActOfic
  1336                                      saltoAbajo:
  1337 00001357 48FF0425[A0000000]              inc qword[filaAMover]
  1338 0000135F EB46                            jmp finRefrescarCasActOfic
  1339                                      saltoArrDer:
  1340 00001361 48FF0C25[A0000000]              dec qword[filaAMover]
  1341 00001369 48FF0425[A8000000]              inc qword[columnaAMover]
  1342 00001371 EB34                            jmp finRefrescarCasActOfic
  1343                                      saltoAbjIzq:
  1344 00001373 48FF0425[A0000000]              inc qword[filaAMover]
  1345 0000137B 48FF0C25[A8000000]              dec qword[columnaAMover]
  1346 00001383 EB22                            jmp finRefrescarCasActOfic
  1347                                      saltoArrIzq:
  1348 00001385 48FF0C25[A0000000]              dec qword[filaAMover]
  1349 0000138D 48FF0C25[A8000000]              dec qword[columnaAMover]
  1350 00001395 EB10                            jmp finRefrescarCasActOfic
  1351                                      saltoAbjDer:
  1352 00001397 48FF0425[A0000000]              inc qword[filaAMover]
  1353 0000139F 48FF0425[A8000000]              inc qword[columnaAMover]
  1354                                  
  1355                                      finRefrescarCasActOfic:
  1356 000013A7 E84CFDFFFF                      call verQueOficialEs
  1357                                  
  1358 000013AC 4883F801                        cmp rax, 1
  1359 000013B0 7406                            je actualizarOfic1
  1360                                  
  1361 000013B2 E810FFFFFF                      call refrescarCasActOfic2
  1362 000013B7 C3                              ret
  1363                                  
  1364                                          actualizarOfic1:
  1365 000013B8 E8DBFEFFFF                          call refrescarCasActOfic1
  1366                                  
  1367 000013BD C3                          ret
  1368                                  
  1369                                  
  1370                                  
  1371                                  ; --------------------------------------------------------------------------------------------
  1372                                  ; RUTINA PARA VERIFICAR SI UN OFICIAL PODÍA CAPTURAR UN SOLDADO Y NO LO HIZO
  1373                                  ; --------------------------------------------------------------------------------------------
  1374                                  
  1375                                  podiaCapturarSoldado:
  1376                                      mMov desplazAux, desplazAux2, 1
    31 000013BE B901000000          <1>  mov rcx, %3
    32 000013C3 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 000013CB 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 000013D3 F3A4                <1>  rep movsb
  1377                                  
  1378                                      ; Casilla arriba-izquierda
  1379 000013D5 48832C25[C8000000]-         sub qword[desplazAux], 12
  1379 000013DD 0C                 
  1380                                      mHaySoldado qword[desplazAux]
   100 000013DE B800000000          <1>  mov rax, 0
   101 000013E3 488B3C25[C8000000]  <1>  mov rdi, %1
   102 000013EB E811FAFFFF          <1>  call haySoldado
  1381 000013F0 4883F800                    cmp rax, 0
  1382 000013F4 7519                        jne verCasArriba
  1383                                  
  1384                                      mPuedeCapturar 12, 1 ; restar 12 a desplazAux
   106 000013F6 BF0C000000          <1>  mov rdi, %1
   107 000013FB BE01000000          <1>  mov rsi, %2
   108 00001400 E845020000          <1>  call podiaComerPieza
  1385 00001405 4883F800                    cmp rax, 0
  1386 00001409 0F8435020000                je podiaCapturar
  1387                                  
  1388                                      ; Casilla arriba
  1389                                      verCasArriba:
  1390                                          mMov desplazAux, desplazAux2, 1
    31 0000140F B901000000          <1>  mov rcx, %3
    32 00001414 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 0000141C 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001424 F3A4                <1>  rep movsb
  1391 00001426 48832C25[C8000000]-             sub qword[desplazAux], 11
  1391 0000142E 0B                 
  1392                                          mHaySoldado qword[desplazAux]
   100 0000142F B800000000          <1>  mov rax, 0
   101 00001434 488B3C25[C8000000]  <1>  mov rdi, %1
   102 0000143C E8C0F9FFFF          <1>  call haySoldado
  1393 00001441 4883F800                        cmp rax, 0
  1394 00001445 7519                            jne verCasArribaDer
  1395                                  
  1396                                          mPuedeCapturar 11, 1 ; restar 11 a desplazAux
   106 00001447 BF0B000000          <1>  mov rdi, %1
   107 0000144C BE01000000          <1>  mov rsi, %2
   108 00001451 E8F4010000          <1>  call podiaComerPieza
  1397 00001456 4883F800                        cmp rax, 0
  1398 0000145A 0F84E4010000                    je podiaCapturar
  1399                                  
  1400                                      ; Casilla arriba-derecha
  1401                                      verCasArribaDer:
  1402                                          mMov desplazAux, desplazAux2, 1
    31 00001460 B901000000          <1>  mov rcx, %3
    32 00001465 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 0000146D 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001475 F3A4                <1>  rep movsb
  1403 00001477 48832C25[C8000000]-             sub qword[desplazAux], 10
  1403 0000147F 0A                 
  1404                                          mHaySoldado qword[desplazAux]
   100 00001480 B800000000          <1>  mov rax, 0
   101 00001485 488B3C25[C8000000]  <1>  mov rdi, %1
   102 0000148D E86FF9FFFF          <1>  call haySoldado
  1405 00001492 4883F800                        cmp rax, 0
  1406 00001496 7519                            jne verCasIzq
  1407                                          
  1408                                          mPuedeCapturar 10, 1 ; restar 10 a desplazAux
   106 00001498 BF0A000000          <1>  mov rdi, %1
   107 0000149D BE01000000          <1>  mov rsi, %2
   108 000014A2 E8A3010000          <1>  call podiaComerPieza
  1409 000014A7 4883F800                        cmp rax, 0
  1410 000014AB 0F8493010000                    je podiaCapturar
  1411                                  
  1412                                      ; Casilla izquierda
  1413                                      verCasIzq:
  1414                                          mMov desplazAux, desplazAux2, 1
    31 000014B1 B901000000          <1>  mov rcx, %3
    32 000014B6 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 000014BE 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 000014C6 F3A4                <1>  rep movsb
  1415 000014C8 48832C25[C8000000]-             sub qword[desplazAux], 1
  1415 000014D0 01                 
  1416                                          mHaySoldado qword[desplazAux]
   100 000014D1 B800000000          <1>  mov rax, 0
   101 000014D6 488B3C25[C8000000]  <1>  mov rdi, %1
   102 000014DE E81EF9FFFF          <1>  call haySoldado
  1417 000014E3 4883F800                        cmp rax, 0
  1418 000014E7 7519                            jne verCasDer
  1419                                          
  1420                                          mPuedeCapturar 1, 1 ; restar 1 a desplazAux
   106 000014E9 BF01000000          <1>  mov rdi, %1
   107 000014EE BE01000000          <1>  mov rsi, %2
   108 000014F3 E852010000          <1>  call podiaComerPieza
  1421 000014F8 4883F800                        cmp rax, 0
  1422 000014FC 0F8442010000                    je podiaCapturar
  1423                                  
  1424                                      ; Casilla derecha
  1425                                      verCasDer:
  1426                                          mMov desplazAux, desplazAux2, 1
    31 00001502 B901000000          <1>  mov rcx, %3
    32 00001507 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 0000150F 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001517 F3A4                <1>  rep movsb
  1427 00001519 48830425[C8000000]-             add qword[desplazAux], 1
  1427 00001521 01                 
  1428                                          mHaySoldado qword[desplazAux]
   100 00001522 B800000000          <1>  mov rax, 0
   101 00001527 488B3C25[C8000000]  <1>  mov rdi, %1
   102 0000152F E8CDF8FFFF          <1>  call haySoldado
  1429 00001534 4883F800                        cmp rax, 0
  1430 00001538 7519                            jne verCasAbajoIzq
  1431                                          
  1432                                          mPuedeCapturar 1, 0 ; sumar 1 a desplazAux
   106 0000153A BF01000000          <1>  mov rdi, %1
   107 0000153F BE00000000          <1>  mov rsi, %2
   108 00001544 E801010000          <1>  call podiaComerPieza
  1433 00001549 4883F800                        cmp rax, 0
  1434 0000154D 0F84F1000000                    je podiaCapturar
  1435                                  
  1436                                      ; Casilla abajo-izquierda
  1437                                      verCasAbajoIzq:
  1438                                          mMov desplazAux, desplazAux2, 1
    31 00001553 B901000000          <1>  mov rcx, %3
    32 00001558 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001560 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001568 F3A4                <1>  rep movsb
  1439 0000156A 48830425[C8000000]-             add qword[desplazAux], 10
  1439 00001572 0A                 
  1440                                          mHaySoldado qword[desplazAux]
   100 00001573 B800000000          <1>  mov rax, 0
   101 00001578 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001580 E87CF8FFFF          <1>  call haySoldado
  1441 00001585 4883F800                        cmp rax, 0
  1442 00001589 7519                            jne verCasAbajo
  1443                                          
  1444                                          mPuedeCapturar 10, 0 ; sumar 10 a desplazAux
   106 0000158B BF0A000000          <1>  mov rdi, %1
   107 00001590 BE00000000          <1>  mov rsi, %2
   108 00001595 E8B0000000          <1>  call podiaComerPieza
  1445 0000159A 4883F800                        cmp rax, 0
  1446 0000159E 0F84A0000000                    je podiaCapturar
  1447                                  
  1448                                      ; Casilla abajo
  1449                                      verCasAbajo:
  1450                                          mMov desplazAux, desplazAux2, 1
    31 000015A4 B901000000          <1>  mov rcx, %3
    32 000015A9 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 000015B1 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 000015B9 F3A4                <1>  rep movsb
  1451 000015BB 48830425[C8000000]-             add qword[desplazAux], 11
  1451 000015C3 0B                 
  1452                                          mHaySoldado qword[desplazAux]
   100 000015C4 B800000000          <1>  mov rax, 0
   101 000015C9 488B3C25[C8000000]  <1>  mov rdi, %1
   102 000015D1 E82BF8FFFF          <1>  call haySoldado
  1453 000015D6 4883F800                        cmp rax, 0
  1454 000015DA 7515                            jne verCasAbajoDer
  1455                                          
  1456                                          mPuedeCapturar 11, 0 ; sumar 11 a desplazAux
   106 000015DC BF0B000000          <1>  mov rdi, %1
   107 000015E1 BE00000000          <1>  mov rsi, %2
   108 000015E6 E85F000000          <1>  call podiaComerPieza
  1457 000015EB 4883F800                        cmp rax, 0
  1458 000015EF 7453                            je podiaCapturar
  1459                                  
  1460                                      ; Casilla abajo-derecha
  1461                                      verCasAbajoDer:
  1462                                          mMov desplazAux, desplazAux2, 1
    31 000015F1 B901000000          <1>  mov rcx, %3
    32 000015F6 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 000015FE 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001606 F3A4                <1>  rep movsb
  1463 00001608 48830425[C8000000]-             add qword[desplazAux], 12
  1463 00001610 0C                 
  1464                                          mHaySoldado qword[desplazAux]
   100 00001611 B800000000          <1>  mov rax, 0
   101 00001616 488B3C25[C8000000]  <1>  mov rdi, %1
   102 0000161E E8DEF7FFFF          <1>  call haySoldado
  1465 00001623 4883F800                        cmp rax, 0
  1466 00001627 7515                            jne okNoPodiaCapturar
  1467                                          
  1468                                          mPuedeCapturar 12, 0 ; sumar 12 a desplazAux
   106 00001629 BF0C000000          <1>  mov rdi, %1
   107 0000162E BE00000000          <1>  mov rsi, %2
   108 00001633 E812000000          <1>  call podiaComerPieza
  1469 00001638 4883F800                        cmp rax, 0
  1470 0000163C 7406                            je podiaCapturar
  1471                                      
  1472                                      okNoPodiaCapturar:
  1473 0000163E B801000000                      mov rax, 1
  1474 00001643 C3                              ret
  1475                                      
  1476                                      podiaCapturar:
  1477 00001644 B800000000                      mov rax, 0
  1478                                  
  1479 00001649 C3                          ret
  1480                                  
  1481                                  podiaComerPieza:
  1482 0000164A 4883FE00                    cmp rsi, 0
  1483 0000164E 740A                        je sumarDesplaz 
  1484 00001650 48293C25[C8000000]          sub qword[desplazAux], rdi
  1485 00001658 EB08                        jmp verSiEspacioEstaLibre
  1486                                  
  1487                                      sumarDesplaz:
  1488 0000165A 48013C25[C8000000]              add qword[desplazAux], rdi
  1489                                  
  1490                                      verSiEspacioEstaLibre:
  1491                                          mEstaVacia qword[desplazAux]
    94 00001662 B800000000          <1>  mov rax, 0
    95 00001667 488B3C25[C8000000]  <1>  mov rdi, %1
    96 0000166F E8BAF5FFFF          <1>  call estaVacia
  1492 00001674 4883F800                        cmp rax, 0
  1493 00001678 7406                            je okComerPieza
  1494                                  
  1495 0000167A B801000000                      mov rax, 1
  1496 0000167F C3                              ret
  1497                                  
  1498                                      okComerPieza:
  1499 00001680 B800000000                      mov rax, 0
  1500 00001685 C3                              ret
  1501                                  
  1502                                  ; --------------------------------------------------------------------------------------------
  1503                                  ; RUTINA PARA QUITAR AL OFICIAL QUE SE DESPREOCUPÓ DE CAPTURAR SOLDADOS
  1504                                  ; --------------------------------------------------------------------------------------------
  1505                                  
  1506                                  desentenderOficial:
  1507 00001686 488B1C25[C8000000]          mov rbx, qword[desplazAux]
  1508 0000168E BA20000000                  mov rdx, ' '
  1509 00001693 8893[04000000]              mov byte[tableroEnJuego+rbx], dl
  1510                                  
  1511 00001699 E85AFAFFFF                  call verQueOficialEs ; Verificamos qué oficial es el que se quiere mover
  1512                                  
  1513 0000169E 4883F801                    cmp rax, 1
  1514 000016A2 741A                        je desentenderOfic1
  1515                                  
  1516                                      desentenderOfic2:
  1517 000016A4 48C70425[E0080000]-             mov qword[casillaOfic2], 0
  1517 000016AC 00000000           
  1518 000016B0 48C70425[E8080000]-             mov qword[casillaOfic2+8], 0
  1518 000016B8 00000000           
  1519 000016BC EB18                            jmp agregarOficDesentendido
  1520                                  
  1521                                      desentenderOfic1:
  1522 000016BE 48C70425[D0080000]-             mov qword[casillaOfic1], 0
  1522 000016C6 00000000           
  1523 000016CA 48C70425[D8080000]-             mov qword[casillaOfic1+8], 0
  1523 000016D2 00000000           
  1524                                  
  1525                                      agregarOficDesentendido:
  1526 000016D6 48FF0425[C8080000]              inc qword[cantOficInvalidados]
  1527                                      
  1528 000016DE C3                          ret
  1529                                      
  1530                                  ; --------------------------------------------------------------------------------------------
  1531                                  ; RUTINA PARA VERIFICAR SI EL OTRO OFICIAL PODÍA CAPTURAR UN SOLDADO Y NO LO HIZO
  1532                                  ; --------------------------------------------------------------------------------------------
  1533                                  
  1534                                  podiaCapturarSoldadoOtroOficial:
  1535 000016DF E814FAFFFF                  call verQueOficialEs ; Verificamos qué oficial es el que se quiere mover
  1536 000016E4 4883F801                    cmp rax, 1
  1537 000016E8 742A                        je verificarOfic2
  1538                                  
  1539                                      verificarOfic1:
  1540                                          mCalcDesplaz qword[casillaOfic1], qword[casillaOfic1+8], qword[desplazAux2]
    87 000016EA 488B3C25[D0080000]  <1>  mov rdi, %1
    88 000016F2 488B3425[D8080000]  <1>  mov rsi, %2
    89 000016FA E844F5FFFF          <1>  call calcularDesplazamiento
    90 000016FF 48890425[D0000000]  <1>  mov %3, rax
  1541 00001707 E8B2FCFFFF                      call podiaCapturarSoldado
  1542 0000170C 4883F800                        cmp rax, 0
  1543 00001710 742C                            je okPodiaComerElOtro
  1544 00001712 EB30                            jmp noPodiaComerElOtro
  1545                                      
  1546                                      verificarOfic2:
  1547                                          mCalcDesplaz qword[casillaOfic2], qword[casillaOfic2+8], qword[desplazAux2]
    87 00001714 488B3C25[E0080000]  <1>  mov rdi, %1
    88 0000171C 488B3425[E8080000]  <1>  mov rsi, %2
    89 00001724 E81AF5FFFF          <1>  call calcularDesplazamiento
    90 00001729 48890425[D0000000]  <1>  mov %3, rax
  1548 00001731 E888FCFFFF                      call podiaCapturarSoldado
  1549 00001736 4883F800                        cmp rax, 0
  1550 0000173A 7402                            je okPodiaComerElOtro
  1551 0000173C EB06                            jmp noPodiaComerElOtro
  1552                                  
  1553                                      okPodiaComerElOtro:
  1554 0000173E B800000000                      mov rax, 0
  1555 00001743 C3                              ret
  1556                                  
  1557                                      noPodiaComerElOtro:
  1558 00001744 B801000000                      mov rax, 1
  1559                                  
  1560 00001749 C3                          ret
  1561                                  
  1562                                  ; --------------------------------------------------------------------------------------------
  1563                                  ; RUTINA PARA INVALIDAR AL OTRO OFICIAL QUE NO SE MOVIÓ (el cual podía capturar un soldado)
  1564                                  ; --------------------------------------------------------------------------------------------
  1565                                  
  1566                                  desentenderOtroOficial:
  1567 0000174A E8A9F9FFFF                  call verQueOficialEs ; Verificamos qué oficial es el que se quiere mover
  1568                                  
  1569 0000174F 4883F801                    cmp rax, 1
  1570 00001753 7423                        je otroEsOfic2
  1571                                  
  1572                                      otroEsOfic1:
  1573                                          mCalcDesplaz qword[casillaOfic1], qword[casillaOfic1+8], qword[desplazAux]
    87 00001755 488B3C25[D0080000]  <1>  mov rdi, %1
    88 0000175D 488B3425[D8080000]  <1>  mov rsi, %2
    89 00001765 E8D9F4FFFF          <1>  call calcularDesplazamiento
    90 0000176A 48890425[C8000000]  <1>  mov %3, rax
  1574 00001772 E80FFFFFFF                      call desentenderOficial
  1575 00001777 C3                              ret
  1576                                  
  1577                                      otroEsOfic2:
  1578                                          mCalcDesplaz qword[casillaOfic2], qword[casillaOfic2+8], qword[desplazAux]
    87 00001778 488B3C25[E0080000]  <1>  mov rdi, %1
    88 00001780 488B3425[E8080000]  <1>  mov rsi, %2
    89 00001788 E8B6F4FFFF          <1>  call calcularDesplazamiento
    90 0000178D 48890425[C8000000]  <1>  mov %3, rax
  1579 00001795 E8ECFEFFFF                      call desentenderOficial
  1580                                      
  1581 0000179A C3                          ret
  1582                                  
  1583                                  ; --------------------------------------------------------------------------------------------
  1584                                  ; RUTINA PARA VER SI EL MOVIMIENTO DE UN OFICIAL RESULTA EN EL FIN DEL JUEGO
  1585                                  ; --------------------------------------------------------------------------------------------
  1586                                  
  1587                                  verificarFinJuegoOficiales:
  1588                                      ; Verificamos si ambos oficiales han sido invalidados
  1589 0000179B 48833C25[C8080000]-         cmp qword[cantOficInvalidados], 2
  1589 000017A3 02                 
  1590 000017A4 7411                        je finInvalidados
  1591                                  
  1592                                      ; Verificamos que los oficiales hayan capturado necesarios soldados para ganar
  1593 000017A6 48833C25[C0080000]-         cmp qword[cantSoldCapturados], 16
  1593 000017AE 10                 
  1594 000017AF 7413                        je finSoldCapturados
  1595                                  
  1596 000017B1 B801000000                  mov rax, 1
  1597 000017B6 C3                          ret
  1598                                  
  1599                                      finInvalidados:
  1600 000017B7 C70425[A4040000]6F-             mov dword[varRazonFin], "oInv"
  1600 000017BF 496E76             
  1601 000017C2 EB0B                            jmp hayFinJuegoOfic
  1602                                  
  1603                                      finSoldCapturados:
  1604 000017C4 C70425[A4040000]73-             mov dword[varRazonFin], "sCap"
  1604 000017CC 436170             
  1605                                  
  1606                                      hayFinJuegoOfic:
  1607 000017CF B800000000                      mov rax, 0
  1608 000017D4 C3                              ret
  1609                                  
  1610                                  ; --------------------------------------------------------------------------------------------
  1611                                  ; RUTINA PARA VERIFICAR SI EL MOVIMIENTO DE UN SOLDADO RESULTA EN EL FIN DEL JUEGO
  1612                                  ; --------------------------------------------------------------------------------------------
  1613                                  
  1614                                  verificarFinJuegoSoldados:
  1615 000017D5 E835000000                  call soldadosOcupanFortaleza
  1616 000017DA 4883F800                    cmp rax, 0
  1617 000017DE 7411                        je finOcupFortaleza
  1618                                  
  1619 000017E0 E827010000                  call oficialesRodeados
  1620 000017E5 4883F800                    cmp rax, 0
  1621 000017E9 7413                        je finOficRodeados
  1622                                  
  1623 000017EB B801000000                  mov rax, 1
  1624 000017F0 C3                          ret
  1625                                  
  1626                                      finOcupFortaleza:
  1627 000017F1 C70425[A4040000]73-             mov dword[varRazonFin], "sOcu"
  1627 000017F9 4F6375             
  1628 000017FC EB0B                            jmp hayFinJuegoSold
  1629                                  
  1630                                      finOficRodeados:
  1631 000017FE C70425[A4040000]6F-             mov dword[varRazonFin], "oRod"
  1631 00001806 526F64             
  1632                                  
  1633                                      hayFinJuegoSold:
  1634 00001809 B800000000                      mov rax, 0
  1635 0000180E C3                              ret
  1636                                  
  1637                                  ; --------------------------------------------------------------------------------------------
  1638                                  ; RUTINA PARA VERIFICAR SI LOS SOLDADOS OCUPAN LA FORTALEZA
  1639                                  ; --------------------------------------------------------------------------------------------
  1640                                  
  1641                                  soldadosOcupanFortaleza:
  1642                                      mCmp byte[tableroEnJuego+70], [simboloSoldados], 1 ; Fortaleza 1-1
    38 0000180F B901000000          <1>  mov rcx, %3
    39 00001814 488D3425[4A000000]  <1>  lea rsi, %1
    40 0000181C 488D3C25[02090000]  <1>  lea rdi, %2
    41 00001824 F3A6                <1>  repe cmpsb
  1643 00001826 0F85DA000000                jne noOcupaFortaleza
  1644                                      mCmp byte[tableroEnJuego+71], [simboloSoldados], 1 ; Fortaleza 1-2
    38 0000182C B901000000          <1>  mov rcx, %3
    39 00001831 488D3425[4B000000]  <1>  lea rsi, %1
    40 00001839 488D3C25[02090000]  <1>  lea rdi, %2
    41 00001841 F3A6                <1>  repe cmpsb
  1645 00001843 0F85BD000000                jne noOcupaFortaleza
  1646                                      mCmp byte[tableroEnJuego+72], [simboloSoldados], 1 ; Fortaleza 1-3
    38 00001849 B901000000          <1>  mov rcx, %3
    39 0000184E 488D3425[4C000000]  <1>  lea rsi, %1
    40 00001856 488D3C25[02090000]  <1>  lea rdi, %2
    41 0000185E F3A6                <1>  repe cmpsb
  1647 00001860 0F85A0000000                jne noOcupaFortaleza
  1648                                      mCmp byte[tableroEnJuego+81], [simboloSoldados], 1 ; Fortaleza 2-1
    38 00001866 B901000000          <1>  mov rcx, %3
    39 0000186B 488D3425[55000000]  <1>  lea rsi, %1
    40 00001873 488D3C25[02090000]  <1>  lea rdi, %2
    41 0000187B F3A6                <1>  repe cmpsb
  1649 0000187D 0F8583000000                jne noOcupaFortaleza
  1650                                      mCmp byte[tableroEnJuego+82], [simboloSoldados], 1 ; Fortaleza 2-2
    38 00001883 B901000000          <1>  mov rcx, %3
    39 00001888 488D3425[56000000]  <1>  lea rsi, %1
    40 00001890 488D3C25[02090000]  <1>  lea rdi, %2
    41 00001898 F3A6                <1>  repe cmpsb
  1651 0000189A 756A                        jne noOcupaFortaleza
  1652                                      mCmp byte[tableroEnJuego+83], [simboloSoldados], 1 ; Fortaleza 2-3
    38 0000189C B901000000          <1>  mov rcx, %3
    39 000018A1 488D3425[57000000]  <1>  lea rsi, %1
    40 000018A9 488D3C25[02090000]  <1>  lea rdi, %2
    41 000018B1 F3A6                <1>  repe cmpsb
  1653 000018B3 7551                        jne noOcupaFortaleza
  1654                                      mCmp byte[tableroEnJuego+92], [simboloSoldados], 1 ; Fortaleza 3-1
    38 000018B5 B901000000          <1>  mov rcx, %3
    39 000018BA 488D3425[60000000]  <1>  lea rsi, %1
    40 000018C2 488D3C25[02090000]  <1>  lea rdi, %2
    41 000018CA F3A6                <1>  repe cmpsb
  1655 000018CC 7538                        jne noOcupaFortaleza
  1656                                      mCmp byte[tableroEnJuego+93], [simboloSoldados], 1 ; Fortaleza 3-2
    38 000018CE B901000000          <1>  mov rcx, %3
    39 000018D3 488D3425[61000000]  <1>  lea rsi, %1
    40 000018DB 488D3C25[02090000]  <1>  lea rdi, %2
    41 000018E3 F3A6                <1>  repe cmpsb
  1657 000018E5 751F                        jne noOcupaFortaleza
  1658                                      mCmp byte[tableroEnJuego+94], [simboloSoldados], 1 ; Fortaleza 3-3
    38 000018E7 B901000000          <1>  mov rcx, %3
    39 000018EC 488D3425[62000000]  <1>  lea rsi, %1
    40 000018F4 488D3C25[02090000]  <1>  lea rdi, %2
    41 000018FC F3A6                <1>  repe cmpsb
  1659 000018FE 7506                        jne noOcupaFortaleza
  1660                                  
  1661 00001900 B800000000                  mov rax, 0
  1662 00001905 C3                          ret
  1663                                  
  1664                                      noOcupaFortaleza:
  1665 00001906 B801000000                      mov rax, 1
  1666                                  
  1667 0000190B C3                          ret
  1668                                  
  1669                                  ; --------------------------------------------------------------------------------------------
  1670                                  ; RUTINA PARA VERIFICAR SI LOS OFICIALES ESTÁN RODEADOS POR SOLDADOS
  1671                                  ; --------------------------------------------------------------------------------------------
  1672                                  
  1673                                  oficialesRodeados:
  1674 0000190C E8F8030000                  call ofic1Desentendido
  1675 00001911 4883F800                    cmp rax, 0
  1676 00001915 740B                        je rodeanAOfic2
  1677 00001917 E828000000                  call verSiOfic1Rodeado
  1678 0000191C 4883F800                    cmp rax, 0
  1679 00001920 751C                        jne tienenSalida
  1680                                  
  1681                                      rodeanAOfic2:
  1682 00001922 E8F9030000                      call ofic2Desentendido
  1683 00001927 4883F800                        cmp rax, 0
  1684 0000192B 740B                            je noHaySalida
  1685 0000192D E84C000000                      call verSiOfic2Rodeado
  1686 00001932 4883F800                        cmp rax, 0
  1687 00001936 7506                            jne tienenSalida
  1688                                  
  1689                                      noHaySalida:
  1690 00001938 B800000000                      mov rax, 0
  1691 0000193D C3                              ret
  1692                                  
  1693                                      tienenSalida:
  1694 0000193E B801000000                      mov rax, 1
  1695                                  
  1696 00001943 C3                          ret
  1697                                  
  1698                                  verSiOfic1Rodeado:
  1699                                      mCalcDesplaz qword[casillaOfic1], qword[casillaOfic1+8], qword[desplazAux]
    87 00001944 488B3C25[D0080000]  <1>  mov rdi, %1
    88 0000194C 488B3425[D8080000]  <1>  mov rsi, %2
    89 00001954 E8EAF2FFFF          <1>  call calcularDesplazamiento
    90 00001959 48890425[C8000000]  <1>  mov %3, rax
  1700                                      mMov desplazAux2, desplazAux, 1
    31 00001961 B901000000          <1>  mov rcx, %3
    32 00001966 488D3425[C8000000]  <1>  lea rsi, [%2]
    33 0000196E 488D3C25[D0000000]  <1>  lea rdi, [%1]
    34 00001976 F3A4                <1>  rep movsb
  1701 00001978 E83B000000                  call verSiOficialRodeado
  1702 0000197D C3                          ret
  1703                                  
  1704                                  verSiOfic2Rodeado:
  1705                                      mCalcDesplaz qword[casillaOfic2], qword[casillaOfic2+8], qword[desplazAux]
    87 0000197E 488B3C25[E0080000]  <1>  mov rdi, %1
    88 00001986 488B3425[E8080000]  <1>  mov rsi, %2
    89 0000198E E8B0F2FFFF          <1>  call calcularDesplazamiento
    90 00001993 48890425[C8000000]  <1>  mov %3, rax
  1706                                      mMov desplazAux2, desplazAux, 1
    31 0000199B B901000000          <1>  mov rcx, %3
    32 000019A0 488D3425[C8000000]  <1>  lea rsi, [%2]
    33 000019A8 488D3C25[D0000000]  <1>  lea rdi, [%1]
    34 000019B0 F3A4                <1>  rep movsb
  1707 000019B2 E801000000                  call verSiOficialRodeado
  1708 000019B7 C3                          ret
  1709                                  
  1710                                  verSiOficialRodeado:
  1711                                      ; Casilla arriba-izquierda
  1712 000019B8 48832C25[C8000000]-         sub qword[desplazAux], 12
  1712 000019C0 0C                 
  1713                                      mEstaVacia qword[desplazAux]
    94 000019C1 B800000000          <1>  mov rax, 0
    95 000019C6 488B3C25[C8000000]  <1>  mov rdi, %1
    96 000019CE E85BF2FFFF          <1>  call estaVacia
  1714 000019D3 4883F800                    cmp rax, 0 ; Si el oficial tiene una casilla vacía, puede moverse -> no está rodeado 
  1715 000019D7 0F8426030000                je okPuedeMoverse
  1716                                      mHaySoldado qword[desplazAux]
   100 000019DD B800000000          <1>  mov rax, 0
   101 000019E2 488B3C25[C8000000]  <1>  mov rdi, %1
   102 000019EA E812F4FFFF          <1>  call haySoldado
  1717 000019EF 4883F801                    cmp rax, 1 ; Si no hay soldado, significa que es un límite del tablero -> me fijo en otra casilla
  1718 000019F3 7419                        je verEspacioArr
  1719                                      mPuedeCapturar 12, 1 ; restar 12 a desplazAux
   106 000019F5 BF0C000000          <1>  mov rdi, %1
   107 000019FA BE01000000          <1>  mov rsi, %2
   108 000019FF E846FCFFFF          <1>  call podiaComerPieza
  1720 00001A04 4883F800                    cmp rax, 0 ; Si el oficial puede capturar un soldado, no está rodeado
  1721 00001A08 0F84F5020000                je okPuedeMoverse
  1722                                  
  1723                                      ; Casilla arriba
  1724                                      verEspacioArr:
  1725                                          mMov desplazAux, desplazAux2, 1
    31 00001A0E B901000000          <1>  mov rcx, %3
    32 00001A13 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001A1B 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001A23 F3A4                <1>  rep movsb
  1726 00001A25 48832C25[C8000000]-             sub qword[desplazAux], 11
  1726 00001A2D 0B                 
  1727                                          mEstaVacia qword[desplazAux]
    94 00001A2E B800000000          <1>  mov rax, 0
    95 00001A33 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001A3B E8EEF1FFFF          <1>  call estaVacia
  1728 00001A40 4883F800                        cmp rax, 0  
  1729 00001A44 0F84B9020000                    je okPuedeMoverse
  1730                                          mHaySoldado qword[desplazAux]
   100 00001A4A B800000000          <1>  mov rax, 0
   101 00001A4F 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001A57 E8A5F3FFFF          <1>  call haySoldado
  1731 00001A5C 4883F801                        cmp rax, 1
  1732 00001A60 7419                            je verEspacioArrDer
  1733                                          mPuedeCapturar 11, 1 ; restar 11 a desplazAux
   106 00001A62 BF0B000000          <1>  mov rdi, %1
   107 00001A67 BE01000000          <1>  mov rsi, %2
   108 00001A6C E8D9FBFFFF          <1>  call podiaComerPieza
  1734 00001A71 4883F800                        cmp rax, 0
  1735 00001A75 0F8488020000                    je okPuedeMoverse
  1736                                  
  1737                                      ; Casilla arriba-derecha
  1738                                      verEspacioArrDer:
  1739                                          mMov desplazAux, desplazAux2, 1
    31 00001A7B B901000000          <1>  mov rcx, %3
    32 00001A80 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001A88 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001A90 F3A4                <1>  rep movsb
  1740 00001A92 48832C25[C8000000]-             sub qword[desplazAux], 10
  1740 00001A9A 0A                 
  1741                                          mEstaVacia qword[desplazAux]
    94 00001A9B B800000000          <1>  mov rax, 0
    95 00001AA0 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001AA8 E881F1FFFF          <1>  call estaVacia
  1742 00001AAD 4883F800                        cmp rax, 0  
  1743 00001AB1 0F844C020000                    je okPuedeMoverse
  1744                                          mHaySoldado qword[desplazAux]
   100 00001AB7 B800000000          <1>  mov rax, 0
   101 00001ABC 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001AC4 E838F3FFFF          <1>  call haySoldado
  1745 00001AC9 4883F801                        cmp rax, 1
  1746 00001ACD 7419                            je verEspacioIzq
  1747                                          mPuedeCapturar 10, 1 ; restar 10 a desplazAux
   106 00001ACF BF0A000000          <1>  mov rdi, %1
   107 00001AD4 BE01000000          <1>  mov rsi, %2
   108 00001AD9 E86CFBFFFF          <1>  call podiaComerPieza
  1748 00001ADE 4883F800                        cmp rax, 0
  1749 00001AE2 0F841B020000                    je okPuedeMoverse
  1750                                  
  1751                                      ; Casilla izquierda
  1752                                      verEspacioIzq:
  1753                                          mMov desplazAux, desplazAux2, 1
    31 00001AE8 B901000000          <1>  mov rcx, %3
    32 00001AED 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001AF5 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001AFD F3A4                <1>  rep movsb
  1754 00001AFF 48832C25[C8000000]-             sub qword[desplazAux], 1
  1754 00001B07 01                 
  1755                                          mEstaVacia qword[desplazAux]
    94 00001B08 B800000000          <1>  mov rax, 0
    95 00001B0D 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001B15 E814F1FFFF          <1>  call estaVacia
  1756 00001B1A 4883F800                        cmp rax, 0  
  1757 00001B1E 0F84DF010000                    je okPuedeMoverse
  1758                                          mHaySoldado qword[desplazAux]
   100 00001B24 B800000000          <1>  mov rax, 0
   101 00001B29 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001B31 E8CBF2FFFF          <1>  call haySoldado
  1759 00001B36 4883F801                        cmp rax, 1
  1760 00001B3A 7419                            je verEspacioDer
  1761                                          mPuedeCapturar 1, 1 ; restar 1 a desplazAux 
   106 00001B3C BF01000000          <1>  mov rdi, %1
   107 00001B41 BE01000000          <1>  mov rsi, %2
   108 00001B46 E8FFFAFFFF          <1>  call podiaComerPieza
  1762 00001B4B 4883F800                        cmp rax, 0
  1763 00001B4F 0F84AE010000                    je okPuedeMoverse
  1764                                  
  1765                                      ; Casilla derecha
  1766                                      verEspacioDer:
  1767                                          mMov desplazAux, desplazAux2, 1
    31 00001B55 B901000000          <1>  mov rcx, %3
    32 00001B5A 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001B62 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001B6A F3A4                <1>  rep movsb
  1768 00001B6C 48830425[C8000000]-             add qword[desplazAux], 1
  1768 00001B74 01                 
  1769                                          mEstaVacia qword[desplazAux]
    94 00001B75 B800000000          <1>  mov rax, 0
    95 00001B7A 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001B82 E8A7F0FFFF          <1>  call estaVacia
  1770 00001B87 4883F800                        cmp rax, 0  
  1771 00001B8B 0F8472010000                    je okPuedeMoverse
  1772                                          mHaySoldado qword[desplazAux]
   100 00001B91 B800000000          <1>  mov rax, 0
   101 00001B96 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001B9E E85EF2FFFF          <1>  call haySoldado
  1773 00001BA3 4883F801                        cmp rax, 1
  1774 00001BA7 7419                            je verEspacioAbjIzq
  1775                                          mPuedeCapturar 1, 0 ; sumar 1 a desplazAux 
   106 00001BA9 BF01000000          <1>  mov rdi, %1
   107 00001BAE BE00000000          <1>  mov rsi, %2
   108 00001BB3 E892FAFFFF          <1>  call podiaComerPieza
  1776 00001BB8 4883F800                        cmp rax, 0
  1777 00001BBC 0F8441010000                    je okPuedeMoverse
  1778                                  
  1779                                      ; Casilla abajo-izquierda
  1780                                      verEspacioAbjIzq:
  1781                                          mMov desplazAux, desplazAux2, 1
    31 00001BC2 B901000000          <1>  mov rcx, %3
    32 00001BC7 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001BCF 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001BD7 F3A4                <1>  rep movsb
  1782 00001BD9 48830425[C8000000]-             add qword[desplazAux], 10
  1782 00001BE1 0A                 
  1783                                          mEstaVacia qword[desplazAux]
    94 00001BE2 B800000000          <1>  mov rax, 0
    95 00001BE7 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001BEF E83AF0FFFF          <1>  call estaVacia
  1784 00001BF4 4883F800                        cmp rax, 0  
  1785 00001BF8 0F8405010000                    je okPuedeMoverse
  1786                                          mHaySoldado qword[desplazAux]
   100 00001BFE B800000000          <1>  mov rax, 0
   101 00001C03 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001C0B E8F1F1FFFF          <1>  call haySoldado
  1787 00001C10 4883F801                        cmp rax, 1
  1788 00001C14 7419                            je verEspacioAbajo
  1789                                          mPuedeCapturar 10, 0 ; sumar 10 a desplazAux 
   106 00001C16 BF0A000000          <1>  mov rdi, %1
   107 00001C1B BE00000000          <1>  mov rsi, %2
   108 00001C20 E825FAFFFF          <1>  call podiaComerPieza
  1790 00001C25 4883F800                        cmp rax, 0
  1791 00001C29 0F84D4000000                    je okPuedeMoverse
  1792                                  
  1793                                      ; Casilla abajo
  1794                                      verEspacioAbajo:
  1795                                          mMov desplazAux, desplazAux2, 1
    31 00001C2F B901000000          <1>  mov rcx, %3
    32 00001C34 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001C3C 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001C44 F3A4                <1>  rep movsb
  1796 00001C46 48830425[C8000000]-             add qword[desplazAux], 11
  1796 00001C4E 0B                 
  1797                                          mEstaVacia qword[desplazAux]
    94 00001C4F B800000000          <1>  mov rax, 0
    95 00001C54 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001C5C E8CDEFFFFF          <1>  call estaVacia
  1798 00001C61 4883F800                        cmp rax, 0  
  1799 00001C65 0F8498000000                    je okPuedeMoverse
  1800                                          mHaySoldado qword[desplazAux]
   100 00001C6B B800000000          <1>  mov rax, 0
   101 00001C70 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001C78 E884F1FFFF          <1>  call haySoldado
  1801 00001C7D 4883F801                        cmp rax, 1
  1802 00001C81 7415                            je verEspacioAbjDer
  1803                                          mPuedeCapturar 11, 0 ; sumar 11 a desplazAux
   106 00001C83 BF0B000000          <1>  mov rdi, %1
   107 00001C88 BE00000000          <1>  mov rsi, %2
   108 00001C8D E8B8F9FFFF          <1>  call podiaComerPieza
  1804 00001C92 4883F800                        cmp rax, 0
  1805 00001C96 746B                            je okPuedeMoverse
  1806                                  
  1807                                      ; Casilla abajo-derecha
  1808                                      verEspacioAbjDer:
  1809                                          mMov desplazAux, desplazAux2, 1
    31 00001C98 B901000000          <1>  mov rcx, %3
    32 00001C9D 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001CA5 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001CAD F3A4                <1>  rep movsb
  1810 00001CAF 48830425[C8000000]-             add qword[desplazAux], 12
  1810 00001CB7 0C                 
  1811                                          mEstaVacia qword[desplazAux]
    94 00001CB8 B800000000          <1>  mov rax, 0
    95 00001CBD 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001CC5 E864EFFFFF          <1>  call estaVacia
  1812 00001CCA 4883F800                        cmp rax, 0  
  1813 00001CCE 7433                            je okPuedeMoverse
  1814                                          mHaySoldado qword[desplazAux]
   100 00001CD0 B800000000          <1>  mov rax, 0
   101 00001CD5 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001CDD E81FF1FFFF          <1>  call haySoldado
  1815 00001CE2 4883F801                        cmp rax, 1
  1816 00001CE6 7415                            je noPuedeMoverse
  1817                                          mPuedeCapturar 12, 0 ; sumar 12 a desplazAux
   106 00001CE8 BF0C000000          <1>  mov rdi, %1
   107 00001CED BE00000000          <1>  mov rsi, %2
   108 00001CF2 E853F9FFFF          <1>  call podiaComerPieza
  1818 00001CF7 4883F800                        cmp rax, 0
  1819 00001CFB 7406                            je okPuedeMoverse
  1820                                  
  1821                                      ; Si llegamos acá, el oficial está rodeado -> no puede realizar ningún movimiento
  1822                                      noPuedeMoverse:
  1823 00001CFD B800000000                      mov rax, 0
  1824 00001D02 C3                              ret
  1825                                  
  1826                                      ; Si llegamos acá, el oficial puede moverse
  1827                                      okPuedeMoverse:
  1828 00001D03 B801000000                      mov rax, 1
  1829 00001D08 C3                              ret
  1830                                  
  1831                                  ofic1Desentendido:
  1832 00001D09 48833C25[D0080000]-         cmp qword[casillaOfic1], 0
  1832 00001D11 00                 
  1833 00001D12 7406                        je el1EstaDesentendido
  1834                                  
  1835 00001D14 B801000000                  mov rax, 1
  1836 00001D19 C3                          ret
  1837                                  
  1838                                      el1EstaDesentendido:
  1839 00001D1A B800000000                      mov rax, 0
  1840 00001D1F C3                              ret
  1841                                  
  1842                                  ofic2Desentendido:
  1843 00001D20 48833C25[E0080000]-         cmp qword[casillaOfic2], 0
  1843 00001D28 00                 
  1844 00001D29 7406                        je el2EstaDesentendido
  1845                                  
  1846 00001D2B B801000000                  mov rax, 1
  1847 00001D30 C3                          ret
  1848                                  
  1849                                      el2EstaDesentendido:
  1850 00001D31 B800000000                      mov rax, 0
  1851 00001D36 C3                              ret
  1852                                  
  1853                                  ; --------------------------------------------------------------------------------------------
  1854                                  ; RUTINAS PARA TERMINAR EL JUEGO Y MOSTRAR LAS ESTADÍSTICAS
  1855                                  ; --------------------------------------------------------------------------------------------
  1856                                  
  1857                                  finDeJuego:
  1858                                      mCommand cmdBorrarArchivoPartida
    24 00001D37 48BF-               <1>  mov rdi, %1
    24 00001D39 [2609000000000000]  <1>
    25 00001D41 4883EC08            <1>  sub rsp, 8
    26 00001D45 E8(00000000)        <1>  call system
    27 00001D4A 4883C408            <1>  add rsp, 8
  1859                                      mCommand cmdLimpiarPantalla
    24 00001D4E 48BF-               <1>  mov rdi, %1
    24 00001D50 [0609000000000000]  <1>
    25 00001D58 4883EC08            <1>  sub rsp, 8
    26 00001D5C E8(00000000)        <1>  call system
    27 00001D61 4883C408            <1>  add rsp, 8
  1860                                      mPuts msgJuegoTerminado
     2 00001D65 48BF-               <1>  mov rdi, %1
     2 00001D67 [4504000000000000]  <1>
     3 00001D6F 4883EC08            <1>  sub rsp, 8
     4 00001D73 E8(00000000)        <1>  call puts
     5 00001D78 4883C408            <1>  add rsp, 8
  1861                                  
  1862 00001D7C 813C25[A4040000]73-         cmp dword[varRazonFin], "sOcu"
  1862 00001D84 4F6375             
  1863 00001D87 7430                        je soldadosFortaleza
  1864                                  
  1865 00001D89 813C25[A4040000]6F-         cmp dword[varRazonFin], "oRod"
  1865 00001D91 526F64             
  1866 00001D94 746A                        je soldadosRodeanOficiales
  1867                                  
  1868 00001D96 813C25[A4040000]6F-         cmp dword[varRazonFin], "oInv"
  1868 00001D9E 496E76             
  1869 00001DA1 0F84A0000000                je oficialesInvalidados
  1870                                  
  1871 00001DA7 813C25[A4040000]73-         cmp dword[varRazonFin], "sCap"
  1871 00001DAF 436170             
  1872 00001DB2 0F84D3000000                je soldadosCapturados
  1873                                  
  1874 00001DB8 C3                          ret
  1875                                  
  1876                                      soldadosFortaleza:
  1877                                          mPrint msgGanador, stringSoldados
     9 00001DB9 48BF-               <1>  mov rdi, %1
     9 00001DBB [5F04000000000000]  <1>
    10 00001DC3 48BE-               <1>  mov rsi, %2
    10 00001DC5 [8504000000000000]  <1>
    11 00001DCD 4883EC08            <1>  sub rsp, 8
    12 00001DD1 E8(00000000)        <1>  call printf
    13 00001DD6 4883C408            <1>  add rsp, 8
  1878                                          mPrint msgRazonGanador, msgSoldadosFortaleza
     9 00001DDA 48BF-               <1>  mov rdi, %1
     9 00001DDC [9804000000000000]  <1>
    10 00001DE4 48BE-               <1>  mov rsi, %2
    10 00001DE6 [BD05000000000000]  <1>
    11 00001DEE 4883EC08            <1>  sub rsp, 8
    12 00001DF2 E8(00000000)        <1>  call printf
    13 00001DF7 4883C408            <1>  add rsp, 8
  1879 00001DFB E9CF000000                      jmp mostrarEstadisticas
  1880                                  
  1881                                      soldadosRodeanOficiales:
  1882                                          mPrint msgGanador, stringSoldados
     9 00001E00 48BF-               <1>  mov rdi, %1
     9 00001E02 [5F04000000000000]  <1>
    10 00001E0A 48BE-               <1>  mov rsi, %2
    10 00001E0C [8504000000000000]  <1>
    11 00001E14 4883EC08            <1>  sub rsp, 8
    12 00001E18 E8(00000000)        <1>  call printf
    13 00001E1D 4883C408            <1>  add rsp, 8
  1883                                          mPrint msgRazonGanador, msgSoldadosRodean
     9 00001E21 48BF-               <1>  mov rdi, %1
     9 00001E23 [9804000000000000]  <1>
    10 00001E2B 48BE-               <1>  mov rsi, %2
    10 00001E2D [F805000000000000]  <1>
    11 00001E35 4883EC08            <1>  sub rsp, 8
    12 00001E39 E8(00000000)        <1>  call printf
    13 00001E3E 4883C408            <1>  add rsp, 8
  1884 00001E42 E988000000                      jmp mostrarEstadisticas
  1885                                  
  1886                                      oficialesInvalidados:
  1887                                          mPrint msgGanador, stringSoldados
     9 00001E47 48BF-               <1>  mov rdi, %1
     9 00001E49 [5F04000000000000]  <1>
    10 00001E51 48BE-               <1>  mov rsi, %2
    10 00001E53 [8504000000000000]  <1>
    11 00001E5B 4883EC08            <1>  sub rsp, 8
    12 00001E5F E8(00000000)        <1>  call printf
    13 00001E64 4883C408            <1>  add rsp, 8
  1888                                          mPrint msgRazonGanador, msgSoldadosInvalidar
     9 00001E68 48BF-               <1>  mov rdi, %1
     9 00001E6A [9804000000000000]  <1>
    10 00001E72 48BE-               <1>  mov rsi, %2
    10 00001E74 [2206000000000000]  <1>
    11 00001E7C 4883EC08            <1>  sub rsp, 8
    12 00001E80 E8(00000000)        <1>  call printf
    13 00001E85 4883C408            <1>  add rsp, 8
  1889 00001E89 EB44                            jmp mostrarEstadisticas
  1890                                  
  1891                                      soldadosCapturados:
  1892                                          mPrint msgGanador, stringOficiales
     9 00001E8B 48BF-               <1>  mov rdi, %1
     9 00001E8D [5F04000000000000]  <1>
    10 00001E95 48BE-               <1>  mov rsi, %2
    10 00001E97 [8E04000000000000]  <1>
    11 00001E9F 4883EC08            <1>  sub rsp, 8
    12 00001EA3 E8(00000000)        <1>  call printf
    13 00001EA8 4883C408            <1>  add rsp, 8
  1893                                          mPrint msgRazonGanador, msgOficialesGanan
     9 00001EAC 48BF-               <1>  mov rdi, %1
     9 00001EAE [9804000000000000]  <1>
    10 00001EB6 48BE-               <1>  mov rsi, %2
    10 00001EB8 [4806000000000000]  <1>
    11 00001EC0 4883EC08            <1>  sub rsp, 8
    12 00001EC4 E8(00000000)        <1>  call printf
    13 00001EC9 4883C408            <1>  add rsp, 8
  1894 00001ECD EB00                            jmp mostrarEstadisticas
  1895                                  
  1896                                  
  1897                                  mostrarEstadisticas:
  1898                                      mPuts msgEstadisticas
     2 00001ECF 48BF-               <1>  mov rdi, %1
     2 00001ED1 [D502000000000000]  <1>
     3 00001ED9 4883EC08            <1>  sub rsp, 8
     4 00001EDD E8(00000000)        <1>  call puts
     5 00001EE2 4883C408            <1>  add rsp, 8
  1899                                  
  1900                                      mPrint msgCantTotalCapturas, qword[cantSoldCapturados]
     9 00001EE6 48BF-               <1>  mov rdi, %1
     9 00001EE8 [F602000000000000]  <1>
    10 00001EF0 488B3425[C0080000]  <1>  mov rsi, %2
    11 00001EF8 4883EC08            <1>  sub rsp, 8
    12 00001EFC E8(00000000)        <1>  call printf
    13 00001F01 4883C408            <1>  add rsp, 8
  1901                                  
  1902                                      ; Estadísticas del oficial 1
  1903                                      mPuts msgOficial1
     2 00001F05 48BF-               <1>  mov rdi, %1
     2 00001F07 [1703000000000000]  <1>
     3 00001F0F 4883EC08            <1>  sub rsp, 8
     4 00001F13 E8(00000000)        <1>  call puts
     5 00001F18 4883C408            <1>  add rsp, 8
  1904                                      mPrint msgCantMovimientos, qword[movimientosOfic1]
     9 00001F1C 48BF-               <1>  mov rdi, %1
     9 00001F1E [2F03000000000000]  <1>
    10 00001F26 488B3425[20080000]  <1>  mov rsi, %2
    11 00001F2E 4883EC08            <1>  sub rsp, 8
    12 00001F32 E8(00000000)        <1>  call printf
    13 00001F37 4883C408            <1>  add rsp, 8
  1905                                      mPrint msgCantAdelante, qword[movOfic1Adelante]
     9 00001F3B 48BF-               <1>  mov rdi, %1
     9 00001F3D [4803000000000000]  <1>
    10 00001F45 488B3425[30080000]  <1>  mov rsi, %2
    11 00001F4D 4883EC08            <1>  sub rsp, 8
    12 00001F51 E8(00000000)        <1>  call printf
    13 00001F56 4883C408            <1>  add rsp, 8
  1906                                      mPrint msgCantDerecha, qword[movOfic1Derecha]
     9 00001F5A 48BF-               <1>  mov rdi, %1
     9 00001F5C [5E03000000000000]  <1>
    10 00001F64 488B3425[38080000]  <1>  mov rsi, %2
    11 00001F6C 4883EC08            <1>  sub rsp, 8
    12 00001F70 E8(00000000)        <1>  call printf
    13 00001F75 4883C408            <1>  add rsp, 8
  1907                                      mPrint msgCantIzquierda, qword[movOfic1Izquierda]
     9 00001F79 48BF-               <1>  mov rdi, %1
     9 00001F7B [7603000000000000]  <1>
    10 00001F83 488B3425[40080000]  <1>  mov rsi, %2
    11 00001F8B 4883EC08            <1>  sub rsp, 8
    12 00001F8F E8(00000000)        <1>  call printf
    13 00001F94 4883C408            <1>  add rsp, 8
  1908                                      mPrint msgCantAtras, qword[movOfic1Atras]
     9 00001F98 48BF-               <1>  mov rdi, %1
     9 00001F9A [9003000000000000]  <1>
    10 00001FA2 488B3425[48080000]  <1>  mov rsi, %2
    11 00001FAA 4883EC08            <1>  sub rsp, 8
    12 00001FAE E8(00000000)        <1>  call printf
    13 00001FB3 4883C408            <1>  add rsp, 8
  1909                                      mPrint msgCantDiagonal, qword[movOfic1Diagonal]
     9 00001FB7 48BF-               <1>  mov rdi, %1
     9 00001FB9 [A403000000000000]  <1>
    10 00001FC1 488B3425[50080000]  <1>  mov rsi, %2
    11 00001FC9 4883EC08            <1>  sub rsp, 8
    12 00001FCD E8(00000000)        <1>  call printf
    13 00001FD2 4883C408            <1>  add rsp, 8
  1910                                      mPrint msgCantDiagArribaDer, qword[movOfic1DiagArribaDer]
     9 00001FD6 48BF-               <1>  mov rdi, %1
     9 00001FD8 [B703000000000000]  <1>
    10 00001FE0 488B3425[58080000]  <1>  mov rsi, %2
    11 00001FE8 4883EC08            <1>  sub rsp, 8
    12 00001FEC E8(00000000)        <1>  call printf
    13 00001FF1 4883C408            <1>  add rsp, 8
  1911                                      mPrint msgCantDiagArribaIzq, qword[movOfic1DiagArribaIzq]
     9 00001FF5 48BF-               <1>  mov rdi, %1
     9 00001FF7 [D103000000000000]  <1>
    10 00001FFF 488B3425[60080000]  <1>  mov rsi, %2
    11 00002007 4883EC08            <1>  sub rsp, 8
    12 0000200B E8(00000000)        <1>  call printf
    13 00002010 4883C408            <1>  add rsp, 8
  1912                                      mPrint msgCantDiagAbajoDer, qword[movOfic1DiagAbajoDer]
     9 00002014 48BF-               <1>  mov rdi, %1
     9 00002016 [ED03000000000000]  <1>
    10 0000201E 488B3425[68080000]  <1>  mov rsi, %2
    11 00002026 4883EC08            <1>  sub rsp, 8
    12 0000202A E8(00000000)        <1>  call printf
    13 0000202F 4883C408            <1>  add rsp, 8
  1913                                      mPrint msgCantDiagAbajoIzq, qword[movOfic1DiagAbajoIzq]
     9 00002033 48BF-               <1>  mov rdi, %1
     9 00002035 [0504000000000000]  <1>
    10 0000203D 488B3425[70080000]  <1>  mov rsi, %2
    11 00002045 4883EC08            <1>  sub rsp, 8
    12 00002049 E8(00000000)        <1>  call printf
    13 0000204E 4883C408            <1>  add rsp, 8
  1914                                      mPrint msgCantSoldadosCapt, qword[cantCapturasOfic1]
     9 00002052 48BF-               <1>  mov rdi, %1
     9 00002054 [1F04000000000000]  <1>
    10 0000205C 488B3425[F0080000]  <1>  mov rsi, %2
    11 00002064 4883EC08            <1>  sub rsp, 8
    12 00002068 E8(00000000)        <1>  call printf
    13 0000206D 4883C408            <1>  add rsp, 8
  1915                                  
  1916                                      ; Estadísticas del oficial 2
  1917                                      mPuts msgOficial2
     2 00002071 48BF-               <1>  mov rdi, %1
     2 00002073 [2303000000000000]  <1>
     3 0000207B 4883EC08            <1>  sub rsp, 8
     4 0000207F E8(00000000)        <1>  call puts
     5 00002084 4883C408            <1>  add rsp, 8
  1918                                      mPrint msgCantMovimientos, qword[movimientosOfic2]
     9 00002088 48BF-               <1>  mov rdi, %1
     9 0000208A [2F03000000000000]  <1>
    10 00002092 488B3425[28080000]  <1>  mov rsi, %2
    11 0000209A 4883EC08            <1>  sub rsp, 8
    12 0000209E E8(00000000)        <1>  call printf
    13 000020A3 4883C408            <1>  add rsp, 8
  1919                                      mPrint msgCantAdelante, qword[movOfic2Adelante]
     9 000020A7 48BF-               <1>  mov rdi, %1
     9 000020A9 [4803000000000000]  <1>
    10 000020B1 488B3425[78080000]  <1>  mov rsi, %2
    11 000020B9 4883EC08            <1>  sub rsp, 8
    12 000020BD E8(00000000)        <1>  call printf
    13 000020C2 4883C408            <1>  add rsp, 8
  1920                                      mPrint msgCantDerecha, qword[movOfic2Derecha]
     9 000020C6 48BF-               <1>  mov rdi, %1
     9 000020C8 [5E03000000000000]  <1>
    10 000020D0 488B3425[80080000]  <1>  mov rsi, %2
    11 000020D8 4883EC08            <1>  sub rsp, 8
    12 000020DC E8(00000000)        <1>  call printf
    13 000020E1 4883C408            <1>  add rsp, 8
  1921                                      mPrint msgCantIzquierda, qword[movOfic2Izquierda]
     9 000020E5 48BF-               <1>  mov rdi, %1
     9 000020E7 [7603000000000000]  <1>
    10 000020EF 488B3425[88080000]  <1>  mov rsi, %2
    11 000020F7 4883EC08            <1>  sub rsp, 8
    12 000020FB E8(00000000)        <1>  call printf
    13 00002100 4883C408            <1>  add rsp, 8
  1922                                      mPrint msgCantAtras, qword[movOfic2Atras]
     9 00002104 48BF-               <1>  mov rdi, %1
     9 00002106 [9003000000000000]  <1>
    10 0000210E 488B3425[90080000]  <1>  mov rsi, %2
    11 00002116 4883EC08            <1>  sub rsp, 8
    12 0000211A E8(00000000)        <1>  call printf
    13 0000211F 4883C408            <1>  add rsp, 8
  1923                                      mPrint msgCantDiagonal, qword[movOfic2Diagonal]
     9 00002123 48BF-               <1>  mov rdi, %1
     9 00002125 [A403000000000000]  <1>
    10 0000212D 488B3425[98080000]  <1>  mov rsi, %2
    11 00002135 4883EC08            <1>  sub rsp, 8
    12 00002139 E8(00000000)        <1>  call printf
    13 0000213E 4883C408            <1>  add rsp, 8
  1924                                      mPrint msgCantDiagArribaDer, qword[movOfic2DiagArribaDer]
     9 00002142 48BF-               <1>  mov rdi, %1
     9 00002144 [B703000000000000]  <1>
    10 0000214C 488B3425[A0080000]  <1>  mov rsi, %2
    11 00002154 4883EC08            <1>  sub rsp, 8
    12 00002158 E8(00000000)        <1>  call printf
    13 0000215D 4883C408            <1>  add rsp, 8
  1925                                      mPrint msgCantDiagArribaIzq, qword[movOfic2DiagArribaIzq]
     9 00002161 48BF-               <1>  mov rdi, %1
     9 00002163 [D103000000000000]  <1>
    10 0000216B 488B3425[A8080000]  <1>  mov rsi, %2
    11 00002173 4883EC08            <1>  sub rsp, 8
    12 00002177 E8(00000000)        <1>  call printf
    13 0000217C 4883C408            <1>  add rsp, 8
  1926                                      mPrint msgCantDiagAbajoDer, qword[movOfic2DiagAbajoDer]
     9 00002180 48BF-               <1>  mov rdi, %1
     9 00002182 [ED03000000000000]  <1>
    10 0000218A 488B3425[B0080000]  <1>  mov rsi, %2
    11 00002192 4883EC08            <1>  sub rsp, 8
    12 00002196 E8(00000000)        <1>  call printf
    13 0000219B 4883C408            <1>  add rsp, 8
  1927                                      mPrint msgCantDiagAbajoIzq, qword[movOfic2DiagAbajoIzq]
     9 0000219F 48BF-               <1>  mov rdi, %1
     9 000021A1 [0504000000000000]  <1>
    10 000021A9 488B3425[B8080000]  <1>  mov rsi, %2
    11 000021B1 4883EC08            <1>  sub rsp, 8
    12 000021B5 E8(00000000)        <1>  call printf
    13 000021BA 4883C408            <1>  add rsp, 8
  1928                                      mPrint msgCantSoldadosCapt, qword[cantCapturasOfic2]
     9 000021BE 48BF-               <1>  mov rdi, %1
     9 000021C0 [1F04000000000000]  <1>
    10 000021C8 488B3425[F8080000]  <1>  mov rsi, %2
    11 000021D0 4883EC08            <1>  sub rsp, 8
    12 000021D4 E8(00000000)        <1>  call printf
    13 000021D9 4883C408            <1>  add rsp, 8
  1929                                  
  1930 000021DD EB00                        jmp salirSinGuardar
  1931                                  
  1932                                  ; --------------------------------------------------------------------------------------------
  1933                                  ; RUTINAS PARA SALIR DEL JUEGO (guardando o no la partida)
  1934                                  ; --------------------------------------------------------------------------------------------
  1935                                  
  1936                                  salirSinGuardar:
  1937 000021DF B800000000                  mov rax, 0
  1938 000021E4 C3                          ret
  1939                                  
  1940                                  salirDelJuego:
  1941                                      mCommand cmdLimpiarPantalla
    24 000021E5 48BF-               <1>  mov rdi, %1
    24 000021E7 [0609000000000000]  <1>
    25 000021EF 4883EC08            <1>  sub rsp, 8
    26 000021F3 E8(00000000)        <1>  call system
    27 000021F8 4883C408            <1>  add rsp, 8
  1942                                  
  1943                                      mPuts msgSalidaPartida
     2 000021FC 48BF-               <1>  mov rdi, %1
     2 000021FE [A904000000000000]  <1>
     3 00002206 4883EC08            <1>  sub rsp, 8
     4 0000220A E8(00000000)        <1>  call puts
     5 0000220F 4883C408            <1>  add rsp, 8
  1944                                      mPuts msgAclaracionSalida
     2 00002213 48BF-               <1>  mov rdi, %1
     2 00002215 [E604000000000000]  <1>
     3 0000221D 4883EC08            <1>  sub rsp, 8
     4 00002221 E8(00000000)        <1>  call puts
     5 00002226 4883C408            <1>  add rsp, 8
  1945                                  
  1946                                      recibirOpcionGuardado:
  1947                                          mGets guardadoPartida
    17 0000222A 48BF-               <1>  mov rdi, %1
    17 0000222C [7D05000000000000]  <1>
    18 00002234 4883EC08            <1>  sub rsp, 8
    19 00002238 E8(00000000)        <1>  call gets
    20 0000223D 4883C408            <1>  add rsp, 8
  1948                                  
  1949 00002241 803C25[7E050000]00          cmp byte[guardadoPartida+1], 0
  1950 00002249 7514                        jne guardadoInvalido
  1951                                  
  1952 0000224B 803C25[7D050000]73          cmp byte[guardadoPartida], 's'
  1953 00002253 7455                        je guardarPartida
  1954                                  
  1955 00002255 803C25[7D050000]6E          cmp byte[guardadoPartida], 'n'
  1956 0000225D 7419                        je removerArchivo
  1957                                  
  1958                                      guardadoInvalido:
  1959                                          mPuts msgOpcionInvalida
     2 0000225F 48BF-               <1>  mov rdi, %1
     2 00002261 [A100000000000000]  <1>
     3 00002269 4883EC08            <1>  sub rsp, 8
     4 0000226D E8(00000000)        <1>  call puts
     5 00002272 4883C408            <1>  add rsp, 8
  1960 00002276 EBB2                            jmp recibirOpcionGuardado
  1961                                  
  1962                                      removerArchivo:
  1963 00002278 803C25[7F050000]73              cmp byte[yaHabiaGuardado], 's' ; Si ya había guardado la partida, la borramos
  1964 00002280 0F8559FFFFFF                    jne salirSinGuardar
  1965                                          
  1966                                          mCommand cmdBorrarArchivoPartida
    24 00002286 48BF-               <1>  mov rdi, %1
    24 00002288 [2609000000000000]  <1>
    25 00002290 4883EC08            <1>  sub rsp, 8
    26 00002294 E8(00000000)        <1>  call system
    27 00002299 4883C408            <1>  add rsp, 8
  1967 0000229D C60425[7F050000]6E              mov byte[yaHabiaGuardado], 'n' ; Para la próxima vez que se quiera salir, no se borra nada
  1968 000022A5 E935FFFFFF                      jmp salirSinGuardar
  1969                                  
  1970                                  
  1971                                  guardarPartida:
  1972 000022AA C60425[7F050000]73          mov byte[yaHabiaGuardado], 's'
  1973                                      mOpenFile nombreArchivo, modoEscritura
   112 000022B2 48BF-               <1>  mov rdi, %1
   112 000022B4 [6A09000000000000]  <1>
   113 000022BC 48BE-               <1>  mov rsi, %2
   113 000022BE [6409000000000000]  <1>
   114 000022C6 4883EC08            <1>  sub rsp, 8
   115 000022CA E8(00000000)        <1>  call fopen
   116 000022CF 4883C408            <1>  add rsp, 8
   117                              <1> 
   118 000022D3 4883F800            <1>  cmp rax, 0
   119 000022D7 48890425[D8000000]  <1>  mov qword[idArchGuardado], rax
  1974 000022DF E82D000000                  call agregarDatosPartida
  1975                                      mCloseFile idArchGuardado
   123 000022E4 488B3C25[D8000000]  <1>  mov rdi, [%1]
   124 000022EC 4883EC08            <1>  sub rsp, 8
   125 000022F0 E8(00000000)        <1>  call fclose
   126 000022F5 4883C408            <1>  add rsp, 8
  1976                                  
  1977                                      mPuts msgPartidaGuardada
     2 000022F9 48BF-               <1>  mov rdi, %1
     2 000022FB [8305000000000000]  <1>
     3 00002303 4883EC08            <1>  sub rsp, 8
     4 00002307 E8(00000000)        <1>  call puts
     5 0000230C 4883C408            <1>  add rsp, 8
  1978 00002310 C3                          ret    
  1979                                  
  1980                                  agregarDatosPartida:
  1981                                      mWriteLine tableroEnJuego, 116, 1
   140 00002311 48BF-               <1>  mov rdi, %1
   140 00002313 [0400000000000000]  <1>
   141 0000231B BE74000000          <1>  mov rsi, %2
   142 00002320 BA01000000          <1>  mov rdx, %3
   143 00002325 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 0000232D 4883EC08            <1>  sub rsp, 8
   145 00002331 E8(00000000)        <1>  call fwrite
   146 00002336 4883C408            <1>  add rsp, 8
  1982                                  
  1983                                      mWriteLine yaHabiaGuardado, 1, 1 ; Guardamos si ya había guardado la partida
   140 0000233A 48BF-               <1>  mov rdi, %1
   140 0000233C [7F05000000000000]  <1>
   141 00002344 BE01000000          <1>  mov rsi, %2
   142 00002349 BA01000000          <1>  mov rdx, %3
   143 0000234E 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002356 4883EC08            <1>  sub rsp, 8
   145 0000235A E8(00000000)        <1>  call fwrite
   146 0000235F 4883C408            <1>  add rsp, 8
  1984                                  
  1985                                      mWriteLine turnoDe, 1, 1 ; Guardamos el turno actual
   140 00002363 48BF-               <1>  mov rdi, %1
   140 00002365 [8105000000000000]  <1>
   141 0000236D BE01000000          <1>  mov rsi, %2
   142 00002372 BA01000000          <1>  mov rdx, %3
   143 00002377 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 0000237F 4883EC08            <1>  sub rsp, 8
   145 00002383 E8(00000000)        <1>  call fwrite
   146 00002388 4883C408            <1>  add rsp, 8
  1986                                  
  1987                                      mWriteLine movimientosOfic1, 8, 1
   140 0000238C 48BF-               <1>  mov rdi, %1
   140 0000238E [2008000000000000]  <1>
   141 00002396 BE08000000          <1>  mov rsi, %2
   142 0000239B BA01000000          <1>  mov rdx, %3
   143 000023A0 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000023A8 4883EC08            <1>  sub rsp, 8
   145 000023AC E8(00000000)        <1>  call fwrite
   146 000023B1 4883C408            <1>  add rsp, 8
  1988                                      mWriteLine movimientosOfic2, 8, 1
   140 000023B5 48BF-               <1>  mov rdi, %1
   140 000023B7 [2808000000000000]  <1>
   141 000023BF BE08000000          <1>  mov rsi, %2
   142 000023C4 BA01000000          <1>  mov rdx, %3
   143 000023C9 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000023D1 4883EC08            <1>  sub rsp, 8
   145 000023D5 E8(00000000)        <1>  call fwrite
   146 000023DA 4883C408            <1>  add rsp, 8
  1989                                  
  1990                                      mWriteLine movOfic1Adelante, 8, 1
   140 000023DE 48BF-               <1>  mov rdi, %1
   140 000023E0 [3008000000000000]  <1>
   141 000023E8 BE08000000          <1>  mov rsi, %2
   142 000023ED BA01000000          <1>  mov rdx, %3
   143 000023F2 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000023FA 4883EC08            <1>  sub rsp, 8
   145 000023FE E8(00000000)        <1>  call fwrite
   146 00002403 4883C408            <1>  add rsp, 8
  1991                                      mWriteLine movOfic1Derecha, 8, 1
   140 00002407 48BF-               <1>  mov rdi, %1
   140 00002409 [3808000000000000]  <1>
   141 00002411 BE08000000          <1>  mov rsi, %2
   142 00002416 BA01000000          <1>  mov rdx, %3
   143 0000241B 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002423 4883EC08            <1>  sub rsp, 8
   145 00002427 E8(00000000)        <1>  call fwrite
   146 0000242C 4883C408            <1>  add rsp, 8
  1992                                      mWriteLine movOfic1Izquierda, 8, 1
   140 00002430 48BF-               <1>  mov rdi, %1
   140 00002432 [4008000000000000]  <1>
   141 0000243A BE08000000          <1>  mov rsi, %2
   142 0000243F BA01000000          <1>  mov rdx, %3
   143 00002444 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 0000244C 4883EC08            <1>  sub rsp, 8
   145 00002450 E8(00000000)        <1>  call fwrite
   146 00002455 4883C408            <1>  add rsp, 8
  1993                                      mWriteLine movOfic1Atras, 8, 1
   140 00002459 48BF-               <1>  mov rdi, %1
   140 0000245B [4808000000000000]  <1>
   141 00002463 BE08000000          <1>  mov rsi, %2
   142 00002468 BA01000000          <1>  mov rdx, %3
   143 0000246D 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002475 4883EC08            <1>  sub rsp, 8
   145 00002479 E8(00000000)        <1>  call fwrite
   146 0000247E 4883C408            <1>  add rsp, 8
  1994                                      mWriteLine movOfic1Diagonal, 8, 1
   140 00002482 48BF-               <1>  mov rdi, %1
   140 00002484 [5008000000000000]  <1>
   141 0000248C BE08000000          <1>  mov rsi, %2
   142 00002491 BA01000000          <1>  mov rdx, %3
   143 00002496 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 0000249E 4883EC08            <1>  sub rsp, 8
   145 000024A2 E8(00000000)        <1>  call fwrite
   146 000024A7 4883C408            <1>  add rsp, 8
  1995                                      mWriteLine movOfic1DiagArribaDer, 8, 1
   140 000024AB 48BF-               <1>  mov rdi, %1
   140 000024AD [5808000000000000]  <1>
   141 000024B5 BE08000000          <1>  mov rsi, %2
   142 000024BA BA01000000          <1>  mov rdx, %3
   143 000024BF 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000024C7 4883EC08            <1>  sub rsp, 8
   145 000024CB E8(00000000)        <1>  call fwrite
   146 000024D0 4883C408            <1>  add rsp, 8
  1996                                      mWriteLine movOfic1DiagArribaIzq, 8, 1
   140 000024D4 48BF-               <1>  mov rdi, %1
   140 000024D6 [6008000000000000]  <1>
   141 000024DE BE08000000          <1>  mov rsi, %2
   142 000024E3 BA01000000          <1>  mov rdx, %3
   143 000024E8 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000024F0 4883EC08            <1>  sub rsp, 8
   145 000024F4 E8(00000000)        <1>  call fwrite
   146 000024F9 4883C408            <1>  add rsp, 8
  1997                                      mWriteLine movOfic1DiagAbajoDer, 8, 1
   140 000024FD 48BF-               <1>  mov rdi, %1
   140 000024FF [6808000000000000]  <1>
   141 00002507 BE08000000          <1>  mov rsi, %2
   142 0000250C BA01000000          <1>  mov rdx, %3
   143 00002511 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002519 4883EC08            <1>  sub rsp, 8
   145 0000251D E8(00000000)        <1>  call fwrite
   146 00002522 4883C408            <1>  add rsp, 8
  1998                                      mWriteLine movOfic1DiagAbajoIzq, 8, 1
   140 00002526 48BF-               <1>  mov rdi, %1
   140 00002528 [7008000000000000]  <1>
   141 00002530 BE08000000          <1>  mov rsi, %2
   142 00002535 BA01000000          <1>  mov rdx, %3
   143 0000253A 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002542 4883EC08            <1>  sub rsp, 8
   145 00002546 E8(00000000)        <1>  call fwrite
   146 0000254B 4883C408            <1>  add rsp, 8
  1999                                  
  2000                                      mWriteLine movOfic2Adelante, 8, 1
   140 0000254F 48BF-               <1>  mov rdi, %1
   140 00002551 [7808000000000000]  <1>
   141 00002559 BE08000000          <1>  mov rsi, %2
   142 0000255E BA01000000          <1>  mov rdx, %3
   143 00002563 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 0000256B 4883EC08            <1>  sub rsp, 8
   145 0000256F E8(00000000)        <1>  call fwrite
   146 00002574 4883C408            <1>  add rsp, 8
  2001                                      mWriteLine movOfic2Derecha, 8, 1
   140 00002578 48BF-               <1>  mov rdi, %1
   140 0000257A [8008000000000000]  <1>
   141 00002582 BE08000000          <1>  mov rsi, %2
   142 00002587 BA01000000          <1>  mov rdx, %3
   143 0000258C 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002594 4883EC08            <1>  sub rsp, 8
   145 00002598 E8(00000000)        <1>  call fwrite
   146 0000259D 4883C408            <1>  add rsp, 8
  2002                                      mWriteLine movOfic2Izquierda, 8, 1
   140 000025A1 48BF-               <1>  mov rdi, %1
   140 000025A3 [8808000000000000]  <1>
   141 000025AB BE08000000          <1>  mov rsi, %2
   142 000025B0 BA01000000          <1>  mov rdx, %3
   143 000025B5 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000025BD 4883EC08            <1>  sub rsp, 8
   145 000025C1 E8(00000000)        <1>  call fwrite
   146 000025C6 4883C408            <1>  add rsp, 8
  2003                                      mWriteLine movOfic2Atras, 8, 1
   140 000025CA 48BF-               <1>  mov rdi, %1
   140 000025CC [9008000000000000]  <1>
   141 000025D4 BE08000000          <1>  mov rsi, %2
   142 000025D9 BA01000000          <1>  mov rdx, %3
   143 000025DE 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000025E6 4883EC08            <1>  sub rsp, 8
   145 000025EA E8(00000000)        <1>  call fwrite
   146 000025EF 4883C408            <1>  add rsp, 8
  2004                                      mWriteLine movOfic2Diagonal, 8, 1
   140 000025F3 48BF-               <1>  mov rdi, %1
   140 000025F5 [9808000000000000]  <1>
   141 000025FD BE08000000          <1>  mov rsi, %2
   142 00002602 BA01000000          <1>  mov rdx, %3
   143 00002607 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 0000260F 4883EC08            <1>  sub rsp, 8
   145 00002613 E8(00000000)        <1>  call fwrite
   146 00002618 4883C408            <1>  add rsp, 8
  2005                                      mWriteLine movOfic2DiagArribaDer, 8, 1
   140 0000261C 48BF-               <1>  mov rdi, %1
   140 0000261E [A008000000000000]  <1>
   141 00002626 BE08000000          <1>  mov rsi, %2
   142 0000262B BA01000000          <1>  mov rdx, %3
   143 00002630 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002638 4883EC08            <1>  sub rsp, 8
   145 0000263C E8(00000000)        <1>  call fwrite
   146 00002641 4883C408            <1>  add rsp, 8
  2006                                      mWriteLine movOfic2DiagArribaIzq, 8, 1
   140 00002645 48BF-               <1>  mov rdi, %1
   140 00002647 [A808000000000000]  <1>
   141 0000264F BE08000000          <1>  mov rsi, %2
   142 00002654 BA01000000          <1>  mov rdx, %3
   143 00002659 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002661 4883EC08            <1>  sub rsp, 8
   145 00002665 E8(00000000)        <1>  call fwrite
   146 0000266A 4883C408            <1>  add rsp, 8
  2007                                      mWriteLine movOfic2DiagAbajoDer, 8, 1
   140 0000266E 48BF-               <1>  mov rdi, %1
   140 00002670 [B008000000000000]  <1>
   141 00002678 BE08000000          <1>  mov rsi, %2
   142 0000267D BA01000000          <1>  mov rdx, %3
   143 00002682 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 0000268A 4883EC08            <1>  sub rsp, 8
   145 0000268E E8(00000000)        <1>  call fwrite
   146 00002693 4883C408            <1>  add rsp, 8
  2008                                      mWriteLine movOfic2DiagAbajoIzq, 8, 1
   140 00002697 48BF-               <1>  mov rdi, %1
   140 00002699 [B808000000000000]  <1>
   141 000026A1 BE08000000          <1>  mov rsi, %2
   142 000026A6 BA01000000          <1>  mov rdx, %3
   143 000026AB 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000026B3 4883EC08            <1>  sub rsp, 8
   145 000026B7 E8(00000000)        <1>  call fwrite
   146 000026BC 4883C408            <1>  add rsp, 8
  2009                                  
  2010                                      mWriteLine cantSoldCapturados, 8, 1
   140 000026C0 48BF-               <1>  mov rdi, %1
   140 000026C2 [C008000000000000]  <1>
   141 000026CA BE08000000          <1>  mov rsi, %2
   142 000026CF BA01000000          <1>  mov rdx, %3
   143 000026D4 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000026DC 4883EC08            <1>  sub rsp, 8
   145 000026E0 E8(00000000)        <1>  call fwrite
   146 000026E5 4883C408            <1>  add rsp, 8
  2011                                      mWriteLine cantOficInvalidados, 8, 1
   140 000026E9 48BF-               <1>  mov rdi, %1
   140 000026EB [C808000000000000]  <1>
   141 000026F3 BE08000000          <1>  mov rsi, %2
   142 000026F8 BA01000000          <1>  mov rdx, %3
   143 000026FD 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002705 4883EC08            <1>  sub rsp, 8
   145 00002709 E8(00000000)        <1>  call fwrite
   146 0000270E 4883C408            <1>  add rsp, 8
  2012                                  
  2013                                      mWriteLine casillaOfic1, 8, 1
   140 00002712 48BF-               <1>  mov rdi, %1
   140 00002714 [D008000000000000]  <1>
   141 0000271C BE08000000          <1>  mov rsi, %2
   142 00002721 BA01000000          <1>  mov rdx, %3
   143 00002726 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 0000272E 4883EC08            <1>  sub rsp, 8
   145 00002732 E8(00000000)        <1>  call fwrite
   146 00002737 4883C408            <1>  add rsp, 8
  2014                                      mWriteLine casillaOfic1+8, 8, 1
   140 0000273B 48BF-               <1>  mov rdi, %1
   140 0000273D [D808000000000000]  <1>
   141 00002745 BE08000000          <1>  mov rsi, %2
   142 0000274A BA01000000          <1>  mov rdx, %3
   143 0000274F 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002757 4883EC08            <1>  sub rsp, 8
   145 0000275B E8(00000000)        <1>  call fwrite
   146 00002760 4883C408            <1>  add rsp, 8
  2015                                  
  2016                                      mWriteLine casillaOfic2, 8, 1
   140 00002764 48BF-               <1>  mov rdi, %1
   140 00002766 [E008000000000000]  <1>
   141 0000276E BE08000000          <1>  mov rsi, %2
   142 00002773 BA01000000          <1>  mov rdx, %3
   143 00002778 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002780 4883EC08            <1>  sub rsp, 8
   145 00002784 E8(00000000)        <1>  call fwrite
   146 00002789 4883C408            <1>  add rsp, 8
  2017                                      mWriteLine casillaOfic2+8, 8, 1
   140 0000278D 48BF-               <1>  mov rdi, %1
   140 0000278F [E808000000000000]  <1>
   141 00002797 BE08000000          <1>  mov rsi, %2
   142 0000279C BA01000000          <1>  mov rdx, %3
   143 000027A1 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000027A9 4883EC08            <1>  sub rsp, 8
   145 000027AD E8(00000000)        <1>  call fwrite
   146 000027B2 4883C408            <1>  add rsp, 8
  2018                                  
  2019                                      mWriteLine cantCapturasOfic1, 8, 1
   140 000027B6 48BF-               <1>  mov rdi, %1
   140 000027B8 [F008000000000000]  <1>
   141 000027C0 BE08000000          <1>  mov rsi, %2
   142 000027C5 BA01000000          <1>  mov rdx, %3
   143 000027CA 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000027D2 4883EC08            <1>  sub rsp, 8
   145 000027D6 E8(00000000)        <1>  call fwrite
   146 000027DB 4883C408            <1>  add rsp, 8
  2020                                      mWriteLine cantCapturasOfic2, 8, 1
   140 000027DF 48BF-               <1>  mov rdi, %1
   140 000027E1 [F808000000000000]  <1>
   141 000027E9 BE08000000          <1>  mov rsi, %2
   142 000027EE BA01000000          <1>  mov rdx, %3
   143 000027F3 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000027FB 4883EC08            <1>  sub rsp, 8
   145 000027FF E8(00000000)        <1>  call fwrite
   146 00002804 4883C408            <1>  add rsp, 8
  2021                                  
  2022 00002808 C3                          ret
  2023                                  
  2024                                  ; --------------------------------------------------------------------------------------------
  2025                                  ; RUTINA PARA OBTENER LOS DATOS DE UNA PARTIDA GUARDADA
  2026                                  ; --------------------------------------------------------------------------------------------
  2027                                  
  2028                                  abrirPartidaGuardada:
  2029                                      ; Recreamos el tablero guardado
  2030                                      mReadLine tableroEnJuego, 116, 1
   130 00002809 48BF-               <1>  mov rdi, %1
   130 0000280B [0400000000000000]  <1>
   131 00002813 BE74000000          <1>  mov rsi, %2
   132 00002818 BA01000000          <1>  mov rdx, %3
   133 0000281D 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002825 4883EC08            <1>  sub rsp, 8
   135 00002829 E8(00000000)        <1>  call fread
   136 0000282E 4883C408            <1>  add rsp, 8
  2031                                  
  2032                                      mReadLine yaHabiaGuardado, 1, 1
   130 00002832 48BF-               <1>  mov rdi, %1
   130 00002834 [7F05000000000000]  <1>
   131 0000283C BE01000000          <1>  mov rsi, %2
   132 00002841 BA01000000          <1>  mov rdx, %3
   133 00002846 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 0000284E 4883EC08            <1>  sub rsp, 8
   135 00002852 E8(00000000)        <1>  call fread
   136 00002857 4883C408            <1>  add rsp, 8
  2033                                      mReadLine turnoDe, 1, 1
   130 0000285B 48BF-               <1>  mov rdi, %1
   130 0000285D [8105000000000000]  <1>
   131 00002865 BE01000000          <1>  mov rsi, %2
   132 0000286A BA01000000          <1>  mov rdx, %3
   133 0000286F 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002877 4883EC08            <1>  sub rsp, 8
   135 0000287B E8(00000000)        <1>  call fread
   136 00002880 4883C408            <1>  add rsp, 8
  2034                                  
  2035                                      mReadLine movimientosOfic1, 8, 1
   130 00002884 48BF-               <1>  mov rdi, %1
   130 00002886 [2008000000000000]  <1>
   131 0000288E BE08000000          <1>  mov rsi, %2
   132 00002893 BA01000000          <1>  mov rdx, %3
   133 00002898 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 000028A0 4883EC08            <1>  sub rsp, 8
   135 000028A4 E8(00000000)        <1>  call fread
   136 000028A9 4883C408            <1>  add rsp, 8
  2036                                      mReadLine movimientosOfic2, 8, 1
   130 000028AD 48BF-               <1>  mov rdi, %1
   130 000028AF [2808000000000000]  <1>
   131 000028B7 BE08000000          <1>  mov rsi, %2
   132 000028BC BA01000000          <1>  mov rdx, %3
   133 000028C1 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 000028C9 4883EC08            <1>  sub rsp, 8
   135 000028CD E8(00000000)        <1>  call fread
   136 000028D2 4883C408            <1>  add rsp, 8
  2037                                  
  2038                                      mReadLine movOfic1Adelante, 8, 1
   130 000028D6 48BF-               <1>  mov rdi, %1
   130 000028D8 [3008000000000000]  <1>
   131 000028E0 BE08000000          <1>  mov rsi, %2
   132 000028E5 BA01000000          <1>  mov rdx, %3
   133 000028EA 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 000028F2 4883EC08            <1>  sub rsp, 8
   135 000028F6 E8(00000000)        <1>  call fread
   136 000028FB 4883C408            <1>  add rsp, 8
  2039                                      mReadLine movOfic1Derecha, 8, 1
   130 000028FF 48BF-               <1>  mov rdi, %1
   130 00002901 [3808000000000000]  <1>
   131 00002909 BE08000000          <1>  mov rsi, %2
   132 0000290E BA01000000          <1>  mov rdx, %3
   133 00002913 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 0000291B 4883EC08            <1>  sub rsp, 8
   135 0000291F E8(00000000)        <1>  call fread
   136 00002924 4883C408            <1>  add rsp, 8
  2040                                      mReadLine movOfic1Izquierda, 8, 1
   130 00002928 48BF-               <1>  mov rdi, %1
   130 0000292A [4008000000000000]  <1>
   131 00002932 BE08000000          <1>  mov rsi, %2
   132 00002937 BA01000000          <1>  mov rdx, %3
   133 0000293C 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002944 4883EC08            <1>  sub rsp, 8
   135 00002948 E8(00000000)        <1>  call fread
   136 0000294D 4883C408            <1>  add rsp, 8
  2041                                      mReadLine movOfic1Atras, 8, 1
   130 00002951 48BF-               <1>  mov rdi, %1
   130 00002953 [4808000000000000]  <1>
   131 0000295B BE08000000          <1>  mov rsi, %2
   132 00002960 BA01000000          <1>  mov rdx, %3
   133 00002965 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 0000296D 4883EC08            <1>  sub rsp, 8
   135 00002971 E8(00000000)        <1>  call fread
   136 00002976 4883C408            <1>  add rsp, 8
  2042                                      mReadLine movOfic1Diagonal, 8, 1
   130 0000297A 48BF-               <1>  mov rdi, %1
   130 0000297C [5008000000000000]  <1>
   131 00002984 BE08000000          <1>  mov rsi, %2
   132 00002989 BA01000000          <1>  mov rdx, %3
   133 0000298E 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002996 4883EC08            <1>  sub rsp, 8
   135 0000299A E8(00000000)        <1>  call fread
   136 0000299F 4883C408            <1>  add rsp, 8
  2043                                      mReadLine movOfic1DiagArribaDer, 8, 1
   130 000029A3 48BF-               <1>  mov rdi, %1
   130 000029A5 [5808000000000000]  <1>
   131 000029AD BE08000000          <1>  mov rsi, %2
   132 000029B2 BA01000000          <1>  mov rdx, %3
   133 000029B7 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 000029BF 4883EC08            <1>  sub rsp, 8
   135 000029C3 E8(00000000)        <1>  call fread
   136 000029C8 4883C408            <1>  add rsp, 8
  2044                                      mReadLine movOfic1DiagArribaIzq, 8, 1
   130 000029CC 48BF-               <1>  mov rdi, %1
   130 000029CE [6008000000000000]  <1>
   131 000029D6 BE08000000          <1>  mov rsi, %2
   132 000029DB BA01000000          <1>  mov rdx, %3
   133 000029E0 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 000029E8 4883EC08            <1>  sub rsp, 8
   135 000029EC E8(00000000)        <1>  call fread
   136 000029F1 4883C408            <1>  add rsp, 8
  2045                                      mReadLine movOfic1DiagAbajoDer, 8, 1
   130 000029F5 48BF-               <1>  mov rdi, %1
   130 000029F7 [6808000000000000]  <1>
   131 000029FF BE08000000          <1>  mov rsi, %2
   132 00002A04 BA01000000          <1>  mov rdx, %3
   133 00002A09 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002A11 4883EC08            <1>  sub rsp, 8
   135 00002A15 E8(00000000)        <1>  call fread
   136 00002A1A 4883C408            <1>  add rsp, 8
  2046                                      mReadLine movOfic1DiagAbajoIzq, 8, 1
   130 00002A1E 48BF-               <1>  mov rdi, %1
   130 00002A20 [7008000000000000]  <1>
   131 00002A28 BE08000000          <1>  mov rsi, %2
   132 00002A2D BA01000000          <1>  mov rdx, %3
   133 00002A32 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002A3A 4883EC08            <1>  sub rsp, 8
   135 00002A3E E8(00000000)        <1>  call fread
   136 00002A43 4883C408            <1>  add rsp, 8
  2047                                  
  2048                                      mReadLine movOfic2Adelante, 8, 1
   130 00002A47 48BF-               <1>  mov rdi, %1
   130 00002A49 [7808000000000000]  <1>
   131 00002A51 BE08000000          <1>  mov rsi, %2
   132 00002A56 BA01000000          <1>  mov rdx, %3
   133 00002A5B 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002A63 4883EC08            <1>  sub rsp, 8
   135 00002A67 E8(00000000)        <1>  call fread
   136 00002A6C 4883C408            <1>  add rsp, 8
  2049                                      mReadLine movOfic2Derecha, 8, 1
   130 00002A70 48BF-               <1>  mov rdi, %1
   130 00002A72 [8008000000000000]  <1>
   131 00002A7A BE08000000          <1>  mov rsi, %2
   132 00002A7F BA01000000          <1>  mov rdx, %3
   133 00002A84 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002A8C 4883EC08            <1>  sub rsp, 8
   135 00002A90 E8(00000000)        <1>  call fread
   136 00002A95 4883C408            <1>  add rsp, 8
  2050                                      mReadLine movOfic2Izquierda, 8, 1
   130 00002A99 48BF-               <1>  mov rdi, %1
   130 00002A9B [8808000000000000]  <1>
   131 00002AA3 BE08000000          <1>  mov rsi, %2
   132 00002AA8 BA01000000          <1>  mov rdx, %3
   133 00002AAD 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002AB5 4883EC08            <1>  sub rsp, 8
   135 00002AB9 E8(00000000)        <1>  call fread
   136 00002ABE 4883C408            <1>  add rsp, 8
  2051                                      mReadLine movOfic2Atras, 8, 1
   130 00002AC2 48BF-               <1>  mov rdi, %1
   130 00002AC4 [9008000000000000]  <1>
   131 00002ACC BE08000000          <1>  mov rsi, %2
   132 00002AD1 BA01000000          <1>  mov rdx, %3
   133 00002AD6 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002ADE 4883EC08            <1>  sub rsp, 8
   135 00002AE2 E8(00000000)        <1>  call fread
   136 00002AE7 4883C408            <1>  add rsp, 8
  2052                                      mReadLine movOfic2Diagonal, 8, 1
   130 00002AEB 48BF-               <1>  mov rdi, %1
   130 00002AED [9808000000000000]  <1>
   131 00002AF5 BE08000000          <1>  mov rsi, %2
   132 00002AFA BA01000000          <1>  mov rdx, %3
   133 00002AFF 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002B07 4883EC08            <1>  sub rsp, 8
   135 00002B0B E8(00000000)        <1>  call fread
   136 00002B10 4883C408            <1>  add rsp, 8
  2053                                      mReadLine movOfic2DiagArribaDer, 8, 1
   130 00002B14 48BF-               <1>  mov rdi, %1
   130 00002B16 [A008000000000000]  <1>
   131 00002B1E BE08000000          <1>  mov rsi, %2
   132 00002B23 BA01000000          <1>  mov rdx, %3
   133 00002B28 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002B30 4883EC08            <1>  sub rsp, 8
   135 00002B34 E8(00000000)        <1>  call fread
   136 00002B39 4883C408            <1>  add rsp, 8
  2054                                      mReadLine movOfic2DiagArribaIzq, 8, 1
   130 00002B3D 48BF-               <1>  mov rdi, %1
   130 00002B3F [A808000000000000]  <1>
   131 00002B47 BE08000000          <1>  mov rsi, %2
   132 00002B4C BA01000000          <1>  mov rdx, %3
   133 00002B51 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002B59 4883EC08            <1>  sub rsp, 8
   135 00002B5D E8(00000000)        <1>  call fread
   136 00002B62 4883C408            <1>  add rsp, 8
  2055                                      mReadLine movOfic2DiagAbajoDer, 8, 1
   130 00002B66 48BF-               <1>  mov rdi, %1
   130 00002B68 [B008000000000000]  <1>
   131 00002B70 BE08000000          <1>  mov rsi, %2
   132 00002B75 BA01000000          <1>  mov rdx, %3
   133 00002B7A 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002B82 4883EC08            <1>  sub rsp, 8
   135 00002B86 E8(00000000)        <1>  call fread
   136 00002B8B 4883C408            <1>  add rsp, 8
  2056                                      mReadLine movOfic2DiagAbajoIzq, 8, 1
   130 00002B8F 48BF-               <1>  mov rdi, %1
   130 00002B91 [B808000000000000]  <1>
   131 00002B99 BE08000000          <1>  mov rsi, %2
   132 00002B9E BA01000000          <1>  mov rdx, %3
   133 00002BA3 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002BAB 4883EC08            <1>  sub rsp, 8
   135 00002BAF E8(00000000)        <1>  call fread
   136 00002BB4 4883C408            <1>  add rsp, 8
  2057                                  
  2058                                      mReadLine cantSoldCapturados, 8, 1
   130 00002BB8 48BF-               <1>  mov rdi, %1
   130 00002BBA [C008000000000000]  <1>
   131 00002BC2 BE08000000          <1>  mov rsi, %2
   132 00002BC7 BA01000000          <1>  mov rdx, %3
   133 00002BCC 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002BD4 4883EC08            <1>  sub rsp, 8
   135 00002BD8 E8(00000000)        <1>  call fread
   136 00002BDD 4883C408            <1>  add rsp, 8
  2059                                      mReadLine cantOficInvalidados, 8, 1
   130 00002BE1 48BF-               <1>  mov rdi, %1
   130 00002BE3 [C808000000000000]  <1>
   131 00002BEB BE08000000          <1>  mov rsi, %2
   132 00002BF0 BA01000000          <1>  mov rdx, %3
   133 00002BF5 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002BFD 4883EC08            <1>  sub rsp, 8
   135 00002C01 E8(00000000)        <1>  call fread
   136 00002C06 4883C408            <1>  add rsp, 8
  2060                                  
  2061                                      mReadLine casillaOfic1, 8, 1
   130 00002C0A 48BF-               <1>  mov rdi, %1
   130 00002C0C [D008000000000000]  <1>
   131 00002C14 BE08000000          <1>  mov rsi, %2
   132 00002C19 BA01000000          <1>  mov rdx, %3
   133 00002C1E 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002C26 4883EC08            <1>  sub rsp, 8
   135 00002C2A E8(00000000)        <1>  call fread
   136 00002C2F 4883C408            <1>  add rsp, 8
  2062                                      mReadLine casillaOfic1+8, 8, 1
   130 00002C33 48BF-               <1>  mov rdi, %1
   130 00002C35 [D808000000000000]  <1>
   131 00002C3D BE08000000          <1>  mov rsi, %2
   132 00002C42 BA01000000          <1>  mov rdx, %3
   133 00002C47 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002C4F 4883EC08            <1>  sub rsp, 8
   135 00002C53 E8(00000000)        <1>  call fread
   136 00002C58 4883C408            <1>  add rsp, 8
  2063                                  
  2064                                      mReadLine casillaOfic2, 8, 1
   130 00002C5C 48BF-               <1>  mov rdi, %1
   130 00002C5E [E008000000000000]  <1>
   131 00002C66 BE08000000          <1>  mov rsi, %2
   132 00002C6B BA01000000          <1>  mov rdx, %3
   133 00002C70 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002C78 4883EC08            <1>  sub rsp, 8
   135 00002C7C E8(00000000)        <1>  call fread
   136 00002C81 4883C408            <1>  add rsp, 8
  2065                                      mReadLine casillaOfic2+8, 8, 1
   130 00002C85 48BF-               <1>  mov rdi, %1
   130 00002C87 [E808000000000000]  <1>
   131 00002C8F BE08000000          <1>  mov rsi, %2
   132 00002C94 BA01000000          <1>  mov rdx, %3
   133 00002C99 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002CA1 4883EC08            <1>  sub rsp, 8
   135 00002CA5 E8(00000000)        <1>  call fread
   136 00002CAA 4883C408            <1>  add rsp, 8
  2066                                  
  2067                                      mReadLine cantCapturasOfic1, 8, 1
   130 00002CAE 48BF-               <1>  mov rdi, %1
   130 00002CB0 [F008000000000000]  <1>
   131 00002CB8 BE08000000          <1>  mov rsi, %2
   132 00002CBD BA01000000          <1>  mov rdx, %3
   133 00002CC2 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002CCA 4883EC08            <1>  sub rsp, 8
   135 00002CCE E8(00000000)        <1>  call fread
   136 00002CD3 4883C408            <1>  add rsp, 8
  2068                                      mReadLine cantCapturasOfic2, 8, 1
   130 00002CD7 48BF-               <1>  mov rdi, %1
   130 00002CD9 [F808000000000000]  <1>
   131 00002CE1 BE08000000          <1>  mov rsi, %2
   132 00002CE6 BA01000000          <1>  mov rdx, %3
   133 00002CEB 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002CF3 4883EC08            <1>  sub rsp, 8
   135 00002CF7 E8(00000000)        <1>  call fread
   136 00002CFC 4883C408            <1>  add rsp, 8
  2069                                  
  2070 00002D00 C3                          ret
