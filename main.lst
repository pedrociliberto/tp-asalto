     1                                  %macro mPuts 1 ; Imprime el string %1, hasta encontrar un 0
     2                                      mov rdi, %1
     3                                      sub rsp, 8
     4                                      call puts
     5                                      add rsp, 8
     6                                  %endmacro
     7                                  
     8                                  %macro mPrint 2 ; Imprime el string %2 con formato %1
     9                                      mov rdi, %1
    10                                      mov rsi, %2
    11                                      sub rsp, 8
    12                                      call printf
    13                                      add rsp, 8
    14                                  %endmacro
    15                                  
    16                                  %macro mGets 1 ; Obtiene un string por teclado, guard√°ndolo en %1
    17                                      mov rdi, %1
    18                                      sub rsp, 8
    19                                      call gets
    20                                      add rsp, 8
    21                                  %endmacro
    22                                  
    23                                  %macro mCommand 1 ; Ejecuta el comando %1 de la terminal
    24                                      mov rdi, %1
    25                                      sub rsp, 8
    26                                      call system
    27                                      add rsp, 8
    28                                  %endmacro
    29                                  
    30                                  %macro mMov 3 ; Copia %3 bytes del campo de memoria %2 al campo de memoria %1
    31                                      mov rcx, %3
    32                                      lea rsi, [%2]
    33                                      lea rdi, [%1]
    34                                      rep movsb
    35                                  %endmacro
    36                                  
    37                                  %macro mCmp 3 ; Compara %3 bytes del campo %1 con %2
    38                                      mov rcx, %3
    39                                      lea rsi, %1
    40                                      lea rdi, %2
    41                                      repe cmpsb
    42                                  %endmacro 
    43                                  
    44                                  %macro mErrorJump 2 ; Imprime el mensaje de error %1 y salta a la etiqueta %2
    45                                      mPuts %1
    46                                      jmp %2
    47                                  %endmacro
    48                                  
    49                                  %macro mfGets 2
    50                                      mov rdi, %1
    51                                      mov rsi, %2
    52                                      mov rdx, [stdin]
    53                                      sub rsp, 8
    54                                      call fgets
    55                                      add rsp, 8
    56                                  %endmacro
    57                                  
    58                                  %macro mLeerEntradaEstandar 2
    59                                      mov rax, 0      ; syscall: read
    60                                      mov rdi, 0      ; 0: stdin
    61                                      mov rsi, %1   ; buffer (direccion de guardado de lo leido)
    62                                      mov rdx, %2     ; Cuantos bytes queremos leer
    63                                      syscall
    64                                  
    65                                      mov byte[rsi+rax], 0
    66                                  %endmacro
    67                                  
    68                                  %macro mSscanf 3
    69                                      lea rdi, %1     ; Variable Original string
    70                                      mov rsi, %2     ; Formato
    71                                      mov rdx, %3     ; Variable a guardar el int
    72                                      sub rsp, 8
    73                                      call sscanf
    74                                      add rsp, 8
    75                                  %endmacro
    76                                  
    77                                  %macro mAtoi 2
    78                                      lea rdi, %1
    79                                      sub rsp, 8
    80                                      call atoi
    81                                      add rsp, 8
    82                                      mov [%2], eax
    83                                  %endmacro
    84                                  
    85                                  %macro mCalcDesplaz 3
    86                                      mov rdi, %1
    87                                      mov rsi, %2
    88                                      call calcularDesplazamiento
    89                                      mov %3, rax
    90                                  %endmacro
    91                                  
    92                                  %macro mEstaVacia 1 
    93                                      mov rax, 0
    94                                      mov rdi, %1 ; recibe el desplazamiento
    95                                      call estaVacia
    96                                  %endmacro
    97                                  
    98                                  %macro mHaySoldado 1
    99                                      mov rax, 0
   100                                      mov rdi, %1 ; recibe el desplazamiento
   101                                      call haySoldado
   102                                  %endmacro
   103                                  
   104                                  %macro mPuedeCapturar 2
   105                                      mov rdi, %1 ; diferencia de desplazamiento
   106                                      mov rsi, %2 ; 0 para sumar [rdi] al desplazamiento, 1 para restar
   107                                      call podiaComerPieza
   108                                  %endmacro
   109                                  
   110                                  extern puts, printf
   111                                  extern gets
   112                                  extern system, stdin
   113                                  extern fgets
   114                                  extern atoi
   115                                  extern sscanf
   116                                  
   117                                  section .data
   118                                  
   119                                      ; Tableros y sus posibles estados
   120                                  
   121 00000000 202031323334353637-         tableroOrig         db " "," ","1","2","3","4","5","6","7"," ",10
   121 00000009 200A               
   122 0000000B 2020202D5F5F5F2D20-                             db " "," "," ","-","_","_","_","-"," "," ",10 
   122 00000014 200A               
   123 00000016 3120207C5858587C20-                             db "1"," "," ","|","X","X","X","|"," "," ",10
   123 0000001F 200A               
   124 00000021 322D5F7C5858587C5F-                             db "2","-","_","|","X","X","X","|","_","-",10
   124 0000002A 2D0A               
   125 0000002C 337C58585858585858-                             db "3","|","X","X","X","X","X","X","X","|",10 
   125 00000035 7C0A               
   126 00000037 347C58585858585858-                             db "4","|","X","X","X","X","X","X","X","|",10 
   126 00000040 7C0A               
   127 00000042 357C58582020205858-                             db "5","|","X","X"," "," "," ","X","X","|",10 
   127 0000004B 7C0A               
   128 0000004D 362D2D7C20204F7C2D-                             db "6","-","-","|"," "," ","O","|","-","-",10 
   128 00000056 2D0A               
   129 00000058 3720207C4F20207C20-                             db "7"," "," ","|","O"," "," ","|"," "," ",10 
   129 00000061 200A               
   130 00000063 2020202D2D2D2D2D20-                             db " "," "," ","-","-","-","-","-"," "," ",10,0
   130 0000006C 200A00             
   131                                  
   132 0000006F 202031323334353637-         tableroInv          db " "," ","1","2","3","4","5","6","7"," ",10
   132 00000078 200A               
   133 0000007A 202020205F5F5F2020-                             db " "," "," "," ","_","_","_"," "," "," ",10 
   133 00000083 200A               
   134 00000085 3120207C4F20207C20-                             db "1"," "," ","|","O"," "," ","|"," "," ",10
   134 0000008E 200A               
   135 00000090 32205F7C20204F7C5F-                             db "2"," ","_","|"," "," ","O","|","_"," ",10
   135 00000099 200A               
   136 0000009B 337C58582020205858-                             db "3","|","X","X"," "," "," ","X","X","|",10 
   136 000000A4 7C0A               
   137 000000A6 347C58585858585858-                             db "4","|","X","X","X","X","X","X","X","|",10 
   137 000000AF 7C0A               
   138 000000B1 357C58585858585858-                             db "5","|","X","X","X","X","X","X","X","|",10 
   138 000000BA 7C0A               
   139 000000BC 36202D7C5858587C2D-                             db "6"," ","-","|","X","X","X","|","-"," ",10 
   139 000000C5 200A               
   140 000000C7 3720207C5858587C20-                             db "7"," "," ","|","X","X","X","|"," "," ",10 
   140 000000D0 200A               
   141 000000D2 202020202D2D2D2020-                             db " "," "," "," ","-","-","-"," "," "," ",10,0
   141 000000DB 200A00             
   142                                  
   143 000000DE 202031323334353637-         tableroDer          db " "," ","1","2","3","4","5","6","7"," ",10
   143 000000E7 200A               
   144 000000E9 202020205F5F5F2020-                             db " "," "," "," ","_","_","_"," "," "," ",10 
   144 000000F2 200A               
   145 000000F4 3120207C5858587C20-                             db "1"," "," ","|","X","X","X","|"," "," ",10
   145 000000FD 200A               
   146 000000FF 32205F7C5858587C5F-                             db "2"," ","_","|","X","X","X","|","_"," ",10
   146 00000108 200A               
   147 0000010A 337C5858585820204F-                             db "3","|","X","X","X","X"," "," ","O","|",10 
   147 00000113 7C0A               
   148 00000115 347C58585858202020-                             db "4","|","X","X","X","X"," "," "," ","|",10 
   148 0000011E 7C0A               
   149 00000120 357C58585858204F20-                             db "5","|","X","X","X","X"," ","O"," ","|",10 
   149 00000129 7C0A               
   150 0000012B 36202D7C5858587C2D-                             db "6"," ","-","|","X","X","X","|","-"," ",10 
   150 00000134 200A               
   151 00000136 3720207C5858587C20-                             db "7"," "," ","|","X","X","X","|"," "," ",10 
   151 0000013F 200A               
   152 00000141 202020202D2D2D2020-                             db " "," "," "," ","-","-","-"," "," "," ",10,0
   152 0000014A 200A00             
   153                                  
   154 0000014D 202031323334353637-         tableroIzq          db " "," ","1","2","3","4","5","6","7"," ",10
   154 00000156 200A               
   155 00000158 202020205F5F5F2020-                             db " "," "," "," ","_","_","_"," "," "," ",10 
   155 00000161 200A               
   156 00000163 3120207C5858587C20-                             db "1"," "," ","|","X","X","X","|"," "," ",10
   156 0000016C 200A               
   157 0000016E 32205F7C5858587C5F-                             db "2"," ","_","|","X","X","X","|","_"," ",10
   157 00000177 200A               
   158 00000179 337C4F202058585858-                             db "3","|","O"," "," ","X","X","X","X","|",10 
   158 00000182 7C0A               
   159 00000184 347C20202058585858-                             db "4","|"," "," "," ","X","X","X","X","|",10 
   159 0000018D 7C0A               
   160 0000018F 357C204F2058585858-                             db "5","|"," ","O"," ","X","X","X","X","|",10 
   160 00000198 7C0A               
   161 0000019A 36202D7C5858587C2D-                             db "6"," ","-","|","X","X","X","|","-"," ",10 
   161 000001A3 200A               
   162 000001A5 3720207C5858587C20-                             db "7"," "," ","|","X","X","X","|"," "," ",10 
   162 000001AE 200A               
   163 000001B0 202020202D2D2D2020-                             db " "," "," "," ","-","-","-"," "," "," ",10,0
   163 000001B9 200A00             
   164                                  
   165                                      ; Mensajes
   166                                  
   167 000001BC C2A14269656E76656E-         msgBienvenida           db "¬°Bienvenido al juego El Asalto!", 0
   167 000001C5 69646F20616C206A75-
   167 000001CE 65676F20456C204173-
   167 000001D7 616C746F2100       
   168                                  
   169 000001DD C2BF44657365612070-         msgPersonalizarTablero  db "¬øDesea personalizar el tablero? (s/n): ", 0 
   169 000001E6 6572736F6E616C697A-
   169 000001EF 617220656C20746162-
   169 000001F8 6C65726F3F2028732F-
   169 00000201 6E293A2000         
   170                                  
   171 00000206 4F706369C3B36E2069-         msgOpcionInvalida       db "Opci√≥n inv√°lida. Intente de nuevo.", 0
   171 0000020F 6E76C3A16C6964612E-
   171 00000218 20496E74656E746520-
   171 00000221 6465206E7565766F2E-
   171 0000022A 00                 
   172                                      
   173 0000022B 436173696C6C612069-         msgCasillaInvalidaSold  db "Casilla inv√°lida: no hay un soldado en esa casilla. Intente de nuevo.", 0
   173 00000234 6E76C3A16C6964613A-
   173 0000023D 206E6F206861792075-
   173 00000246 6E20736F6C6461646F-
   173 0000024F 20656E206573612063-
   173 00000258 6173696C6C612E2049-
   173 00000261 6E74656E7465206465-
   173 0000026A 206E7565766F2E00   
   174 00000272 4572726F7220656E20-         msgErrorInputSold       db "Error en el formato de entrada del soldado. Intente de nuevo.", 0
   174 0000027B 656C20666F726D6174-
   174 00000284 6F20646520656E7472-
   174 0000028D 6164612064656C2073-
   174 00000296 6F6C6461646F2E2049-
   174 0000029F 6E74656E7465206465-
   174 000002A8 206E7565766F2E00   
   175 000002B0 4E6F20736520707565-         msgCasillaInvMovSold    db "No se puede mover el soldado a esa casilla. Intente de nuevo.", 0
   175 000002B9 6465206D6F76657220-
   175 000002C2 656C20736F6C646164-
   175 000002CB 6F2061206573612063-
   175 000002D4 6173696C6C612E2049-
   175 000002DD 6E74656E7465206465-
   175 000002E6 206E7565766F2E00   
   176                                  
   177 000002EE 436173696C6C612069-         msgCasillaInvalidaOfic  db "Casilla inv√°lida: no hay un oficial en esa casilla. Intente de nuevo.", 0
   177 000002F7 6E76C3A16C6964613A-
   177 00000300 206E6F206861792075-
   177 00000309 6E206F66696369616C-
   177 00000312 20656E206573612063-
   177 0000031B 6173696C6C612E2049-
   177 00000324 6E74656E7465206465-
   177 0000032D 206E7565766F2E00   
   178 00000335 4572726F7220656E20-         msgErrorInputOfic       db "Error en el formato de entrada del oficial. Intente de nuevo.", 0
   178 0000033E 656C20666F726D6174-
   178 00000347 6F20646520656E7472-
   178 00000350 6164612064656C206F-
   178 00000359 66696369616C2E2049-
   178 00000362 6E74656E7465206465-
   178 0000036B 206E7565766F2E00   
   179 00000373 4E6F20736520707565-         msgCasillaInvMovOfic    db "No se puede mover el oficial a esa casilla. Intente de nuevo.", 0
   179 0000037C 6465206D6F76657220-
   179 00000385 656C206F6669636961-
   179 0000038E 6C2061206573612063-
   179 00000397 6173696C6C612E2049-
   179 000003A0 6E74656E7465206465-
   179 000003A9 206E7565766F2E00   
   180                                  
   181 000003B1 C2A153652070756564-         msgPregRotacion         db "¬°Se puede rotar el tablero! Elija una de las opciones (1-4):", 0
   181 000003BA 6520726F7461722065-
   181 000003C3 6C207461626C65726F-
   181 000003CC 2120456C696A612075-
   181 000003D5 6E61206465206C6173-
   181 000003DE 206F7063696F6E6573-
   181 000003E7 2028312D34293A00   
   182 000003EF 312E20526F74617220-         msgRotacionesPosibles   db "1. Rotar a la izquierda", 10
   182 000003F8 61206C6120697A7175-
   182 00000401 69657264610A       
   183 00000407 322E20526F74617220-                                 db "2. Rotar a la derecha", 10
   183 00000410 61206C612064657265-
   183 00000419 6368610A           
   184 0000041D 332E20496E76657274-                                 db "3. Invertir el tablero", 10
   184 00000426 697220656C20746162-
   184 0000042F 6C65726F0A         
   185 00000434 342E204E6F20726F74-                                 db "4. No rotar", 0
   185 0000043D 617200             
   186                                      
   187 00000440 C2A1456C696A616D6F-         msgPersonalizarSimb     db "¬°Elijamos los s√≠mbolos para cada personaje! Escriba UN (1) solo caracter para cada uno.", 0
   187 00000449 73206C6F732073C3AD-
   187 00000452 6D626F6C6F73207061-
   187 0000045B 726120636164612070-
   187 00000464 6572736F6E616A6521-
   187 0000046D 204573637269626120-
   187 00000476 554E2028312920736F-
   187 0000047F 6C6F20636172616374-
   187 00000488 657220706172612063-
   187 00000491 61646120756E6F2E00 
   188 0000049A 53C3AD6D626F6C6F20-         msgSimboloOficiales     db "S√≠mbolo para los oficiales:", 0
   188 000004A3 70617261206C6F7320-
   188 000004AC 6F66696369616C6573-
   188 000004B5 3A00               
   189 000004B7 53C3AD6D626F6C6F20-         msgSimboloSoldados      db "S√≠mbolo para los soldados:", 0
   189 000004C0 70617261206C6F7320-
   189 000004C9 736F6C6461646F733A-
   189 000004D2 00                 
   190                                  
   191 000004D3 C2BF517569C3A96E20-         msgQuienInicia          db "¬øQui√©n inicia el juego: oficiales o soldados? (o/s): ", 0
   191 000004DC 696E6963696120656C-
   191 000004E5 206A7565676F3A206F-
   191 000004EE 66696369616C657320-
   191 000004F7 6F20736F6C6461646F-
   191 00000500 733F20286F2F73293A-
   191 00000509 2000               
   192                                  
   193 0000050B C2A1556E206F666963-         msgOficialRetirado      db "¬°Un oficial ha sido retirado del juego! Se ha olvidado de atrapar a un soldado.", 0
   193 00000514 69616C206861207369-
   193 0000051D 646F20726574697261-
   193 00000526 646F2064656C206A75-
   193 0000052F 65676F212053652068-
   193 00000538 61206F6C7669646164-
   193 00000541 6F2064652061747261-
   193 0000054A 706172206120756E20-
   193 00000553 736F6C6461646F2E00 
   194                                  
   195 0000055C 4573746164C3AD7374-         msgEstadisticas         db "Estad√≠sticas de los oficiales:", 10, 0
   195 00000565 69636173206465206C-
   195 0000056E 6F73206F6669636961-
   195 00000577 6C65733A0A00       
   196                                  
   197 0000057D 43616E746964616420-         msgCantTotalCapturas    db "Cantidad total de capturas: %d", 10, 10, 0
   197 00000586 746F74616C20646520-
   197 0000058F 63617074757261733A-
   197 00000598 2025640A0A00       
   198                                  
   199 0000059E 4F66696369616C2031-         msgOficial1             db "Oficial 1:", 10, 0
   199 000005A7 3A0A00             
   200 000005AA 4F66696369616C2032-         msgOficial2             db "Oficial 2:", 10, 0
   200 000005B3 3A0A00             
   201                                  
   202 000005B6 4D6F76696D69656E74-         msgCantMovimientos      db "Movimientos totales: %d", 10, 0
   202 000005BF 6F7320746F74616C65-
   202 000005C8 733A2025640A00     
   203 000005CF 2D2048616369612061-         msgCantAdelante         db "- Hacia adelante: %d", 10, 0
   203 000005D8 64656C616E74653A20-
   203 000005E1 25640A00           
   204 000005E5 2D204861636961206C-         msgCantDerecha          db "- Hacia la derecha: %d", 10, 0
   204 000005EE 612064657265636861-
   204 000005F7 3A2025640A00       
   205 000005FD 2D204861636961206C-         msgCantIzquierda        db "- Hacia la izquierda: %d", 10, 0
   205 00000606 6120697A7175696572-
   205 0000060F 64613A2025640A00   
   206 00000617 2D2048616369612061-         msgCantAtras            db "- Hacia atr√°s: %d", 10, 0
   206 00000620 7472C3A1733A202564-
   206 00000629 0A00               
   207 0000062B 2D20456E2064696167-         msgCantDiagonal         db "- En diagonal: %d", 10, 0
   207 00000634 6F6E616C3A2025640A-
   207 0000063D 00                 
   208 0000063E 2D2D2D204164656C61-         msgCantDiagArribaDer    db "--- Adelante-derecha: %d", 10, 0
   208 00000647 6E74652D6465726563-
   208 00000650 68613A2025640A00   
   209 00000658 2D2D2D204164656C61-         msgCantDiagArribaIzq    db "--- Adelante-izquierda: %d", 10, 0
   209 00000661 6E74652D697A717569-
   209 0000066A 657264613A2025640A-
   209 00000673 00                 
   210 00000674 2D2D2D20417472C3A1-         msgCantDiagAbajoDer     db "--- Atr√°s-derecha: %d", 10, 0
   210 0000067D 732D64657265636861-
   210 00000686 3A2025640A00       
   211 0000068C 2D2D2D20417472C3A1-         msgCantDiagAbajoIzq     db "--- Atr√°s-izquierda: %d", 10, 0
   211 00000695 732D697A7175696572-
   211 0000069E 64613A2025640A00   
   212                                  
   213 000006A6 43616E746964616420-         msgCantSoldadosCapt     db "Cantidad de soldados capturados: %d", 10, 10, 0
   213 000006AF 646520736F6C646164-
   213 000006B8 6F7320636170747572-
   213 000006C1 61646F733A2025640A-
   213 000006CA 0A00               
   214                                  
   215 000006CC C2A1456C206A756567-         msgJuegoTerminado       db "¬°El juego ha terminado!", 10, 0
   215 000006D5 6F206861207465726D-
   215 000006DE 696E61646F210A00   
   216 000006E6 C2A1456C2067616E61-         msgGanador              db "¬°El ganador es el equipo de los %s!", 10, 0
   216 000006EF 646F7220657320656C-
   216 000006F8 2065717569706F2064-
   216 00000701 65206C6F7320257321-
   216 0000070A 0A00               
   217 0000070C 736F6C6461646F7300          stringSoldados          db "soldados", 0
   218 00000715 6F66696369616C6573-         stringOficiales         db "oficiales", 0
   218 0000071E 00                 
   219                                  
   220 0000071F 52617AC3B36E3A2025-         msgRazonGanador         db "Raz√≥n: %s", 10, 0
   220 00000728 730A00             
   221                                  
   222 0000072B 2D2D2D2D00                  varRazonFin             db '----', 0 ; Raz√≥n de fin de juego (a llenar)          
   223                                  
   224                                      ; Se ha decidido salir de la partida
   225 00000730 536520686120646563-         msgSalidaPartida        db "Se ha decidido salir de la partida. ¬øDesea guardarla? (y/n)", 0
   225 00000739 696469646F2073616C-
   225 00000742 6972206465206C6120-
   225 0000074B 706172746964612E20-
   225 00000754 C2BF44657365612067-
   225 0000075D 7561726461726C613F-
   225 00000766 2028792F6E2900     
   226 0000076D 6E                          guardadoPartida         db 'n' ; guardar (y), no guardar (n)
   227                                  
   228                                      ; Razones de victoria de soldados
   229 0000076E 6C6F7320736F6C6461-         msgSoldadosFortaleza    db "los soldados han ocupado todos los puntos de la fortaleza.", 0
   229 00000777 646F732068616E206F-
   229 00000780 63757061646F20746F-
   229 00000789 646F73206C6F732070-
   229 00000792 756E746F7320646520-
   229 0000079B 6C6120666F7274616C-
   229 000007A4 657A612E00         
   230 000007A9 6C6F7320736F6C6461-         msgSoldadosRodean       db "los soldados han rodeado a los oficiales.", 0
   230 000007B2 646F732068616E2072-
   230 000007BB 6F646561646F206120-
   230 000007C4 6C6F73206F66696369-
   230 000007CD 616C65732E00       
   231 000007D3 616D626F73206F6669-         msgSoldadosInvalidar    db "ambos oficiales han sido invalidados.", 0
   231 000007DC 6369616C6573206861-
   231 000007E5 6E207369646F20696E-
   231 000007EE 76616C696461646F73-
   231 000007F7 2E00               
   232                                  
   233                                      ; Razones de victoria de oficiales
   234 000007F9 6E6F2071756564616E-         msgOficialesGanan       db "no quedan suficientes soldados para ocupar la fortaleza.", 0
   234 00000802 20737566696369656E-
   234 0000080B 74657320736F6C6461-
   234 00000814 646F73207061726120-
   234 0000081D 6F6375706172206C61-
   234 00000826 20666F7274616C657A-
   234 0000082F 612E00             
   235                                  
   236                                      ; Turnos
   237 00000832 4573207475726E6F20-         msgTurnoSoldados        db "Es turno de los soldados. Decida a qu√© soldado desea mover: (<numFila>-<numColumna>)", 0
   237 0000083B 6465206C6F7320736F-
   237 00000844 6C6461646F732E2044-
   237 0000084D 656369646120612071-
   237 00000856 75C3A920736F6C6461-
   237 0000085F 646F20646573656120-
   237 00000868 6D6F7665723A20283C-
   237 00000871 6E756D46696C613E2D-
   237 0000087A 3C6E756D436F6C756D-
   237 00000883 6E613E2900         
   238 00000888 4573207475726E6F20-         msgTurnoOficiales       db "Es turno de los oficiales. Decida a qu√© oficial desea mover: (<numFila>-<numColumna>)", 0
   238 00000891 6465206C6F73206F66-
   238 0000089A 696369616C65732E20-
   238 000008A3 446563696461206120-
   238 000008AC 7175C3A9206F666963-
   238 000008B5 69616C206465736561-
   238 000008BE 206D6F7665723A2028-
   238 000008C7 3C6E756D46696C613E-
   238 000008D0 2D3C6E756D436F6C75-
   238 000008D9 6D6E613E2900       
   239 000008DF C2BF41207175C3A920-         msgTurnoMovSold         db "¬øA qu√© casilla desea mover el soldado? (<numFila>-<numColumna>)", 0
   239 000008E8 636173696C6C612064-
   239 000008F1 65736561206D6F7665-
   239 000008FA 7220656C20736F6C64-
   239 00000903 61646F3F20283C6E75-
   239 0000090C 6D46696C613E2D3C6E-
   239 00000915 756D436F6C756D6E61-
   239 0000091E 3E2900             
   240 00000921 C2BF41207175C3A920-         msgTurnoMovOfic         db "¬øA qu√© casilla desea mover el oficial? (<numFila>-<numColumna>)", 0
   240 0000092A 636173696C6C612064-
   240 00000933 65736561206D6F7665-
   240 0000093C 7220656C206F666963-
   240 00000945 69616C3F20283C6E75-
   240 0000094E 6D46696C613E2D3C6E-
   240 00000957 756D436F6C756D6E61-
   240 00000960 3E2900             
   241                                  
   242 00000963 556E206F6669636961-         msgCapturaSold          db "Un oficial ha capturado a un soldado.", 0
   242 0000096C 6C2068612063617074-
   242 00000975 757261646F20612075-
   242 0000097E 6E20736F6C6461646F-
   242 00000987 2E00               
   243 00000989 C2A1556E206F666963-         msgInvalidOfic          db "¬°Un oficial ha sido invalidado! No ha capturado a un soldado regalado.", 0
   243 00000992 69616C206861207369-
   243 0000099B 646F20696E76616C69-
   243 000009A4 6461646F21204E6F20-
   243 000009AD 686120636170747572-
   243 000009B6 61646F206120756E20-
   243 000009BF 736F6C6461646F2072-
   243 000009C8 6567616C61646F2E00 
   244                                      
   245                                      ; Contadores
   246                                  
   247 000009D1 0000000000000000            movimientosOfic1        dq 0
   248 000009D9 0000000000000000            movimientosOfic2        dq 0
   249                                      
   250 000009E1 0000000000000000            movOfic1Adelante        dq 0
   251 000009E9 0000000000000000            movOfic1Derecha         dq 0
   252 000009F1 0000000000000000            movOfic1Izquierda       dq 0
   253 000009F9 0000000000000000            movOfic1Atras           dq 0
   254 00000A01 0000000000000000            movOfic1Diagonal        dq 0
   255 00000A09 0000000000000000            movOfic1DiagArribaDer   dq 0
   256 00000A11 0000000000000000            movOfic1DiagArribaIzq   dq 0
   257 00000A19 0000000000000000            movOfic1DiagAbajoDer    dq 0
   258 00000A21 0000000000000000            movOfic1DiagAbajoIzq    dq 0
   259                                  
   260 00000A29 0000000000000000            movOfic2Adelante        dq 0
   261 00000A31 0000000000000000            movOfic2Derecha         dq 0
   262 00000A39 0000000000000000            movOfic2Izquierda       dq 0
   263 00000A41 0000000000000000            movOfic2Atras           dq 0
   264 00000A49 0000000000000000            movOfic2Diagonal        dq 0
   265 00000A51 0000000000000000            movOfic2DiagArribaDer   dq 0
   266 00000A59 0000000000000000            movOfic2DiagArribaIzq   dq 0
   267 00000A61 0000000000000000            movOfic2DiagAbajoDer    dq 0
   268 00000A69 0000000000000000            movOfic2DiagAbajoIzq    dq 0
   269                                  
   270 00000A71 0000000000000000            cantSoldCapturados      dq 0 ; Cuando haya 16 soldados capturados, los oficiales ganan
   271 00000A79 0000000000000000            cantOficInvalidados     dq 0 ; Cuando haya 2 oficiales invalidados, los soldados ganan
   272                                  
   273 00000A81 070000000000000003-         casillaOfic1            dq 7,3
   273 00000A8A 00000000000000     
   274 00000A91 060000000000000005-         casillaOfic2            dq 6,5
   274 00000A9A 00000000000000     
   275                                  
   276 00000AA1 0000000000000000            cantCapturasOfic1       dq 0
   277 00000AA9 0000000000000000            cantCapturasOfic2       dq 0
   278                                  
   279 00000AB1 4F00                        simboloOficiales        db 'O', 0
   280 00000AB3 5800                        simboloSoldados         db 'X', 0
   281                                      
   282 00000AB5 04                          orientacionTablero      db  4       ; 4 -> no rotar (default) 
   283 00000AB6 73                          piezaDeInicio           db 's'      ; soldados (s), oficiales (o)
   284                                  
   285                                      ; Comandos 
   286 00000AB7 636C65617200                cmdLimpiarPantalla      db "clear", 0
   287                                  
   288                                      ; Formatos
   289 00000ABD 257500                      formatoAtoi             db "%u", 0
   290                                  
   291                                  section .bss
   292                                  
   293 00000000 ????????                    eleccionRotar       resd 1  ; Variable pivote para la elecci√≥n de rotar el tablero
   294 00000004 ????????                    rotacionElegida     resd 1  ; Variable pivote para la rotaci√≥n del tablero
   295                                  
   296 00000008 ????                        simbOficElegido     resb 2  ; Variable pivote para el s√≠mbolo de los oficiales
   297 0000000A ????                        simbSoldElegido     resb 2  ; Variable pivote para el s√≠mbolo de los soldados
   298                                  
   299 0000000C ????????                    piezaIniElegida     resd 1  ; Variable pivote para la pieza que inicia
   300                                  
   301 00000010 <res 74h>                   tableroEnJuego      resb 116 ; Tablero en juego
   302                                  
   303 00000084 ????????                    soldadoElegido      resb 4  ; Fila y columna del soldado a mover
   304 00000088 ????????                    casillaMovSold      resb 4  ; Fila y columna de la casilla de destino del soldado
   305                                  
   306 0000008C ????????                    oficialElegido      resb 4  ; Fila y columna del oficial a mover
   307 00000090 ????????                    casillaMovOfic      resb 4  ; Fila y columna de la casilla de destino del oficial
   308                                  
   309 00000094 ????????????????            fila                resq 1
   310 0000009C ????????????????            columna             resq 1   
   311 000000A4 ????????????????            desplazCasOrig      resq 1
   312                                  
   313 000000AC ????????????????            filaAMover          resq 1
   314 000000B4 ????????????????            columnaAMover       resq 1
   315 000000BC ????????????????            desplazCasAMover    resq 1
   316                                  
   317 000000C4 ????????????????            filaAux             resq 1
   318 000000CC ????????????????            columnaAux          resq 1
   319 000000D4 ????????????????            desplazAux          resq 1
   320 000000DC ????????????????            desplazAux2         resq 1
   321                                      
   322 000000E4 <res 47h>                   msgErrorEspecificoSold  resb 71 ; M√°ximo largo de mensaje de error para soldados
   323 0000012B <res 47h>                   msgErrorEspecificoOfic  resb 71 ; M√°ximo largo de mensaje de error para oficiales
   324                                  
   325 00000172 <res 47h>                   msgErrorEspecificoSoldMov   resb 71 ; M√°ximo largo de mensaje de error para movimientos de soldados
   326 000001B9 <res 47h>                   msgErrorEspecificoOficMov   resb 71 ; M√°ximo largo de mensaje de error para movimientos de oficiales
   327                                  
   328                                  section .text
   329                                      global main
   330                                  
   331                                  main:
   332                                  
   333                                      mPuts msgBienvenida
     2 00000000 48BF-               <1>  mov rdi, %1
     2 00000002 [BC01000000000000]  <1>
     3 0000000A 4883EC08            <1>  sub rsp, 8
     4 0000000E E8(00000000)        <1>  call puts
     5 00000013 4883C408            <1>  add rsp, 8
   334                                  
   335                                      ; Espacio de personalizaci√≥n del tablero
   336                                      personalizar:
   337 00000017 C70425[00000000]00-             mov dword[eleccionRotar], ''    ; vaciar variable
   337 0000001F 000000             
   338                                          mPuts msgPersonalizarTablero
     2 00000022 48BF-               <1>  mov rdi, %1
     2 00000024 [DD01000000000000]  <1>
     3 0000002C 4883EC08            <1>  sub rsp, 8
     4 00000030 E8(00000000)        <1>  call puts
     5 00000035 4883C408            <1>  add rsp, 8
   339                                          mGets eleccionRotar
    17 00000039 48BF-               <1>  mov rdi, %1
    17 0000003B [0000000000000000]  <1>
    18 00000043 4883EC08            <1>  sub rsp, 8
    19 00000047 E8(00000000)        <1>  call gets
    20 0000004C 4883C408            <1>  add rsp, 8
   340                                  
   341 00000050 833C25[00000000]6E              cmp dword[eleccionRotar], 'n' 
   342 00000058 0F8408020000                    je dejarTableroOrig
   343 0000005E 833C25[00000000]73              cmp dword[eleccionRotar], 's'
   344 00000066 7419                            je personalizarRotacion
   345                                  
   346                                          mErrorJump msgOpcionInvalida, personalizar
    45                              <1>  mPuts %1
     2 00000068 48BF-               <2>  mov rdi, %1
     2 0000006A [0602000000000000]  <2>
     3 00000072 4883EC08            <2>  sub rsp, 8
     4 00000076 E8(00000000)        <2>  call puts
     5 0000007B 4883C408            <2>  add rsp, 8
    46 0000007F EB96                <1>  jmp %2
   347                                  
   348                                      ; En caso de querer personalizar, se debe elegir la rotaci√≥n
   349                                      personalizarRotacion:
   350                                          mPuts msgPregRotacion
     2 00000081 48BF-               <1>  mov rdi, %1
     2 00000083 [B103000000000000]  <1>
     3 0000008B 4883EC08            <1>  sub rsp, 8
     4 0000008F E8(00000000)        <1>  call puts
     5 00000094 4883C408            <1>  add rsp, 8
   351                                          mPuts msgRotacionesPosibles
     2 00000098 48BF-               <1>  mov rdi, %1
     2 0000009A [EF03000000000000]  <1>
     3 000000A2 4883EC08            <1>  sub rsp, 8
     4 000000A6 E8(00000000)        <1>  call puts
     5 000000AB 4883C408            <1>  add rsp, 8
   352                                  
   353 000000AF C70425[04000000]00-             mov dword[rotacionElegida], '' ; limpiar variable
   353 000000B7 000000             
   354                                          mGets rotacionElegida
    17 000000BA 48BF-               <1>  mov rdi, %1
    17 000000BC [0400000000000000]  <1>
    18 000000C4 4883EC08            <1>  sub rsp, 8
    19 000000C8 E8(00000000)        <1>  call gets
    20 000000CD 4883C408            <1>  add rsp, 8
   355                                  
   356                                          mMov orientacionTablero, rotacionElegida, 1
    31 000000D1 B901000000          <1>  mov rcx, %3
    32 000000D6 488D3425[04000000]  <1>  lea rsi, [%2]
    33 000000DE 488D3C25[B50A0000]  <1>  lea rdi, [%1]
    34 000000E6 F3A4                <1>  rep movsb
   357                                          
   358 000000E8 833C25[04000000]31              cmp dword[rotacionElegida], '1'
   359 000000F0 7C0F                            jl invalidaRotacion
   360 000000F2 833C25[04000000]34              cmp dword[rotacionElegida], '4'
   361 000000FA 7F05                            jg invalidaRotacion
   362                                  
   363 000000FC E9BF000000                      jmp rotarTablero
   364                                  
   365                                      invalidaRotacion:
   366                                          mErrorJump msgOpcionInvalida, personalizarRotacion
    45                              <1>  mPuts %1
     2 00000101 48BF-               <2>  mov rdi, %1
     2 00000103 [0602000000000000]  <2>
     3 0000010B 4883EC08            <2>  sub rsp, 8
     4 0000010F E8(00000000)        <2>  call puts
     5 00000114 4883C408            <2>  add rsp, 8
    46 00000118 E964FFFFFF          <1>  jmp %2
   367                                  
   368                                      ; Luego de elegir la rotaci√≥n, se debe personalizar los s√≠mbolos
   369                                      personalizarSimbolos:
   370                                          mPuts msgPersonalizarSimb
     2 0000011D 48BF-               <1>  mov rdi, %1
     2 0000011F [4004000000000000]  <1>
     3 00000127 4883EC08            <1>  sub rsp, 8
     4 0000012B E8(00000000)        <1>  call puts
     5 00000130 4883C408            <1>  add rsp, 8
   371                                  
   372 00000134 E8EF020000                      call setearSimbSoldados
   373 00000139 E878030000                      call setearSimbOficiales
   374                                          
   375                                      ; Luego de personalizar los s√≠mbolos, se debe elegir qui√©n inicia la partida
   376                                      personalizarQuienInicia:
   377 0000013E C70425[0C000000]00-             mov dword[piezaIniElegida], ''    ; vaciar variable
   377 00000146 000000             
   378                                          mPuts msgQuienInicia
     2 00000149 48BF-               <1>  mov rdi, %1
     2 0000014B [D304000000000000]  <1>
     3 00000153 4883EC08            <1>  sub rsp, 8
     4 00000157 E8(00000000)        <1>  call puts
     5 0000015C 4883C408            <1>  add rsp, 8
   379                                          mGets piezaIniElegida
    17 00000160 48BF-               <1>  mov rdi, %1
    17 00000162 [0C00000000000000]  <1>
    18 0000016A 4883EC08            <1>  sub rsp, 8
    19 0000016E E8(00000000)        <1>  call gets
    20 00000173 4883C408            <1>  add rsp, 8
   380                                  
   381 00000177 833C25[0C000000]6F              cmp dword[piezaIniElegida], 'o' 
   382 0000017F 7423                            je setearPiezaInicio
   383 00000181 833C25[0C000000]73              cmp dword[piezaIniElegida], 's'
   384 00000189 7419                            je setearPiezaInicio
   385                                  
   386                                          mErrorJump msgOpcionInvalida, personalizarQuienInicia
    45                              <1>  mPuts %1
     2 0000018B 48BF-               <2>  mov rdi, %1
     2 0000018D [0602000000000000]  <2>
     3 00000195 4883EC08            <2>  sub rsp, 8
     4 00000199 E8(00000000)        <2>  call puts
     5 0000019E 4883C408            <2>  add rsp, 8
    46 000001A2 EB9A                <1>  jmp %2
   387                                  
   388                                          setearPiezaInicio:
   389                                              mMov piezaDeInicio, piezaIniElegida, 1
    31 000001A4 B901000000          <1>  mov rcx, %3
    32 000001A9 488D3425[0C000000]  <1>  lea rsi, [%2]
    33 000001B1 488D3C25[B60A0000]  <1>  lea rdi, [%1]
    34 000001B9 F3A4                <1>  rep movsb
   390 000001BB E98E000000                          jmp comenzarPorInicio
   391                                  
   392                                  ; --------------------------------------------------------------------------------------------
   393                                  ; RUTINA PARA ROTAR EL TABLERO EN BASE A LA ELECCI√ìN DEL USUARIO
   394                                  ; --------------------------------------------------------------------------------------------
   395                                  
   396                                  rotarTablero:
   397                                      ; Se debe mostrar el tablero (en la orientacion indicada y con los simbolos indicados), 
   398                                      ; y se debe mostrar el mensaje de turno en base a lo que haya personalizado el usuario.
   399 000001C0 803C25[B50A0000]31              cmp byte[orientacionTablero], '1'
   400 000001C8 7430                            je rotarIzquierda
   401 000001CA 803C25[B50A0000]32              cmp byte[orientacionTablero], '2'
   402 000001D2 7442                            je rotarDerecha
   403 000001D4 803C25[B50A0000]33              cmp byte[orientacionTablero], '3'
   404 000001DC 7454                            je rotarInvertir
   405                                  
   406                                          mMov tableroEnJuego, tableroOrig, 116
    31 000001DE B974000000          <1>  mov rcx, %3
    32 000001E3 488D3425[00000000]  <1>  lea rsi, [%2]
    33 000001EB 488D3C25[10000000]  <1>  lea rdi, [%1]
    34 000001F3 F3A4                <1>  rep movsb
   407 000001F5 E923FFFFFF                      jmp personalizarSimbolos
   408                                  
   409                                      rotarIzquierda:
   410                                          mMov tableroEnJuego, tableroIzq, 116
    31 000001FA B974000000          <1>  mov rcx, %3
    32 000001FF 488D3425[4D010000]  <1>  lea rsi, [%2]
    33 00000207 488D3C25[10000000]  <1>  lea rdi, [%1]
    34 0000020F F3A4                <1>  rep movsb
   411 00000211 E907FFFFFF                      jmp personalizarSimbolos
   412                                      
   413                                      rotarDerecha:
   414                                          mMov tableroEnJuego, tableroDer, 116
    31 00000216 B974000000          <1>  mov rcx, %3
    32 0000021B 488D3425[DE000000]  <1>  lea rsi, [%2]
    33 00000223 488D3C25[10000000]  <1>  lea rdi, [%1]
    34 0000022B F3A4                <1>  rep movsb
   415 0000022D E9EBFEFFFF                      jmp personalizarSimbolos
   416                                  
   417                                      rotarInvertir:
   418                                          mMov tableroEnJuego, tableroInv, 116
    31 00000232 B974000000          <1>  mov rcx, %3
    32 00000237 488D3425[6F000000]  <1>  lea rsi, [%2]
    33 0000023F 488D3C25[10000000]  <1>  lea rdi, [%1]
    34 00000247 F3A4                <1>  rep movsb
   419 00000249 E9CFFEFFFF                      jmp personalizarSimbolos
   420                                  
   421                                  ; --------------------------------------------------------------------------------------------
   422                                  ; RUTINA PARA COMENZAR EL JUEGO -> Se comienza desde el jugador elegido (o el default)
   423                                  ; --------------------------------------------------------------------------------------------
   424                                  
   425                                  comenzarPorInicio:
   426 0000024E 803C25[B60A0000]73          cmp byte[piezaDeInicio], 's'
   427 00000256 7425                        je loopMovimientos
   428 00000258 803C25[B60A0000]6F          cmp byte[piezaDeInicio], 'o'
   429 00000260 0F84E5000000                je turnoOficiales
   430                                  
   431                                  
   432                                  ; En caso de no haber personalizado el tablero, se debe dejar el tablero original
   433                                  dejarTableroOrig:
   434                                      mMov tableroEnJuego, tableroOrig, 116
    31 00000266 B974000000          <1>  mov rcx, %3
    32 0000026B 488D3425[00000000]  <1>  lea rsi, [%2]
    33 00000273 488D3C25[10000000]  <1>  lea rdi, [%1]
    34 0000027B F3A4                <1>  rep movsb
   435                                  
   436                                  ; COMIENZA EL JUEGO
   437                                  loopMovimientos:; mostrarTablero, mostrarTurno, realizarMovimiento, verificarFinJuego
   438 0000027D C60425[E4000000]00          mov byte[msgErrorEspecificoSold], 0
   439                                      turnoSoldados:
   440 00000285 C60425[84000000]30              mov byte [soldadoElegido], '0'
   441                                      
   442                                          mCommand cmdLimpiarPantalla ; Limpia la pantalla para mostrar el tablero
    24 0000028D 48BF-               <1>  mov rdi, %1
    24 0000028F [B70A000000000000]  <1>
    25 00000297 4883EC08            <1>  sub rsp, 8
    26 0000029B E8(00000000)        <1>  call system
    27 000002A0 4883C408            <1>  add rsp, 8
   443                                  
   444                                          mPuts tableroEnJuego ; Muestro el tablero
     2 000002A4 48BF-               <1>  mov rdi, %1
     2 000002A6 [1000000000000000]  <1>
     3 000002AE 4883EC08            <1>  sub rsp, 8
     4 000002B2 E8(00000000)        <1>  call puts
     5 000002B7 4883C408            <1>  add rsp, 8
   445                                  
   446 000002BB 803C25[E4000000]00              cmp byte[msgErrorEspecificoSold], 0
   447 000002C3 0F85DA030000                    jne imprimirErrorSold
   448                                  
   449                                          todoOkSold:
   450                                  
   451                                              mPuts msgTurnoSoldados      ; Muestra el mensaje de seleccionar ficha a mover
     2 000002C9 48BF-               <1>  mov rdi, %1
     2 000002CB [3208000000000000]  <1>
     3 000002D3 4883EC08            <1>  sub rsp, 8
     4 000002D7 E8(00000000)        <1>  call puts
     5 000002DC 4883C408            <1>  add rsp, 8
   452                                              mGets soldadoElegido        ; Obtiene la ficha a mover
    17 000002E0 48BF-               <1>  mov rdi, %1
    17 000002E2 [8400000000000000]  <1>
    18 000002EA 4883EC08            <1>  sub rsp, 8
    19 000002EE E8(00000000)        <1>  call gets
    20 000002F3 4883C408            <1>  add rsp, 8
   453                                              
   454 000002F7 E94B020000                          jmp verificarFichaSold ; Verifica si la ficha elegida es valida
   455                                  
   456                                              casillaAMoverseSold:
   457                                                  
   458                                                  mPuts msgTurnoMovSold   ; Muestra el mensaje de seleccionar casilla a mover
     2 000002FC 48BF-               <1>  mov rdi, %1
     2 000002FE [DF08000000000000]  <1>
     3 00000306 4883EC08            <1>  sub rsp, 8
     4 0000030A E8(00000000)        <1>  call puts
     5 0000030F 4883C408            <1>  add rsp, 8
   459                                                  mGets casillaMovSold    ; Obtiene la casilla a mover
    17 00000313 48BF-               <1>  mov rdi, %1
    17 00000315 [8800000000000000]  <1>
    18 0000031D 4883EC08            <1>  sub rsp, 8
    19 00000321 E8(00000000)        <1>  call gets
    20 00000326 4883C408            <1>  add rsp, 8
   460                                  
   461 0000032A E90E050000                              jmp verificarMovimientoSold ; Verifica si el movimiento es valido
   462                                  
   463                                                  moverSoldado:
   464 0000032F E8590B0000                                  call realizarMovimientoSold ; Realiza el movimiento
   465                                                      
   466 00000334 E8D0160000                                  call verificarFinJuegoSoldados ; Verificar fin de juego por alg√∫n movimiento de soldado
   467 00000339 4883F800                                    cmp rax, 0
   468 0000033D 0F84281C0000                                je finDeJuego
   469                                  
   470 00000343 C60425[2B010000]00          mov byte[msgErrorEspecificoOfic], 0
   471                                      turnoOficiales:
   472 0000034B C60425[8C000000]30              mov byte[oficialElegido], '0'
   473                                          
   474                                          mCommand cmdLimpiarPantalla ; Limpia la pantalla para mostrar el tablero
    24 00000353 48BF-               <1>  mov rdi, %1
    24 00000355 [B70A000000000000]  <1>
    25 0000035D 4883EC08            <1>  sub rsp, 8
    26 00000361 E8(00000000)        <1>  call system
    27 00000366 4883C408            <1>  add rsp, 8
   475                                  
   476                                          mPuts tableroEnJuego ; Muestra el tablero
     2 0000036A 48BF-               <1>  mov rdi, %1
     2 0000036C [1000000000000000]  <1>
     3 00000374 4883EC08            <1>  sub rsp, 8
     4 00000378 E8(00000000)        <1>  call puts
     5 0000037D 4883C408            <1>  add rsp, 8
   477                                  
   478 00000381 803C25[2B010000]00              cmp byte[msgErrorEspecificoOfic], 0
   479 00000389 0F8592040000                    jne imprimirErrorOfic
   480                                  
   481                                          todoOkOfic:
   482                                  
   483                                              mPuts msgTurnoOficiales ; Muestra el mensaje de seleccionar ficha a mover
     2 0000038F 48BF-               <1>  mov rdi, %1
     2 00000391 [8808000000000000]  <1>
     3 00000399 4883EC08            <1>  sub rsp, 8
     4 0000039D E8(00000000)        <1>  call puts
     5 000003A2 4883C408            <1>  add rsp, 8
   484                                              mGets oficialElegido    ; Obtiene la ficha a mover
    17 000003A6 48BF-               <1>  mov rdi, %1
    17 000003A8 [8C00000000000000]  <1>
    18 000003B0 4883EC08            <1>  sub rsp, 8
    19 000003B4 E8(00000000)        <1>  call gets
    20 000003B9 4883C408            <1>  add rsp, 8
   485                                  
   486 000003BD E9FD020000                          jmp verificarFichaOfic ; Verifica si la ficha elegida es valida
   487                                  
   488                                              casillaAMoverseOfic:
   489                                  
   490                                                  mPuts msgTurnoMovOfic   ; Muestra el mensaje de seleccionar casilla a mover
     2 000003C2 48BF-               <1>  mov rdi, %1
     2 000003C4 [2109000000000000]  <1>
     3 000003CC 4883EC08            <1>  sub rsp, 8
     4 000003D0 E8(00000000)        <1>  call puts
     5 000003D5 4883C408            <1>  add rsp, 8
   491                                                  mGets casillaMovOfic    ; Obtiene la casilla a mover
    17 000003D9 48BF-               <1>  mov rdi, %1
    17 000003DB [9000000000000000]  <1>
    18 000003E3 4883EC08            <1>  sub rsp, 8
    19 000003E7 E8(00000000)        <1>  call gets
    20 000003EC 4883C408            <1>  add rsp, 8
   492                                                  
   493 000003F0 E9E2070000                              jmp verificarMovimientoOfic ; Verifica si el movimiento es valido
   494                                  
   495                                                  moverOficial:
   496 000003F5 E8C10A0000                                  call realizarMovimientoOfic ; Realiza el movimiento
   497                                                      ; Verificar fin de juego por alg√∫n movimiento de oficial
   498 000003FA E8D0150000                                  call verificarFinJuegoOficiales
   499 000003FF 4883F800                                    cmp rax, 0
   500 00000403 0F84621B0000                                je finDeJuego
   501                                                      
   502 00000409 E96FFEFFFF                                  jmp loopMovimientos
   503                                                  
   504                                                  capturar:
   505 0000040E E8AD0E0000                                  call capturarSoldado ; Captura soldado
   506                                                      ; Verificar fin de juego por captura de soldado
   507 00000413 E8B7150000                                  call verificarFinJuegoOficiales
   508 00000418 4883F800                                    cmp rax, 0
   509 0000041C 0F84491B0000                                je finDeJuego
   510                                                      
   511                                                  ; Repetir en loop
   512 00000422 E956FEFFFF                              jmp loopMovimientos
   513                                  
   514 00000427 C3                          ret
   515                                      ; Aqu√≠ termina el main !!!
   516                                  
   517                                  
   518                                  ; --------------------------------------------------------------------------------------------
   519                                  ; RUTINAS PARA SETEAR LOS S√çMBOLOS PERSONALIZADOS DE SOLDADOS Y OFICIALES
   520                                  ; --------------------------------------------------------------------------------------------
   521                                  
   522                                  setearSimbSoldados:
   523                                      mPuts msgSimboloSoldados
     2 00000428 48BF-               <1>  mov rdi, %1
     2 0000042A [B704000000000000]  <1>
     3 00000432 4883EC08            <1>  sub rsp, 8
     4 00000436 E8(00000000)        <1>  call puts
     5 0000043B 4883C408            <1>  add rsp, 8
   524 0000043F C60425[0A000000]00          mov byte[simbSoldElegido], ''
   525                                      mGets simbSoldElegido
    17 00000447 48BF-               <1>  mov rdi, %1
    17 00000449 [0A00000000000000]  <1>
    18 00000451 4883EC08            <1>  sub rsp, 8
    19 00000455 E8(00000000)        <1>  call gets
    20 0000045A 4883C408            <1>  add rsp, 8
   526                                  
   527 0000045E 803C25[0A000000]20          cmp byte[simbSoldElegido], ' '
   528 00000466 7432                        je errSeteoSoldado
   529 00000468 803C25[0A000000]00          cmp byte[simbSoldElegido], ''
   530 00000470 7428                        je errSeteoSoldado
   531                                  
   532 00000472 8A0425[0B000000]            mov al, byte[simbSoldElegido+1]
   533 00000479 3C00                        cmp al, 0
   534 0000047B 751D                        jne errSeteoSoldado
   535                                  
   536                                      mMov simboloSoldados, simbSoldElegido, 1
    31 0000047D B901000000          <1>  mov rcx, %3
    32 00000482 488D3425[0A000000]  <1>  lea rsi, [%2]
    33 0000048A 488D3C25[B30A0000]  <1>  lea rdi, [%1]
    34 00000492 F3A4                <1>  rep movsb
   537                                  
   538 00000494 E8F60A0000                  call cambiarTableroSoldNuevo
   539                                  
   540 00000499 C3                          ret
   541                                  
   542                                      errSeteoSoldado:
   543                                          mErrorJump msgOpcionInvalida, setearSimbSoldados
    45                              <1>  mPuts %1
     2 0000049A 48BF-               <2>  mov rdi, %1
     2 0000049C [0602000000000000]  <2>
     3 000004A4 4883EC08            <2>  sub rsp, 8
     4 000004A8 E8(00000000)        <2>  call puts
     5 000004AD 4883C408            <2>  add rsp, 8
    46 000004B1 E972FFFFFF          <1>  jmp %2
   544                                  
   545                                  setearSimbOficiales:
   546                                      mPuts msgSimboloOficiales
     2 000004B6 48BF-               <1>  mov rdi, %1
     2 000004B8 [9A04000000000000]  <1>
     3 000004C0 4883EC08            <1>  sub rsp, 8
     4 000004C4 E8(00000000)        <1>  call puts
     5 000004C9 4883C408            <1>  add rsp, 8
   547 000004CD C70425[08000000]00-         mov dword[simbOficElegido], ''
   547 000004D5 000000             
   548                                      mGets simbOficElegido
    17 000004D8 48BF-               <1>  mov rdi, %1
    17 000004DA [0800000000000000]  <1>
    18 000004E2 4883EC08            <1>  sub rsp, 8
    19 000004E6 E8(00000000)        <1>  call gets
    20 000004EB 4883C408            <1>  add rsp, 8
   549                                  
   550 000004EF 803C25[08000000]20          cmp byte[simbOficElegido], ' '
   551 000004F7 7432                        je errSeteoOficial
   552 000004F9 803C25[08000000]00          cmp byte[simbOficElegido], ''
   553 00000501 7428                        je errSeteoOficial
   554                                  
   555 00000503 8A0425[09000000]            mov al, byte[simbOficElegido+1]
   556 0000050A 3C00                        cmp al, 0
   557 0000050C 751D                        jne errSeteoOficial
   558                                  
   559                                      mMov simboloOficiales, simbOficElegido, 1
    31 0000050E B901000000          <1>  mov rcx, %3
    32 00000513 488D3425[08000000]  <1>  lea rsi, [%2]
    33 0000051B 488D3C25[B10A0000]  <1>  lea rdi, [%1]
    34 00000523 F3A4                <1>  rep movsb
   560                                  
   561 00000525 E8930A0000                  call cambiarTableroOficNuevo
   562                                  
   563 0000052A C3                          ret
   564                                  
   565                                      errSeteoOficial:
   566                                          mPuts msgOpcionInvalida
     2 0000052B 48BF-               <1>  mov rdi, %1
     2 0000052D [0602000000000000]  <1>
     3 00000535 4883EC08            <1>  sub rsp, 8
     4 00000539 E8(00000000)        <1>  call puts
     5 0000053E 4883C408            <1>  add rsp, 8
   567 00000542 E96FFFFFFF                      jmp setearSimbOficiales
   568                                  
   569                                  ; --------------------------------------------------------------------------------------------
   570                                  ; VERIFICACIONES DE PIEZAS ORIGINALES A MOVER PARA SOLDADOS Y OFICIALES
   571                                  ; --------------------------------------------------------------------------------------------
   572                                  
   573                                  verificarFichaSold:
   574 00000547 8A0425[84000000]            mov al, byte[soldadoElegido] ; Numero de fila
   575                                      
   576 0000054E 3C31                        cmp al, '1'
   577 00000550 0F8C05010000                jl errorInputSold
   578 00000556 3C37                        cmp al, '7'
   579 00000558 0F8FFD000000                jg errorInputSold
   580                                  
   581 0000055E 48C70425[94000000]-         mov qword[fila], 0
   581 00000566 00000000           
   582                                      mSscanf byte[soldadoElegido], formatoAtoi, fila
    69 0000056A 488D3C25[84000000]  <1>  lea rdi, %1
    70 00000572 48BE-               <1>  mov rsi, %2
    70 00000574 [BD0A000000000000]  <1>
    71 0000057C 48BA-               <1>  mov rdx, %3
    71 0000057E [9400000000000000]  <1>
    72 00000586 4883EC08            <1>  sub rsp, 8
    73 0000058A E8(00000000)        <1>  call sscanf
    74 0000058F 4883C408            <1>  add rsp, 8
   583                                  
   584 00000593 4883F801                    cmp rax, 1
   585 00000597 0F8CBE000000                jl errorInputSold
   586                                  
   587 0000059D 8A0425[85000000]            mov al, byte[soldadoElegido+1] ; Caracter '-'
   588 000005A4 3C2D                        cmp al, '-'
   589 000005A6 0F85AF000000                jne errorInputSold
   590                                      
   591 000005AC 8A0425[86000000]            mov al, byte[soldadoElegido+2] ; Numero de columna
   592 000005B3 3C31                        cmp al, '1'
   593 000005B5 0F8CA0000000                jl errorInputSold
   594 000005BB 3C37                        cmp al, '7'
   595 000005BD 0F8F98000000                jg errorInputSold
   596                                  
   597 000005C3 48C70425[9C000000]-         mov qword[columna], 0
   597 000005CB 00000000           
   598                                      mSscanf byte[soldadoElegido+2], formatoAtoi, columna
    69 000005CF 488D3C25[86000000]  <1>  lea rdi, %1
    70 000005D7 48BE-               <1>  mov rsi, %2
    70 000005D9 [BD0A000000000000]  <1>
    71 000005E1 48BA-               <1>  mov rdx, %3
    71 000005E3 [9C00000000000000]  <1>
    72 000005EB 4883EC08            <1>  sub rsp, 8
    73 000005EF E8(00000000)        <1>  call sscanf
    74 000005F4 4883C408            <1>  add rsp, 8
   599                                  
   600 000005F8 4883F801                    cmp rax, 1
   601 000005FC 7C5D                        jl errorInputSold
   602                                  
   603 000005FE 8A0425[87000000]            mov al, byte[soldadoElegido+3] ; Caracter nulo
   604 00000605 3C00                        cmp al, 0
   605 00000607 7552                        jne errorInputSold
   606                                  
   607                                      ; Calculamos desplazamiento en tablero
   608                                      mCalcDesplaz [fila], [columna], qword[desplazCasOrig]
    86 00000609 488B3C25[94000000]  <1>  mov rdi, %1
    87 00000611 488B3425[9C000000]  <1>  mov rsi, %2
    88 00000619 E859080000          <1>  call calcularDesplazamiento
    89 0000061E 48890425[A4000000]  <1>  mov %3, rax
   609 00000626 488B1C25[A4000000]          mov rbx, qword[desplazCasOrig]
   610                                      
   611 0000062E B800000000                  mov rax,0
   612 00000633 BA00000000                  mov rdx, 0
   613                                  
   614 00000638 8A93[10000000]              mov dl, byte[tableroEnJuego+rbx]
   615 0000063E 8A0425[B30A0000]            mov al, [simboloSoldados]
   616                                  
   617 00000645 38C2                        cmp dl, al
   618 00000647 7536                        jne errorCasillaInvalidaSold
   619                                      
   620 00000649 B800000000                  mov rax, 0
   621 0000064E 48890425[E4000000]          mov [msgErrorEspecificoSold], rax
   622 00000656 E9A1FCFFFF                  jmp casillaAMoverseSold
   623                                  
   624                                      errorInputSold:
   625 0000065B 488B0425[72020000]              mov rax, [msgErrorInputSold]
   626                                          mMov msgErrorEspecificoSold, msgErrorInputSold, 61
    31 00000663 B93D000000          <1>  mov rcx, %3
    32 00000668 488D3425[72020000]  <1>  lea rsi, [%2]
    33 00000670 488D3C25[E4000000]  <1>  lea rdi, [%1]
    34 00000678 F3A4                <1>  rep movsb
   627 0000067A E906FCFFFF                      jmp turnoSoldados
   628                                  
   629                                      errorCasillaInvalidaSold:
   630 0000067F 488B0425[2B020000]              mov rax, [msgCasillaInvalidaSold]
   631                                          mMov msgErrorEspecificoSold, msgCasillaInvalidaSold, 71
    31 00000687 B947000000          <1>  mov rcx, %3
    32 0000068C 488D3425[2B020000]  <1>  lea rsi, [%2]
    33 00000694 488D3C25[E4000000]  <1>  lea rdi, [%1]
    34 0000069C F3A4                <1>  rep movsb
   632 0000069E E9E2FBFFFF                      jmp turnoSoldados
   633                                  
   634                                      imprimirErrorSold:
   635                                          mPuts msgErrorEspecificoSold
     2 000006A3 48BF-               <1>  mov rdi, %1
     2 000006A5 [E400000000000000]  <1>
     3 000006AD 4883EC08            <1>  sub rsp, 8
     4 000006B1 E8(00000000)        <1>  call puts
     5 000006B6 4883C408            <1>  add rsp, 8
   636 000006BA E90AFCFFFF                      jmp todoOkSold
   637                                      
   638                                  
   639                                  verificarFichaOfic:
   640 000006BF 8A0C25[8C000000]            mov cl, byte[oficialElegido] ; Numero de fila
   641                                      
   642 000006C6 80F931                      cmp cl, '1'
   643 000006C9 0F8C0A010000                jl errorInputOfic
   644 000006CF 80F937                      cmp cl, '7'
   645 000006D2 0F8F01010000                jg errorInputOfic
   646                                      
   647 000006D8 48C70425[94000000]-         mov qword[fila], 0
   647 000006E0 00000000           
   648                                      mSscanf byte[oficialElegido], formatoAtoi, fila
    69 000006E4 488D3C25[8C000000]  <1>  lea rdi, %1
    70 000006EC 48BE-               <1>  mov rsi, %2
    70 000006EE [BD0A000000000000]  <1>
    71 000006F6 48BA-               <1>  mov rdx, %3
    71 000006F8 [9400000000000000]  <1>
    72 00000700 4883EC08            <1>  sub rsp, 8
    73 00000704 E8(00000000)        <1>  call sscanf
    74 00000709 4883C408            <1>  add rsp, 8
   649                                  
   650 0000070D 4883F801                    cmp rax, 1
   651 00000711 0F8CC2000000                jl errorInputOfic
   652                                  
   653 00000717 8A0C25[8D000000]            mov cl, byte[oficialElegido+1] ; Caracter '-'
   654 0000071E 80F92D                      cmp cl, '-'
   655 00000721 0F85B2000000                jne errorInputOfic
   656                                      
   657 00000727 8A0C25[8E000000]            mov cl, byte[oficialElegido+2] ; Numero de columna
   658 0000072E 80F931                      cmp cl, '1'
   659 00000731 0F8CA2000000                jl errorInputOfic
   660 00000737 80F937                      cmp cl, '7'
   661 0000073A 0F8F99000000                jg errorInputOfic
   662                                  
   663 00000740 48C70425[9C000000]-         mov qword[columna], 0
   663 00000748 00000000           
   664                                      mSscanf byte[oficialElegido+2], formatoAtoi, columna
    69 0000074C 488D3C25[8E000000]  <1>  lea rdi, %1
    70 00000754 48BE-               <1>  mov rsi, %2
    70 00000756 [BD0A000000000000]  <1>
    71 0000075E 48BA-               <1>  mov rdx, %3
    71 00000760 [9C00000000000000]  <1>
    72 00000768 4883EC08            <1>  sub rsp, 8
    73 0000076C E8(00000000)        <1>  call sscanf
    74 00000771 4883C408            <1>  add rsp, 8
   665                                  
   666 00000775 4883F801                    cmp rax, 1
   667 00000779 7C5E                        jl errorInputOfic
   668                                  
   669 0000077B 8A0C25[8F000000]            mov cl, byte[oficialElegido+3] ; Caracter nulo
   670 00000782 80F900                      cmp cl, 0
   671 00000785 7552                        jne errorInputOfic
   672                                  
   673                                      ; Calculamos desplazamiento en tablero
   674                                      mCalcDesplaz [fila], [columna], qword[desplazCasOrig]
    86 00000787 488B3C25[94000000]  <1>  mov rdi, %1
    87 0000078F 488B3425[9C000000]  <1>  mov rsi, %2
    88 00000797 E8DB060000          <1>  call calcularDesplazamiento
    89 0000079C 48890425[A4000000]  <1>  mov %3, rax
   675 000007A4 488B1C25[A4000000]          mov rbx, qword[desplazCasOrig]
   676                                      
   677 000007AC B800000000                  mov rax, 0
   678 000007B1 BA00000000                  mov rdx, 0
   679                                  
   680 000007B6 8A93[10000000]              mov dl, byte[tableroEnJuego+rbx]
   681 000007BC 8A0C25[B10A0000]            mov cl, [simboloOficiales]
   682                                  
   683 000007C3 38CA                        cmp dl, cl
   684 000007C5 7536                        jne errorCasillaInvalidaOfic
   685                                      
   686 000007C7 B800000000                  mov rax, 0
   687 000007CC 48890425[2B010000]          mov [msgErrorEspecificoOfic], rax
   688 000007D4 E9E9FBFFFF                  jmp casillaAMoverseOfic
   689                                  
   690                                      errorInputOfic:
   691 000007D9 488B0425[35030000]              mov rax, [msgErrorInputOfic]
   692                                          mMov msgErrorEspecificoOfic, msgErrorInputOfic, 61
    31 000007E1 B93D000000          <1>  mov rcx, %3
    32 000007E6 488D3425[35030000]  <1>  lea rsi, [%2]
    33 000007EE 488D3C25[2B010000]  <1>  lea rdi, [%1]
    34 000007F6 F3A4                <1>  rep movsb
   693 000007F8 E94EFBFFFF                      jmp turnoOficiales
   694                                  
   695                                      errorCasillaInvalidaOfic:
   696 000007FD 488B0425[35030000]              mov rax, [msgErrorInputOfic]
   697                                          mMov msgErrorEspecificoOfic, msgCasillaInvalidaOfic, 71
    31 00000805 B947000000          <1>  mov rcx, %3
    32 0000080A 488D3425[EE020000]  <1>  lea rsi, [%2]
    33 00000812 488D3C25[2B010000]  <1>  lea rdi, [%1]
    34 0000081A F3A4                <1>  rep movsb
   698 0000081C E92AFBFFFF                      jmp turnoOficiales
   699                                  
   700                                      imprimirErrorOfic:
   701                                          mPuts msgErrorEspecificoOfic
     2 00000821 48BF-               <1>  mov rdi, %1
     2 00000823 [2B01000000000000]  <1>
     3 0000082B 4883EC08            <1>  sub rsp, 8
     4 0000082F E8(00000000)        <1>  call puts
     5 00000834 4883C408            <1>  add rsp, 8
   702 00000838 E952FBFFFF                      jmp todoOkOfic
   703                                  
   704                                  ; --------------------------------------------------------------------------------------------
   705                                  ; VERFICIACIONES DE CASILLAS DESTINO PARA SOLDADOS Y OFICIALES
   706                                  ; --------------------------------------------------------------------------------------------
   707                                  
   708                                  verificarMovimientoSold:
   709 0000083D 8A0425[88000000]            mov al, byte[casillaMovSold] ; Numero de fila
   710                                      
   711 00000844 3C31                        cmp al, '1'
   712 00000846 0F8CE0010000                jl errorInputSoldMov
   713 0000084C 3C37                        cmp al, '7'
   714 0000084E 0F8FD8010000                jg errorInputSoldMov
   715                                  
   716 00000854 48C70425[AC000000]-         mov qword[filaAMover], 0
   716 0000085C 00000000           
   717                                      mSscanf byte[casillaMovSold], formatoAtoi, filaAMover
    69 00000860 488D3C25[88000000]  <1>  lea rdi, %1
    70 00000868 48BE-               <1>  mov rsi, %2
    70 0000086A [BD0A000000000000]  <1>
    71 00000872 48BA-               <1>  mov rdx, %3
    71 00000874 [AC00000000000000]  <1>
    72 0000087C 4883EC08            <1>  sub rsp, 8
    73 00000880 E8(00000000)        <1>  call sscanf
    74 00000885 4883C408            <1>  add rsp, 8
   718                                  
   719 00000889 4883F801                    cmp rax, 1
   720 0000088D 0F8C99010000                jl errorInputSoldMov
   721                                  
   722 00000893 8A0425[89000000]            mov al, byte[casillaMovSold+1] ; Caracter '-'
   723 0000089A 3C2D                        cmp al, '-'
   724 0000089C 0F858A010000                jne errorInputSoldMov
   725                                      
   726 000008A2 8A0425[8A000000]            mov al, byte[casillaMovSold+2] ; Numero de columna
   727 000008A9 3C31                        cmp al, '1'
   728 000008AB 0F8C7B010000                jl errorInputSoldMov
   729 000008B1 3C37                        cmp al, '7'
   730 000008B3 0F8F73010000                jg errorInputSoldMov
   731                                  
   732 000008B9 48C70425[B4000000]-         mov qword[columnaAMover], 0
   732 000008C1 00000000           
   733                                      mSscanf byte[casillaMovSold+2], formatoAtoi, columnaAMover
    69 000008C5 488D3C25[8A000000]  <1>  lea rdi, %1
    70 000008CD 48BE-               <1>  mov rsi, %2
    70 000008CF [BD0A000000000000]  <1>
    71 000008D7 48BA-               <1>  mov rdx, %3
    71 000008D9 [B400000000000000]  <1>
    72 000008E1 4883EC08            <1>  sub rsp, 8
    73 000008E5 E8(00000000)        <1>  call sscanf
    74 000008EA 4883C408            <1>  add rsp, 8
   734                                  
   735 000008EE 4883F801                    cmp rax, 1
   736 000008F2 0F8C34010000                jl errorInputSoldMov
   737                                  
   738 000008F8 8A0425[8B000000]            mov al, byte[casillaMovSold+3] ; Caracter nulo
   739 000008FF 3C00                        cmp al, 0
   740 00000901 0F8525010000                jne errorInputSoldMov
   741                                  
   742                                      ; Primero chequeamos si el soldado original est√° en alguna de las posiciones especiales
   743 00000907 E8E0060000                  call chequearSoldPosEspeciales
   744 0000090C 4883F800                    cmp rax, 0
   745 00000910 7423                        je lugaresComunesSold ; Si recibimos 1, la casilla original es un lugar com√∫n: intentamos hacer el movimiento normal
   746                                      
   747 00000912 4883F801                    cmp rax, 1 ; Si recibimos 1, la casilla original es un lugar especial: solo podemos movernos a la derecha
   748 00000916 0F8474010000                je soloDerechaSold
   749 0000091C 4883F802                    cmp rax, 2 ; Si recibimos 2, la casilla original es un lugar especial: solo podemos movernos a la izquierda
   750 00000920 0F840D020000                je soloIzquierdaSold
   751                                      
   752                                      casillaEspecialAMover:
   753 00000926 4983F800                        cmp r8, 0
   754 0000092A 0F8520010000                    jne errorCasillaInvalidaSoldMov
   755 00000930 E9FAF9FFFF                      jmp moverSoldado
   756                                  
   757                                      lugaresComunesSold:
   758                                          ; Comparamos la fila a mover con la fila actual
   759                                          mMov filaAux, fila, 1
    31 00000935 B901000000          <1>  mov rcx, %3
    32 0000093A 488D3425[94000000]  <1>  lea rsi, [%2]
    33 00000942 488D3C25[C4000000]  <1>  lea rdi, [%1]
    34 0000094A F3A4                <1>  rep movsb
   760 0000094C 48FF0425[C4000000]              inc qword[filaAux]
   761                                          mCmp [filaAux], [filaAMover], 1
    38 00000954 B901000000          <1>  mov rcx, %3
    39 00000959 488D3425[C4000000]  <1>  lea rsi, %1
    40 00000961 488D3C25[AC000000]  <1>  lea rdi, %2
    41 00000969 F3A6                <1>  repe cmpsb
   762 0000096B 0F85DF000000                    jne errorCasillaInvalidaSoldMov
   763                                  
   764                                          ; Comparamos la columna a mover con la columna actual
   765 00000971 48C70425[CC000000]-             mov qword[columnaAux], 0 ; Reiniciamos la columna auxiliar
   765 00000979 00000000           
   766                                          mMov columnaAux, columna, 1
    31 0000097D B901000000          <1>  mov rcx, %3
    32 00000982 488D3425[9C000000]  <1>  lea rsi, [%2]
    33 0000098A 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 00000992 F3A4                <1>  rep movsb
   767                                  
   768                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento hacia adelante
    38 00000994 B901000000          <1>  mov rcx, %3
    39 00000999 488D3425[CC000000]  <1>  lea rsi, %1
    40 000009A1 488D3C25[B4000000]  <1>  lea rdi, %2
    41 000009A9 F3A6                <1>  repe cmpsb
   769 000009AB 7445                            je columnaSoldAMoverValida
   770                                  
   771 000009AD 48FF0425[CC000000]              inc qword[columnaAux]
   772                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la izquierda
    38 000009B5 B901000000          <1>  mov rcx, %3
    39 000009BA 488D3425[CC000000]  <1>  lea rsi, %1
    40 000009C2 488D3C25[B4000000]  <1>  lea rdi, %2
    41 000009CA F3A6                <1>  repe cmpsb
   773 000009CC 7424                            je columnaSoldAMoverValida
   774                                  
   775 000009CE 48832C25[CC000000]-             sub qword[columnaAux], 2
   775 000009D6 02                 
   776                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la derecha
    38 000009D7 B901000000          <1>  mov rcx, %3
    39 000009DC 488D3425[CC000000]  <1>  lea rsi, %1
    40 000009E4 488D3C25[B4000000]  <1>  lea rdi, %2
    41 000009EC F3A6                <1>  repe cmpsb
   777 000009EE 7402                            je columnaSoldAMoverValida
   778                                  
   779 000009F0 EB5E                            jmp errorCasillaInvalidaSoldMov
   780                                  
   781                                      columnaSoldAMoverValida: ; Queda ver si en esa casilla est√° vac√≠a o no
   782                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    86 000009F2 488B3C25[AC000000]  <1>  mov rdi, %1
    87 000009FA 488B3425[B4000000]  <1>  mov rsi, %2
    88 00000A02 E870040000          <1>  call calcularDesplazamiento
    89 00000A07 48890425[BC000000]  <1>  mov %3, rax
   783                                          mEstaVacia qword[desplazCasAMover]
    93 00000A0F B800000000          <1>  mov rax, 0
    94 00000A14 488B3C25[BC000000]  <1>  mov rdi, %1
    95 00000A1C E841040000          <1>  call estaVacia
   784 00000A21 4883F801                        cmp rax, 1
   785 00000A25 7429                            je errorCasillaInvalidaSoldMov ; Si recibimos 1, la casilla est√° ocupada (o est√° fuera del tablero)
   786                                          
   787 00000A27 E903F9FFFF                      jmp moverSoldado 
   788                                  
   789                                  
   790                                      errorInputSoldMov:
   791 00000A2C 488B0425[72020000]              mov rax, [msgErrorInputSold]
   792                                          mMov msgErrorEspecificoSold, msgErrorInputSold, 61
    31 00000A34 B93D000000          <1>  mov rcx, %3
    32 00000A39 488D3425[72020000]  <1>  lea rsi, [%2]
    33 00000A41 488D3C25[E4000000]  <1>  lea rdi, [%1]
    34 00000A49 F3A4                <1>  rep movsb
   793 00000A4B E935F8FFFF                      jmp turnoSoldados
   794                                  
   795                                      errorCasillaInvalidaSoldMov:
   796 00000A50 488B0425[B0020000]              mov rax, [msgCasillaInvMovSold]
   797                                          mMov msgErrorEspecificoSold, msgCasillaInvMovSold, 61
    31 00000A58 B93D000000          <1>  mov rcx, %3
    32 00000A5D 488D3425[B0020000]  <1>  lea rsi, [%2]
    33 00000A65 488D3C25[E4000000]  <1>  lea rdi, [%1]
    34 00000A6D F3A4                <1>  rep movsb
   798 00000A6F E911F8FFFF                      jmp turnoSoldados
   799                                  
   800                                      imprimirErrorSoldMov:
   801                                          mPuts msgErrorEspecificoSold
     2 00000A74 48BF-               <1>  mov rdi, %1
     2 00000A76 [E400000000000000]  <1>
     3 00000A7E 4883EC08            <1>  sub rsp, 8
     4 00000A82 E8(00000000)        <1>  call puts
     5 00000A87 4883C408            <1>  add rsp, 8
   802 00000A8B E9F5F7FFFF                      jmp turnoSoldados
   803                                  
   804                                      soloDerechaSold:
   805 00000A90 41B801000000                    mov r8, 1 ; Suponemos que el movimiento es inv√°lido
   806                                  
   807                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    86 00000A96 488B3C25[AC000000]  <1>  mov rdi, %1
    87 00000A9E 488B3425[B4000000]  <1>  mov rsi, %2
    88 00000AA6 E8CC030000          <1>  call calcularDesplazamiento
    89 00000AAB 48890425[BC000000]  <1>  mov %3, rax
   808                                          mEstaVacia qword[desplazCasAMover]
    93 00000AB3 B800000000          <1>  mov rax, 0
    94 00000AB8 488B3C25[BC000000]  <1>  mov rdi, %1
    95 00000AC0 E89D030000          <1>  call estaVacia
   809 00000AC5 4883F801                        cmp rax, 1 
   810 00000AC9 0F8457FEFFFF                    je casillaEspecialAMover
   811                                  
   812                                          mCmp [fila], [filaAMover], 1 ; Las filas deben ser iguales (el movimiento especial es para el costado)
    38 00000ACF B901000000          <1>  mov rcx, %3
    39 00000AD4 488D3425[94000000]  <1>  lea rsi, %1
    40 00000ADC 488D3C25[AC000000]  <1>  lea rdi, %2
    41 00000AE4 F3A6                <1>  repe cmpsb
   813 00000AE6 0F853AFEFFFF                    jne casillaEspecialAMover
   814                                  
   815                                          mMov columnaAux, columna, 1
    31 00000AEC B901000000          <1>  mov rcx, %3
    32 00000AF1 488D3425[9C000000]  <1>  lea rsi, [%2]
    33 00000AF9 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 00000B01 F3A4                <1>  rep movsb
   816 00000B03 48FF0425[CC000000]              inc qword[columnaAux]
   817                                          mCmp [columnaAux], [columnaAMover], 1
    38 00000B0B B901000000          <1>  mov rcx, %3
    39 00000B10 488D3425[CC000000]  <1>  lea rsi, %1
    40 00000B18 488D3C25[B4000000]  <1>  lea rdi, %2
    41 00000B20 F3A6                <1>  repe cmpsb
   818 00000B22 0F85FEFDFFFF                    jne casillaEspecialAMover
   819                                          
   820 00000B28 41B800000000                    mov r8, 0 ; Si llegamos ac√°, el movimiento es v√°lido
   821 00000B2E E9F3FDFFFF                      jmp casillaEspecialAMover
   822                                      
   823                                      soloIzquierdaSold:
   824 00000B33 41B801000000                    mov r8, 1 ; Suponemos que el movimiento es inv√°lido
   825                                  
   826                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    86 00000B39 488B3C25[AC000000]  <1>  mov rdi, %1
    87 00000B41 488B3425[B4000000]  <1>  mov rsi, %2
    88 00000B49 E829030000          <1>  call calcularDesplazamiento
    89 00000B4E 48890425[BC000000]  <1>  mov %3, rax
   827                                          mEstaVacia qword[desplazCasAMover]
    93 00000B56 B800000000          <1>  mov rax, 0
    94 00000B5B 488B3C25[BC000000]  <1>  mov rdi, %1
    95 00000B63 E8FA020000          <1>  call estaVacia
   828 00000B68 4883F801                        cmp rax, 1 
   829 00000B6C 0F84B4FDFFFF                    je casillaEspecialAMover
   830                                  
   831                                          mCmp [fila], [filaAMover], 1 ; Las filas deben ser iguales (el movimiento especial es para el costado)
    38 00000B72 B901000000          <1>  mov rcx, %3
    39 00000B77 488D3425[94000000]  <1>  lea rsi, %1
    40 00000B7F 488D3C25[AC000000]  <1>  lea rdi, %2
    41 00000B87 F3A6                <1>  repe cmpsb
   832 00000B89 0F8597FDFFFF                    jne casillaEspecialAMover
   833                                  
   834                                          mMov columnaAux, columna, 1
    31 00000B8F B901000000          <1>  mov rcx, %3
    32 00000B94 488D3425[9C000000]  <1>  lea rsi, [%2]
    33 00000B9C 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 00000BA4 F3A4                <1>  rep movsb
   835 00000BA6 48FF0C25[CC000000]              dec qword[columnaAux]
   836                                          mCmp [columnaAux], [columnaAMover], 1
    38 00000BAE B901000000          <1>  mov rcx, %3
    39 00000BB3 488D3425[CC000000]  <1>  lea rsi, %1
    40 00000BBB 488D3C25[B4000000]  <1>  lea rdi, %2
    41 00000BC3 F3A6                <1>  repe cmpsb
   837 00000BC5 0F855BFDFFFF                    jne casillaEspecialAMover
   838                                  
   839 00000BCB 41B800000000                    mov r8, 0 ; Si llegamos ac√°, el movimiento es v√°lido
   840 00000BD1 E950FDFFFF                      jmp casillaEspecialAMover
   841                                      
   842 00000BD6 C3                          ret
   843                                  
   844                                  verificarMovimientoOfic:
   845 00000BD7 8A0425[90000000]            mov al, byte[casillaMovOfic] ; Numero de fila
   846                                      
   847 00000BDE 3C31                        cmp al, '1'
   848 00000BE0 0F8C18020000                jl errorInputOficMov
   849 00000BE6 3C37                        cmp al, '7'
   850 00000BE8 0F8F10020000                jg errorInputOficMov
   851                                  
   852 00000BEE 48C70425[AC000000]-         mov qword[filaAMover], 0
   852 00000BF6 00000000           
   853                                      mSscanf byte[casillaMovOfic], formatoAtoi, filaAMover
    69 00000BFA 488D3C25[90000000]  <1>  lea rdi, %1
    70 00000C02 48BE-               <1>  mov rsi, %2
    70 00000C04 [BD0A000000000000]  <1>
    71 00000C0C 48BA-               <1>  mov rdx, %3
    71 00000C0E [AC00000000000000]  <1>
    72 00000C16 4883EC08            <1>  sub rsp, 8
    73 00000C1A E8(00000000)        <1>  call sscanf
    74 00000C1F 4883C408            <1>  add rsp, 8
   854                                  
   855 00000C23 4883F801                    cmp rax, 1
   856 00000C27 0F8CD1010000                jl errorInputOficMov
   857                                  
   858 00000C2D 8A0425[91000000]            mov al, byte[casillaMovOfic+1] ; Caracter '-'
   859 00000C34 3C2D                        cmp al, '-'
   860 00000C36 0F85C2010000                jne errorInputOficMov
   861                                      
   862 00000C3C 8A0425[92000000]            mov al, byte[casillaMovOfic+2] ; Numero de columna
   863 00000C43 3C31                        cmp al, '1'
   864 00000C45 0F8CB3010000                jl errorInputOficMov
   865 00000C4B 3C37                        cmp al, '7'
   866 00000C4D 0F8FAB010000                jg errorInputOficMov
   867                                  
   868 00000C53 48C70425[B4000000]-         mov qword[columnaAMover], 0
   868 00000C5B 00000000           
   869                                      mSscanf byte[casillaMovOfic+2], formatoAtoi, columnaAMover
    69 00000C5F 488D3C25[92000000]  <1>  lea rdi, %1
    70 00000C67 48BE-               <1>  mov rsi, %2
    70 00000C69 [BD0A000000000000]  <1>
    71 00000C71 48BA-               <1>  mov rdx, %3
    71 00000C73 [B400000000000000]  <1>
    72 00000C7B 4883EC08            <1>  sub rsp, 8
    73 00000C7F E8(00000000)        <1>  call sscanf
    74 00000C84 4883C408            <1>  add rsp, 8
   870                                  
   871 00000C88 4883F801                    cmp rax, 1
   872 00000C8C 0F8C6C010000                jl errorInputOficMov
   873                                  
   874 00000C92 8A0425[93000000]            mov al, byte[casillaMovOfic+3] ; Caracter nulo
   875 00000C99 3C00                        cmp al, 0
   876 00000C9B 0F855D010000                jne errorInputOficMov
   877                                  
   878                                      ; Comparamos la fila a mover con la fila actual
   879                                      mMov filaAux, fila, 1
    31 00000CA1 B901000000          <1>  mov rcx, %3
    32 00000CA6 488D3425[94000000]  <1>  lea rsi, [%2]
    33 00000CAE 488D3C25[C4000000]  <1>  lea rdi, [%1]
    34 00000CB6 F3A4                <1>  rep movsb
   880                                  
   881                                      mCmp [filaAux], [filaAMover], 1
    38 00000CB8 B901000000          <1>  mov rcx, %3
    39 00000CBD 488D3425[C4000000]  <1>  lea rsi, %1
    40 00000CC5 488D3C25[AC000000]  <1>  lea rdi, %2
    41 00000CCD F3A6                <1>  repe cmpsb
   882 00000CCF 7448                        je filaOficAMoverValida ; Filas iguales -> v√°lido
   883 00000CD1 48FF0425[C4000000]          inc qword[filaAux]
   884                                      mCmp [filaAux], [filaAMover], 1
    38 00000CD9 B901000000          <1>  mov rcx, %3
    39 00000CDE 488D3425[C4000000]  <1>  lea rsi, %1
    40 00000CE6 488D3C25[AC000000]  <1>  lea rdi, %2
    41 00000CEE F3A6                <1>  repe cmpsb
   885 00000CF0 7427                        je filaOficAMoverValida
   886 00000CF2 48832C25[C4000000]-         sub qword[filaAux], 2
   886 00000CFA 02                 
   887                                      mCmp [filaAux], [filaAMover], 1
    38 00000CFB B901000000          <1>  mov rcx, %3
    39 00000D00 488D3425[C4000000]  <1>  lea rsi, %1
    40 00000D08 488D3C25[AC000000]  <1>  lea rdi, %2
    41 00000D10 F3A6                <1>  repe cmpsb
   888 00000D12 7405                        je filaOficAMoverValida
   889                                  
   890 00000D14 E909010000                  jmp errorCasillaInvalidaOficMov
   891                                  
   892                                      filaOficAMoverValida:
   893                                          ; Comparamos la columna a mover con la columna actual
   894 00000D19 48C70425[CC000000]-             mov qword[columnaAux], 0 ; Reiniciamos la columna auxiliar
   894 00000D21 00000000           
   895                                          mMov columnaAux, columna, 1
    31 00000D25 B901000000          <1>  mov rcx, %3
    32 00000D2A 488D3425[9C000000]  <1>  lea rsi, [%2]
    33 00000D32 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 00000D3A F3A4                <1>  rep movsb
   896                                  
   897                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento hacia adelante
    38 00000D3C B901000000          <1>  mov rcx, %3
    39 00000D41 488D3425[CC000000]  <1>  lea rsi, %1
    40 00000D49 488D3C25[B4000000]  <1>  lea rdi, %2
    41 00000D51 F3A6                <1>  repe cmpsb
   898 00000D53 7448                            je columnaOficAMoverValida
   899                                  
   900 00000D55 48FF0425[CC000000]              inc qword[columnaAux]
   901                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la izquierda
    38 00000D5D B901000000          <1>  mov rcx, %3
    39 00000D62 488D3425[CC000000]  <1>  lea rsi, %1
    40 00000D6A 488D3C25[B4000000]  <1>  lea rdi, %2
    41 00000D72 F3A6                <1>  repe cmpsb
   902 00000D74 7427                            je columnaOficAMoverValida
   903                                  
   904 00000D76 48832C25[CC000000]-             sub qword[columnaAux], 2
   904 00000D7E 02                 
   905                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la derecha
    38 00000D7F B901000000          <1>  mov rcx, %3
    39 00000D84 488D3425[CC000000]  <1>  lea rsi, %1
    40 00000D8C 488D3C25[B4000000]  <1>  lea rdi, %2
    41 00000D94 F3A6                <1>  repe cmpsb
   906 00000D96 7405                            je columnaOficAMoverValida
   907                                  
   908 00000D98 E985000000                      jmp errorCasillaInvalidaOficMov
   909                                  
   910                                      columnaOficAMoverValida: ; Podr√≠amos hacer un movimiento normal (casilla vac√≠a) o capturar un soldado...
   911                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    86 00000D9D 488B3C25[AC000000]  <1>  mov rdi, %1
    87 00000DA5 488B3425[B4000000]  <1>  mov rsi, %2
    88 00000DAD E8C5000000          <1>  call calcularDesplazamiento
    89 00000DB2 48890425[BC000000]  <1>  mov %3, rax
   912                                          mEstaVacia qword[desplazCasAMover]
    93 00000DBA B800000000          <1>  mov rax, 0
    94 00000DBF 488B3C25[BC000000]  <1>  mov rdi, %1
    95 00000DC7 E896000000          <1>  call estaVacia
   913 00000DCC 4883F800                        cmp rax, 0
   914 00000DD0 0F841FF6FFFF                    je moverOficial ; Si llegamos ac√°, la casilla a mover est√° vac√≠a -> movimiento normal
   915                                          
   916                                          ; Si llegamos ac√°, la casilla no est√° vac√≠a: ver si hay un soldado para capturar
   917                                          mHaySoldado qword[desplazCasAMover]
    99 00000DD6 B800000000          <1>  mov rax, 0
   100 00000DDB 488B3C25[BC000000]  <1>  mov rdi, %1
   101 00000DE3 E84D020000          <1>  call haySoldado
   918 00000DE8 4883F801                        cmp rax, 1
   919 00000DEC 7434                            je errorCasillaInvalidaOficMov ; Si recibimos 1, la casilla a ocupar no tiene un soldado -> movimiento inv√°lido
   920                                  
   921                                          ; Si llegamos ac√°, la casilla a ocupar tiene un soldado: debemos ver si el oficial puede saltar sobre √©l...
   922 00000DEE E866020000                      call sePuedeSaltarSoldado
   923 00000DF3 4883F801                        cmp rax, 1
   924 00000DF7 7429                            je errorCasillaInvalidaOficMov ; Si recibimos 1, el oficial no puede saltar sobre el soldado -> movimiento inv√°lido
   925                                  
   926 00000DF9 E910F6FFFF                      jmp capturar
   927                                  
   928                                  
   929                                      errorInputOficMov:
   930 00000DFE 488B0425[35030000]              mov rax, [msgErrorInputOfic]
   931                                          mMov msgErrorEspecificoOfic, msgErrorInputOfic, 61
    31 00000E06 B93D000000          <1>  mov rcx, %3
    32 00000E0B 488D3425[35030000]  <1>  lea rsi, [%2]
    33 00000E13 488D3C25[2B010000]  <1>  lea rdi, [%1]
    34 00000E1B F3A4                <1>  rep movsb
   932 00000E1D E929F5FFFF                      jmp turnoOficiales
   933                                  
   934                                      errorCasillaInvalidaOficMov:
   935 00000E22 488B0425[73030000]              mov rax, [msgCasillaInvMovOfic]
   936                                          mMov msgErrorEspecificoOfic, msgCasillaInvMovOfic, 61
    31 00000E2A B93D000000          <1>  mov rcx, %3
    32 00000E2F 488D3425[73030000]  <1>  lea rsi, [%2]
    33 00000E37 488D3C25[2B010000]  <1>  lea rdi, [%1]
    34 00000E3F F3A4                <1>  rep movsb
   937 00000E41 E905F5FFFF                      jmp turnoOficiales
   938                                  
   939                                      imprimirErrorOficMov:
   940                                          mPuts msgErrorEspecificoOfic
     2 00000E46 48BF-               <1>  mov rdi, %1
     2 00000E48 [2B01000000000000]  <1>
     3 00000E50 4883EC08            <1>  sub rsp, 8
     4 00000E54 E8(00000000)        <1>  call puts
     5 00000E59 4883C408            <1>  add rsp, 8
   941 00000E5D E9E9F4FFFF                      jmp turnoOficiales
   942                                  
   943                                  ; --------------------------------------------------------------------------------------------
   944                                  ; RUTINA PARA VERIFICAR SI UNA CASILLA EST√Å VAC√çA
   945                                  ; --------------------------------------------------------------------------------------------
   946                                  
   947                                  estaVacia:
   948 00000E62 80BF[10000000]20            cmp byte[tableroEnJuego+rdi], ' '
   949 00000E69 7406                        je okVacia
   950                                  
   951 00000E6B B801000000                  mov rax, 1
   952 00000E70 C3                          ret
   953                                  
   954                                      okVacia:
   955 00000E71 B800000000                      mov rax, 0
   956 00000E76 C3                              ret
   957                                  
   958                                  ; --------------------------------------------------------------------------------------------
   959                                  ; RUTINA PARA CALCULAR EL DESPLAZAMIENTO DE UNA CASILLA EN EL TABLERO
   960                                  ; --------------------------------------------------------------------------------------------
   961                                  
   962                                  calcularDesplazamiento:
   963 00000E77 B800000000                  mov rax, 0
   964 00000E7C 4889F8                      mov rax, rdi
   965 00000E7F 48FFC0                      inc rax
   966 00000E82 666BC00B                    imul ax, 11
   967 00000E86 4801F0                      add rax, rsi
   968 00000E89 48FFC0                      inc rax
   969                                  
   970 00000E8C C3                          ret
   971                                  
   972                                  ; --------------------------------------------------------------------------------------------
   973                                  ; RUTINAS PARA REALIZAR MOVIMIENTOS SIMPLES DE SOLDADOS Y OFICIALES (los que no requieren capturas)
   974                                  ; --------------------------------------------------------------------------------------------
   975                                  
   976                                  realizarMovimientoSold:
   977 00000E8D 488B0425[A4000000]          mov rax, qword[desplazCasOrig]
   978 00000E95 488B1C25[BC000000]          mov rbx, qword[desplazCasAMover]
   979                                  
   980 00000E9D C680[10000000]20            mov byte[tableroEnJuego+rax], ' '
   981                                      mMov tableroEnJuego+rbx, simboloSoldados, 1
    31 00000EA4 B901000000          <1>  mov rcx, %3
    32 00000EA9 488D3425[B30A0000]  <1>  lea rsi, [%2]
    33 00000EB1 488DBB[10000000]    <1>  lea rdi, [%1]
    34 00000EB8 F3A4                <1>  rep movsb
   982                                  
   983 00000EBA C3                          ret
   984                                  
   985                                  realizarMovimientoOfic:
   986                                      ; Vemos si el oficial pod√≠a capturar un soldado y no lo hizo
   987                                      mMov desplazAux2, desplazCasOrig, 1
    31 00000EBB B901000000          <1>  mov rcx, %3
    32 00000EC0 488D3425[A4000000]  <1>  lea rsi, [%2]
    33 00000EC8 488D3C25[DC000000]  <1>  lea rdi, [%1]
    34 00000ED0 F3A4                <1>  rep movsb
   988 00000ED2 E81B070000                  call podiaCapturarSoldado 
   989 00000ED7 4883F800                    cmp rax, 0 ; Si fue as√≠, significa que el oficial se desentendi√≥ de su deber
   990 00000EDB 740D                        je quitarOficial
   991                                  
   992                                      ; Necesitamos chequear si el otro oficial podr√≠a haber capturado al soldado
   993 00000EDD E8310A0000                  call podiaCapturarSoldadoOtroOficial
   994 00000EE2 4883F800                    cmp rax, 0 ; Si fue as√≠, significa que el otro oficial se desentendi√≥ de su deber
   995 00000EE6 7453                        je quitarOtroOficial
   996                                  
   997 00000EE8 EB57                        jmp noPodianCapturar
   998                                  
   999                                      quitarOficial:
  1000 00000EEA E83D040000                      call verQueOficialEs
  1001 00000EEF 4883F801                        cmp rax, 1 ; Si recibimos 1, el oficial 1 es el que se mueve
  1002 00000EF3 7423                            je quitarOfic1
  1003                                  
  1004                                          mCalcDesplaz [casillaOfic2], [casillaOfic2+8], qword[desplazAux]
    86 00000EF5 488B3C25[910A0000]  <1>  mov rdi, %1
    87 00000EFD 488B3425[990A0000]  <1>  mov rsi, %2
    88 00000F05 E86DFFFFFF          <1>  call calcularDesplazamiento
    89 00000F0A 48890425[D4000000]  <1>  mov %3, rax
  1005 00000F12 E8A3090000                      call desentenderOficial
  1006 00000F17 C3                              ret
  1007                                  
  1008                                      quitarOfic1:
  1009                                          mCalcDesplaz [casillaOfic1], [casillaOfic1+8], qword[desplazAux]
    86 00000F18 488B3C25[810A0000]  <1>  mov rdi, %1
    87 00000F20 488B3425[890A0000]  <1>  mov rsi, %2
    88 00000F28 E84AFFFFFF          <1>  call calcularDesplazamiento
    89 00000F2D 48890425[D4000000]  <1>  mov %3, rax
  1010 00000F35 E880090000                      call desentenderOficial
  1011 00000F3A C3                              ret
  1012                                      
  1013                                      quitarOtroOficial:
  1014 00000F3B E83E0A0000                      call desentenderOtroOficial
  1015 00000F40 C3                              ret
  1016                                  
  1017                                      ; Si llegamos ac√°, el oficial no pod√≠a capturar un soldado -> OK!
  1018                                      noPodianCapturar:
  1019 00000F41 488B0425[A4000000]              mov rax, qword[desplazCasOrig]
  1020 00000F49 488B1C25[BC000000]              mov rbx, qword[desplazCasAMover]
  1021                                  
  1022 00000F51 C680[10000000]20                mov byte[tableroEnJuego+rax], ' '
  1023                                          mMov tableroEnJuego+rbx, simboloOficiales, 1
    31 00000F58 B901000000          <1>  mov rcx, %3
    32 00000F5D 488D3425[B10A0000]  <1>  lea rsi, [%2]
    33 00000F65 488DBB[10000000]    <1>  lea rdi, [%1]
    34 00000F6C F3A4                <1>  rep movsb
  1024                                  
  1025 00000F6E E8B9030000                      call verQueOficialEs ; Verificamos qu√© oficial es el que se quiere mover
  1026                                  
  1027                                          ; Incrementamos la cantidad de movimientos del oficial correspondiente
  1028 00000F73 4883F801                        cmp rax, 1 ; Si recibimos 1, el oficial 1 es el que se mueve
  1029 00000F77 740B                            je movOfic1
  1030                                          
  1031                                          ; Si llegamos ac√°, el oficial 2 es el que se mueve
  1032 00000F79 E89D040000                      call actualizarContadoresOfic2
  1033 00000F7E E878050000                      call refrescarCasActOfic2
  1034 00000F83 C3                              ret
  1035                                      
  1036                                      movOfic1: ; Si llegamos ac√°, el oficial 1 es el que se mueve
  1037 00000F84 E8E1030000                      call actualizarContadoresOfic1
  1038 00000F89 E83E050000                      call refrescarCasActOfic1
  1039                                  
  1040 00000F8E C3                          ret
  1041                                      
  1042                                  ; --------------------------------------------------------------------------------------------
  1043                                  ; RUTINAS PARA CAMBIAR EL TABLERO CON LOS SIMBOLOS PERSONALIZADOS
  1044                                  ; --------------------------------------------------------------------------------------------
  1045                                  
  1046                                  cambiarTableroSoldNuevo:
  1047 00000F8F BB1A000000                  mov rbx, 26 ; Desplazamiento de la primera casilla en donde puede haber piezas
  1048                                  
  1049                                      cicloCambiarSoldados:
  1050 00000F94 80BB[10000000]58                cmp byte[tableroEnJuego+rbx], 'X'
  1051 00000F9B 7516                            jne noCambiarSoldado
  1052                                          mMov tableroEnJuego+rbx, simboloSoldados, 1 ; Cambio el simbolo de los soldados
    31 00000F9D B901000000          <1>  mov rcx, %3
    32 00000FA2 488D3425[B30A0000]  <1>  lea rsi, [%2]
    33 00000FAA 488DBB[10000000]    <1>  lea rdi, [%1]
    34 00000FB1 F3A4                <1>  rep movsb
  1053                                  
  1054                                          noCambiarSoldado:
  1055 00000FB3 48FFC3                              inc rbx
  1056 00000FB6 4883FB4B                            cmp rbx, 75 ; Desplazamiento de la √∫ltima casilla en donde puede haber piezas
  1057 00000FBA 7CD8                                jl cicloCambiarSoldados
  1058                                  
  1059 00000FBC C3                          ret
  1060                                  
  1061                                  cambiarTableroOficNuevo:
  1062                                      mMov tableroEnJuego+83, simboloOficiales, 1 ; Primer oficial (desplazamiento)
    31 00000FBD B901000000          <1>  mov rcx, %3
    32 00000FC2 488D3425[B10A0000]  <1>  lea rsi, [%2]
    33 00000FCA 488D3C25[63000000]  <1>  lea rdi, [%1]
    34 00000FD2 F3A4                <1>  rep movsb
  1063                                      mMov tableroEnJuego+92, simboloOficiales, 1 ; Segundo oficial (desplazamiento)
    31 00000FD4 B901000000          <1>  mov rcx, %3
    32 00000FD9 488D3425[B10A0000]  <1>  lea rsi, [%2]
    33 00000FE1 488D3C25[6C000000]  <1>  lea rdi, [%1]
    34 00000FE9 F3A4                <1>  rep movsb
  1064 00000FEB C3                          ret
  1065                                  
  1066                                  ; --------------------------------------------------------------------------------------------
  1067                                  ; RUTINA PARA CHEQUEAR SI LA CASILLA DE ORIGEN DE UN SOLDADO ES UNA POSICI√ìN ESPECIAL
  1068                                  ; --------------------------------------------------------------------------------------------
  1069                                  
  1070                                  chequearSoldPosEspeciales:
  1071 00000FEC B800000000                  mov rax, 0
  1072                                  
  1073 00000FF1 48833C25[94000000]-         cmp qword[fila], 5
  1073 00000FF9 05                 
  1074 00000FFA 752C                        jne noEsLugarEspecial ; Si la fila no es 5, no estamos en una posici√≥n especial
  1075                                  
  1076                                      ; Si la columna es 1 o 2 (fila 5), estamos en una posici√≥n especial: solo podemos movernos a la derecha
  1077 00000FFC 48833C25[9C000000]-         cmp qword[columna], 1
  1077 00001004 01                 
  1078 00001005 7428                        je esLugarEspecialADer 
  1079 00001007 48833C25[9C000000]-         cmp qword[columna], 2
  1079 0000100F 02                 
  1080 00001010 741D                        je esLugarEspecialADer 
  1081                                  
  1082                                      ; Si la columna es 6 o 7 (fila 5), estamos en una posici√≥n especial: solo podemos movernos a la izquierda
  1083 00001012 48833C25[9C000000]-         cmp qword[columna], 6
  1083 0000101A 06                 
  1084 0000101B 740C                        je esLugarEspecialAIzq 
  1085 0000101D 48833C25[9C000000]-         cmp qword[columna], 7
  1085 00001025 07                 
  1086 00001026 7401                        je esLugarEspecialAIzq
  1087                                  
  1088                                      noEsLugarEspecial:
  1089 00001028 C3                              ret
  1090                                  
  1091                                      esLugarEspecialAIzq:
  1092 00001029 B802000000                      mov rax, 2
  1093 0000102E C3                              ret
  1094                                      
  1095                                      esLugarEspecialADer:
  1096 0000102F B801000000                      mov rax, 1
  1097 00001034 C3                              ret
  1098                                  
  1099                                  ; --------------------------------------------------------------------------------------------
  1100                                  ; RUTINA PARA VERIFICAR SI HAY UN SOLDADO EN LA CASILLA DESTINO
  1101                                  ; --------------------------------------------------------------------------------------------
  1102                                  
  1103                                  haySoldado:
  1104                                      ; Calculamos desplazamiento en tablero
  1105                                      mCmp byte[tableroEnJuego+rdi], [simboloSoldados], 1
    38 00001035 B901000000          <1>  mov rcx, %3
    39 0000103A 488DB7[10000000]    <1>  lea rsi, %1
    40 00001041 488D3C25[B30A0000]  <1>  lea rdi, %2
    41 00001049 F3A6                <1>  repe cmpsb
  1106 0000104B 7406                        je okSoldado
  1107                                  
  1108 0000104D B801000000                  mov rax, 1
  1109 00001052 C3                          ret
  1110                                  
  1111                                      okSoldado:
  1112 00001053 B800000000                      mov rax, 0
  1113 00001058 C3                              ret
  1114                                  
  1115                                  ; --------------------------------------------------------------------------------------------
  1116                                  ; RUTINA PARA VERIFICAR SI UN OFICIAL PUEDE SALTAR SOBRE UN SOLDADO
  1117                                  ; --------------------------------------------------------------------------------------------
  1118                                  
  1119                                  sePuedeSaltarSoldado:
  1120 00001059 488B0425[94000000]          mov rax, qword[fila]
  1121 00001061 488B1C25[AC000000]          mov rbx, qword[filaAMover]
  1122 00001069 4829D8                      sub rax, rbx
  1123 0000106C 0F8F07010000                jg saltoHaciaArriba ; Si la fila original es mayor que la fila destino, el salto es hacia arriba
  1124 00001072 0F8CA3010000                jl saltoHaciaAbajo ; Si la fila original es menor que la fila destino, el salto es hacia abajo
  1125                                  
  1126                                      ; Si estamos ac√°, el salto es en la misma fila
  1127 00001078 488B0425[9C000000]          mov rax, qword[columna]
  1128 00001080 488B1C25[B4000000]          mov rbx, qword[columnaAMover]
  1129                                  
  1130 00001088 4829D8                      sub rax, rbx
  1131 0000108B 7F02                        jg saltoHaciaIzq ; Si la columna original es mayor que la columna destino, el salto es hacia la izquierda
  1132 0000108D 7C75                        jl saltoHaciaDer ; Si la columna original es menor que la columna destino, el salto es hacia la derecha
  1133                                  
  1134                                      saltoHaciaIzq:
  1135                                          mMov filaAux, filaAMover, 1
    31 0000108F B901000000          <1>  mov rcx, %3
    32 00001094 488D3425[AC000000]  <1>  lea rsi, [%2]
    33 0000109C 488D3C25[C4000000]  <1>  lea rdi, [%1]
    34 000010A4 F3A4                <1>  rep movsb
  1136                                          mMov columnaAux, columnaAMover, 1
    31 000010A6 B901000000          <1>  mov rcx, %3
    32 000010AB 488D3425[B4000000]  <1>  lea rsi, [%2]
    33 000010B3 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 000010BB F3A4                <1>  rep movsb
  1137 000010BD 48FF0C25[CC000000]              dec qword[columnaAux]
  1138                                  
  1139                                          mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    86 000010C5 488B3C25[C4000000]  <1>  mov rdi, %1
    87 000010CD 488B3425[CC000000]  <1>  mov rsi, %2
    88 000010D5 E89DFDFFFF          <1>  call calcularDesplazamiento
    89 000010DA 48890425[D4000000]  <1>  mov %3, rax
  1140                                          mEstaVacia qword[desplazAux]
    93 000010E2 B800000000          <1>  mov rax, 0
    94 000010E7 488B3C25[D4000000]  <1>  mov rdi, %1
    95 000010EF E86EFDFFFF          <1>  call estaVacia
  1141 000010F4 4883F801                        cmp rax, 1
  1142 000010F8 0F84BB010000                    je saltoInvalido
  1143                                  
  1144 000010FE B800000000                      mov rax, 0
  1145 00001103 C3                              ret
  1146                                  
  1147                                      saltoHaciaDer:
  1148                                          mMov filaAux, filaAMover, 1
    31 00001104 B901000000          <1>  mov rcx, %3
    32 00001109 488D3425[AC000000]  <1>  lea rsi, [%2]
    33 00001111 488D3C25[C4000000]  <1>  lea rdi, [%1]
    34 00001119 F3A4                <1>  rep movsb
  1149                                          mMov columnaAux, columnaAMover, 1
    31 0000111B B901000000          <1>  mov rcx, %3
    32 00001120 488D3425[B4000000]  <1>  lea rsi, [%2]
    33 00001128 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 00001130 F3A4                <1>  rep movsb
  1150 00001132 48FF0425[CC000000]              inc qword[columnaAux]
  1151                                  
  1152                                          mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    86 0000113A 488B3C25[C4000000]  <1>  mov rdi, %1
    87 00001142 488B3425[CC000000]  <1>  mov rsi, %2
    88 0000114A E828FDFFFF          <1>  call calcularDesplazamiento
    89 0000114F 48890425[D4000000]  <1>  mov %3, rax
  1153                                          mEstaVacia qword[desplazAux]
    93 00001157 B800000000          <1>  mov rax, 0
    94 0000115C 488B3C25[D4000000]  <1>  mov rdi, %1
    95 00001164 E8F9FCFFFF          <1>  call estaVacia
  1154 00001169 4883F801                        cmp rax, 1
  1155 0000116D 0F8446010000                    je saltoInvalido
  1156                                  
  1157 00001173 B800000000                      mov rax, 0
  1158 00001178 C3                              ret
  1159                                  
  1160                                      saltoHaciaArriba:
  1161                                          mMov filaAux, filaAMover, 1
    31 00001179 B901000000          <1>  mov rcx, %3
    32 0000117E 488D3425[AC000000]  <1>  lea rsi, [%2]
    33 00001186 488D3C25[C4000000]  <1>  lea rdi, [%1]
    34 0000118E F3A4                <1>  rep movsb
  1162                                          mMov columnaAux, columnaAMover, 1
    31 00001190 B901000000          <1>  mov rcx, %3
    32 00001195 488D3425[B4000000]  <1>  lea rsi, [%2]
    33 0000119D 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 000011A5 F3A4                <1>  rep movsb
  1163 000011A7 48FF0C25[C4000000]              dec qword[filaAux]
  1164                                          
  1165                                          mCmp [columna], [columnaAMover], 1
    38 000011AF B901000000          <1>  mov rcx, %3
    39 000011B4 488D3425[9C000000]  <1>  lea rsi, %1
    40 000011BC 488D3C25[B4000000]  <1>  lea rdi, %2
    41 000011C4 F3A6                <1>  repe cmpsb
  1166 000011C6 7414                            je seguirSaltoArriba ; Si las columnas son iguales, el salto es hacia arriba y en l√≠nea recta
  1167 000011C8 7F0A                            jg haciaArribaIzq ; Si la columna original es mayor que la columna destino, el salto es hacia la izquierda
  1168                                  
  1169 000011CA 48FF0425[CC000000]              inc qword[columnaAux] ; Salto hacia arriba y a la derecha
  1170 000011D2 EB08                            jmp seguirSaltoArriba
  1171                                  
  1172                                          haciaArribaIzq:
  1173 000011D4 48FF0C25[CC000000]                  dec qword[columnaAux] ; Salto hacia arriba y a la izquierda
  1174                                  
  1175                                          seguirSaltoArriba:
  1176                                              mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    86 000011DC 488B3C25[C4000000]  <1>  mov rdi, %1
    87 000011E4 488B3425[CC000000]  <1>  mov rsi, %2
    88 000011EC E886FCFFFF          <1>  call calcularDesplazamiento
    89 000011F1 48890425[D4000000]  <1>  mov %3, rax
  1177                                              mEstaVacia qword[desplazAux]
    93 000011F9 B800000000          <1>  mov rax, 0
    94 000011FE 488B3C25[D4000000]  <1>  mov rdi, %1
    95 00001206 E857FCFFFF          <1>  call estaVacia
  1178 0000120B 4883F801                            cmp rax, 1
  1179 0000120F 0F84A4000000                        je saltoInvalido
  1180                                  
  1181 00001215 B800000000                          mov rax, 0
  1182 0000121A C3                                  ret
  1183                                  
  1184                                      saltoHaciaAbajo:
  1185                                          mMov filaAux, filaAMover, 1
    31 0000121B B901000000          <1>  mov rcx, %3
    32 00001220 488D3425[AC000000]  <1>  lea rsi, [%2]
    33 00001228 488D3C25[C4000000]  <1>  lea rdi, [%1]
    34 00001230 F3A4                <1>  rep movsb
  1186                                          mMov columnaAux, columnaAMover, 1
    31 00001232 B901000000          <1>  mov rcx, %3
    32 00001237 488D3425[B4000000]  <1>  lea rsi, [%2]
    33 0000123F 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 00001247 F3A4                <1>  rep movsb
  1187 00001249 48FF0425[C4000000]              inc qword[filaAux]
  1188                                          
  1189                                          mCmp [columna], [columnaAMover], 1
    38 00001251 B901000000          <1>  mov rcx, %3
    39 00001256 488D3425[9C000000]  <1>  lea rsi, %1
    40 0000125E 488D3C25[B4000000]  <1>  lea rdi, %2
    41 00001266 F3A6                <1>  repe cmpsb
  1190 00001268 7414                            je seguirSaltoAbajo ; Si las columnas son iguales, el salto es hacia abajo y en l√≠nea recta
  1191 0000126A 7F0A                            jg haciaAbajoIzq ; Si la columna original es mayor que la columna destino, el salto es hacia la izquierda
  1192                                  
  1193 0000126C 48FF0425[CC000000]              inc qword[columnaAux] ; Salto hacia abajo y a la derecha
  1194 00001274 EB08                            jmp seguirSaltoAbajo
  1195                                  
  1196                                          haciaAbajoIzq:
  1197 00001276 48FF0C25[CC000000]                  dec qword[columnaAux] ; Salto hacia abajo y a la izquierda
  1198                                  
  1199                                          seguirSaltoAbajo:
  1200                                              mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    86 0000127E 488B3C25[C4000000]  <1>  mov rdi, %1
    87 00001286 488B3425[CC000000]  <1>  mov rsi, %2
    88 0000128E E8E4FBFFFF          <1>  call calcularDesplazamiento
    89 00001293 48890425[D4000000]  <1>  mov %3, rax
  1201                                              mEstaVacia qword[desplazAux]
    93 0000129B B800000000          <1>  mov rax, 0
    94 000012A0 488B3C25[D4000000]  <1>  mov rdi, %1
    95 000012A8 E8B5FBFFFF          <1>  call estaVacia
  1202 000012AD 4883F801                            cmp rax, 1
  1203 000012B1 7406                                je saltoInvalido
  1204                                  
  1205 000012B3 B800000000                          mov rax, 0
  1206 000012B8 C3                                  ret
  1207                                  
  1208                                      saltoInvalido:
  1209 000012B9 B801000000                      mov rax, 1
  1210 000012BE C3                              ret
  1211                                  
  1212 000012BF C3                          ret
  1213                                  
  1214                                  ; --------------------------------------------------------------------------------------------
  1215                                  ; RUTINA PARA CAPTURAR UN SOLDADO
  1216                                  ; --------------------------------------------------------------------------------------------
  1217                                  
  1218                                  capturarSoldado:
  1219 000012C0 488B0425[A4000000]          mov rax, qword[desplazCasOrig] ; Oficial a mover
  1220 000012C8 488B1C25[BC000000]          mov rbx, qword[desplazCasAMover] ; Soldado a capturar
  1221 000012D0 488B0C25[D4000000]          mov rcx, qword[desplazAux] ; Casilla destino del oficial (donde va a quedar)
  1222                                  
  1223 000012D8 C680[10000000]20            mov byte[tableroEnJuego+rax], ' '
  1224 000012DF C683[10000000]20            mov byte[tableroEnJuego+rbx], ' '
  1225                                      
  1226 000012E6 8A1425[B10A0000]            mov dl, byte[simboloOficiales]
  1227 000012ED 8891[10000000]              mov byte[tableroEnJuego+rcx], dl
  1228                                  
  1229 000012F3 48FF0425[710A0000]          inc qword[cantSoldCapturados] ; Aumentamos el contador de capturas
  1230                                  
  1231 000012FB E82C000000                  call verQueOficialEs ; Verificamos qu√© oficial es el que se quiere mover
  1232                                  
  1233 00001300 4883F801                    cmp rax, 1
  1234 00001304 7413                        je movOfic1Captura
  1235                                  
  1236 00001306 48FF0425[A90A0000]          inc qword[cantCapturasOfic2]
  1237 0000130E E808010000                  call actualizarContadoresOfic2
  1238 00001313 E812020000                  call refrescarCasActOficLuegoCaptura
  1239 00001318 C3                          ret
  1240                                  
  1241                                      movOfic1Captura:
  1242 00001319 48FF0425[A10A0000]              inc qword[cantCapturasOfic1]
  1243 00001321 E844000000                      call actualizarContadoresOfic1
  1244 00001326 E8FF010000                      call refrescarCasActOficLuegoCaptura
  1245                                  
  1246 0000132B C3                          ret
  1247                                  
  1248                                  ; --------------------------------------------------------------------------------------------
  1249                                  ; RUTINA PARA VERIFICAR CU√ÅL OFICIAL SE EST√Å MOVIENDO
  1250                                  ; --------------------------------------------------------------------------------------------
  1251                                  
  1252                                  verQueOficialEs:
  1253                                      ; Comenzamos verificando si el oficial 1 es el que se est√° moviendo
  1254                                      mCmp qword[fila], qword[casillaOfic1], 1 ; Fila de la casilla de origen vs. Fila del oficial 1
    38 0000132C B901000000          <1>  mov rcx, %3
    39 00001331 488D3425[94000000]  <1>  lea rsi, %1
    40 00001339 488D3C25[810A0000]  <1>  lea rdi, %2
    41 00001341 F3A6                <1>  repe cmpsb
  1255 00001343 751F                        jne esOfic2 ; Si las filas no son iguales, el oficial 1 no es el que se est√° moviendo
  1256                                      mCmp qword[columna], qword[casillaOfic1+8], 1 ; Columna de la casilla de origen vs. Columna del oficial 1
    38 00001345 B901000000          <1>  mov rcx, %3
    39 0000134A 488D3425[9C000000]  <1>  lea rsi, %1
    40 00001352 488D3C25[890A0000]  <1>  lea rdi, %2
    41 0000135A F3A6                <1>  repe cmpsb
  1257 0000135C 7506                        jne esOfic2 ; Si las columnas no son iguales, el oficial 1 no es el que se est√° moviendo
  1258                                  
  1259 0000135E B801000000                  mov rax, 1 ; es el oficial 1
  1260 00001363 C3                          ret
  1261                                  
  1262                                      esOfic2:
  1263 00001364 B802000000                      mov rax, 2 ; es el oficial 2
  1264                                  
  1265 00001369 C3                          ret
  1266                                  
  1267                                  
  1268                                  ; --------------------------------------------------------------------------------------------
  1269                                  ; RUTINA PARA ACTUALIZAR LOS CONTADORES DE MOVIMIENTOS DE LOS OFICIALES
  1270                                  ; --------------------------------------------------------------------------------------------
  1271                                  
  1272                                  actualizarContadoresOfic1:
  1273 0000136A 48FF0425[D1090000]          inc qword[movimientosOfic1]
  1274 00001372 488B0425[A4000000]          mov rax, qword[desplazCasOrig]
  1275 0000137A 482B0425[BC000000]          sub rax, qword[desplazCasAMover] ; rax = desplazOrigen - desplazDestino
  1276 00001382 4883F801                    cmp rax, 1
  1277 00001386 742B                        je movOfic1Izq
  1278 00001388 4883F8FF                    cmp rax, -1
  1279 0000138C 742E                        je movOfic1Der
  1280 0000138E 4883F80B                    cmp rax, 11
  1281 00001392 7431                        je movOfic1Arriba
  1282 00001394 4883F8F5                    cmp rax, -11
  1283 00001398 7434                        je movOfic1Abajo
  1284 0000139A 4883F80A                    cmp rax, 10
  1285 0000139E 7437                        je movOfic1ArrDer
  1286 000013A0 4883F8F6                    cmp rax, -10
  1287 000013A4 7453                        je movOfic1AbjIzq
  1288 000013A6 4883F80C                    cmp rax, 12
  1289 000013AA 745E                        je movOfic1ArrIzq
  1290 000013AC 4883F8F4                    cmp rax, -12
  1291 000013B0 7436                        je movOfic1AbjDer
  1292                                  
  1293 000013B2 C3                          ret
  1294                                  
  1295                                      movOfic1Izq:
  1296 000013B3 48FF0425[F1090000]              inc qword[movOfic1Izquierda]
  1297 000013BB C3                              ret
  1298                                      movOfic1Der:
  1299 000013BC 48FF0425[E9090000]              inc qword[movOfic1Derecha]
  1300 000013C4 C3                              ret
  1301                                      movOfic1Arriba:
  1302 000013C5 48FF0425[E1090000]              inc qword[movOfic1Adelante]
  1303 000013CD C3                              ret
  1304                                      movOfic1Abajo:
  1305 000013CE 48FF0425[F9090000]              inc qword[movOfic1Atras]
  1306 000013D6 C3                              ret
  1307                                      movOfic1ArrDer:
  1308 000013D7 48FF0425[010A0000]              inc qword[movOfic1Diagonal]
  1309 000013DF 48FF0425[090A0000]              inc qword[movOfic1DiagArribaDer]
  1310 000013E7 C3                              ret
  1311                                      movOfic1AbjDer:
  1312 000013E8 48FF0425[010A0000]              inc qword[movOfic1Diagonal]
  1313 000013F0 48FF0425[190A0000]              inc qword[movOfic1DiagAbajoDer]
  1314 000013F8 C3                              ret
  1315                                      movOfic1AbjIzq:
  1316 000013F9 48FF0425[010A0000]              inc qword[movOfic1Diagonal]
  1317 00001401 48FF0425[210A0000]              inc qword[movOfic1DiagAbajoIzq]
  1318 00001409 C3                              ret
  1319                                      movOfic1ArrIzq:
  1320 0000140A 48FF0425[010A0000]              inc qword[movOfic1Diagonal]
  1321 00001412 48FF0425[110A0000]              inc qword[movOfic1DiagArribaIzq]
  1322 0000141A C3                              ret
  1323                                  
  1324                                  actualizarContadoresOfic2:
  1325 0000141B 48FF0425[D9090000]          inc qword[movimientosOfic2]
  1326 00001423 488B0425[A4000000]          mov rax, qword[desplazCasOrig]
  1327 0000142B 482B0425[BC000000]          sub rax, qword[desplazCasAMover] ; rax = desplazOrigen - desplazDestino
  1328 00001433 4883F801                    cmp rax, 1
  1329 00001437 742B                        je movOfic2Izq
  1330 00001439 4883F8FF                    cmp rax, -1
  1331 0000143D 742E                        je movOfic2Der
  1332 0000143F 4883F80B                    cmp rax, 11
  1333 00001443 7431                        je movOfic2Arriba
  1334 00001445 4883F8F5                    cmp rax, -11
  1335 00001449 7434                        je movOfic2Abajo
  1336 0000144B 4883F80A                    cmp rax, 10
  1337 0000144F 7437                        je movOfic2ArrDer
  1338 00001451 4883F8F6                    cmp rax, -10
  1339 00001455 7453                        je movOfic2AbjIzq
  1340 00001457 4883F80C                    cmp rax, 12
  1341 0000145B 745E                        je movOfic2ArrIzq
  1342 0000145D 4883F8F4                    cmp rax, -12
  1343 00001461 7436                        je movOfic2AbjDer
  1344                                  
  1345 00001463 C3                          ret
  1346                                  
  1347                                      movOfic2Izq:
  1348 00001464 48FF0425[390A0000]              inc qword[movOfic2Izquierda]
  1349 0000146C C3                              ret
  1350                                      movOfic2Der:
  1351 0000146D 48FF0425[310A0000]              inc qword[movOfic2Derecha]
  1352 00001475 C3                              ret
  1353                                      movOfic2Arriba:
  1354 00001476 48FF0425[290A0000]              inc qword[movOfic2Adelante]
  1355 0000147E C3                              ret
  1356                                      movOfic2Abajo:
  1357 0000147F 48FF0425[410A0000]              inc qword[movOfic2Atras]
  1358 00001487 C3                              ret
  1359                                      movOfic2ArrDer:
  1360 00001488 48FF0425[490A0000]              inc qword[movOfic2Diagonal]
  1361 00001490 48FF0425[510A0000]              inc qword[movOfic2DiagArribaDer]
  1362 00001498 C3                              ret
  1363                                      movOfic2AbjDer:
  1364 00001499 48FF0425[490A0000]              inc qword[movOfic2Diagonal]
  1365 000014A1 48FF0425[610A0000]              inc qword[movOfic2DiagAbajoDer]
  1366 000014A9 C3                              ret
  1367                                      movOfic2AbjIzq:
  1368 000014AA 48FF0425[490A0000]              inc qword[movOfic2Diagonal]
  1369 000014B2 48FF0425[690A0000]              inc qword[movOfic2DiagAbajoIzq]
  1370 000014BA C3                              ret
  1371                                      movOfic2ArrIzq:
  1372 000014BB 48FF0425[490A0000]              inc qword[movOfic2Diagonal]
  1373 000014C3 48FF0425[590A0000]              inc qword[movOfic2DiagArribaIzq]
  1374 000014CB C3                              ret
  1375                                  
  1376                                  ; --------------------------------------------------------------------------------------------
  1377                                  ; RUTINA PARA REFRESCAR LA CASILLA ACTUAL DE LOS OFICIALES
  1378                                  ; --------------------------------------------------------------------------------------------
  1379                                  
  1380                                  refrescarCasActOfic1:
  1381                                      mMov casillaOfic1, filaAMover, 1
    31 000014CC B901000000          <1>  mov rcx, %3
    32 000014D1 488D3425[AC000000]  <1>  lea rsi, [%2]
    33 000014D9 488D3C25[810A0000]  <1>  lea rdi, [%1]
    34 000014E1 F3A4                <1>  rep movsb
  1382                                      mMov casillaOfic1+8, columnaAMover, 1
    31 000014E3 B901000000          <1>  mov rcx, %3
    32 000014E8 488D3425[B4000000]  <1>  lea rsi, [%2]
    33 000014F0 488D3C25[890A0000]  <1>  lea rdi, [%1]
    34 000014F8 F3A4                <1>  rep movsb
  1383 000014FA C3                          ret
  1384                                  
  1385                                  refrescarCasActOfic2:
  1386                                      mMov casillaOfic2, filaAMover, 1
    31 000014FB B901000000          <1>  mov rcx, %3
    32 00001500 488D3425[AC000000]  <1>  lea rsi, [%2]
    33 00001508 488D3C25[910A0000]  <1>  lea rdi, [%1]
    34 00001510 F3A4                <1>  rep movsb
  1387                                      mMov casillaOfic2+8, columnaAMover, 1
    31 00001512 B901000000          <1>  mov rcx, %3
    32 00001517 488D3425[B4000000]  <1>  lea rsi, [%2]
    33 0000151F 488D3C25[990A0000]  <1>  lea rdi, [%1]
    34 00001527 F3A4                <1>  rep movsb
  1388 00001529 C3                          ret    
  1389                                  
  1390                                  refrescarCasActOficLuegoCaptura:
  1391 0000152A 488B0425[BC000000]          mov rax, qword[desplazCasAMover]
  1392 00001532 488B1C25[D4000000]          mov rbx, qword[desplazAux]
  1393 0000153A 4829D8                      sub rax, rbx ; rax = desplazCasAMover - desplazAux
  1394                                  
  1395 0000153D 4883F801                    cmp rax, 1
  1396 00001541 742A                        je saltoIzq
  1397 00001543 4883F8FF                    cmp rax, -1
  1398 00001547 742E                        je saltoDer
  1399 00001549 4883F80B                    cmp rax, 11
  1400 0000154D 7432                        je saltoArriba
  1401 0000154F 4883F8F5                    cmp rax, -11
  1402 00001553 7436                        je saltoAbajo
  1403 00001555 4883F80A                    cmp rax, 10
  1404 00001559 743A                        je saltoArrDer
  1405 0000155B 4883F8F6                    cmp rax, -10
  1406 0000155F 7446                        je saltoAbjIzq
  1407 00001561 4883F80C                    cmp rax, 12
  1408 00001565 7452                        je saltoArrIzq
  1409 00001567 4883F8F4                    cmp rax, -12
  1410 0000156B 745E                        je saltoAbjDer
  1411                                  
  1412                                      saltoIzq:
  1413 0000156D 48FF0C25[B4000000]              dec qword[columnaAMover]
  1414 00001575 EB64                            jmp finRefrescarCasActOfic
  1415                                      saltoDer:
  1416 00001577 48FF0425[B4000000]              inc qword[columnaAMover]
  1417 0000157F EB5A                            jmp finRefrescarCasActOfic
  1418                                      saltoArriba:
  1419 00001581 48FF0C25[AC000000]              dec qword[filaAMover]
  1420 00001589 EB50                            jmp finRefrescarCasActOfic
  1421                                      saltoAbajo:
  1422 0000158B 48FF0425[AC000000]              inc qword[filaAMover]
  1423 00001593 EB46                            jmp finRefrescarCasActOfic
  1424                                      saltoArrDer:
  1425 00001595 48FF0C25[AC000000]              dec qword[filaAMover]
  1426 0000159D 48FF0425[B4000000]              inc qword[columnaAMover]
  1427 000015A5 EB34                            jmp finRefrescarCasActOfic
  1428                                      saltoAbjIzq:
  1429 000015A7 48FF0425[AC000000]              inc qword[filaAMover]
  1430 000015AF 48FF0C25[B4000000]              dec qword[columnaAMover]
  1431 000015B7 EB22                            jmp finRefrescarCasActOfic
  1432                                      saltoArrIzq:
  1433 000015B9 48FF0C25[AC000000]              dec qword[filaAMover]
  1434 000015C1 48FF0C25[B4000000]              dec qword[columnaAMover]
  1435 000015C9 EB10                            jmp finRefrescarCasActOfic
  1436                                      saltoAbjDer:
  1437 000015CB 48FF0425[AC000000]              inc qword[filaAMover]
  1438 000015D3 48FF0425[B4000000]              inc qword[columnaAMover]
  1439                                  
  1440                                      finRefrescarCasActOfic:
  1441 000015DB E84CFDFFFF                      call verQueOficialEs
  1442                                  
  1443 000015E0 4883F801                        cmp rax, 1
  1444 000015E4 7406                            je actualizarOfic1
  1445                                  
  1446 000015E6 E810FFFFFF                      call refrescarCasActOfic2
  1447 000015EB C3                              ret
  1448                                  
  1449                                          actualizarOfic1:
  1450 000015EC E8DBFEFFFF                          call refrescarCasActOfic1
  1451                                  
  1452 000015F1 C3                          ret
  1453                                  
  1454                                  
  1455                                  
  1456                                  ; --------------------------------------------------------------------------------------------
  1457                                  ; RUTINA PARA VERIFICAR SI UN OFICIAL POD√çA CAPTURAR UN SOLDADO Y NO LO HIZO
  1458                                  ; --------------------------------------------------------------------------------------------
  1459                                  
  1460                                  podiaCapturarSoldado:
  1461                                      mMov desplazAux, desplazAux2, 1
    31 000015F2 B901000000          <1>  mov rcx, %3
    32 000015F7 488D3425[DC000000]  <1>  lea rsi, [%2]
    33 000015FF 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 00001607 F3A4                <1>  rep movsb
  1462                                  
  1463                                      ; Casilla arriba-izquierda
  1464 00001609 48832C25[D4000000]-         sub qword[desplazAux], 12
  1464 00001611 0C                 
  1465                                      mHaySoldado qword[desplazAux]
    99 00001612 B800000000          <1>  mov rax, 0
   100 00001617 488B3C25[D4000000]  <1>  mov rdi, %1
   101 0000161F E811FAFFFF          <1>  call haySoldado
  1466 00001624 4883F800                    cmp rax, 0
  1467 00001628 7519                        jne verCasArriba
  1468                                  
  1469                                      mPuedeCapturar 12, 1 ; restar 12 a desplazAux
   105 0000162A BF0C000000          <1>  mov rdi, %1
   106 0000162F BE01000000          <1>  mov rsi, %2
   107 00001634 E845020000          <1>  call podiaComerPieza
  1470 00001639 4883F800                    cmp rax, 0
  1471 0000163D 0F8435020000                je podiaCapturar
  1472                                  
  1473                                      ; Casilla arriba
  1474                                      verCasArriba:
  1475                                          mMov desplazAux, desplazAux2, 1
    31 00001643 B901000000          <1>  mov rcx, %3
    32 00001648 488D3425[DC000000]  <1>  lea rsi, [%2]
    33 00001650 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 00001658 F3A4                <1>  rep movsb
  1476 0000165A 48832C25[D4000000]-             sub qword[desplazAux], 11
  1476 00001662 0B                 
  1477                                          mHaySoldado qword[desplazAux]
    99 00001663 B800000000          <1>  mov rax, 0
   100 00001668 488B3C25[D4000000]  <1>  mov rdi, %1
   101 00001670 E8C0F9FFFF          <1>  call haySoldado
  1478 00001675 4883F800                        cmp rax, 0
  1479 00001679 7519                            jne verCasArribaDer
  1480                                  
  1481                                          mPuedeCapturar 11, 1 ; restar 11 a desplazAux
   105 0000167B BF0B000000          <1>  mov rdi, %1
   106 00001680 BE01000000          <1>  mov rsi, %2
   107 00001685 E8F4010000          <1>  call podiaComerPieza
  1482 0000168A 4883F800                        cmp rax, 0
  1483 0000168E 0F84E4010000                    je podiaCapturar
  1484                                  
  1485                                      ; Casilla arriba-derecha
  1486                                      verCasArribaDer:
  1487                                          mMov desplazAux, desplazAux2, 1
    31 00001694 B901000000          <1>  mov rcx, %3
    32 00001699 488D3425[DC000000]  <1>  lea rsi, [%2]
    33 000016A1 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 000016A9 F3A4                <1>  rep movsb
  1488 000016AB 48832C25[D4000000]-             sub qword[desplazAux], 10
  1488 000016B3 0A                 
  1489                                          mHaySoldado qword[desplazAux]
    99 000016B4 B800000000          <1>  mov rax, 0
   100 000016B9 488B3C25[D4000000]  <1>  mov rdi, %1
   101 000016C1 E86FF9FFFF          <1>  call haySoldado
  1490 000016C6 4883F800                        cmp rax, 0
  1491 000016CA 7519                            jne verCasIzq
  1492                                          
  1493                                          mPuedeCapturar 10, 1 ; restar 10 a desplazAux
   105 000016CC BF0A000000          <1>  mov rdi, %1
   106 000016D1 BE01000000          <1>  mov rsi, %2
   107 000016D6 E8A3010000          <1>  call podiaComerPieza
  1494 000016DB 4883F800                        cmp rax, 0
  1495 000016DF 0F8493010000                    je podiaCapturar
  1496                                  
  1497                                      ; Casilla izquierda
  1498                                      verCasIzq:
  1499                                          mMov desplazAux, desplazAux2, 1
    31 000016E5 B901000000          <1>  mov rcx, %3
    32 000016EA 488D3425[DC000000]  <1>  lea rsi, [%2]
    33 000016F2 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 000016FA F3A4                <1>  rep movsb
  1500 000016FC 48832C25[D4000000]-             sub qword[desplazAux], 1
  1500 00001704 01                 
  1501                                          mHaySoldado qword[desplazAux]
    99 00001705 B800000000          <1>  mov rax, 0
   100 0000170A 488B3C25[D4000000]  <1>  mov rdi, %1
   101 00001712 E81EF9FFFF          <1>  call haySoldado
  1502 00001717 4883F800                        cmp rax, 0
  1503 0000171B 7519                            jne verCasDer
  1504                                          
  1505                                          mPuedeCapturar 1, 1 ; restar 1 a desplazAux
   105 0000171D BF01000000          <1>  mov rdi, %1
   106 00001722 BE01000000          <1>  mov rsi, %2
   107 00001727 E852010000          <1>  call podiaComerPieza
  1506 0000172C 4883F800                        cmp rax, 0
  1507 00001730 0F8442010000                    je podiaCapturar
  1508                                  
  1509                                      ; Casilla derecha
  1510                                      verCasDer:
  1511                                          mMov desplazAux, desplazAux2, 1
    31 00001736 B901000000          <1>  mov rcx, %3
    32 0000173B 488D3425[DC000000]  <1>  lea rsi, [%2]
    33 00001743 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 0000174B F3A4                <1>  rep movsb
  1512 0000174D 48830425[D4000000]-             add qword[desplazAux], 1
  1512 00001755 01                 
  1513                                          mHaySoldado qword[desplazAux]
    99 00001756 B800000000          <1>  mov rax, 0
   100 0000175B 488B3C25[D4000000]  <1>  mov rdi, %1
   101 00001763 E8CDF8FFFF          <1>  call haySoldado
  1514 00001768 4883F800                        cmp rax, 0
  1515 0000176C 7519                            jne verCasAbajoIzq
  1516                                          
  1517                                          mPuedeCapturar 1, 0 ; sumar 1 a desplazAux
   105 0000176E BF01000000          <1>  mov rdi, %1
   106 00001773 BE00000000          <1>  mov rsi, %2
   107 00001778 E801010000          <1>  call podiaComerPieza
  1518 0000177D 4883F800                        cmp rax, 0
  1519 00001781 0F84F1000000                    je podiaCapturar
  1520                                  
  1521                                      ; Casilla abajo-izquierda
  1522                                      verCasAbajoIzq:
  1523                                          mMov desplazAux, desplazAux2, 1
    31 00001787 B901000000          <1>  mov rcx, %3
    32 0000178C 488D3425[DC000000]  <1>  lea rsi, [%2]
    33 00001794 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 0000179C F3A4                <1>  rep movsb
  1524 0000179E 48830425[D4000000]-             add qword[desplazAux], 10
  1524 000017A6 0A                 
  1525                                          mHaySoldado qword[desplazAux]
    99 000017A7 B800000000          <1>  mov rax, 0
   100 000017AC 488B3C25[D4000000]  <1>  mov rdi, %1
   101 000017B4 E87CF8FFFF          <1>  call haySoldado
  1526 000017B9 4883F800                        cmp rax, 0
  1527 000017BD 7519                            jne verCasAbajo
  1528                                          
  1529                                          mPuedeCapturar 10, 0 ; sumar 10 a desplazAux
   105 000017BF BF0A000000          <1>  mov rdi, %1
   106 000017C4 BE00000000          <1>  mov rsi, %2
   107 000017C9 E8B0000000          <1>  call podiaComerPieza
  1530 000017CE 4883F800                        cmp rax, 0
  1531 000017D2 0F84A0000000                    je podiaCapturar
  1532                                  
  1533                                      ; Casilla abajo
  1534                                      verCasAbajo:
  1535                                          mMov desplazAux, desplazAux2, 1
    31 000017D8 B901000000          <1>  mov rcx, %3
    32 000017DD 488D3425[DC000000]  <1>  lea rsi, [%2]
    33 000017E5 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 000017ED F3A4                <1>  rep movsb
  1536 000017EF 48830425[D4000000]-             add qword[desplazAux], 11
  1536 000017F7 0B                 
  1537                                          mHaySoldado qword[desplazAux]
    99 000017F8 B800000000          <1>  mov rax, 0
   100 000017FD 488B3C25[D4000000]  <1>  mov rdi, %1
   101 00001805 E82BF8FFFF          <1>  call haySoldado
  1538 0000180A 4883F800                        cmp rax, 0
  1539 0000180E 7515                            jne verCasAbajoDer
  1540                                          
  1541                                          mPuedeCapturar 11, 0 ; sumar 11 a desplazAux
   105 00001810 BF0B000000          <1>  mov rdi, %1
   106 00001815 BE00000000          <1>  mov rsi, %2
   107 0000181A E85F000000          <1>  call podiaComerPieza
  1542 0000181F 4883F800                        cmp rax, 0
  1543 00001823 7453                            je podiaCapturar
  1544                                  
  1545                                      ; Casilla abajo-derecha
  1546                                      verCasAbajoDer:
  1547                                          mMov desplazAux, desplazAux2, 1
    31 00001825 B901000000          <1>  mov rcx, %3
    32 0000182A 488D3425[DC000000]  <1>  lea rsi, [%2]
    33 00001832 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 0000183A F3A4                <1>  rep movsb
  1548 0000183C 48830425[D4000000]-             add qword[desplazAux], 12
  1548 00001844 0C                 
  1549                                          mHaySoldado qword[desplazAux]
    99 00001845 B800000000          <1>  mov rax, 0
   100 0000184A 488B3C25[D4000000]  <1>  mov rdi, %1
   101 00001852 E8DEF7FFFF          <1>  call haySoldado
  1550 00001857 4883F800                        cmp rax, 0
  1551 0000185B 7515                            jne okNoPodiaCapturar
  1552                                          
  1553                                          mPuedeCapturar 12, 0 ; sumar 12 a desplazAux
   105 0000185D BF0C000000          <1>  mov rdi, %1
   106 00001862 BE00000000          <1>  mov rsi, %2
   107 00001867 E812000000          <1>  call podiaComerPieza
  1554 0000186C 4883F800                        cmp rax, 0
  1555 00001870 7406                            je podiaCapturar
  1556                                      
  1557                                      okNoPodiaCapturar:
  1558 00001872 B801000000                      mov rax, 1
  1559 00001877 C3                              ret
  1560                                      
  1561                                      podiaCapturar:
  1562 00001878 B800000000                      mov rax, 0
  1563                                  
  1564 0000187D C3                          ret
  1565                                  
  1566                                  podiaComerPieza:
  1567 0000187E 4883FE00                    cmp rsi, 0
  1568 00001882 740A                        je sumarDesplaz 
  1569 00001884 48293C25[D4000000]          sub qword[desplazAux], rdi
  1570 0000188C EB08                        jmp verSiEspacioEstaLibre
  1571                                  
  1572                                      sumarDesplaz:
  1573 0000188E 48013C25[D4000000]              add qword[desplazAux], rdi
  1574                                  
  1575                                      verSiEspacioEstaLibre:
  1576                                          mEstaVacia qword[desplazAux]
    93 00001896 B800000000          <1>  mov rax, 0
    94 0000189B 488B3C25[D4000000]  <1>  mov rdi, %1
    95 000018A3 E8BAF5FFFF          <1>  call estaVacia
  1577 000018A8 4883F800                        cmp rax, 0
  1578 000018AC 7406                            je okComerPieza
  1579                                  
  1580 000018AE B801000000                      mov rax, 1
  1581 000018B3 C3                              ret
  1582                                  
  1583                                      okComerPieza:
  1584 000018B4 B800000000                      mov rax, 0
  1585 000018B9 C3                              ret
  1586                                  
  1587                                  ; --------------------------------------------------------------------------------------------
  1588                                  ; RUTINA PARA QUITAR AL OFICIAL QUE SE DESPREOCUP√ì DE CAPTURAR SOLDADOS
  1589                                  ; --------------------------------------------------------------------------------------------
  1590                                  
  1591                                  desentenderOficial:
  1592 000018BA 488B1C25[D4000000]          mov rbx, qword[desplazAux]
  1593 000018C2 BA20000000                  mov rdx, ' '
  1594 000018C7 8893[10000000]              mov byte[tableroEnJuego+rbx], dl
  1595                                  
  1596 000018CD E85AFAFFFF                  call verQueOficialEs ; Verificamos qu√© oficial es el que se quiere mover
  1597                                  
  1598 000018D2 4883F801                    cmp rax, 1
  1599 000018D6 741A                        je desentenderOfic1
  1600                                  
  1601                                      desentenderOfic2:
  1602 000018D8 48C70425[910A0000]-             mov qword[casillaOfic2], 0
  1602 000018E0 00000000           
  1603 000018E4 48C70425[990A0000]-             mov qword[casillaOfic2+8], 0
  1603 000018EC 00000000           
  1604 000018F0 EB18                            jmp agregarOficDesentendido
  1605                                  
  1606                                      desentenderOfic1:
  1607 000018F2 48C70425[810A0000]-             mov qword[casillaOfic1], 0
  1607 000018FA 00000000           
  1608 000018FE 48C70425[890A0000]-             mov qword[casillaOfic1+8], 0
  1608 00001906 00000000           
  1609                                  
  1610                                      agregarOficDesentendido:
  1611 0000190A 48FF0425[790A0000]              inc qword[cantOficInvalidados]
  1612                                      
  1613 00001912 C3                          ret
  1614                                      
  1615                                  ; --------------------------------------------------------------------------------------------
  1616                                  ; RUTINA PARA VERIFICAR SI EL OTRO OFICIAL POD√çA CAPTURAR UN SOLDADO Y NO LO HIZO
  1617                                  ; --------------------------------------------------------------------------------------------
  1618                                  
  1619                                  podiaCapturarSoldadoOtroOficial:
  1620 00001913 E814FAFFFF                  call verQueOficialEs ; Verificamos qu√© oficial es el que se quiere mover
  1621 00001918 4883F801                    cmp rax, 1
  1622 0000191C 742A                        je verificarOfic2
  1623                                  
  1624                                      verificarOfic1:
  1625                                          mCalcDesplaz qword[casillaOfic1], qword[casillaOfic1+8], qword[desplazAux2]
    86 0000191E 488B3C25[810A0000]  <1>  mov rdi, %1
    87 00001926 488B3425[890A0000]  <1>  mov rsi, %2
    88 0000192E E844F5FFFF          <1>  call calcularDesplazamiento
    89 00001933 48890425[DC000000]  <1>  mov %3, rax
  1626 0000193B E8B2FCFFFF                      call podiaCapturarSoldado
  1627 00001940 4883F800                        cmp rax, 0
  1628 00001944 742C                            je okPodiaComerElOtro
  1629 00001946 EB30                            jmp noPodiaComerElOtro
  1630                                      
  1631                                      verificarOfic2:
  1632                                          mCalcDesplaz qword[casillaOfic2], qword[casillaOfic2+8], qword[desplazAux2]
    86 00001948 488B3C25[910A0000]  <1>  mov rdi, %1
    87 00001950 488B3425[990A0000]  <1>  mov rsi, %2
    88 00001958 E81AF5FFFF          <1>  call calcularDesplazamiento
    89 0000195D 48890425[DC000000]  <1>  mov %3, rax
  1633 00001965 E888FCFFFF                      call podiaCapturarSoldado
  1634 0000196A 4883F800                        cmp rax, 0
  1635 0000196E 7402                            je okPodiaComerElOtro
  1636 00001970 EB06                            jmp noPodiaComerElOtro
  1637                                  
  1638                                      okPodiaComerElOtro:
  1639 00001972 B800000000                      mov rax, 0
  1640 00001977 C3                              ret
  1641                                  
  1642                                      noPodiaComerElOtro:
  1643 00001978 B801000000                      mov rax, 1
  1644                                  
  1645 0000197D C3                          ret
  1646                                  
  1647                                  ; --------------------------------------------------------------------------------------------
  1648                                  ; RUTINA PARA INVALIDAR AL OTRO OFICIAL QUE NO SE MOVI√ì (el cual pod√≠a capturar un soldado)
  1649                                  ; --------------------------------------------------------------------------------------------
  1650                                  
  1651                                  desentenderOtroOficial:
  1652 0000197E E8A9F9FFFF                  call verQueOficialEs ; Verificamos qu√© oficial es el que se quiere mover
  1653                                  
  1654 00001983 4883F801                    cmp rax, 1
  1655 00001987 7423                        je otroEsOfic2
  1656                                  
  1657                                      otroEsOfic1:
  1658                                          mCalcDesplaz qword[casillaOfic1], qword[casillaOfic1+8], qword[desplazAux]
    86 00001989 488B3C25[810A0000]  <1>  mov rdi, %1
    87 00001991 488B3425[890A0000]  <1>  mov rsi, %2
    88 00001999 E8D9F4FFFF          <1>  call calcularDesplazamiento
    89 0000199E 48890425[D4000000]  <1>  mov %3, rax
  1659 000019A6 E80FFFFFFF                      call desentenderOficial
  1660 000019AB C3                              ret
  1661                                  
  1662                                      otroEsOfic2:
  1663                                          mCalcDesplaz qword[casillaOfic2], qword[casillaOfic2+8], qword[desplazAux]
    86 000019AC 488B3C25[910A0000]  <1>  mov rdi, %1
    87 000019B4 488B3425[990A0000]  <1>  mov rsi, %2
    88 000019BC E8B6F4FFFF          <1>  call calcularDesplazamiento
    89 000019C1 48890425[D4000000]  <1>  mov %3, rax
  1664 000019C9 E8ECFEFFFF                      call desentenderOficial
  1665                                      
  1666 000019CE C3                          ret
  1667                                  
  1668                                  ; --------------------------------------------------------------------------------------------
  1669                                  ; RUTINA PARA VER SI EL MOVIMIENTO DE UN OFICIAL RESULTA EN EL FIN DEL JUEGO
  1670                                  ; --------------------------------------------------------------------------------------------
  1671                                  
  1672                                  verificarFinJuegoOficiales:
  1673                                      ; Verificamos si ambos oficiales han sido invalidados
  1674 000019CF 48833C25[790A0000]-         cmp qword[cantOficInvalidados], 2
  1674 000019D7 02                 
  1675 000019D8 7411                        je finInvalidados
  1676                                  
  1677                                      ; Verificamos que los oficiales hayan capturado necesarios soldados para ganar
  1678 000019DA 48833C25[710A0000]-         cmp qword[cantSoldCapturados], 16
  1678 000019E2 10                 
  1679 000019E3 7413                        je finSoldCapturados
  1680                                  
  1681 000019E5 B801000000                  mov rax, 1
  1682 000019EA C3                          ret
  1683                                  
  1684                                      finInvalidados:
  1685 000019EB C70425[2B070000]6F-             mov dword[varRazonFin], "oInv"
  1685 000019F3 496E76             
  1686 000019F6 EB0B                            jmp hayFinJuegoOfic
  1687                                  
  1688                                      finSoldCapturados:
  1689 000019F8 C70425[2B070000]73-             mov dword[varRazonFin], "sCap"
  1689 00001A00 436170             
  1690                                  
  1691                                      hayFinJuegoOfic:
  1692 00001A03 B800000000                      mov rax, 0
  1693 00001A08 C3                              ret
  1694                                  
  1695                                  ; --------------------------------------------------------------------------------------------
  1696                                  ; RUTINA PARA VERIFICAR SI EL MOVIMIENTO DE UN SOLDADO RESULTA EN EL FIN DEL JUEGO
  1697                                  ; --------------------------------------------------------------------------------------------
  1698                                  
  1699                                  verificarFinJuegoSoldados:
  1700 00001A09 E835000000                  call soldadosOcupanFortaleza
  1701 00001A0E 4883F800                    cmp rax, 0
  1702 00001A12 7411                        je finOcupFortaleza
  1703                                  
  1704 00001A14 E827010000                  call oficialesRodeados
  1705 00001A19 4883F800                    cmp rax, 0
  1706 00001A1D 7413                        je finOficRodeados
  1707                                  
  1708 00001A1F B801000000                  mov rax, 1
  1709 00001A24 C3                          ret
  1710                                  
  1711                                      finOcupFortaleza:
  1712 00001A25 C70425[2B070000]73-             mov dword[varRazonFin], "sOcu"
  1712 00001A2D 4F6375             
  1713 00001A30 EB0B                            jmp hayFinJuegoSold
  1714                                  
  1715                                      finOficRodeados:
  1716 00001A32 C70425[2B070000]6F-             mov dword[varRazonFin], "oRod"
  1716 00001A3A 526F64             
  1717                                  
  1718                                      hayFinJuegoSold:
  1719 00001A3D B800000000                      mov rax, 0
  1720 00001A42 C3                              ret
  1721                                  
  1722                                  ; --------------------------------------------------------------------------------------------
  1723                                  ; RUTINA PARA VERIFICAR SI LOS SOLDADOS OCUPAN LA FORTALEZA
  1724                                  ; --------------------------------------------------------------------------------------------
  1725                                  
  1726                                  soldadosOcupanFortaleza:
  1727                                      mCmp byte[tableroEnJuego+70], [simboloSoldados], 1 ; Fortaleza 1-1
    38 00001A43 B901000000          <1>  mov rcx, %3
    39 00001A48 488D3425[56000000]  <1>  lea rsi, %1
    40 00001A50 488D3C25[B30A0000]  <1>  lea rdi, %2
    41 00001A58 F3A6                <1>  repe cmpsb
  1728 00001A5A 0F85DA000000                jne noOcupaFortaleza
  1729                                      mCmp byte[tableroEnJuego+71], [simboloSoldados], 1 ; Fortaleza 1-2
    38 00001A60 B901000000          <1>  mov rcx, %3
    39 00001A65 488D3425[57000000]  <1>  lea rsi, %1
    40 00001A6D 488D3C25[B30A0000]  <1>  lea rdi, %2
    41 00001A75 F3A6                <1>  repe cmpsb
  1730 00001A77 0F85BD000000                jne noOcupaFortaleza
  1731                                      mCmp byte[tableroEnJuego+72], [simboloSoldados], 1 ; Fortaleza 1-3
    38 00001A7D B901000000          <1>  mov rcx, %3
    39 00001A82 488D3425[58000000]  <1>  lea rsi, %1
    40 00001A8A 488D3C25[B30A0000]  <1>  lea rdi, %2
    41 00001A92 F3A6                <1>  repe cmpsb
  1732 00001A94 0F85A0000000                jne noOcupaFortaleza
  1733                                      mCmp byte[tableroEnJuego+81], [simboloSoldados], 1 ; Fortaleza 2-1
    38 00001A9A B901000000          <1>  mov rcx, %3
    39 00001A9F 488D3425[61000000]  <1>  lea rsi, %1
    40 00001AA7 488D3C25[B30A0000]  <1>  lea rdi, %2
    41 00001AAF F3A6                <1>  repe cmpsb
  1734 00001AB1 0F8583000000                jne noOcupaFortaleza
  1735                                      mCmp byte[tableroEnJuego+82], [simboloSoldados], 1 ; Fortaleza 2-2
    38 00001AB7 B901000000          <1>  mov rcx, %3
    39 00001ABC 488D3425[62000000]  <1>  lea rsi, %1
    40 00001AC4 488D3C25[B30A0000]  <1>  lea rdi, %2
    41 00001ACC F3A6                <1>  repe cmpsb
  1736 00001ACE 756A                        jne noOcupaFortaleza
  1737                                      mCmp byte[tableroEnJuego+83], [simboloSoldados], 1 ; Fortaleza 2-3
    38 00001AD0 B901000000          <1>  mov rcx, %3
    39 00001AD5 488D3425[63000000]  <1>  lea rsi, %1
    40 00001ADD 488D3C25[B30A0000]  <1>  lea rdi, %2
    41 00001AE5 F3A6                <1>  repe cmpsb
  1738 00001AE7 7551                        jne noOcupaFortaleza
  1739                                      mCmp byte[tableroEnJuego+92], [simboloSoldados], 1 ; Fortaleza 3-1
    38 00001AE9 B901000000          <1>  mov rcx, %3
    39 00001AEE 488D3425[6C000000]  <1>  lea rsi, %1
    40 00001AF6 488D3C25[B30A0000]  <1>  lea rdi, %2
    41 00001AFE F3A6                <1>  repe cmpsb
  1740 00001B00 7538                        jne noOcupaFortaleza
  1741                                      mCmp byte[tableroEnJuego+93], [simboloSoldados], 1 ; Fortaleza 3-2
    38 00001B02 B901000000          <1>  mov rcx, %3
    39 00001B07 488D3425[6D000000]  <1>  lea rsi, %1
    40 00001B0F 488D3C25[B30A0000]  <1>  lea rdi, %2
    41 00001B17 F3A6                <1>  repe cmpsb
  1742 00001B19 751F                        jne noOcupaFortaleza
  1743                                      mCmp byte[tableroEnJuego+94], [simboloSoldados], 1 ; Fortaleza 3-3
    38 00001B1B B901000000          <1>  mov rcx, %3
    39 00001B20 488D3425[6E000000]  <1>  lea rsi, %1
    40 00001B28 488D3C25[B30A0000]  <1>  lea rdi, %2
    41 00001B30 F3A6                <1>  repe cmpsb
  1744 00001B32 7506                        jne noOcupaFortaleza
  1745                                  
  1746 00001B34 B800000000                  mov rax, 0
  1747 00001B39 C3                          ret
  1748                                  
  1749                                      noOcupaFortaleza:
  1750 00001B3A B801000000                      mov rax, 1
  1751                                  
  1752 00001B3F C3                          ret
  1753                                  
  1754                                  ; --------------------------------------------------------------------------------------------
  1755                                  ; RUTINA PARA VERIFICAR SI LOS OFICIALES EST√ÅN RODEADOS POR SOLDADOS
  1756                                  ; --------------------------------------------------------------------------------------------
  1757                                  
  1758                                  oficialesRodeados:
  1759 00001B40 E8F8030000                  call ofic1Desentendido
  1760 00001B45 4883F800                    cmp rax, 0
  1761 00001B49 740B                        je rodeanAOfic2
  1762 00001B4B E828000000                  call verSiOfic1Rodeado
  1763 00001B50 4883F800                    cmp rax, 0
  1764 00001B54 751C                        jne tienenSalida
  1765                                  
  1766                                      rodeanAOfic2:
  1767 00001B56 E8F9030000                      call ofic2Desentendido
  1768 00001B5B 4883F800                        cmp rax, 0
  1769 00001B5F 740B                            je noHaySalida
  1770 00001B61 E84C000000                      call verSiOfic2Rodeado
  1771 00001B66 4883F800                        cmp rax, 0
  1772 00001B6A 7506                            jne tienenSalida
  1773                                  
  1774                                      noHaySalida:
  1775 00001B6C B800000000                      mov rax, 0
  1776 00001B71 C3                              ret
  1777                                  
  1778                                      tienenSalida:
  1779 00001B72 B801000000                      mov rax, 1
  1780                                  
  1781 00001B77 C3                          ret
  1782                                  
  1783                                  verSiOfic1Rodeado:
  1784                                      mCalcDesplaz qword[casillaOfic1], qword[casillaOfic1+8], qword[desplazAux]
    86 00001B78 488B3C25[810A0000]  <1>  mov rdi, %1
    87 00001B80 488B3425[890A0000]  <1>  mov rsi, %2
    88 00001B88 E8EAF2FFFF          <1>  call calcularDesplazamiento
    89 00001B8D 48890425[D4000000]  <1>  mov %3, rax
  1785                                      mMov desplazAux2, desplazAux, 1
    31 00001B95 B901000000          <1>  mov rcx, %3
    32 00001B9A 488D3425[D4000000]  <1>  lea rsi, [%2]
    33 00001BA2 488D3C25[DC000000]  <1>  lea rdi, [%1]
    34 00001BAA F3A4                <1>  rep movsb
  1786 00001BAC E83B000000                  call verSiOficialRodeado
  1787 00001BB1 C3                          ret
  1788                                  
  1789                                  verSiOfic2Rodeado:
  1790                                      mCalcDesplaz qword[casillaOfic2], qword[casillaOfic2+8], qword[desplazAux]
    86 00001BB2 488B3C25[910A0000]  <1>  mov rdi, %1
    87 00001BBA 488B3425[990A0000]  <1>  mov rsi, %2
    88 00001BC2 E8B0F2FFFF          <1>  call calcularDesplazamiento
    89 00001BC7 48890425[D4000000]  <1>  mov %3, rax
  1791                                      mMov desplazAux2, desplazAux, 1
    31 00001BCF B901000000          <1>  mov rcx, %3
    32 00001BD4 488D3425[D4000000]  <1>  lea rsi, [%2]
    33 00001BDC 488D3C25[DC000000]  <1>  lea rdi, [%1]
    34 00001BE4 F3A4                <1>  rep movsb
  1792 00001BE6 E801000000                  call verSiOficialRodeado
  1793 00001BEB C3                          ret
  1794                                  
  1795                                  verSiOficialRodeado:
  1796                                      ; Casilla arriba-izquierda
  1797 00001BEC 48832C25[D4000000]-         sub qword[desplazAux], 12
  1797 00001BF4 0C                 
  1798                                      mEstaVacia qword[desplazAux]
    93 00001BF5 B800000000          <1>  mov rax, 0
    94 00001BFA 488B3C25[D4000000]  <1>  mov rdi, %1
    95 00001C02 E85BF2FFFF          <1>  call estaVacia
  1799 00001C07 4883F800                    cmp rax, 0 ; Si el oficial tiene una casilla vac√≠a, puede moverse -> no est√° rodeado 
  1800 00001C0B 0F8426030000                je okPuedeMoverse
  1801                                      mHaySoldado qword[desplazAux]
    99 00001C11 B800000000          <1>  mov rax, 0
   100 00001C16 488B3C25[D4000000]  <1>  mov rdi, %1
   101 00001C1E E812F4FFFF          <1>  call haySoldado
  1802 00001C23 4883F801                    cmp rax, 1 ; Si no hay soldado, significa que es un l√≠mite del tablero -> me fijo en otra casilla
  1803 00001C27 7419                        je verEspacioArr
  1804                                      mPuedeCapturar 12, 1 ; restar 12 a desplazAux
   105 00001C29 BF0C000000          <1>  mov rdi, %1
   106 00001C2E BE01000000          <1>  mov rsi, %2
   107 00001C33 E846FCFFFF          <1>  call podiaComerPieza
  1805 00001C38 4883F800                    cmp rax, 0 ; Si el oficial puede capturar un soldado, no est√° rodeado
  1806 00001C3C 0F84F5020000                je okPuedeMoverse
  1807                                  
  1808                                      ; Casilla arriba
  1809                                      verEspacioArr:
  1810                                          mMov desplazAux, desplazAux2, 1
    31 00001C42 B901000000          <1>  mov rcx, %3
    32 00001C47 488D3425[DC000000]  <1>  lea rsi, [%2]
    33 00001C4F 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 00001C57 F3A4                <1>  rep movsb
  1811 00001C59 48832C25[D4000000]-             sub qword[desplazAux], 11
  1811 00001C61 0B                 
  1812                                          mEstaVacia qword[desplazAux]
    93 00001C62 B800000000          <1>  mov rax, 0
    94 00001C67 488B3C25[D4000000]  <1>  mov rdi, %1
    95 00001C6F E8EEF1FFFF          <1>  call estaVacia
  1813 00001C74 4883F800                        cmp rax, 0  
  1814 00001C78 0F84B9020000                    je okPuedeMoverse
  1815                                          mHaySoldado qword[desplazAux]
    99 00001C7E B800000000          <1>  mov rax, 0
   100 00001C83 488B3C25[D4000000]  <1>  mov rdi, %1
   101 00001C8B E8A5F3FFFF          <1>  call haySoldado
  1816 00001C90 4883F801                        cmp rax, 1
  1817 00001C94 7419                            je verEspacioArrDer
  1818                                          mPuedeCapturar 11, 1 ; restar 11 a desplazAux
   105 00001C96 BF0B000000          <1>  mov rdi, %1
   106 00001C9B BE01000000          <1>  mov rsi, %2
   107 00001CA0 E8D9FBFFFF          <1>  call podiaComerPieza
  1819 00001CA5 4883F800                        cmp rax, 0
  1820 00001CA9 0F8488020000                    je okPuedeMoverse
  1821                                  
  1822                                      ; Casilla arriba-derecha
  1823                                      verEspacioArrDer:
  1824                                          mMov desplazAux, desplazAux2, 1
    31 00001CAF B901000000          <1>  mov rcx, %3
    32 00001CB4 488D3425[DC000000]  <1>  lea rsi, [%2]
    33 00001CBC 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 00001CC4 F3A4                <1>  rep movsb
  1825 00001CC6 48832C25[D4000000]-             sub qword[desplazAux], 10
  1825 00001CCE 0A                 
  1826                                          mEstaVacia qword[desplazAux]
    93 00001CCF B800000000          <1>  mov rax, 0
    94 00001CD4 488B3C25[D4000000]  <1>  mov rdi, %1
    95 00001CDC E881F1FFFF          <1>  call estaVacia
  1827 00001CE1 4883F800                        cmp rax, 0  
  1828 00001CE5 0F844C020000                    je okPuedeMoverse
  1829                                          mHaySoldado qword[desplazAux]
    99 00001CEB B800000000          <1>  mov rax, 0
   100 00001CF0 488B3C25[D4000000]  <1>  mov rdi, %1
   101 00001CF8 E838F3FFFF          <1>  call haySoldado
  1830 00001CFD 4883F801                        cmp rax, 1
  1831 00001D01 7419                            je verEspacioIzq
  1832                                          mPuedeCapturar 10, 1 ; restar 10 a desplazAux
   105 00001D03 BF0A000000          <1>  mov rdi, %1
   106 00001D08 BE01000000          <1>  mov rsi, %2
   107 00001D0D E86CFBFFFF          <1>  call podiaComerPieza
  1833 00001D12 4883F800                        cmp rax, 0
  1834 00001D16 0F841B020000                    je okPuedeMoverse
  1835                                  
  1836                                      ; Casilla izquierda
  1837                                      verEspacioIzq:
  1838                                          mMov desplazAux, desplazAux2, 1
    31 00001D1C B901000000          <1>  mov rcx, %3
    32 00001D21 488D3425[DC000000]  <1>  lea rsi, [%2]
    33 00001D29 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 00001D31 F3A4                <1>  rep movsb
  1839 00001D33 48832C25[D4000000]-             sub qword[desplazAux], 1
  1839 00001D3B 01                 
  1840                                          mEstaVacia qword[desplazAux]
    93 00001D3C B800000000          <1>  mov rax, 0
    94 00001D41 488B3C25[D4000000]  <1>  mov rdi, %1
    95 00001D49 E814F1FFFF          <1>  call estaVacia
  1841 00001D4E 4883F800                        cmp rax, 0  
  1842 00001D52 0F84DF010000                    je okPuedeMoverse
  1843                                          mHaySoldado qword[desplazAux]
    99 00001D58 B800000000          <1>  mov rax, 0
   100 00001D5D 488B3C25[D4000000]  <1>  mov rdi, %1
   101 00001D65 E8CBF2FFFF          <1>  call haySoldado
  1844 00001D6A 4883F801                        cmp rax, 1
  1845 00001D6E 7419                            je verEspacioDer
  1846                                          mPuedeCapturar 1, 1 ; restar 1 a desplazAux 
   105 00001D70 BF01000000          <1>  mov rdi, %1
   106 00001D75 BE01000000          <1>  mov rsi, %2
   107 00001D7A E8FFFAFFFF          <1>  call podiaComerPieza
  1847 00001D7F 4883F800                        cmp rax, 0
  1848 00001D83 0F84AE010000                    je okPuedeMoverse
  1849                                  
  1850                                      ; Casilla derecha
  1851                                      verEspacioDer:
  1852                                          mMov desplazAux, desplazAux2, 1
    31 00001D89 B901000000          <1>  mov rcx, %3
    32 00001D8E 488D3425[DC000000]  <1>  lea rsi, [%2]
    33 00001D96 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 00001D9E F3A4                <1>  rep movsb
  1853 00001DA0 48830425[D4000000]-             add qword[desplazAux], 1
  1853 00001DA8 01                 
  1854                                          mEstaVacia qword[desplazAux]
    93 00001DA9 B800000000          <1>  mov rax, 0
    94 00001DAE 488B3C25[D4000000]  <1>  mov rdi, %1
    95 00001DB6 E8A7F0FFFF          <1>  call estaVacia
  1855 00001DBB 4883F800                        cmp rax, 0  
  1856 00001DBF 0F8472010000                    je okPuedeMoverse
  1857                                          mHaySoldado qword[desplazAux]
    99 00001DC5 B800000000          <1>  mov rax, 0
   100 00001DCA 488B3C25[D4000000]  <1>  mov rdi, %1
   101 00001DD2 E85EF2FFFF          <1>  call haySoldado
  1858 00001DD7 4883F801                        cmp rax, 1
  1859 00001DDB 7419                            je verEspacioAbjIzq
  1860                                          mPuedeCapturar 1, 0 ; sumar 1 a desplazAux 
   105 00001DDD BF01000000          <1>  mov rdi, %1
   106 00001DE2 BE00000000          <1>  mov rsi, %2
   107 00001DE7 E892FAFFFF          <1>  call podiaComerPieza
  1861 00001DEC 4883F800                        cmp rax, 0
  1862 00001DF0 0F8441010000                    je okPuedeMoverse
  1863                                  
  1864                                      ; Casilla abajo-izquierda
  1865                                      verEspacioAbjIzq:
  1866                                          mMov desplazAux, desplazAux2, 1
    31 00001DF6 B901000000          <1>  mov rcx, %3
    32 00001DFB 488D3425[DC000000]  <1>  lea rsi, [%2]
    33 00001E03 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 00001E0B F3A4                <1>  rep movsb
  1867 00001E0D 48830425[D4000000]-             add qword[desplazAux], 10
  1867 00001E15 0A                 
  1868                                          mEstaVacia qword[desplazAux]
    93 00001E16 B800000000          <1>  mov rax, 0
    94 00001E1B 488B3C25[D4000000]  <1>  mov rdi, %1
    95 00001E23 E83AF0FFFF          <1>  call estaVacia
  1869 00001E28 4883F800                        cmp rax, 0  
  1870 00001E2C 0F8405010000                    je okPuedeMoverse
  1871                                          mHaySoldado qword[desplazAux]
    99 00001E32 B800000000          <1>  mov rax, 0
   100 00001E37 488B3C25[D4000000]  <1>  mov rdi, %1
   101 00001E3F E8F1F1FFFF          <1>  call haySoldado
  1872 00001E44 4883F801                        cmp rax, 1
  1873 00001E48 7419                            je verEspacioAbajo
  1874                                          mPuedeCapturar 10, 0 ; sumar 10 a desplazAux 
   105 00001E4A BF0A000000          <1>  mov rdi, %1
   106 00001E4F BE00000000          <1>  mov rsi, %2
   107 00001E54 E825FAFFFF          <1>  call podiaComerPieza
  1875 00001E59 4883F800                        cmp rax, 0
  1876 00001E5D 0F84D4000000                    je okPuedeMoverse
  1877                                  
  1878                                      ; Casilla abajo
  1879                                      verEspacioAbajo:
  1880                                          mMov desplazAux, desplazAux2, 1
    31 00001E63 B901000000          <1>  mov rcx, %3
    32 00001E68 488D3425[DC000000]  <1>  lea rsi, [%2]
    33 00001E70 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 00001E78 F3A4                <1>  rep movsb
  1881 00001E7A 48830425[D4000000]-             add qword[desplazAux], 11
  1881 00001E82 0B                 
  1882                                          mEstaVacia qword[desplazAux]
    93 00001E83 B800000000          <1>  mov rax, 0
    94 00001E88 488B3C25[D4000000]  <1>  mov rdi, %1
    95 00001E90 E8CDEFFFFF          <1>  call estaVacia
  1883 00001E95 4883F800                        cmp rax, 0  
  1884 00001E99 0F8498000000                    je okPuedeMoverse
  1885                                          mHaySoldado qword[desplazAux]
    99 00001E9F B800000000          <1>  mov rax, 0
   100 00001EA4 488B3C25[D4000000]  <1>  mov rdi, %1
   101 00001EAC E884F1FFFF          <1>  call haySoldado
  1886 00001EB1 4883F801                        cmp rax, 1
  1887 00001EB5 7415                            je verEspacioAbjDer
  1888                                          mPuedeCapturar 11, 0 ; sumar 11 a desplazAux
   105 00001EB7 BF0B000000          <1>  mov rdi, %1
   106 00001EBC BE00000000          <1>  mov rsi, %2
   107 00001EC1 E8B8F9FFFF          <1>  call podiaComerPieza
  1889 00001EC6 4883F800                        cmp rax, 0
  1890 00001ECA 746B                            je okPuedeMoverse
  1891                                  
  1892                                      ; Casilla abajo-derecha
  1893                                      verEspacioAbjDer:
  1894                                          mMov desplazAux, desplazAux2, 1
    31 00001ECC B901000000          <1>  mov rcx, %3
    32 00001ED1 488D3425[DC000000]  <1>  lea rsi, [%2]
    33 00001ED9 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 00001EE1 F3A4                <1>  rep movsb
  1895 00001EE3 48830425[D4000000]-             add qword[desplazAux], 12
  1895 00001EEB 0C                 
  1896                                          mEstaVacia qword[desplazAux]
    93 00001EEC B800000000          <1>  mov rax, 0
    94 00001EF1 488B3C25[D4000000]  <1>  mov rdi, %1
    95 00001EF9 E864EFFFFF          <1>  call estaVacia
  1897 00001EFE 4883F800                        cmp rax, 0  
  1898 00001F02 7433                            je okPuedeMoverse
  1899                                          mHaySoldado qword[desplazAux]
    99 00001F04 B800000000          <1>  mov rax, 0
   100 00001F09 488B3C25[D4000000]  <1>  mov rdi, %1
   101 00001F11 E81FF1FFFF          <1>  call haySoldado
  1900 00001F16 4883F801                        cmp rax, 1
  1901 00001F1A 7415                            je noPuedeMoverse
  1902                                          mPuedeCapturar 12, 0 ; sumar 12 a desplazAux
   105 00001F1C BF0C000000          <1>  mov rdi, %1
   106 00001F21 BE00000000          <1>  mov rsi, %2
   107 00001F26 E853F9FFFF          <1>  call podiaComerPieza
  1903 00001F2B 4883F800                        cmp rax, 0
  1904 00001F2F 7406                            je okPuedeMoverse
  1905                                  
  1906                                      ; Si llegamos ac√°, el oficial est√° rodeado -> no puede realizar ning√∫n movimiento
  1907                                      noPuedeMoverse:
  1908 00001F31 B800000000                      mov rax, 0
  1909 00001F36 C3                              ret
  1910                                  
  1911                                      ; Si llegamos ac√°, el oficial puede moverse
  1912                                      okPuedeMoverse:
  1913 00001F37 B801000000                      mov rax, 1
  1914 00001F3C C3                              ret
  1915                                  
  1916                                  ofic1Desentendido:
  1917 00001F3D 48833C25[810A0000]-         cmp qword[casillaOfic1], 0
  1917 00001F45 00                 
  1918 00001F46 7406                        je el1EstaDesentendido
  1919                                  
  1920 00001F48 B801000000                  mov rax, 1
  1921 00001F4D C3                          ret
  1922                                  
  1923                                      el1EstaDesentendido:
  1924 00001F4E B800000000                      mov rax, 0
  1925 00001F53 C3                              ret
  1926                                  
  1927                                  ofic2Desentendido:
  1928 00001F54 48833C25[910A0000]-         cmp qword[casillaOfic2], 0
  1928 00001F5C 00                 
  1929 00001F5D 7406                        je el2EstaDesentendido
  1930                                  
  1931 00001F5F B801000000                  mov rax, 1
  1932 00001F64 C3                          ret
  1933                                  
  1934                                      el2EstaDesentendido:
  1935 00001F65 B800000000                      mov rax, 0
  1936 00001F6A C3                              ret
  1937                                  
  1938                                  ; --------------------------------------------------------------------------------------------
  1939                                  ; RUTINAS PARA TERMINAR EL JUEGO Y MOSTRAR LAS ESTAD√çSTICAS
  1940                                  ; --------------------------------------------------------------------------------------------
  1941                                  
  1942                                  finDeJuego:
  1943                                      mCommand cmdLimpiarPantalla
    24 00001F6B 48BF-               <1>  mov rdi, %1
    24 00001F6D [B70A000000000000]  <1>
    25 00001F75 4883EC08            <1>  sub rsp, 8
    26 00001F79 E8(00000000)        <1>  call system
    27 00001F7E 4883C408            <1>  add rsp, 8
  1944                                      mPuts msgJuegoTerminado
     2 00001F82 48BF-               <1>  mov rdi, %1
     2 00001F84 [CC06000000000000]  <1>
     3 00001F8C 4883EC08            <1>  sub rsp, 8
     4 00001F90 E8(00000000)        <1>  call puts
     5 00001F95 4883C408            <1>  add rsp, 8
  1945                                  
  1946 00001F99 813C25[2B070000]73-         cmp dword[varRazonFin], "sOcu"
  1946 00001FA1 4F6375             
  1947 00001FA4 7430                        je soldadosFortaleza
  1948                                  
  1949 00001FA6 813C25[2B070000]6F-         cmp dword[varRazonFin], "oRod"
  1949 00001FAE 526F64             
  1950 00001FB1 746A                        je soldadosRodeanOficiales
  1951                                  
  1952 00001FB3 813C25[2B070000]6F-         cmp dword[varRazonFin], "oInv"
  1952 00001FBB 496E76             
  1953 00001FBE 0F84A0000000                je oficialesInvalidados
  1954                                  
  1955 00001FC4 813C25[2B070000]73-         cmp dword[varRazonFin], "sCap"
  1955 00001FCC 436170             
  1956 00001FCF 0F84D3000000                je soldadosCapturados
  1957                                  
  1958 00001FD5 C3                          ret
  1959                                  
  1960                                      soldadosFortaleza:
  1961                                          mPrint msgGanador, stringSoldados
     9 00001FD6 48BF-               <1>  mov rdi, %1
     9 00001FD8 [E606000000000000]  <1>
    10 00001FE0 48BE-               <1>  mov rsi, %2
    10 00001FE2 [0C07000000000000]  <1>
    11 00001FEA 4883EC08            <1>  sub rsp, 8
    12 00001FEE E8(00000000)        <1>  call printf
    13 00001FF3 4883C408            <1>  add rsp, 8
  1962                                          mPrint msgRazonGanador, msgSoldadosFortaleza
     9 00001FF7 48BF-               <1>  mov rdi, %1
     9 00001FF9 [1F07000000000000]  <1>
    10 00002001 48BE-               <1>  mov rsi, %2
    10 00002003 [6E07000000000000]  <1>
    11 0000200B 4883EC08            <1>  sub rsp, 8
    12 0000200F E8(00000000)        <1>  call printf
    13 00002014 4883C408            <1>  add rsp, 8
  1963 00002018 E9CF000000                      jmp mostrarEstadisticas
  1964                                  
  1965                                      soldadosRodeanOficiales:
  1966                                          mPrint msgGanador, stringSoldados
     9 0000201D 48BF-               <1>  mov rdi, %1
     9 0000201F [E606000000000000]  <1>
    10 00002027 48BE-               <1>  mov rsi, %2
    10 00002029 [0C07000000000000]  <1>
    11 00002031 4883EC08            <1>  sub rsp, 8
    12 00002035 E8(00000000)        <1>  call printf
    13 0000203A 4883C408            <1>  add rsp, 8
  1967                                          mPrint msgRazonGanador, msgSoldadosRodean
     9 0000203E 48BF-               <1>  mov rdi, %1
     9 00002040 [1F07000000000000]  <1>
    10 00002048 48BE-               <1>  mov rsi, %2
    10 0000204A [A907000000000000]  <1>
    11 00002052 4883EC08            <1>  sub rsp, 8
    12 00002056 E8(00000000)        <1>  call printf
    13 0000205B 4883C408            <1>  add rsp, 8
  1968 0000205F E988000000                      jmp mostrarEstadisticas
  1969                                  
  1970                                      oficialesInvalidados:
  1971                                          mPrint msgGanador, stringSoldados
     9 00002064 48BF-               <1>  mov rdi, %1
     9 00002066 [E606000000000000]  <1>
    10 0000206E 48BE-               <1>  mov rsi, %2
    10 00002070 [0C07000000000000]  <1>
    11 00002078 4883EC08            <1>  sub rsp, 8
    12 0000207C E8(00000000)        <1>  call printf
    13 00002081 4883C408            <1>  add rsp, 8
  1972                                          mPrint msgRazonGanador, msgSoldadosInvalidar
     9 00002085 48BF-               <1>  mov rdi, %1
     9 00002087 [1F07000000000000]  <1>
    10 0000208F 48BE-               <1>  mov rsi, %2
    10 00002091 [D307000000000000]  <1>
    11 00002099 4883EC08            <1>  sub rsp, 8
    12 0000209D E8(00000000)        <1>  call printf
    13 000020A2 4883C408            <1>  add rsp, 8
  1973 000020A6 EB44                            jmp mostrarEstadisticas
  1974                                  
  1975                                      soldadosCapturados:
  1976                                          mPrint msgGanador, stringOficiales
     9 000020A8 48BF-               <1>  mov rdi, %1
     9 000020AA [E606000000000000]  <1>
    10 000020B2 48BE-               <1>  mov rsi, %2
    10 000020B4 [1507000000000000]  <1>
    11 000020BC 4883EC08            <1>  sub rsp, 8
    12 000020C0 E8(00000000)        <1>  call printf
    13 000020C5 4883C408            <1>  add rsp, 8
  1977                                          mPrint msgRazonGanador, msgOficialesGanan
     9 000020C9 48BF-               <1>  mov rdi, %1
     9 000020CB [1F07000000000000]  <1>
    10 000020D3 48BE-               <1>  mov rsi, %2
    10 000020D5 [F907000000000000]  <1>
    11 000020DD 4883EC08            <1>  sub rsp, 8
    12 000020E1 E8(00000000)        <1>  call printf
    13 000020E6 4883C408            <1>  add rsp, 8
  1978 000020EA EB00                            jmp mostrarEstadisticas
  1979                                  
  1980                                  
  1981                                  mostrarEstadisticas:
  1982                                      mPuts msgEstadisticas
     2 000020EC 48BF-               <1>  mov rdi, %1
     2 000020EE [5C05000000000000]  <1>
     3 000020F6 4883EC08            <1>  sub rsp, 8
     4 000020FA E8(00000000)        <1>  call puts
     5 000020FF 4883C408            <1>  add rsp, 8
  1983                                  
  1984                                      mPrint msgCantTotalCapturas, qword[cantSoldCapturados]
     9 00002103 48BF-               <1>  mov rdi, %1
     9 00002105 [7D05000000000000]  <1>
    10 0000210D 488B3425[710A0000]  <1>  mov rsi, %2
    11 00002115 4883EC08            <1>  sub rsp, 8
    12 00002119 E8(00000000)        <1>  call printf
    13 0000211E 4883C408            <1>  add rsp, 8
  1985                                  
  1986                                      ; Estad√≠sticas del oficial 1
  1987                                      mPuts msgOficial1
     2 00002122 48BF-               <1>  mov rdi, %1
     2 00002124 [9E05000000000000]  <1>
     3 0000212C 4883EC08            <1>  sub rsp, 8
     4 00002130 E8(00000000)        <1>  call puts
     5 00002135 4883C408            <1>  add rsp, 8
  1988                                      mPrint msgCantMovimientos, qword[movimientosOfic1]
     9 00002139 48BF-               <1>  mov rdi, %1
     9 0000213B [B605000000000000]  <1>
    10 00002143 488B3425[D1090000]  <1>  mov rsi, %2
    11 0000214B 4883EC08            <1>  sub rsp, 8
    12 0000214F E8(00000000)        <1>  call printf
    13 00002154 4883C408            <1>  add rsp, 8
  1989                                      mPrint msgCantAdelante, qword[movOfic1Adelante]
     9 00002158 48BF-               <1>  mov rdi, %1
     9 0000215A [CF05000000000000]  <1>
    10 00002162 488B3425[E1090000]  <1>  mov rsi, %2
    11 0000216A 4883EC08            <1>  sub rsp, 8
    12 0000216E E8(00000000)        <1>  call printf
    13 00002173 4883C408            <1>  add rsp, 8
  1990                                      mPrint msgCantDerecha, qword[movOfic1Derecha]
     9 00002177 48BF-               <1>  mov rdi, %1
     9 00002179 [E505000000000000]  <1>
    10 00002181 488B3425[E9090000]  <1>  mov rsi, %2
    11 00002189 4883EC08            <1>  sub rsp, 8
    12 0000218D E8(00000000)        <1>  call printf
    13 00002192 4883C408            <1>  add rsp, 8
  1991                                      mPrint msgCantIzquierda, qword[movOfic1Izquierda]
     9 00002196 48BF-               <1>  mov rdi, %1
     9 00002198 [FD05000000000000]  <1>
    10 000021A0 488B3425[F1090000]  <1>  mov rsi, %2
    11 000021A8 4883EC08            <1>  sub rsp, 8
    12 000021AC E8(00000000)        <1>  call printf
    13 000021B1 4883C408            <1>  add rsp, 8
  1992                                      mPrint msgCantAtras, qword[movOfic1Atras]
     9 000021B5 48BF-               <1>  mov rdi, %1
     9 000021B7 [1706000000000000]  <1>
    10 000021BF 488B3425[F9090000]  <1>  mov rsi, %2
    11 000021C7 4883EC08            <1>  sub rsp, 8
    12 000021CB E8(00000000)        <1>  call printf
    13 000021D0 4883C408            <1>  add rsp, 8
  1993                                      mPrint msgCantDiagonal, qword[movOfic1Diagonal]
     9 000021D4 48BF-               <1>  mov rdi, %1
     9 000021D6 [2B06000000000000]  <1>
    10 000021DE 488B3425[010A0000]  <1>  mov rsi, %2
    11 000021E6 4883EC08            <1>  sub rsp, 8
    12 000021EA E8(00000000)        <1>  call printf
    13 000021EF 4883C408            <1>  add rsp, 8
  1994                                      mPrint msgCantDiagArribaDer, qword[movOfic1DiagArribaDer]
     9 000021F3 48BF-               <1>  mov rdi, %1
     9 000021F5 [3E06000000000000]  <1>
    10 000021FD 488B3425[090A0000]  <1>  mov rsi, %2
    11 00002205 4883EC08            <1>  sub rsp, 8
    12 00002209 E8(00000000)        <1>  call printf
    13 0000220E 4883C408            <1>  add rsp, 8
  1995                                      mPrint msgCantDiagArribaIzq, qword[movOfic1DiagArribaIzq]
     9 00002212 48BF-               <1>  mov rdi, %1
     9 00002214 [5806000000000000]  <1>
    10 0000221C 488B3425[110A0000]  <1>  mov rsi, %2
    11 00002224 4883EC08            <1>  sub rsp, 8
    12 00002228 E8(00000000)        <1>  call printf
    13 0000222D 4883C408            <1>  add rsp, 8
  1996                                      mPrint msgCantDiagAbajoDer, qword[movOfic1DiagAbajoDer]
     9 00002231 48BF-               <1>  mov rdi, %1
     9 00002233 [7406000000000000]  <1>
    10 0000223B 488B3425[190A0000]  <1>  mov rsi, %2
    11 00002243 4883EC08            <1>  sub rsp, 8
    12 00002247 E8(00000000)        <1>  call printf
    13 0000224C 4883C408            <1>  add rsp, 8
  1997                                      mPrint msgCantDiagAbajoIzq, qword[movOfic1DiagAbajoIzq]
     9 00002250 48BF-               <1>  mov rdi, %1
     9 00002252 [8C06000000000000]  <1>
    10 0000225A 488B3425[210A0000]  <1>  mov rsi, %2
    11 00002262 4883EC08            <1>  sub rsp, 8
    12 00002266 E8(00000000)        <1>  call printf
    13 0000226B 4883C408            <1>  add rsp, 8
  1998                                      mPrint msgCantSoldadosCapt, qword[cantCapturasOfic1]
     9 0000226F 48BF-               <1>  mov rdi, %1
     9 00002271 [A606000000000000]  <1>
    10 00002279 488B3425[A10A0000]  <1>  mov rsi, %2
    11 00002281 4883EC08            <1>  sub rsp, 8
    12 00002285 E8(00000000)        <1>  call printf
    13 0000228A 4883C408            <1>  add rsp, 8
  1999                                  
  2000                                      ; Estad√≠sticas del oficial 2
  2001                                      mPuts msgOficial2
     2 0000228E 48BF-               <1>  mov rdi, %1
     2 00002290 [AA05000000000000]  <1>
     3 00002298 4883EC08            <1>  sub rsp, 8
     4 0000229C E8(00000000)        <1>  call puts
     5 000022A1 4883C408            <1>  add rsp, 8
  2002                                      mPrint msgCantMovimientos, qword[movimientosOfic2]
     9 000022A5 48BF-               <1>  mov rdi, %1
     9 000022A7 [B605000000000000]  <1>
    10 000022AF 488B3425[D9090000]  <1>  mov rsi, %2
    11 000022B7 4883EC08            <1>  sub rsp, 8
    12 000022BB E8(00000000)        <1>  call printf
    13 000022C0 4883C408            <1>  add rsp, 8
  2003                                      mPrint msgCantAdelante, qword[movOfic2Adelante]
     9 000022C4 48BF-               <1>  mov rdi, %1
     9 000022C6 [CF05000000000000]  <1>
    10 000022CE 488B3425[290A0000]  <1>  mov rsi, %2
    11 000022D6 4883EC08            <1>  sub rsp, 8
    12 000022DA E8(00000000)        <1>  call printf
    13 000022DF 4883C408            <1>  add rsp, 8
  2004                                      mPrint msgCantDerecha, qword[movOfic2Derecha]
     9 000022E3 48BF-               <1>  mov rdi, %1
     9 000022E5 [E505000000000000]  <1>
    10 000022ED 488B3425[310A0000]  <1>  mov rsi, %2
    11 000022F5 4883EC08            <1>  sub rsp, 8
    12 000022F9 E8(00000000)        <1>  call printf
    13 000022FE 4883C408            <1>  add rsp, 8
  2005                                      mPrint msgCantIzquierda, qword[movOfic2Izquierda]
     9 00002302 48BF-               <1>  mov rdi, %1
     9 00002304 [FD05000000000000]  <1>
    10 0000230C 488B3425[390A0000]  <1>  mov rsi, %2
    11 00002314 4883EC08            <1>  sub rsp, 8
    12 00002318 E8(00000000)        <1>  call printf
    13 0000231D 4883C408            <1>  add rsp, 8
  2006                                      mPrint msgCantAtras, qword[movOfic2Atras]
     9 00002321 48BF-               <1>  mov rdi, %1
     9 00002323 [1706000000000000]  <1>
    10 0000232B 488B3425[410A0000]  <1>  mov rsi, %2
    11 00002333 4883EC08            <1>  sub rsp, 8
    12 00002337 E8(00000000)        <1>  call printf
    13 0000233C 4883C408            <1>  add rsp, 8
  2007                                      mPrint msgCantDiagonal, qword[movOfic2Diagonal]
     9 00002340 48BF-               <1>  mov rdi, %1
     9 00002342 [2B06000000000000]  <1>
    10 0000234A 488B3425[490A0000]  <1>  mov rsi, %2
    11 00002352 4883EC08            <1>  sub rsp, 8
    12 00002356 E8(00000000)        <1>  call printf
    13 0000235B 4883C408            <1>  add rsp, 8
  2008                                      mPrint msgCantDiagArribaDer, qword[movOfic2DiagArribaDer]
     9 0000235F 48BF-               <1>  mov rdi, %1
     9 00002361 [3E06000000000000]  <1>
    10 00002369 488B3425[510A0000]  <1>  mov rsi, %2
    11 00002371 4883EC08            <1>  sub rsp, 8
    12 00002375 E8(00000000)        <1>  call printf
    13 0000237A 4883C408            <1>  add rsp, 8
  2009                                      mPrint msgCantDiagArribaIzq, qword[movOfic2DiagArribaIzq]
     9 0000237E 48BF-               <1>  mov rdi, %1
     9 00002380 [5806000000000000]  <1>
    10 00002388 488B3425[590A0000]  <1>  mov rsi, %2
    11 00002390 4883EC08            <1>  sub rsp, 8
    12 00002394 E8(00000000)        <1>  call printf
    13 00002399 4883C408            <1>  add rsp, 8
  2010                                      mPrint msgCantDiagAbajoDer, qword[movOfic2DiagAbajoDer]
     9 0000239D 48BF-               <1>  mov rdi, %1
     9 0000239F [7406000000000000]  <1>
    10 000023A7 488B3425[610A0000]  <1>  mov rsi, %2
    11 000023AF 4883EC08            <1>  sub rsp, 8
    12 000023B3 E8(00000000)        <1>  call printf
    13 000023B8 4883C408            <1>  add rsp, 8
  2011                                      mPrint msgCantDiagAbajoIzq, qword[movOfic2DiagAbajoIzq]
     9 000023BC 48BF-               <1>  mov rdi, %1
     9 000023BE [8C06000000000000]  <1>
    10 000023C6 488B3425[690A0000]  <1>  mov rsi, %2
    11 000023CE 4883EC08            <1>  sub rsp, 8
    12 000023D2 E8(00000000)        <1>  call printf
    13 000023D7 4883C408            <1>  add rsp, 8
  2012                                      mPrint msgCantSoldadosCapt, qword[cantCapturasOfic2]
     9 000023DB 48BF-               <1>  mov rdi, %1
     9 000023DD [A606000000000000]  <1>
    10 000023E5 488B3425[A90A0000]  <1>  mov rsi, %2
    11 000023ED 4883EC08            <1>  sub rsp, 8
    12 000023F1 E8(00000000)        <1>  call printf
    13 000023F6 4883C408            <1>  add rsp, 8
  2013                                  
  2014 000023FA C3                          ret
