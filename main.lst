     1                                  %macro mPuts 1 ; Imprime el string %1, hasta encontrar un 0
     2                                      mov rdi, %1
     3                                      sub rsp, 8
     4                                      call puts
     5                                      add rsp, 8
     6                                  %endmacro
     7                                  
     8                                  %macro mPrint 2 ; Imprime el string %2 con formato %1
     9                                      mov rdi, %1
    10                                      mov rsi, %2
    11                                      sub rsp, 8
    12                                      call printf
    13                                      add rsp, 8
    14                                  %endmacro
    15                                  
    16                                  %macro mGets 1 ; Obtiene un string por teclado, guardándolo en %1
    17                                      mov rdi, %1
    18                                      sub rsp, 8
    19                                      call gets
    20                                      add rsp, 8
    21                                  %endmacro
    22                                  
    23                                  %macro mCommand 1 ; Ejecuta el comando %1 de la terminal
    24                                      mov rdi, %1
    25                                      sub rsp, 8
    26                                      call system
    27                                      add rsp, 8
    28                                  %endmacro
    29                                  
    30                                  %macro mMov 3 ; Copia %3 bytes del campo de memoria %2 al campo de memoria %1
    31                                      mov rcx, %3
    32                                      lea rsi, [%2]
    33                                      lea rdi, [%1]
    34                                      rep movsb
    35                                  %endmacro
    36                                  
    37                                  %macro mCmp 3 ; Compara %3 bytes del campo %1 con %2
    38                                      mov rcx, %3
    39                                      lea rsi, %1
    40                                      lea rdi, %2
    41                                      repe cmpsb
    42                                  %endmacro 
    43                                  
    44                                  %macro mErrorJump 2 ; Imprime el mensaje de error %1 y salta a la etiqueta %2
    45                                      mPuts %1
    46                                      jmp %2
    47                                  %endmacro
    48                                  
    49                                  %macro mfGets 2
    50                                      mov rdi, %1
    51                                      mov rsi, %2
    52                                      mov rdx, [stdin]
    53                                      sub rsp, 8
    54                                      call fgets
    55                                      add rsp, 8
    56                                  %endmacro
    57                                  
    58                                  %macro mLeerEntradaEstandar 2
    59                                      mov rax, 0      ; syscall: read
    60                                      mov rdi, 0      ; 0: stdin
    61                                      mov rsi, %1   ; buffer (direccion de guardado de lo leido)
    62                                      mov rdx, %2     ; Cuantos bytes queremos leer
    63                                      syscall
    64                                  
    65                                      mov byte[rsi+rax], 0
    66                                  %endmacro
    67                                  
    68                                  %macro mSscanf 3
    69                                      lea rdi, %1     ; Variable Original string
    70                                      mov rsi, %2     ; Formato
    71                                      mov rdx, %3     ; Variable a guardar el int
    72                                      sub rsp, 8
    73                                      call sscanf
    74                                      add rsp, 8
    75                                  %endmacro
    76                                  
    77                                  %macro mSprintf 3
    78                                      mov rdi, %1     ; Variable donde se guardará el string
    79                                      mov rsi, %2     ; Formato
    80                                      mov rdx, %3     ; Variable a guardar en el string
    81                                      sub rsp, 8
    82                                      call sprintf
    83                                      add rsp, 8
    84                                  %endmacro
    85                                  
    86                                  %macro mCalcDesplaz 3
    87                                      mov rdi, %1
    88                                      mov rsi, %2
    89                                      call calcularDesplazamiento
    90                                      mov %3, rax
    91                                  %endmacro
    92                                  
    93                                  %macro mEstaVacia 1 
    94                                      mov rax, 0
    95                                      mov rdi, %1 ; recibe el desplazamiento
    96                                      call estaVacia
    97                                  %endmacro
    98                                  
    99                                  %macro mHaySoldado 1
   100                                      mov rax, 0
   101                                      mov rdi, %1 ; recibe el desplazamiento
   102                                      call haySoldado
   103                                  %endmacro
   104                                  
   105                                  %macro mPuedeCapturar 2
   106                                      mov rdi, %1 ; diferencia de desplazamiento
   107                                      mov rsi, %2 ; 0 para sumar [rdi] al desplazamiento, 1 para restar
   108                                      call podiaComerPieza
   109                                  %endmacro
   110                                  
   111                                  %macro mOpenFile 2
   112                                      mov rdi, %1 ; nombre del archivo
   113                                      mov rsi, %2 ; modo de apertura
   114                                      sub rsp, 8
   115                                      call fopen
   116                                      add rsp, 8
   117                                      mov qword[idArchGuardado], rax ; Guardamos el ID del archivo
   118                                  %endmacro
   119                                  
   120                                  %macro mCloseFile 1
   121                                      mov rdi, [%1] ; ID del archivo
   122                                      sub rsp, 8
   123                                      call fclose
   124                                      add rsp, 8
   125                                  %endmacro
   126                                  
   127                                  %macro mReadLine 3 
   128                                      mov rdi, %1 ; lugar a dejar lo leido
   129                                      mov rsi, %2 ; cantidad de bytes a leer
   130                                      mov rdx, %3 ; bloques de lectura
   131                                      mov rcx, [idArchGuardado] ; ID del archivo
   132                                      sub rsp, 8
   133                                      call fread
   134                                      add rsp, 8
   135                                  %endmacro
   136                                  
   137                                  %macro mWriteLine 3
   138                                      mov rdi, %1 ; string a escribir
   139                                      mov rsi, %2 ; cantidad de bytes a escribir
   140                                      mov rdx, %3 ; bloques de escritura
   141                                      mov rcx, [idArchGuardado] ; ID del archivo
   142                                      sub rsp, 8
   143                                      call fwrite
   144                                      add rsp, 8
   145                                  %endmacro
   146                                  
   147                                  ; Importación de funciones de la librería C
   148                                  extern puts, printf
   149                                  extern gets
   150                                  extern system, stdin
   151                                  extern sscanf, sprintf
   152                                  extern fopen, fclose, fread, fwrite, fgets
   153                                  
   154                                  section .data
   155                                  
   156                                      ; Tableros y sus posibles estados
   157                                  
   158 00000000 202031323334353637-         tableroOrig         db " "," ","1","2","3","4","5","6","7"," ",10
   158 00000009 200A               
   159 0000000B 2020202D5F5F5F2D20-                             db " "," "," ","-","_","_","_","-"," "," ",10 
   159 00000014 200A               
   160 00000016 3120207C5858587C20-                             db "1"," "," ","|","X","X","X","|"," "," ",10
   160 0000001F 200A               
   161 00000021 322D5F7C5858587C5F-                             db "2","-","_","|","X","X","X","|","_","-",10
   161 0000002A 2D0A               
   162 0000002C 337C58585858585858-                             db "3","|","X","X","X","X","X","X","X","|",10 
   162 00000035 7C0A               
   163 00000037 347C58585858585858-                             db "4","|","X","X","X","X","X","X","X","|",10 
   163 00000040 7C0A               
   164 00000042 357C58582020205858-                             db "5","|","X","X"," "," "," ","X","X","|",10 
   164 0000004B 7C0A               
   165 0000004D 362D2D7C20204F7C2D-                             db "6","-","-","|"," "," ","O","|","-","-",10 
   165 00000056 2D0A               
   166 00000058 3720207C4F20207C20-                             db "7"," "," ","|","O"," "," ","|"," "," ",10 
   166 00000061 200A               
   167 00000063 2020202D2D2D2D2D20-                             db " "," "," ","-","-","-","-","-"," "," ",10,0
   167 0000006C 200A00             
   168                                  
   169                                      ; Mensajes
   170                                  
   171 0000006F C2A14269656E76656E-         msgBienvenida           db "¡Bienvenido al juego El Asalto! ('#' para salir)", 0
   171 00000078 69646F20616C206A75-
   171 00000081 65676F20456C204173-
   171 0000008A 616C746F2120282723-
   171 00000093 272070617261207361-
   171 0000009C 6C69722900         
   172                                  
   173 000000A1 4F706369C3B36E2069-         msgOpcionInvalida       db "Opción inválida. Intente de nuevo.", 0
   173 000000AA 6E76C3A16C6964612E-
   173 000000B3 20496E74656E746520-
   173 000000BC 6465206E7565766F2E-
   173 000000C5 00                 
   174                                      
   175 000000C6 436173696C6C612069-         msgCasillaInvalidaSold  db "Casilla inválida: no hay un soldado en esa casilla. Intente de nuevo.", 0
   175 000000CF 6E76C3A16C6964613A-
   175 000000D8 206E6F206861792075-
   175 000000E1 6E20736F6C6461646F-
   175 000000EA 20656E206573612063-
   175 000000F3 6173696C6C612E2049-
   175 000000FC 6E74656E7465206465-
   175 00000105 206E7565766F2E00   
   176 0000010D 4572726F7220656E20-         msgErrorInputSold       db "Error en el formato de entrada del soldado. Intente de nuevo.", 0
   176 00000116 656C20666F726D6174-
   176 0000011F 6F20646520656E7472-
   176 00000128 6164612064656C2073-
   176 00000131 6F6C6461646F2E2049-
   176 0000013A 6E74656E7465206465-
   176 00000143 206E7565766F2E00   
   177 0000014B 4E6F20736520707565-         msgCasillaInvMovSold    db "No se puede mover el soldado a esa casilla. Intente de nuevo.", 0
   177 00000154 6465206D6F76657220-
   177 0000015D 656C20736F6C646164-
   177 00000166 6F2061206573612063-
   177 0000016F 6173696C6C612E2049-
   177 00000178 6E74656E7465206465-
   177 00000181 206E7565766F2E00   
   178                                  
   179 00000189 436173696C6C612069-         msgCasillaInvalidaOfic  db "Casilla inválida: no hay un oficial en esa casilla. Intente de nuevo.", 0
   179 00000192 6E76C3A16C6964613A-
   179 0000019B 206E6F206861792075-
   179 000001A4 6E206F66696369616C-
   179 000001AD 20656E206573612063-
   179 000001B6 6173696C6C612E2049-
   179 000001BF 6E74656E7465206465-
   179 000001C8 206E7565766F2E00   
   180 000001D0 4572726F7220656E20-         msgErrorInputOfic       db "Error en el formato de entrada del oficial. Intente de nuevo.", 0
   180 000001D9 656C20666F726D6174-
   180 000001E2 6F20646520656E7472-
   180 000001EB 6164612064656C206F-
   180 000001F4 66696369616C2E2049-
   180 000001FD 6E74656E7465206465-
   180 00000206 206E7565766F2E00   
   181 0000020E 4E6F20736520707565-         msgCasillaInvMovOfic    db "No se puede mover el oficial a esa casilla. Intente de nuevo.", 0
   181 00000217 6465206D6F76657220-
   181 00000220 656C206F6669636961-
   181 00000229 6C2061206573612063-
   181 00000232 6173696C6C612E2049-
   181 0000023B 6E74656E7465206465-
   181 00000244 206E7565766F2E00   
   182                                  
   183 0000024C 556E206F6669636961-         msgCapturaSold          db "Un oficial ha capturado a un soldado.", 0
   183 00000255 6C2068612063617074-
   183 0000025E 757261646F20612075-
   183 00000267 6E20736F6C6461646F-
   183 00000270 2E00               
   184 00000272 536520686120726574-         msgOficialRetirado      db "Se ha retirado a un oficial! No ha capturado a un soldado.", 0
   184 0000027B 697261646F20612075-
   184 00000284 6E206F66696369616C-
   184 0000028D 21204E6F2068612063-
   184 00000296 617074757261646F20-
   184 0000029F 6120756E20736F6C64-
   184 000002A8 61646F2E00         
   185                                      
   186 000002AD C2BF517569C3A96E20-         msgQuienInicia          db "¿Quién inicia el juego: oficiales o soldados? (o/s): ", 0
   186 000002B6 696E6963696120656C-
   186 000002BF 206A7565676F3A206F-
   186 000002C8 66696369616C657320-
   186 000002D1 6F20736F6C6461646F-
   186 000002DA 733F20286F2F73293A-
   186 000002E3 2000               
   187                                  
   188 000002E5 4573746164C3AD7374-         msgEstadisticas         db "Estadísticas de los oficiales:", 10, 0
   188 000002EE 69636173206465206C-
   188 000002F7 6F73206F6669636961-
   188 00000300 6C65733A0A00       
   189                                  
   190 00000306 43616E746964616420-         msgCantTotalCapturas    db "Cantidad total de capturas: %d", 10, 10, 0
   190 0000030F 746F74616C20646520-
   190 00000318 63617074757261733A-
   190 00000321 2025640A0A00       
   191                                  
   192 00000327 4F66696369616C2031-         msgOficial1             db "Oficial 1:", 10, 0
   192 00000330 3A0A00             
   193 00000333 4F66696369616C2032-         msgOficial2             db "Oficial 2:", 10, 0
   193 0000033C 3A0A00             
   194                                  
   195 0000033F 4D6F76696D69656E74-         msgCantMovimientos      db "Movimientos totales: %d", 10, 0
   195 00000348 6F7320746F74616C65-
   195 00000351 733A2025640A00     
   196 00000358 2D2048616369612061-         msgCantAdelante         db "- Hacia adelante: %d", 10, 0
   196 00000361 64656C616E74653A20-
   196 0000036A 25640A00           
   197 0000036E 2D204861636961206C-         msgCantDerecha          db "- Hacia la derecha: %d", 10, 0
   197 00000377 612064657265636861-
   197 00000380 3A2025640A00       
   198 00000386 2D204861636961206C-         msgCantIzquierda        db "- Hacia la izquierda: %d", 10, 0
   198 0000038F 6120697A7175696572-
   198 00000398 64613A2025640A00   
   199 000003A0 2D2048616369612061-         msgCantAtras            db "- Hacia atrás: %d", 10, 0
   199 000003A9 7472C3A1733A202564-
   199 000003B2 0A00               
   200 000003B4 2D20456E2064696167-         msgCantDiagonal         db "- En diagonal: %d", 10, 0
   200 000003BD 6F6E616C3A2025640A-
   200 000003C6 00                 
   201 000003C7 2D2D2D204164656C61-         msgCantDiagArribaDer    db "--- Adelante-derecha: %d", 10, 0
   201 000003D0 6E74652D6465726563-
   201 000003D9 68613A2025640A00   
   202 000003E1 2D2D2D204164656C61-         msgCantDiagArribaIzq    db "--- Adelante-izquierda: %d", 10, 0
   202 000003EA 6E74652D697A717569-
   202 000003F3 657264613A2025640A-
   202 000003FC 00                 
   203 000003FD 2D2D2D20417472C3A1-         msgCantDiagAbajoDer     db "--- Atrás-derecha: %d", 10, 0
   203 00000406 732D64657265636861-
   203 0000040F 3A2025640A00       
   204 00000415 2D2D2D20417472C3A1-         msgCantDiagAbajoIzq     db "--- Atrás-izquierda: %d", 10, 0
   204 0000041E 732D697A7175696572-
   204 00000427 64613A2025640A00   
   205                                  
   206 0000042F 43616E746964616420-         msgCantSoldadosCapt     db "Cantidad de soldados capturados: %d", 10, 10, 0
   206 00000438 646520736F6C646164-
   206 00000441 6F7320636170747572-
   206 0000044A 61646F733A2025640A-
   206 00000453 0A00               
   207                                  
   208 00000455 C2A1456C206A756567-         msgJuegoTerminado       db "¡El juego ha terminado!", 10, 0
   208 0000045E 6F206861207465726D-
   208 00000467 696E61646F210A00   
   209 0000046F C2A1456C2067616E61-         msgGanador              db "¡El ganador es el equipo de los %s!", 10, 0
   209 00000478 646F7220657320656C-
   209 00000481 2065717569706F2064-
   209 0000048A 65206C6F7320257321-
   209 00000493 0A00               
   210 00000495 736F6C6461646F7300          stringSoldados          db "soldados", 0
   211 0000049E 6F66696369616C6573-         stringOficiales         db "oficiales", 0
   211 000004A7 00                 
   212                                  
   213 000004A8 52617AC3B36E3A2025-         msgRazonGanador         db "Razón: %s", 10, 0
   213 000004B1 730A00             
   214                                  
   215 000004B4 2D2D2D2D00                  varRazonFin             db '----', 0 ; Razón de fin de juego (a llenar)          
   216                                  
   217                                      ; Se ha decidido salir de la partida
   218 000004B9 536520686120646563-         msgSalidaPartida        db "Se ha decidido salir de la partida. ¿Desea guardarla? (s/n)", 0
   218 000004C2 696469646F2073616C-
   218 000004CB 6972206465206C6120-
   218 000004D4 706172746964612E20-
   218 000004DD C2BF44657365612067-
   218 000004E6 7561726461726C613F-
   218 000004EF 2028732F6E2900     
   219 000004F6 4E4F54413A20536920-         msgAclaracionSalida     db "NOTA: Si decide no guardar la partida, se perderá todo el progreso. En cambio, si decide guardarla y tenía una partida guardada, se sobreescribirá.", 0
   219 000004FF 646563696465206E6F-
   219 00000508 206775617264617220-
   219 00000511 6C6120706172746964-
   219 0000051A 612C20736520706572-
   219 00000523 646572C3A120746F64-
   219 0000052C 6F20656C2070726F67-
   219 00000535 7265736F2E20456E20-
   219 0000053E 63616D62696F2C2073-
   219 00000547 692064656369646520-
   219 00000550 677561726461726C61-
   219 00000559 20792074656EC3AD61-
   219 00000562 20756E612070617274-
   219 0000056B 696461206775617264-
   219 00000574 6164612C2073652073-
   219 0000057D 6F6272656573637269-
   219 00000586 626972C3A12E00     
   220 0000058D 6E00                        guardadoPartida         db 'n', 0 ; guardar (s), no guardar (n)
   221                                  
   222 0000058F 6E00                        yaHabiaGuardado         db 'n', 0 ; ya había guardado (s), no había guardado (n)
   223                                  
   224 00000591 7300                        turnoDe                 db 's', 0 ; soldados (s), oficiales (o)
   225                                  
   226 00000593 C2A150617274696461-         msgPartidaGuardada      db "¡Partida guardada con éxito!", 0
   226 0000059C 206775617264616461-
   226 000005A5 20636F6E20C3A97869-
   226 000005AE 746F2100           
   227                                  
   228 000005B2 4572726F7220616C20-         msgErrorOpenFile        db "Error al abrir el archivo.", 0
   228 000005BB 616272697220656C20-
   228 000005C4 6172636869766F2E00 
   229                                  
   230                                      ; Razones de victoria de soldados
   231 000005CD 6C6F7320736F6C6461-         msgSoldadosFortaleza    db "los soldados han ocupado todos las casillas de la fortaleza.", 0
   231 000005D6 646F732068616E206F-
   231 000005DF 63757061646F20746F-
   231 000005E8 646F73206C61732063-
   231 000005F1 6173696C6C61732064-
   231 000005FA 65206C6120666F7274-
   231 00000603 616C657A612E00     
   232 0000060A 6C6F7320736F6C6461-         msgSoldadosRodean       db "los soldados han rodeado a los oficiales.", 0
   232 00000613 646F732068616E2072-
   232 0000061C 6F646561646F206120-
   232 00000625 6C6F73206F66696369-
   232 0000062E 616C65732E00       
   233 00000634 616D626F73206F6669-         msgSoldadosInvalidar    db "ambos oficiales han sido invalidados.", 0
   233 0000063D 6369616C6573206861-
   233 00000646 6E207369646F20696E-
   233 0000064F 76616C696461646F73-
   233 00000658 2E00               
   234                                  
   235                                      ; Razones de victoria de oficiales
   236 0000065A 6E6F2071756564616E-         msgOficialesGanan       db "no quedan suficientes soldados para ocupar la fortaleza.", 0
   236 00000663 20737566696369656E-
   236 0000066C 74657320736F6C6461-
   236 00000675 646F73207061726120-
   236 0000067E 6F6375706172206C61-
   236 00000687 20666F7274616C657A-
   236 00000690 612E00             
   237                                  
   238                                      ; Turnos
   239 00000693 4573207475726E6F20-         msgTurnoSoldados        db "Es turno de los soldados. Decida a qué soldado desea mover: (<numFila>-<numColumna>)", 0
   239 0000069C 6465206C6F7320736F-
   239 000006A5 6C6461646F732E2044-
   239 000006AE 656369646120612071-
   239 000006B7 75C3A920736F6C6461-
   239 000006C0 646F20646573656120-
   239 000006C9 6D6F7665723A20283C-
   239 000006D2 6E756D46696C613E2D-
   239 000006DB 3C6E756D436F6C756D-
   239 000006E4 6E613E2900         
   240 000006E9 4573207475726E6F20-         msgTurnoOficiales       db "Es turno de los oficiales. Decida a qué oficial desea mover: (<numFila>-<numColumna>)", 0
   240 000006F2 6465206C6F73206F66-
   240 000006FB 696369616C65732E20-
   240 00000704 446563696461206120-
   240 0000070D 7175C3A9206F666963-
   240 00000716 69616C206465736561-
   240 0000071F 206D6F7665723A2028-
   240 00000728 3C6E756D46696C613E-
   240 00000731 2D3C6E756D436F6C75-
   240 0000073A 6D6E613E2900       
   241 00000740 C2BF41207175C3A920-         msgTurnoMovSold         db "¿A qué casilla desea mover el soldado? (<numFila>-<numColumna>)", 0
   241 00000749 636173696C6C612064-
   241 00000752 65736561206D6F7665-
   241 0000075B 7220656C20736F6C64-
   241 00000764 61646F3F20283C6E75-
   241 0000076D 6D46696C613E2D3C6E-
   241 00000776 756D436F6C756D6E61-
   241 0000077F 3E2900             
   242 00000782 C2BF41207175C3A920-         msgTurnoMovOfic         db "¿A qué casilla desea mover el oficial? (<numFila>-<numColumna>)", 0
   242 0000078B 636173696C6C612064-
   242 00000794 65736561206D6F7665-
   242 0000079D 7220656C206F666963-
   242 000007A6 69616C3F20283C6E75-
   242 000007AF 6D46696C613E2D3C6E-
   242 000007B8 756D436F6C756D6E61-
   242 000007C1 3E2900             
   243                                      
   244                                      ; Contadores
   245                                  
   246 000007C4 0000000000000000            movimientosOfic1        dq 0
   247 000007CC 0000000000000000            movimientosOfic2        dq 0
   248                                      
   249 000007D4 0000000000000000            movOfic1Adelante        dq 0
   250 000007DC 0000000000000000            movOfic1Derecha         dq 0
   251 000007E4 0000000000000000            movOfic1Izquierda       dq 0
   252 000007EC 0000000000000000            movOfic1Atras           dq 0
   253 000007F4 0000000000000000            movOfic1Diagonal        dq 0
   254 000007FC 0000000000000000            movOfic1DiagArribaDer   dq 0
   255 00000804 0000000000000000            movOfic1DiagArribaIzq   dq 0
   256 0000080C 0000000000000000            movOfic1DiagAbajoDer    dq 0
   257 00000814 0000000000000000            movOfic1DiagAbajoIzq    dq 0
   258                                  
   259 0000081C 0000000000000000            movOfic2Adelante        dq 0
   260 00000824 0000000000000000            movOfic2Derecha         dq 0
   261 0000082C 0000000000000000            movOfic2Izquierda       dq 0
   262 00000834 0000000000000000            movOfic2Atras           dq 0
   263 0000083C 0000000000000000            movOfic2Diagonal        dq 0
   264 00000844 0000000000000000            movOfic2DiagArribaDer   dq 0
   265 0000084C 0000000000000000            movOfic2DiagArribaIzq   dq 0
   266 00000854 0000000000000000            movOfic2DiagAbajoDer    dq 0
   267 0000085C 0000000000000000            movOfic2DiagAbajoIzq    dq 0
   268                                  
   269 00000864 0000000000000000            cantSoldCapturados      dq 0 ; Cuando haya 16 soldados capturados, los oficiales ganan
   270 0000086C 0000000000000000            cantOficInvalidados     dq 0 ; Cuando haya 2 oficiales invalidados, los soldados ganan
   271                                  
   272 00000874 070000000000000003-         casillaOfic1            dq 7,3
   272 0000087D 00000000000000     
   273 00000884 060000000000000005-         casillaOfic2            dq 6,5
   273 0000088D 00000000000000     
   274                                  
   275 00000894 0000000000000000            cantCapturasOfic1       dq 0
   276 0000089C 0000000000000000            cantCapturasOfic2       dq 0
   277                                  
   278 000008A4 4F00                        simboloOficiales        db 'O', 0
   279 000008A6 5800                        simboloSoldados         db 'X', 0
   280                                      
   281 000008A8 04                          orientacionTablero      db  4       ; 4 -> no rotar (default) 
   282 000008A9 73                          piezaDeInicio           db 's'      ; soldados (s), oficiales (o)
   283                                  
   284                                      ; Comandos 
   285 000008AA 636C65617200                cmdLimpiarPantalla          db "clear", 0
   286 000008B0 746F75636820706172-         cmdCrearArchivoPartida      db "touch partidaGuardada.dat", 0
   286 000008B9 746964614775617264-
   286 000008C2 6164612E64617400   
   287 000008CA 726D20706172746964-         cmdBorrarArchivoPartida     db "rm partidaGuardada.dat", 0
   287 000008D3 614775617264616461-
   287 000008DC 2E64617400         
   288 000008E1 6563686F202D6E203E-         cmdLimpiarArchivo           db "echo -n > partidaGuardada.dat", 0
   288 000008EA 207061727469646147-
   288 000008F3 756172646164612E64-
   288 000008FC 617400             
   289                                  
   290                                      ; Formatos
   291 000008FF 257500                      formatoAtoi             db "%u", 0
   292 00000902 257300                      formatoItoa             db "%s", 0
   293                                  
   294                                      ; Modos de apertura de archivos
   295 00000905 726200                      modoLectura             db "rb", 0
   296 00000908 776200                      modoEscritura           db "wb", 0
   297 0000090B 616200                      modoAppend              db "ab", 0
   298                                  
   299 0000090E 706172746964614775-         nombreArchivo           db "partidaGuardada.dat", 0
   299 00000917 6172646164612E6461-
   299 00000920 7400               
   300                                  
   301                                  section .bss
   302                                  
   303 00000000 ????????                    piezaIniElegida     resd 1  ; Variable pivote para la pieza que inicia
   304                                  
   305 00000004 <res 74h>                   tableroEnJuego      resb 116 ; Tablero en juego
   306                                  
   307 00000078 ????????                    soldadoElegido      resb 4  ; Fila y columna del soldado a mover
   308 0000007C ????????                    casillaMovSold      resb 4  ; Fila y columna de la casilla de destino del soldado
   309                                  
   310 00000080 ????????                    oficialElegido      resb 4  ; Fila y columna del oficial a mover
   311 00000084 ????????                    casillaMovOfic      resb 4  ; Fila y columna de la casilla de destino del oficial
   312                                  
   313 00000088 ????????????????            fila                resq 1
   314 00000090 ????????????????            columna             resq 1   
   315 00000098 ????????????????            desplazCasOrig      resq 1
   316                                  
   317 000000A0 ????????????????            filaAMover          resq 1
   318 000000A8 ????????????????            columnaAMover       resq 1
   319 000000B0 ????????????????            desplazCasAMover    resq 1
   320                                  
   321 000000B8 ????????????????            filaAux             resq 1
   322 000000C0 ????????????????            columnaAux          resq 1
   323 000000C8 ????????????????            desplazAux          resq 1
   324 000000D0 ????????????????            desplazAux2         resq 1
   325                                  
   326 000000D8 ????????????????            idArchGuardado      resq 1 ; ID del archivo de la partida guardada
   327                                      
   328 000000E0 <res 47h>                   msgErrorEspecificoSold  resb 71 ; Máximo largo de mensaje de error para soldados
   329 00000127 <res 47h>                   msgErrorEspecificoOfic  resb 71 ; Máximo largo de mensaje de error para oficiales
   330                                  
   331 0000016E <res 47h>                   msgErrorEspecificoSoldMov   resb 71 ; Máximo largo de mensaje de error para movimientos de soldados
   332 000001B5 <res 47h>                   msgErrorEspecificoOficMov   resb 71 ; Máximo largo de mensaje de error para movimientos de oficiales
   333                                  
   334 000001FC <res 26h>                   msgCapturaSoldado       resb 38 ; Si se capturó un soldado
   335 00000222 <res 3Bh>                   msgOficialRet           resb 59 ; Si se retiró un oficial
   336                                  
   337                                  section .text
   338                                      global main
   339                                  
   340                                  main:
   341                                      ; Vemos si hay una partida guardada
   342                                      mOpenFile nombreArchivo, modoLectura
   112 00000000 48BF-               <1>  mov rdi, %1
   112 00000002 [0E09000000000000]  <1>
   113 0000000A 48BE-               <1>  mov rsi, %2
   113 0000000C [0509000000000000]  <1>
   114 00000014 4883EC08            <1>  sub rsp, 8
   115 00000018 E8(00000000)        <1>  call fopen
   116 0000001D 4883C408            <1>  add rsp, 8
   117 00000021 48890425[D8000000]  <1>  mov qword[idArchGuardado], rax
   343 00000029 4883F800                    cmp rax, 0
   344 0000002D 7F02                        jg partidaGuardada
   345 0000002F EB18                        jmp bienvenida
   346                                  
   347                                      partidaGuardada:
   348 00000031 E866290000                      call abrirPartidaGuardada
   349 00000036 803C25[91050000]73              cmp byte[turnoDe], 's'
   350 0000003E 0F84D8000000                    je loopMovimientos
   351 00000044 E94D020000                      jmp turnoOficiales
   352                                  
   353                                      bienvenida:
   354                                          mPuts msgBienvenida
     2 00000049 48BF-               <1>  mov rdi, %1
     2 0000004B [6F00000000000000]  <1>
     3 00000053 4883EC08            <1>  sub rsp, 8
     4 00000057 E8(00000000)        <1>  call puts
     5 0000005C 4883C408            <1>  add rsp, 8
   355                                          
   356                                      ; Se debe elegir quién inicia la partida
   357                                      personalizarQuienInicia:
   358 00000060 C70425[00000000]00-             mov dword[piezaIniElegida], ''    ; vaciar variable
   358 00000068 000000             
   359                                          mPuts msgQuienInicia
     2 0000006B 48BF-               <1>  mov rdi, %1
     2 0000006D [AD02000000000000]  <1>
     3 00000075 4883EC08            <1>  sub rsp, 8
     4 00000079 E8(00000000)        <1>  call puts
     5 0000007E 4883C408            <1>  add rsp, 8
   360                                          mGets piezaIniElegida
    17 00000082 48BF-               <1>  mov rdi, %1
    17 00000084 [0000000000000000]  <1>
    18 0000008C 4883EC08            <1>  sub rsp, 8
    19 00000090 E8(00000000)        <1>  call gets
    20 00000095 4883C408            <1>  add rsp, 8
   361                                  
   362 00000099 833C25[00000000]23              cmp dword[piezaIniElegida], '#'
   363 000000A1 0F84B8220000                    je salirSinGuardar
   364                                  
   365 000000A7 833C25[00000000]6F              cmp dword[piezaIniElegida], 'o' 
   366 000000AF 7423                            je setearPiezaInicio
   367 000000B1 833C25[00000000]73              cmp dword[piezaIniElegida], 's'
   368 000000B9 7419                            je setearPiezaInicio
   369                                  
   370                                          mErrorJump msgOpcionInvalida, personalizarQuienInicia
    45                              <1>  mPuts %1
     2 000000BB 48BF-               <2>  mov rdi, %1
     2 000000BD [A100000000000000]  <2>
     3 000000C5 4883EC08            <2>  sub rsp, 8
     4 000000C9 E8(00000000)        <2>  call puts
     5 000000CE 4883C408            <2>  add rsp, 8
    46 000000D2 EB8C                <1>  jmp %2
   371                                  
   372                                          setearPiezaInicio:
   373                                              mMov piezaDeInicio, piezaIniElegida, 1
    31 000000D4 B901000000          <1>  mov rcx, %3
    32 000000D9 488D3425[00000000]  <1>  lea rsi, [%2]
    33 000000E1 488D3C25[A9080000]  <1>  lea rdi, [%1]
    34 000000E9 F3A4                <1>  rep movsb
   374 000000EB EB00                                jmp comenzarPorInicio
   375                                  
   376                                  ; --------------------------------------------------------------------------------------------
   377                                  ; RUTINA PARA COMENZAR EL JUEGO -> Se comienza desde el jugador elegido (o el default)
   378                                  ; --------------------------------------------------------------------------------------------
   379                                  
   380                                  comenzarPorInicio:
   381                                      mMov tableroEnJuego, tableroOrig, 116
    31 000000ED B974000000          <1>  mov rcx, %3
    32 000000F2 488D3425[00000000]  <1>  lea rsi, [%2]
    33 000000FA 488D3C25[04000000]  <1>  lea rdi, [%1]
    34 00000102 F3A4                <1>  rep movsb
   382                                  
   383 00000104 803C25[A9080000]73          cmp byte[piezaDeInicio], 's'
   384 0000010C 740E                        je loopMovimientos
   385 0000010E 803C25[A9080000]6F          cmp byte[piezaDeInicio], 'o'
   386 00000116 0F847A010000                je turnoOficiales
   387                                  
   388                                  
   389                                  ; COMIENZA EL JUEGO
   390                                  loopMovimientos:; mostrarTablero, mostrarTurno, realizarMovimiento, verificarFinJuego
   391                                      ; Limpiamos los mensajes de error
   392 0000011C C60425[E0000000]00          mov byte[msgErrorEspecificoSold], 0
   393 00000124 C60425[6E010000]00          mov byte[msgErrorEspecificoSoldMov], 0
   394 0000012C C60425[27010000]00          mov byte[msgErrorEspecificoOfic], 0
   395 00000134 C60425[B5010000]00          mov byte[msgErrorEspecificoOficMov], 0
   396 0000013C C60425[FC010000]00          mov byte[msgCapturaSoldado], 0
   397 00000144 C60425[22020000]00          mov byte[msgOficialRet], 0
   398                                  
   399                                      turnoSoldados:
   400 0000014C C60425[91050000]73              mov byte[turnoDe], 's'
   401 00000154 C60425[78000000]30              mov byte [soldadoElegido], '0'
   402                                      
   403                                          mCommand cmdLimpiarPantalla ; Limpia la pantalla para mostrar el tablero
    24 0000015C 48BF-               <1>  mov rdi, %1
    24 0000015E [AA08000000000000]  <1>
    25 00000166 4883EC08            <1>  sub rsp, 8
    26 0000016A E8(00000000)        <1>  call system
    27 0000016F 4883C408            <1>  add rsp, 8
   404                                  
   405                                          mPuts tableroEnJuego ; Muestro el tablero
     2 00000173 48BF-               <1>  mov rdi, %1
     2 00000175 [0400000000000000]  <1>
     3 0000017D 4883EC08            <1>  sub rsp, 8
     4 00000181 E8(00000000)        <1>  call puts
     5 00000186 4883C408            <1>  add rsp, 8
   406                                  
   407 0000018A 803C25[E0000000]00              cmp byte[msgErrorEspecificoSold], 0
   408 00000192 0F8579030000                    jne imprimirErrorSold
   409                                  
   410 00000198 803C25[6E010000]00              cmp byte[msgErrorEspecificoSoldMov], 0
   411 000001A0 0F853C070000                    jne imprimirErrorSoldMov
   412                                  
   413 000001A6 803C25[B5010000]00              cmp byte[msgErrorEspecificoOficMov], 0
   414 000001AE 0F85E60B0000                    jne imprimirOficInvalidado
   415                                  
   416 000001B4 803C25[22020000]00              cmp byte[msgOficialRet], 0
   417 000001BC 0F85F40B0000                    jne imprimirOficRetirado
   418                                  
   419 000001C2 803C25[FC010000]00              cmp byte[msgCapturaSoldado], 0
   420 000001CA 0F850C100000                    jne imprimirCapturaSoldado
   421                                  
   422                                          todoOkSold:
   423                                              ; Limpiamos los mensajes de error
   424 000001D0 C60425[E0000000]00                  mov byte[msgErrorEspecificoSold], 0
   425 000001D8 C60425[6E010000]00                  mov byte[msgErrorEspecificoSoldMov], 0
   426 000001E0 C60425[B5010000]00                  mov byte[msgErrorEspecificoOficMov], 0
   427 000001E8 C60425[FC010000]00                  mov byte[msgCapturaSoldado], 0
   428 000001F0 C60425[22020000]00                  mov byte[msgOficialRet], 0
   429                                  
   430                                              mPuts msgTurnoSoldados      ; Muestra el mensaje de seleccionar ficha a mover
     2 000001F8 48BF-               <1>  mov rdi, %1
     2 000001FA [9306000000000000]  <1>
     3 00000202 4883EC08            <1>  sub rsp, 8
     4 00000206 E8(00000000)        <1>  call puts
     5 0000020B 4883C408            <1>  add rsp, 8
   431                                              mGets soldadoElegido        ; Obtiene la ficha a mover
    17 0000020F 48BF-               <1>  mov rdi, %1
    17 00000211 [7800000000000000]  <1>
    18 00000219 4883EC08            <1>  sub rsp, 8
    19 0000021D E8(00000000)        <1>  call gets
    20 00000222 4883C408            <1>  add rsp, 8
   432                                  
   433 00000226 803C25[78000000]23                  cmp byte[soldadoElegido], '#'
   434 0000022E 0F8431210000                        je salirDelJuego
   435                                              
   436 00000234 E97C010000                          jmp verificarFichaSold ; Verifica si la ficha elegida es valida
   437                                  
   438                                              casillaAMoverseSold:
   439                                                  
   440                                                  mPuts msgTurnoMovSold   ; Muestra el mensaje de seleccionar casilla a mover
     2 00000239 48BF-               <1>  mov rdi, %1
     2 0000023B [4007000000000000]  <1>
     3 00000243 4883EC08            <1>  sub rsp, 8
     4 00000247 E8(00000000)        <1>  call puts
     5 0000024C 4883C408            <1>  add rsp, 8
   441                                                  mGets casillaMovSold    ; Obtiene la casilla a mover
    17 00000250 48BF-               <1>  mov rdi, %1
    17 00000252 [7C00000000000000]  <1>
    18 0000025A 4883EC08            <1>  sub rsp, 8
    19 0000025E E8(00000000)        <1>  call gets
    20 00000263 4883C408            <1>  add rsp, 8
   442                                  
   443 00000267 803C25[7C000000]23                      cmp byte[casillaMovSold], '#'
   444 0000026F 0F84F0200000                            je salirDelJuego
   445                                  
   446 00000275 E931040000                              jmp verificarMovimientoSold ; Verifica si el movimiento es valido
   447                                  
   448                                                  moverSoldado:
   449 0000027A E8B70A0000                                  call realizarMovimientoSold ; Realiza el movimiento
   450                                                      
   451 0000027F E8D1160000                                  call verificarFinJuegoSoldados ; Verificar fin de juego por algún movimiento de soldado
   452 00000284 4883F800                                    cmp rax, 0
   453 00000288 0F84291C0000                                je finDeJuego
   454                                  
   455 0000028E C60425[27010000]00          mov byte[msgErrorEspecificoOfic], 0
   456                                      turnoOficiales:
   457 00000296 C60425[91050000]6F              mov byte[turnoDe], 'o'
   458 0000029E C60425[80000000]30              mov byte[oficialElegido], '0'
   459                                          
   460                                          mCommand cmdLimpiarPantalla ; Limpia la pantalla para mostrar el tablero
    24 000002A6 48BF-               <1>  mov rdi, %1
    24 000002A8 [AA08000000000000]  <1>
    25 000002B0 4883EC08            <1>  sub rsp, 8
    26 000002B4 E8(00000000)        <1>  call system
    27 000002B9 4883C408            <1>  add rsp, 8
   461                                  
   462                                          mPuts tableroEnJuego ; Muestra el tablero
     2 000002BD 48BF-               <1>  mov rdi, %1
     2 000002BF [0400000000000000]  <1>
     3 000002C7 4883EC08            <1>  sub rsp, 8
     4 000002CB E8(00000000)        <1>  call puts
     5 000002D0 4883C408            <1>  add rsp, 8
   463                                  
   464 000002D4 803C25[27010000]00              cmp byte[msgErrorEspecificoOfic], 0
   465 000002DC 0F85AD030000                    jne imprimirErrorOfic
   466                                  
   467 000002E2 803C25[B5010000]00              cmp byte[msgErrorEspecificoOficMov], 0
   468 000002EA 0F85AA0A0000                    jne imprimirOficInvalidado
   469                                  
   470                                          todoOkOfic:
   471                                              ; Limpiamos los mensajes de error
   472 000002F0 C60425[27010000]00                  mov byte[msgErrorEspecificoOfic], 0
   473 000002F8 C60425[B5010000]00                  mov byte[msgErrorEspecificoOficMov], 0
   474                                  
   475                                              mPuts msgTurnoOficiales ; Muestra el mensaje de seleccionar ficha a mover
     2 00000300 48BF-               <1>  mov rdi, %1
     2 00000302 [E906000000000000]  <1>
     3 0000030A 4883EC08            <1>  sub rsp, 8
     4 0000030E E8(00000000)        <1>  call puts
     5 00000313 4883C408            <1>  add rsp, 8
   476                                              mGets oficialElegido    ; Obtiene la ficha a mover
    17 00000317 48BF-               <1>  mov rdi, %1
    17 00000319 [8000000000000000]  <1>
    18 00000321 4883EC08            <1>  sub rsp, 8
    19 00000325 E8(00000000)        <1>  call gets
    20 0000032A 4883C408            <1>  add rsp, 8
   477                                  
   478 0000032E 803C25[80000000]23                  cmp byte[oficialElegido], '#'
   479 00000336 0F8429200000                        je salirDelJuego
   480                                  
   481 0000033C E9EC010000                          jmp verificarFichaOfic ; Verifica si la ficha elegida es valida
   482                                  
   483                                              casillaAMoverseOfic:
   484                                  
   485                                                  mPuts msgTurnoMovOfic   ; Muestra el mensaje de seleccionar casilla a mover
     2 00000341 48BF-               <1>  mov rdi, %1
     2 00000343 [8207000000000000]  <1>
     3 0000034B 4883EC08            <1>  sub rsp, 8
     4 0000034F E8(00000000)        <1>  call puts
     5 00000354 4883C408            <1>  add rsp, 8
   486                                                  mGets casillaMovOfic    ; Obtiene la casilla a mover
    17 00000358 48BF-               <1>  mov rdi, %1
    17 0000035A [8400000000000000]  <1>
    18 00000362 4883EC08            <1>  sub rsp, 8
    19 00000366 E8(00000000)        <1>  call gets
    20 0000036B 4883C408            <1>  add rsp, 8
   487                                  
   488 0000036F 803C25[84000000]23                      cmp byte[casillaMovOfic], '#'
   489 00000377 0F84E81F0000                            je salirDelJuego
   490                                                  
   491 0000037D E9C3060000                              jmp verificarMovimientoOfic ; Verifica si el movimiento es valido
   492                                  
   493                                                  moverOficial:
   494 00000382 E8DD090000                                  call realizarMovimientoOfic ; Realiza el movimiento
   495                                                      ; Verificar fin de juego por algún movimiento de oficial
   496 00000387 E88F150000                                  call verificarFinJuegoOficiales
   497 0000038C 4883F800                                    cmp rax, 0
   498 00000390 0F84211B0000                                je finDeJuego
   499                                                      
   500 00000396 E9B1FDFFFF                                  jmp turnoSoldados
   501                                                  
   502                                                  capturar:
   503 0000039B E8CC0D0000                                  call capturarSoldado ; Captura soldado
   504                                                      ; Verificar fin de juego por captura de soldado
   505 000003A0 E876150000                                  call verificarFinJuegoOficiales
   506 000003A5 4883F800                                    cmp rax, 0
   507 000003A9 0F84081B0000                                je finDeJuego
   508                                                      
   509                                                  ; Repetir en loop
   510 000003AF E998FDFFFF                              jmp turnoSoldados
   511                                  
   512 000003B4 C3                          ret
   513                                  
   514                                  ; --------------------------------------------------------------------------------------------
   515                                  ; VERIFICACIONES DE PIEZAS ORIGINALES A MOVER PARA SOLDADOS Y OFICIALES
   516                                  ; --------------------------------------------------------------------------------------------
   517                                  
   518                                  verificarFichaSold:
   519 000003B5 8A0425[78000000]            mov al, byte[soldadoElegido] ; Numero de fila
   520                                      
   521                                      ; Compromabos que el caracter ingresado sea un número entre 1 y 7
   522 000003BC 3C31                        cmp al, '1'
   523 000003BE 0F8C05010000                jl errorInputSold
   524 000003C4 3C37                        cmp al, '7'
   525 000003C6 0F8FFD000000                jg errorInputSold
   526                                  
   527                                      ; Parseamos el número de fila de string a int
   528 000003CC 48C70425[88000000]-         mov qword[fila], 0
   528 000003D4 00000000           
   529                                      mSscanf byte[soldadoElegido], formatoAtoi, fila
    69 000003D8 488D3C25[78000000]  <1>  lea rdi, %1
    70 000003E0 48BE-               <1>  mov rsi, %2
    70 000003E2 [FF08000000000000]  <1>
    71 000003EA 48BA-               <1>  mov rdx, %3
    71 000003EC [8800000000000000]  <1>
    72 000003F4 4883EC08            <1>  sub rsp, 8
    73 000003F8 E8(00000000)        <1>  call sscanf
    74 000003FD 4883C408            <1>  add rsp, 8
   530 00000401 4883F801                    cmp rax, 1
   531 00000405 0F8CBE000000                jl errorInputSold
   532                                  
   533                                      ; Comprobamos que el caracter siguiente sea un guión para que cumpla con el formato establecido
   534 0000040B 8A0425[79000000]            mov al, byte[soldadoElegido+1] ; Caracter '-'
   535 00000412 3C2D                        cmp al, '-'
   536 00000414 0F85AF000000                jne errorInputSold
   537                                      
   538                                      ; Comprobamos que el número de columna sea un número entre 1 y 7
   539 0000041A 8A0425[7A000000]            mov al, byte[soldadoElegido+2] ; Numero de columna
   540 00000421 3C31                        cmp al, '1'
   541 00000423 0F8CA0000000                jl errorInputSold
   542 00000429 3C37                        cmp al, '7'
   543 0000042B 0F8F98000000                jg errorInputSold
   544                                  
   545                                      ; Parseamos el número de columna de string a int
   546 00000431 48C70425[90000000]-         mov qword[columna], 0
   546 00000439 00000000           
   547                                      mSscanf byte[soldadoElegido+2], formatoAtoi, columna
    69 0000043D 488D3C25[7A000000]  <1>  lea rdi, %1
    70 00000445 48BE-               <1>  mov rsi, %2
    70 00000447 [FF08000000000000]  <1>
    71 0000044F 48BA-               <1>  mov rdx, %3
    71 00000451 [9000000000000000]  <1>
    72 00000459 4883EC08            <1>  sub rsp, 8
    73 0000045D E8(00000000)        <1>  call sscanf
    74 00000462 4883C408            <1>  add rsp, 8
   548 00000466 4883F801                    cmp rax, 1
   549 0000046A 7C5D                        jl errorInputSold
   550                                  
   551                                      ; El ultimo caracter del string ingresado debe ser un caracter nulo
   552 0000046C 8A0425[7B000000]            mov al, byte[soldadoElegido+3] ; Caracter nulo
   553 00000473 3C00                        cmp al, 0
   554 00000475 7552                        jne errorInputSold
   555                                  
   556                                      ; Calculamos desplazamiento en el tablero
   557                                      ;  mCalcDesplaz calcula el desplazamiento en el tablero en base a la fila y columna y lo almacena en desplazCasOrig usando una formula
   558                                      mCalcDesplaz [fila], [columna], qword[desplazCasOrig]
    87 00000477 488B3C25[88000000]  <1>  mov rdi, %1
    88 0000047F 488B3425[90000000]  <1>  mov rsi, %2
    89 00000487 E894080000          <1>  call calcularDesplazamiento
    90 0000048C 48890425[98000000]  <1>  mov %3, rax
   559 00000494 488B1C25[98000000]          mov rbx, qword[desplazCasOrig]
   560                                      
   561                                      ; Limpio los registros
   562 0000049C B800000000                  mov rax,0
   563 000004A1 BA00000000                  mov rdx, 0
   564                                  
   565                                      ; Cargo en dl el caracter de la casilla en el tablero y en al el simbolo de los soldados
   566 000004A6 8A93[04000000]              mov dl, byte[tableroEnJuego+rbx]
   567 000004AC 8A0425[A6080000]            mov al, [simboloSoldados]
   568                                  
   569                                      ; Comparo los caracteres, deben ser iguales para que el movimiento no sea invalido
   570 000004B3 38C2                        cmp dl, al
   571 000004B5 7536                        jne errorCasillaInvalidaSold
   572                                      
   573                                      ; Si no hubo errores, limpio el mensaje de error y sigo con la ejecucion
   574 000004B7 B800000000                  mov rax, 0
   575 000004BC 48890425[E0000000]          mov [msgErrorEspecificoSold], rax
   576 000004C4 E970FDFFFF                  jmp casillaAMoverseSold
   577                                  
   578                                      ; Errores
   579                                      errorInputSold:
   580 000004C9 488B0425[0D010000]              mov rax, [msgErrorInputSold]
   581                                          mMov msgErrorEspecificoSold, msgErrorInputSold, 62
    31 000004D1 B93E000000          <1>  mov rcx, %3
    32 000004D6 488D3425[0D010000]  <1>  lea rsi, [%2]
    33 000004DE 488D3C25[E0000000]  <1>  lea rdi, [%1]
    34 000004E6 F3A4                <1>  rep movsb
   582 000004E8 E95FFCFFFF                      jmp turnoSoldados
   583                                  
   584                                      errorCasillaInvalidaSold:
   585 000004ED 488B0425[C6000000]              mov rax, [msgCasillaInvalidaSold]
   586                                          mMov msgErrorEspecificoSold, msgCasillaInvalidaSold, 71
    31 000004F5 B947000000          <1>  mov rcx, %3
    32 000004FA 488D3425[C6000000]  <1>  lea rsi, [%2]
    33 00000502 488D3C25[E0000000]  <1>  lea rdi, [%1]
    34 0000050A F3A4                <1>  rep movsb
   587 0000050C E93BFCFFFF                      jmp turnoSoldados
   588                                  
   589                                      imprimirErrorSold:
   590                                          mPuts msgErrorEspecificoSold
     2 00000511 48BF-               <1>  mov rdi, %1
     2 00000513 [E000000000000000]  <1>
     3 0000051B 4883EC08            <1>  sub rsp, 8
     4 0000051F E8(00000000)        <1>  call puts
     5 00000524 4883C408            <1>  add rsp, 8
   591 00000528 E9A3FCFFFF                      jmp todoOkSold
   592                                      
   593                                  
   594                                  verificarFichaOfic:
   595 0000052D 8A0C25[80000000]            mov cl, byte[oficialElegido] ; Numero de fila
   596                                      
   597                                      ; Compromabos que el caracter ingresado para la fila sea un número entre 1 y 7
   598 00000534 80F931                      cmp cl, '1'
   599 00000537 0F8C0A010000                jl errorInputOfic
   600 0000053D 80F937                      cmp cl, '7'
   601 00000540 0F8F01010000                jg errorInputOfic
   602                                      
   603                                      ; Parseamos el número de fila de string a int
   604 00000546 48C70425[88000000]-         mov qword[fila], 0
   604 0000054E 00000000           
   605                                      mSscanf byte[oficialElegido], formatoAtoi, fila
    69 00000552 488D3C25[80000000]  <1>  lea rdi, %1
    70 0000055A 48BE-               <1>  mov rsi, %2
    70 0000055C [FF08000000000000]  <1>
    71 00000564 48BA-               <1>  mov rdx, %3
    71 00000566 [8800000000000000]  <1>
    72 0000056E 4883EC08            <1>  sub rsp, 8
    73 00000572 E8(00000000)        <1>  call sscanf
    74 00000577 4883C408            <1>  add rsp, 8
   606 0000057B 4883F801                    cmp rax, 1
   607 0000057F 0F8CC2000000                jl errorInputOfic
   608                                  
   609                                      ; Comprobamos que el caracter siguiente sea un guión para que cumpla con el formato establecido
   610 00000585 8A0C25[81000000]            mov cl, byte[oficialElegido+1] ; Caracter '-'
   611 0000058C 80F92D                      cmp cl, '-'
   612 0000058F 0F85B2000000                jne errorInputOfic
   613                                      
   614                                      ; Comprobamos que el número de columna sea un número entre 1 y 7
   615 00000595 8A0C25[82000000]            mov cl, byte[oficialElegido+2] ; Numero de columna
   616 0000059C 80F931                      cmp cl, '1'
   617 0000059F 0F8CA2000000                jl errorInputOfic
   618 000005A5 80F937                      cmp cl, '7'
   619 000005A8 0F8F99000000                jg errorInputOfic
   620                                  
   621                                      ; Parseamos el número de columna de string a int
   622 000005AE 48C70425[90000000]-         mov qword[columna], 0
   622 000005B6 00000000           
   623                                      mSscanf byte[oficialElegido+2], formatoAtoi, columna
    69 000005BA 488D3C25[82000000]  <1>  lea rdi, %1
    70 000005C2 48BE-               <1>  mov rsi, %2
    70 000005C4 [FF08000000000000]  <1>
    71 000005CC 48BA-               <1>  mov rdx, %3
    71 000005CE [9000000000000000]  <1>
    72 000005D6 4883EC08            <1>  sub rsp, 8
    73 000005DA E8(00000000)        <1>  call sscanf
    74 000005DF 4883C408            <1>  add rsp, 8
   624 000005E3 4883F801                    cmp rax, 1
   625 000005E7 7C5E                        jl errorInputOfic
   626                                  
   627                                      ; El ultimo caracter del string ingresado debe ser un caracter nulo
   628 000005E9 8A0C25[83000000]            mov cl, byte[oficialElegido+3] ; Caracter nulo
   629 000005F0 80F900                      cmp cl, 0
   630 000005F3 7552                        jne errorInputOfic
   631                                  
   632                                      ; Calculamos desplazamiento en tablero
   633                                      ; mCalcDesplaz calcula el desplazamiento en el tablero en base a la fila y columna y lo almacena en desplazCasOrig usando una formula
   634                                      mCalcDesplaz [fila], [columna], qword[desplazCasOrig]
    87 000005F5 488B3C25[88000000]  <1>  mov rdi, %1
    88 000005FD 488B3425[90000000]  <1>  mov rsi, %2
    89 00000605 E816070000          <1>  call calcularDesplazamiento
    90 0000060A 48890425[98000000]  <1>  mov %3, rax
   635 00000612 488B1C25[98000000]          mov rbx, qword[desplazCasOrig]
   636                                      
   637                                      ; Limpio los registros
   638 0000061A B800000000                  mov rax, 0
   639 0000061F BA00000000                  mov rdx, 0
   640                                  
   641                                      ; Cargo en dl el caracter de la casilla en el tablero y en cl el simbolo de los oficiales
   642 00000624 8A93[04000000]              mov dl, byte[tableroEnJuego+rbx]
   643 0000062A 8A0C25[A4080000]            mov cl, [simboloOficiales]
   644                                  
   645                                      ; Comparo los caracteres, deben ser iguales para que el movimiento no sea invalido
   646 00000631 38CA                        cmp dl, cl
   647 00000633 7536                        jne errorCasillaInvalidaOfic
   648                                  
   649                                      ; Si no hubo errores, limpio el mensaje de error y sigo con la ejecucion
   650 00000635 B800000000                  mov rax, 0
   651 0000063A 48890425[27010000]          mov [msgErrorEspecificoOfic], rax
   652 00000642 E9FAFCFFFF                  jmp casillaAMoverseOfic
   653                                  
   654                                      ; Errores
   655                                      errorInputOfic:
   656 00000647 488B0425[D0010000]              mov rax, [msgErrorInputOfic]
   657                                          mMov msgErrorEspecificoOfic, msgErrorInputOfic, 62
    31 0000064F B93E000000          <1>  mov rcx, %3
    32 00000654 488D3425[D0010000]  <1>  lea rsi, [%2]
    33 0000065C 488D3C25[27010000]  <1>  lea rdi, [%1]
    34 00000664 F3A4                <1>  rep movsb
   658 00000666 E92BFCFFFF                      jmp turnoOficiales
   659                                  
   660                                      errorCasillaInvalidaOfic:
   661 0000066B 488B0425[89010000]              mov rax, [msgCasillaInvalidaOfic]
   662                                          mMov msgErrorEspecificoOfic, msgCasillaInvalidaOfic, 71
    31 00000673 B947000000          <1>  mov rcx, %3
    32 00000678 488D3425[89010000]  <1>  lea rsi, [%2]
    33 00000680 488D3C25[27010000]  <1>  lea rdi, [%1]
    34 00000688 F3A4                <1>  rep movsb
   663 0000068A E907FCFFFF                      jmp turnoOficiales
   664                                  
   665                                      imprimirErrorOfic:
   666                                          mPuts msgErrorEspecificoOfic
     2 0000068F 48BF-               <1>  mov rdi, %1
     2 00000691 [2701000000000000]  <1>
     3 00000699 4883EC08            <1>  sub rsp, 8
     4 0000069D E8(00000000)        <1>  call puts
     5 000006A2 4883C408            <1>  add rsp, 8
   667 000006A6 E945FCFFFF                      jmp todoOkOfic
   668                                  
   669                                  ; --------------------------------------------------------------------------------------------
   670                                  ; VERFICIACIONES DE CASILLAS DESTINO PARA SOLDADOS Y OFICIALES
   671                                  ; --------------------------------------------------------------------------------------------
   672                                  
   673                                  verificarMovimientoSold:
   674 000006AB 8A0425[7C000000]            mov al, byte[casillaMovSold] ; Numero de fila
   675                                      
   676                                      ; Compromabos que el caracter ingresado sea un número entre 1 y 7
   677 000006B2 3C31                        cmp al, '1'
   678 000006B4 0F8CE0010000                jl errorInputSoldMov
   679 000006BA 3C37                        cmp al, '7'
   680 000006BC 0F8FD8010000                jg errorInputSoldMov
   681                                  
   682                                      ; Parseamos el número de fila de string a int
   683 000006C2 48C70425[A0000000]-         mov qword[filaAMover], 0
   683 000006CA 00000000           
   684                                      mSscanf byte[casillaMovSold], formatoAtoi, filaAMover
    69 000006CE 488D3C25[7C000000]  <1>  lea rdi, %1
    70 000006D6 48BE-               <1>  mov rsi, %2
    70 000006D8 [FF08000000000000]  <1>
    71 000006E0 48BA-               <1>  mov rdx, %3
    71 000006E2 [A000000000000000]  <1>
    72 000006EA 4883EC08            <1>  sub rsp, 8
    73 000006EE E8(00000000)        <1>  call sscanf
    74 000006F3 4883C408            <1>  add rsp, 8
   685 000006F7 4883F801                    cmp rax, 1
   686 000006FB 0F8C99010000                jl errorInputSoldMov
   687                                  
   688                                      ; Comprobamos que el caracter siguiente sea un guión para que cumpla con el formato establecido
   689 00000701 8A0425[7D000000]            mov al, byte[casillaMovSold+1] ; Caracter '-'
   690 00000708 3C2D                        cmp al, '-'
   691 0000070A 0F858A010000                jne errorInputSoldMov
   692                                      
   693                                      ; Comprobamos que el número de columna sea un número entre 1 y 7
   694 00000710 8A0425[7E000000]            mov al, byte[casillaMovSold+2] ; Numero de columna
   695 00000717 3C31                        cmp al, '1'
   696 00000719 0F8C7B010000                jl errorInputSoldMov
   697 0000071F 3C37                        cmp al, '7'
   698 00000721 0F8F73010000                jg errorInputSoldMov
   699                                      
   700                                      ; Parseamos el número de columna de string a int
   701 00000727 48C70425[A8000000]-         mov qword[columnaAMover], 0
   701 0000072F 00000000           
   702                                      mSscanf byte[casillaMovSold+2], formatoAtoi, columnaAMover
    69 00000733 488D3C25[7E000000]  <1>  lea rdi, %1
    70 0000073B 48BE-               <1>  mov rsi, %2
    70 0000073D [FF08000000000000]  <1>
    71 00000745 48BA-               <1>  mov rdx, %3
    71 00000747 [A800000000000000]  <1>
    72 0000074F 4883EC08            <1>  sub rsp, 8
    73 00000753 E8(00000000)        <1>  call sscanf
    74 00000758 4883C408            <1>  add rsp, 8
   703 0000075C 4883F801                    cmp rax, 1
   704 00000760 0F8C34010000                jl errorInputSoldMov
   705                                  
   706                                      ; El ultimo caracter del string ingresado debe ser un caracter nulo
   707 00000766 8A0425[7F000000]            mov al, byte[casillaMovSold+3] ; Caracter nulo
   708 0000076D 3C00                        cmp al, 0
   709 0000076F 0F8525010000                jne errorInputSoldMov
   710                                  
   711                                      ; Primero chequeamos si el soldado original está en alguna de las posiciones especiales
   712 00000775 E842070000                  call chequearSoldPosEspeciales
   713 0000077A 4883F800                    cmp rax, 0
   714 0000077E 7423                        je lugaresComunesSold ; Si recibimos 1, la casilla original es un lugar común: intentamos hacer el movimiento normal
   715                                      
   716 00000780 4883F801                    cmp rax, 1 ; Si recibimos 1, la casilla original es un lugar especial: solo podemos movernos a la derecha
   717 00000784 0F8474010000                je soloDerechaSold
   718 0000078A 4883F802                    cmp rax, 2 ; Si recibimos 2, la casilla original es un lugar especial: solo podemos movernos a la izquierda
   719 0000078E 0F840D020000                je soloIzquierdaSold
   720                                      
   721                                      casillaEspecialAMover:
   722 00000794 4983F800                        cmp r8, 0
   723 00000798 0F8520010000                    jne errorCasillaInvalidaSoldMov
   724 0000079E E9D7FAFFFF                      jmp moverSoldado
   725                                  
   726                                      lugaresComunesSold:
   727                                          ; Comparamos la fila a mover con la fila actual, la fila a mover debe ser igual a la fila actual + 1
   728                                          mMov filaAux, fila, 1
    31 000007A3 B901000000          <1>  mov rcx, %3
    32 000007A8 488D3425[88000000]  <1>  lea rsi, [%2]
    33 000007B0 488D3C25[B8000000]  <1>  lea rdi, [%1]
    34 000007B8 F3A4                <1>  rep movsb
   729 000007BA 48FF0425[B8000000]              inc qword[filaAux]
   730                                          mCmp [filaAux], [filaAMover], 1
    38 000007C2 B901000000          <1>  mov rcx, %3
    39 000007C7 488D3425[B8000000]  <1>  lea rsi, %1
    40 000007CF 488D3C25[A0000000]  <1>  lea rdi, %2
    41 000007D7 F3A6                <1>  repe cmpsb
   731 000007D9 0F85DF000000                    jne errorCasillaInvalidaSoldMov
   732                                  
   733                                          ; Comparamos la columna a mover con la columna actual
   734 000007DF 48C70425[C0000000]-             mov qword[columnaAux], 0 ; Reiniciamos la columna auxiliar
   734 000007E7 00000000           
   735                                          mMov columnaAux, columna, 1
    31 000007EB B901000000          <1>  mov rcx, %3
    32 000007F0 488D3425[90000000]  <1>  lea rsi, [%2]
    33 000007F8 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 00000800 F3A4                <1>  rep movsb
   736                                  
   737                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento hacia adelante
    38 00000802 B901000000          <1>  mov rcx, %3
    39 00000807 488D3425[C0000000]  <1>  lea rsi, %1
    40 0000080F 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00000817 F3A6                <1>  repe cmpsb
   738 00000819 7445                            je columnaSoldAMoverValida
   739                                  
   740 0000081B 48FF0425[C0000000]              inc qword[columnaAux]
   741                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la izquierda
    38 00000823 B901000000          <1>  mov rcx, %3
    39 00000828 488D3425[C0000000]  <1>  lea rsi, %1
    40 00000830 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00000838 F3A6                <1>  repe cmpsb
   742 0000083A 7424                            je columnaSoldAMoverValida
   743                                  
   744 0000083C 48832C25[C0000000]-             sub qword[columnaAux], 2
   744 00000844 02                 
   745                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la derecha
    38 00000845 B901000000          <1>  mov rcx, %3
    39 0000084A 488D3425[C0000000]  <1>  lea rsi, %1
    40 00000852 488D3C25[A8000000]  <1>  lea rdi, %2
    41 0000085A F3A6                <1>  repe cmpsb
   746 0000085C 7402                            je columnaSoldAMoverValida
   747                                  
   748 0000085E EB5E                            jmp errorCasillaInvalidaSoldMov
   749                                  
   750                                      columnaSoldAMoverValida: ; Queda ver si en esa casilla está vacía o no
   751                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    87 00000860 488B3C25[A0000000]  <1>  mov rdi, %1
    88 00000868 488B3425[A8000000]  <1>  mov rsi, %2
    89 00000870 E8AB040000          <1>  call calcularDesplazamiento
    90 00000875 48890425[B0000000]  <1>  mov %3, rax
   752                                          mEstaVacia qword[desplazCasAMover]
    94 0000087D B800000000          <1>  mov rax, 0
    95 00000882 488B3C25[B0000000]  <1>  mov rdi, %1
    96 0000088A E858040000          <1>  call estaVacia
   753 0000088F 4883F801                        cmp rax, 1
   754 00000893 7429                            je errorCasillaInvalidaSoldMov ; Si recibimos 1, la casilla está ocupada (o está fuera del tablero)
   755                                          
   756 00000895 E9E0F9FFFF                      jmp moverSoldado 
   757                                  
   758                                      ; Errores
   759                                      errorInputSoldMov:
   760 0000089A 488B0425[0D010000]              mov rax, [msgErrorInputSold]
   761                                          mMov msgErrorEspecificoSoldMov, msgErrorInputSold, 62
    31 000008A2 B93E000000          <1>  mov rcx, %3
    32 000008A7 488D3425[0D010000]  <1>  lea rsi, [%2]
    33 000008AF 488D3C25[6E010000]  <1>  lea rdi, [%1]
    34 000008B7 F3A4                <1>  rep movsb
   762 000008B9 E98EF8FFFF                      jmp turnoSoldados
   763                                  
   764                                      errorCasillaInvalidaSoldMov:
   765 000008BE 488B0425[4B010000]              mov rax, [msgCasillaInvMovSold]
   766                                          mMov msgErrorEspecificoSoldMov, msgCasillaInvMovSold, 62
    31 000008C6 B93E000000          <1>  mov rcx, %3
    32 000008CB 488D3425[4B010000]  <1>  lea rsi, [%2]
    33 000008D3 488D3C25[6E010000]  <1>  lea rdi, [%1]
    34 000008DB F3A4                <1>  rep movsb
   767 000008DD E96AF8FFFF                      jmp turnoSoldados
   768                                  
   769                                      imprimirErrorSoldMov:
   770                                          mPuts msgErrorEspecificoSoldMov
     2 000008E2 48BF-               <1>  mov rdi, %1
     2 000008E4 [6E01000000000000]  <1>
     3 000008EC 4883EC08            <1>  sub rsp, 8
     4 000008F0 E8(00000000)        <1>  call puts
     5 000008F5 4883C408            <1>  add rsp, 8
   771 000008F9 E9D2F8FFFF                      jmp todoOkSold
   772                                  
   773                                      ; Si la casilla original es una casilla especial, solo podemos movernos a la derecha o a la izquierda
   774                                      soloDerechaSold:
   775 000008FE 41B801000000                    mov r8, 1 ; Suponemos que el movimiento es inválido
   776                                  
   777                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover] ; Calculamos el desplazamiento de la casilla a mover
    87 00000904 488B3C25[A0000000]  <1>  mov rdi, %1
    88 0000090C 488B3425[A8000000]  <1>  mov rsi, %2
    89 00000914 E807040000          <1>  call calcularDesplazamiento
    90 00000919 48890425[B0000000]  <1>  mov %3, rax
   778                                          mEstaVacia qword[desplazCasAMover] ; Verificamos si la casilla a mover está vacía
    94 00000921 B800000000          <1>  mov rax, 0
    95 00000926 488B3C25[B0000000]  <1>  mov rdi, %1
    96 0000092E E8B4030000          <1>  call estaVacia
   779 00000933 4883F801                        cmp rax, 1 ; Si recibimos 1, la casilla a mover está ocupada (o está fuera del tablero)
   780 00000937 0F8457FEFFFF                    je casillaEspecialAMover
   781                                          
   782                                          mCmp [fila], [filaAMover], 1 ; Las filas deben ser iguales (el movimiento especial es para el costado)
    38 0000093D B901000000          <1>  mov rcx, %3
    39 00000942 488D3425[88000000]  <1>  lea rsi, %1
    40 0000094A 488D3C25[A0000000]  <1>  lea rdi, %2
    41 00000952 F3A6                <1>  repe cmpsb
   783 00000954 0F853AFEFFFF                    jne casillaEspecialAMover
   784                                  
   785                                          mMov columnaAux, columna, 1
    31 0000095A B901000000          <1>  mov rcx, %3
    32 0000095F 488D3425[90000000]  <1>  lea rsi, [%2]
    33 00000967 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 0000096F F3A4                <1>  rep movsb
   786 00000971 48FF0425[C0000000]              inc qword[columnaAux]
   787                                          mCmp [columnaAux], [columnaAMover], 1
    38 00000979 B901000000          <1>  mov rcx, %3
    39 0000097E 488D3425[C0000000]  <1>  lea rsi, %1
    40 00000986 488D3C25[A8000000]  <1>  lea rdi, %2
    41 0000098E F3A6                <1>  repe cmpsb
   788 00000990 0F85FEFDFFFF                    jne casillaEspecialAMover
   789                                          
   790 00000996 41B800000000                    mov r8, 0 ; Si llegamos acá, el movimiento es válido
   791 0000099C E9F3FDFFFF                      jmp casillaEspecialAMover
   792                                      
   793                                      soloIzquierdaSold:
   794 000009A1 41B801000000                    mov r8, 1 ; Suponemos que el movimiento es inválido
   795                                  
   796                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    87 000009A7 488B3C25[A0000000]  <1>  mov rdi, %1
    88 000009AF 488B3425[A8000000]  <1>  mov rsi, %2
    89 000009B7 E864030000          <1>  call calcularDesplazamiento
    90 000009BC 48890425[B0000000]  <1>  mov %3, rax
   797                                          mEstaVacia qword[desplazCasAMover]
    94 000009C4 B800000000          <1>  mov rax, 0
    95 000009C9 488B3C25[B0000000]  <1>  mov rdi, %1
    96 000009D1 E811030000          <1>  call estaVacia
   798 000009D6 4883F801                        cmp rax, 1 
   799 000009DA 0F84B4FDFFFF                    je casillaEspecialAMover
   800                                  
   801                                          mCmp [fila], [filaAMover], 1 ; Las filas deben ser iguales (el movimiento especial es para el costado)
    38 000009E0 B901000000          <1>  mov rcx, %3
    39 000009E5 488D3425[88000000]  <1>  lea rsi, %1
    40 000009ED 488D3C25[A0000000]  <1>  lea rdi, %2
    41 000009F5 F3A6                <1>  repe cmpsb
   802 000009F7 0F8597FDFFFF                    jne casillaEspecialAMover
   803                                  
   804                                          mMov columnaAux, columna, 1
    31 000009FD B901000000          <1>  mov rcx, %3
    32 00000A02 488D3425[90000000]  <1>  lea rsi, [%2]
    33 00000A0A 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 00000A12 F3A4                <1>  rep movsb
   805 00000A14 48FF0C25[C0000000]              dec qword[columnaAux]
   806                                          mCmp [columnaAux], [columnaAMover], 1
    38 00000A1C B901000000          <1>  mov rcx, %3
    39 00000A21 488D3425[C0000000]  <1>  lea rsi, %1
    40 00000A29 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00000A31 F3A6                <1>  repe cmpsb
   807 00000A33 0F855BFDFFFF                    jne casillaEspecialAMover
   808                                  
   809 00000A39 41B800000000                    mov r8, 0 ; Si llegamos acá, el movimiento es válido
   810 00000A3F E950FDFFFF                      jmp casillaEspecialAMover
   811                                      
   812 00000A44 C3                          ret
   813                                  
   814                                  verificarMovimientoOfic:
   815 00000A45 8A0425[84000000]            mov al, byte[casillaMovOfic] ; Numero de fila
   816                                      
   817 00000A4C 3C31                        cmp al, '1'
   818 00000A4E 0F8C2F020000                jl errorInputOficMov
   819 00000A54 3C37                        cmp al, '7'
   820 00000A56 0F8F27020000                jg errorInputOficMov
   821                                  
   822 00000A5C 48C70425[A0000000]-         mov qword[filaAMover], 0
   822 00000A64 00000000           
   823                                      mSscanf byte[casillaMovOfic], formatoAtoi, filaAMover
    69 00000A68 488D3C25[84000000]  <1>  lea rdi, %1
    70 00000A70 48BE-               <1>  mov rsi, %2
    70 00000A72 [FF08000000000000]  <1>
    71 00000A7A 48BA-               <1>  mov rdx, %3
    71 00000A7C [A000000000000000]  <1>
    72 00000A84 4883EC08            <1>  sub rsp, 8
    73 00000A88 E8(00000000)        <1>  call sscanf
    74 00000A8D 4883C408            <1>  add rsp, 8
   824                                  
   825 00000A91 4883F801                    cmp rax, 1
   826 00000A95 0F8CE8010000                jl errorInputOficMov
   827                                  
   828 00000A9B 8A0425[85000000]            mov al, byte[casillaMovOfic+1] ; Caracter '-'
   829 00000AA2 3C2D                        cmp al, '-'
   830 00000AA4 0F85D9010000                jne errorInputOficMov
   831                                      
   832 00000AAA 8A0425[86000000]            mov al, byte[casillaMovOfic+2] ; Numero de columna
   833 00000AB1 3C31                        cmp al, '1'
   834 00000AB3 0F8CCA010000                jl errorInputOficMov
   835 00000AB9 3C37                        cmp al, '7'
   836 00000ABB 0F8FC2010000                jg errorInputOficMov
   837                                  
   838 00000AC1 48C70425[A8000000]-         mov qword[columnaAMover], 0
   838 00000AC9 00000000           
   839                                      mSscanf byte[casillaMovOfic+2], formatoAtoi, columnaAMover
    69 00000ACD 488D3C25[86000000]  <1>  lea rdi, %1
    70 00000AD5 48BE-               <1>  mov rsi, %2
    70 00000AD7 [FF08000000000000]  <1>
    71 00000ADF 48BA-               <1>  mov rdx, %3
    71 00000AE1 [A800000000000000]  <1>
    72 00000AE9 4883EC08            <1>  sub rsp, 8
    73 00000AED E8(00000000)        <1>  call sscanf
    74 00000AF2 4883C408            <1>  add rsp, 8
   840                                  
   841 00000AF6 4883F801                    cmp rax, 1
   842 00000AFA 0F8C83010000                jl errorInputOficMov
   843                                  
   844 00000B00 8A0425[87000000]            mov al, byte[casillaMovOfic+3] ; Caracter nulo
   845 00000B07 3C00                        cmp al, 0
   846 00000B09 0F8574010000                jne errorInputOficMov
   847                                  
   848                                      ; Comparamos la fila a mover con la fila actual
   849                                      mMov filaAux, fila, 1
    31 00000B0F B901000000          <1>  mov rcx, %3
    32 00000B14 488D3425[88000000]  <1>  lea rsi, [%2]
    33 00000B1C 488D3C25[B8000000]  <1>  lea rdi, [%1]
    34 00000B24 F3A4                <1>  rep movsb
   850                                  
   851                                      mCmp [filaAux], [filaAMover], 1
    38 00000B26 B901000000          <1>  mov rcx, %3
    39 00000B2B 488D3425[B8000000]  <1>  lea rsi, %1
    40 00000B33 488D3C25[A0000000]  <1>  lea rdi, %2
    41 00000B3B F3A6                <1>  repe cmpsb
   852 00000B3D 7448                        je filaOficAMoverValida ; Filas iguales -> válido
   853 00000B3F 48FF0425[B8000000]          inc qword[filaAux]
   854                                      mCmp [filaAux], [filaAMover], 1
    38 00000B47 B901000000          <1>  mov rcx, %3
    39 00000B4C 488D3425[B8000000]  <1>  lea rsi, %1
    40 00000B54 488D3C25[A0000000]  <1>  lea rdi, %2
    41 00000B5C F3A6                <1>  repe cmpsb
   855 00000B5E 7427                        je filaOficAMoverValida
   856 00000B60 48832C25[B8000000]-         sub qword[filaAux], 2
   856 00000B68 02                 
   857                                      mCmp [filaAux], [filaAMover], 1
    38 00000B69 B901000000          <1>  mov rcx, %3
    39 00000B6E 488D3425[B8000000]  <1>  lea rsi, %1
    40 00000B76 488D3C25[A0000000]  <1>  lea rdi, %2
    41 00000B7E F3A6                <1>  repe cmpsb
   858 00000B80 7405                        je filaOficAMoverValida
   859                                  
   860 00000B82 E920010000                  jmp errorCasillaInvalidaOficMov
   861                                  
   862                                      filaOficAMoverValida:
   863                                          ; Comparamos la columna a mover con la columna actual
   864 00000B87 48C70425[C0000000]-             mov qword[columnaAux], 0 ; Reiniciamos la columna auxiliar
   864 00000B8F 00000000           
   865                                          mMov columnaAux, columna, 1
    31 00000B93 B901000000          <1>  mov rcx, %3
    32 00000B98 488D3425[90000000]  <1>  lea rsi, [%2]
    33 00000BA0 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 00000BA8 F3A4                <1>  rep movsb
   866                                  
   867                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento hacia adelante
    38 00000BAA B901000000          <1>  mov rcx, %3
    39 00000BAF 488D3425[C0000000]  <1>  lea rsi, %1
    40 00000BB7 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00000BBF F3A6                <1>  repe cmpsb
   868 00000BC1 7448                            je columnaOficAMoverValida
   869                                  
   870 00000BC3 48FF0425[C0000000]              inc qword[columnaAux]
   871                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la izquierda
    38 00000BCB B901000000          <1>  mov rcx, %3
    39 00000BD0 488D3425[C0000000]  <1>  lea rsi, %1
    40 00000BD8 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00000BE0 F3A6                <1>  repe cmpsb
   872 00000BE2 7427                            je columnaOficAMoverValida
   873                                  
   874 00000BE4 48832C25[C0000000]-             sub qword[columnaAux], 2
   874 00000BEC 02                 
   875                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la derecha
    38 00000BED B901000000          <1>  mov rcx, %3
    39 00000BF2 488D3425[C0000000]  <1>  lea rsi, %1
    40 00000BFA 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00000C02 F3A6                <1>  repe cmpsb
   876 00000C04 7405                            je columnaOficAMoverValida
   877                                  
   878 00000C06 E99C000000                      jmp errorCasillaInvalidaOficMov
   879                                  
   880                                      columnaOficAMoverValida: ; Podríamos hacer un movimiento normal (casilla vacía) o capturar un soldado...
   881                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    87 00000C0B 488B3C25[A0000000]  <1>  mov rdi, %1
    88 00000C13 488B3425[A8000000]  <1>  mov rsi, %2
    89 00000C1B E800010000          <1>  call calcularDesplazamiento
    90 00000C20 48890425[B0000000]  <1>  mov %3, rax
   882                                          mEstaVacia qword[desplazCasAMover]
    94 00000C28 B800000000          <1>  mov rax, 0
    95 00000C2D 488B3C25[B0000000]  <1>  mov rdi, %1
    96 00000C35 E8AD000000          <1>  call estaVacia
   883 00000C3A 4883F800                        cmp rax, 0
   884 00000C3E 0F843EF7FFFF                    je moverOficial ; Si llegamos acá, la casilla a mover está vacía -> movimiento normal
   885                                          
   886                                          ; Si llegamos acá, la casilla no está vacía: ver si hay un soldado para capturar
   887                                          mHaySoldado qword[desplazCasAMover]
   100 00000C44 B800000000          <1>  mov rax, 0
   101 00000C49 488B3C25[B0000000]  <1>  mov rdi, %1
   102 00000C51 E8A6000000          <1>  call haySoldado
   888 00000C56 4883F801                        cmp rax, 1
   889 00000C5A 744B                            je errorCasillaInvalidaOficMov ; Si recibimos 1, la casilla a ocupar no tiene un soldado -> movimiento inválido
   890                                  
   891                                          ; Si llegamos acá, la casilla a ocupar tiene un soldado: debemos ver si el oficial puede saltar sobre él...
   892 00000C5C E8A4020000                      call sePuedeSaltarSoldado
   893 00000C61 4883F801                        cmp rax, 1
   894 00000C65 7440                            je errorCasillaInvalidaOficMov ; Si recibimos 1, el oficial no puede saltar sobre el soldado -> movimiento inválido
   895                                  
   896                                          mMov msgCapturaSoldado, msgCapturaSold, 38
    31 00000C67 B926000000          <1>  mov rcx, %3
    32 00000C6C 488D3425[4C020000]  <1>  lea rsi, [%2]
    33 00000C74 488D3C25[FC010000]  <1>  lea rdi, [%1]
    34 00000C7C F3A4                <1>  rep movsb
   897 00000C7E E918F7FFFF                      jmp capturar
   898                                  
   899                                      errorInputOficMov:
   900 00000C83 488B0425[D0010000]              mov rax, [msgErrorInputOfic]
   901                                          mMov msgErrorEspecificoOficMov, msgErrorInputOfic, 62
    31 00000C8B B93E000000          <1>  mov rcx, %3
    32 00000C90 488D3425[D0010000]  <1>  lea rsi, [%2]
    33 00000C98 488D3C25[B5010000]  <1>  lea rdi, [%1]
    34 00000CA0 F3A4                <1>  rep movsb
   902 00000CA2 E9EFF5FFFF                      jmp turnoOficiales
   903                                  
   904                                      errorCasillaInvalidaOficMov:
   905 00000CA7 488B0425[0E020000]              mov rax, [msgCasillaInvMovOfic]
   906                                          mMov msgErrorEspecificoOficMov, msgCasillaInvMovOfic, 62
    31 00000CAF B93E000000          <1>  mov rcx, %3
    32 00000CB4 488D3425[0E020000]  <1>  lea rsi, [%2]
    33 00000CBC 488D3C25[B5010000]  <1>  lea rdi, [%1]
    34 00000CC4 F3A4                <1>  rep movsb
   907 00000CC6 E9CBF5FFFF                      jmp turnoOficiales
   908                                  
   909                                      imprimirErrorOficMov:
   910                                          mPuts msgErrorEspecificoOficMov
     2 00000CCB 48BF-               <1>  mov rdi, %1
     2 00000CCD [B501000000000000]  <1>
     3 00000CD5 4883EC08            <1>  sub rsp, 8
     4 00000CD9 E8(00000000)        <1>  call puts
     5 00000CDE 4883C408            <1>  add rsp, 8
   911 00000CE2 E909F6FFFF                      jmp todoOkOfic
   912                                  
   913                                  ; --------------------------------------------------------------------------------------------
   914                                  ; RUTINA PARA VERIFICAR SI UNA CASILLA ESTÁ VACÍA
   915                                  ; --------------------------------------------------------------------------------------------
   916                                  
   917                                  estaVacia:
   918 00000CE7 80BF[04000000]20            cmp byte[tableroEnJuego+rdi], ' '
   919 00000CEE 7406                        je okVacia
   920                                  
   921 00000CF0 B801000000                  mov rax, 1
   922 00000CF5 C3                          ret
   923                                  
   924                                      okVacia:
   925 00000CF6 B800000000                      mov rax, 0
   926 00000CFB C3                              ret
   927                                  
   928                                  ; --------------------------------------------------------------------------------------------
   929                                  ; RUTINA PARA VERIFICAR SI HAY UN SOLDADO EN LA CASILLA DESTINO
   930                                  ; --------------------------------------------------------------------------------------------
   931                                  
   932                                  haySoldado:
   933                                      ; Calculamos desplazamiento en tablero
   934                                      mCmp byte[tableroEnJuego+rdi], [simboloSoldados], 1
    38 00000CFC B901000000          <1>  mov rcx, %3
    39 00000D01 488DB7[04000000]    <1>  lea rsi, %1
    40 00000D08 488D3C25[A6080000]  <1>  lea rdi, %2
    41 00000D10 F3A6                <1>  repe cmpsb
   935 00000D12 7406                        je okSoldado
   936                                  
   937 00000D14 B801000000                  mov rax, 1
   938 00000D19 C3                          ret
   939                                  
   940                                      okSoldado:
   941 00000D1A B800000000                      mov rax, 0
   942 00000D1F C3                              ret
   943                                  
   944                                  ; --------------------------------------------------------------------------------------------
   945                                  ; RUTINA PARA CALCULAR EL DESPLAZAMIENTO DE UNA CASILLA EN EL TABLERO
   946                                  ; --------------------------------------------------------------------------------------------
   947                                  
   948                                  calcularDesplazamiento:
   949 00000D20 B800000000                  mov rax, 0
   950 00000D25 4889F8                      mov rax, rdi
   951 00000D28 48FFC0                      inc rax
   952 00000D2B 666BC00B                    imul ax, 11
   953 00000D2F 4801F0                      add rax, rsi
   954 00000D32 48FFC0                      inc rax
   955                                  
   956 00000D35 C3                          ret
   957                                  
   958                                  ; --------------------------------------------------------------------------------------------------
   959                                  ; RUTINAS PARA REALIZAR MOVIMIENTOS SIMPLES DE SOLDADOS Y OFICIALES (los que no requieren capturas)
   960                                  ; --------------------------------------------------------------------------------------------------
   961                                  
   962                                  realizarMovimientoSold:
   963 00000D36 488B0425[98000000]          mov rax, qword[desplazCasOrig]
   964 00000D3E 488B1C25[B0000000]          mov rbx, qword[desplazCasAMover]
   965                                  
   966 00000D46 C680[04000000]20            mov byte[tableroEnJuego+rax], ' '
   967                                      mMov tableroEnJuego+rbx, simboloSoldados, 1
    31 00000D4D B901000000          <1>  mov rcx, %3
    32 00000D52 488D3425[A6080000]  <1>  lea rsi, [%2]
    33 00000D5A 488DBB[04000000]    <1>  lea rdi, [%1]
    34 00000D61 F3A4                <1>  rep movsb
   968                                  
   969 00000D63 C3                          ret
   970                                  
   971                                  realizarMovimientoOfic:
   972                                      ; Vemos si el oficial podía capturar un soldado y no lo hizo
   973                                      mMov desplazAux2, desplazCasOrig, 1
    31 00000D64 B901000000          <1>  mov rcx, %3
    32 00000D69 488D3425[98000000]  <1>  lea rsi, [%2]
    33 00000D71 488D3C25[D0000000]  <1>  lea rdi, [%1]
    34 00000D79 F3A4                <1>  rep movsb
   974 00000D7B E868070000                  call podiaCapturarSoldado 
   975 00000D80 4883F800                    cmp rax, 0 ; Si fue así, significa que el oficial se desentendió de su deber
   976 00000D84 744C                        je quitarOficial
   977                                  
   978                                      ; Necesitamos chequear si el otro oficial podría haber capturado al soldado
   979 00000D86 E8250A0000                  call podiaCapturarSoldadoOtroOficial
   980 00000D8B 4883F800                    cmp rax, 0 ; Si fue así, significa que el otro oficial se desentendió de su deber
   981 00000D8F 0F84BC000000                je quitarOtroOficial
   982                                  
   983 00000D95 E9D4000000                  jmp noPodianCapturar
   984                                  
   985                                      imprimirOficInvalidado:
   986                                          mPuts msgErrorEspecificoOficMov
     2 00000D9A 48BF-               <1>  mov rdi, %1
     2 00000D9C [B501000000000000]  <1>
     3 00000DA4 4883EC08            <1>  sub rsp, 8
     4 00000DA8 E8(00000000)        <1>  call puts
     5 00000DAD 4883C408            <1>  add rsp, 8
   987 00000DB1 E93AF5FFFF                      jmp todoOkOfic
   988                                  
   989                                      imprimirOficRetirado:
   990                                          mPuts msgOficialRet
     2 00000DB6 48BF-               <1>  mov rdi, %1
     2 00000DB8 [2202000000000000]  <1>
     3 00000DC0 4883EC08            <1>  sub rsp, 8
     4 00000DC4 E8(00000000)        <1>  call puts
     5 00000DC9 4883C408            <1>  add rsp, 8
   991 00000DCD E9FEF3FFFF                      jmp todoOkSold
   992                                  
   993                                      quitarOficial:
   994 00000DD2 E84B040000                      call verQueOficialEs
   995 00000DD7 4883F801                        cmp rax, 1 ; Si recibimos 1, el oficial 1 es el que se mueve
   996 00000DDB 743A                            je quitarOfic1
   997                                  
   998                                          ; Si llegamos acá, el oficial 2 es el que se mueve
   999                                          mCalcDesplaz [casillaOfic2], [casillaOfic2+8], qword[desplazAux]
    87 00000DDD 488B3C25[84080000]  <1>  mov rdi, %1
    88 00000DE5 488B3425[8C080000]  <1>  mov rsi, %2
    89 00000DED E82EFFFFFF          <1>  call calcularDesplazamiento
    90 00000DF2 48890425[C8000000]  <1>  mov %3, rax
  1000 00000DFA E81C0A0000                      call desentenderOficial
  1001                                          mMov msgOficialRet, msgOficialRetirado, 59
    31 00000DFF B93B000000          <1>  mov rcx, %3
    32 00000E04 488D3425[72020000]  <1>  lea rsi, [%2]
    33 00000E0C 488D3C25[22020000]  <1>  lea rdi, [%1]
    34 00000E14 F3A4                <1>  rep movsb
  1002 00000E16 C3                              ret
  1003                                  
  1004                                          quitarOfic1:
  1005                                              mCalcDesplaz [casillaOfic1], [casillaOfic1+8], qword[desplazAux]
    87 00000E17 488B3C25[74080000]  <1>  mov rdi, %1
    88 00000E1F 488B3425[7C080000]  <1>  mov rsi, %2
    89 00000E27 E8F4FEFFFF          <1>  call calcularDesplazamiento
    90 00000E2C 48890425[C8000000]  <1>  mov %3, rax
  1006 00000E34 E8E2090000                          call desentenderOficial
  1007                                              mMov msgOficialRet, msgOficialRetirado, 59
    31 00000E39 B93B000000          <1>  mov rcx, %3
    32 00000E3E 488D3425[72020000]  <1>  lea rsi, [%2]
    33 00000E46 488D3C25[22020000]  <1>  lea rdi, [%1]
    34 00000E4E F3A4                <1>  rep movsb
  1008 00000E50 C3                                  ret
  1009                                      
  1010                                      quitarOtroOficial:
  1011 00000E51 E81E0A0000                      call desentenderOtroOficial
  1012                                          mMov msgOficialRet, msgOficialRetirado, 59
    31 00000E56 B93B000000          <1>  mov rcx, %3
    32 00000E5B 488D3425[72020000]  <1>  lea rsi, [%2]
    33 00000E63 488D3C25[22020000]  <1>  lea rdi, [%1]
    34 00000E6B F3A4                <1>  rep movsb
  1013 00000E6D C3                              ret
  1014                                  
  1015                                      ; Si llegamos acá, el oficial no podía capturar un soldado -> OK!
  1016                                      noPodianCapturar:
  1017 00000E6E 488B0425[98000000]              mov rax, qword[desplazCasOrig]
  1018 00000E76 488B1C25[B0000000]              mov rbx, qword[desplazCasAMover]
  1019                                  
  1020 00000E7E C680[04000000]20                mov byte[tableroEnJuego+rax], ' '
  1021                                          mMov tableroEnJuego+rbx, simboloOficiales, 1
    31 00000E85 B901000000          <1>  mov rcx, %3
    32 00000E8A 488D3425[A4080000]  <1>  lea rsi, [%2]
    33 00000E92 488DBB[04000000]    <1>  lea rdi, [%1]
    34 00000E99 F3A4                <1>  rep movsb
  1022                                  
  1023 00000E9B E882030000                      call verQueOficialEs ; Verificamos qué oficial es el que se quiere mover
  1024                                  
  1025                                          ; Incrementamos la cantidad de movimientos del oficial correspondiente
  1026 00000EA0 4883F801                        cmp rax, 1 ; Si recibimos 1, el oficial 1 es el que se mueve
  1027 00000EA4 740B                            je movOfic1
  1028                                              
  1029                                          ; Si llegamos acá, el oficial 2 es el que se mueve
  1030 00000EA6 E866040000                      call actualizarContadoresOfic2
  1031 00000EAB E841050000                      call refrescarCasActOfic2
  1032 00000EB0 C3                              ret
  1033                                      
  1034                                      movOfic1: ; Si llegamos acá, el oficial 1 es el que se mueve
  1035 00000EB1 E8AA030000                      call actualizarContadoresOfic1
  1036 00000EB6 E807050000                      call refrescarCasActOfic1
  1037                                  
  1038 00000EBB C3                          ret
  1039                                  
  1040                                  ; --------------------------------------------------------------------------------------------
  1041                                  ; RUTINA PARA CHEQUEAR SI LA CASILLA DE ORIGEN DE UN SOLDADO ES UNA POSICIÓN ESPECIAL
  1042                                  ; --------------------------------------------------------------------------------------------
  1043                                  
  1044                                  chequearSoldPosEspeciales:
  1045 00000EBC B800000000                  mov rax, 0
  1046                                  
  1047 00000EC1 48833C25[88000000]-         cmp qword[fila], 5
  1047 00000EC9 05                 
  1048 00000ECA 752C                        jne noEsLugarEspecial ; Si la fila no es 5, no estamos en una posición especial
  1049                                  
  1050                                      ; Si la columna es 1 o 2 (fila 5), estamos en una posición especial: solo podemos movernos a la derecha
  1051 00000ECC 48833C25[90000000]-         cmp qword[columna], 1
  1051 00000ED4 01                 
  1052 00000ED5 7428                        je esLugarEspecialADer 
  1053 00000ED7 48833C25[90000000]-         cmp qword[columna], 2
  1053 00000EDF 02                 
  1054 00000EE0 741D                        je esLugarEspecialADer 
  1055                                  
  1056                                      ; Si la columna es 6 o 7 (fila 5), estamos en una posición especial: solo podemos movernos a la izquierda
  1057 00000EE2 48833C25[90000000]-         cmp qword[columna], 6
  1057 00000EEA 06                 
  1058 00000EEB 740C                        je esLugarEspecialAIzq 
  1059 00000EED 48833C25[90000000]-         cmp qword[columna], 7
  1059 00000EF5 07                 
  1060 00000EF6 7401                        je esLugarEspecialAIzq
  1061                                  
  1062                                      noEsLugarEspecial:
  1063 00000EF8 C3                              ret
  1064                                  
  1065                                      esLugarEspecialAIzq:
  1066 00000EF9 B802000000                      mov rax, 2
  1067 00000EFE C3                              ret
  1068                                      
  1069                                      esLugarEspecialADer:
  1070 00000EFF B801000000                      mov rax, 1
  1071 00000F04 C3                              ret
  1072                                  
  1073                                  ; --------------------------------------------------------------------------------------------
  1074                                  ; RUTINA PARA VERIFICAR SI UN OFICIAL PUEDE SALTAR SOBRE UN SOLDADO
  1075                                  ; --------------------------------------------------------------------------------------------
  1076                                  
  1077                                  sePuedeSaltarSoldado:
  1078 00000F05 488B0425[88000000]          mov rax, qword[fila]
  1079 00000F0D 488B1C25[A0000000]          mov rbx, qword[filaAMover]
  1080 00000F15 4829D8                      sub rax, rbx
  1081 00000F18 0F8F07010000                jg saltoHaciaArriba ; Si la fila original es mayor que la fila destino, el salto es hacia arriba
  1082 00000F1E 0F8CA3010000                jl saltoHaciaAbajo ; Si la fila original es menor que la fila destino, el salto es hacia abajo
  1083                                  
  1084                                      ; Si estamos acá, el salto es en la misma fila
  1085 00000F24 488B0425[90000000]          mov rax, qword[columna]
  1086 00000F2C 488B1C25[A8000000]          mov rbx, qword[columnaAMover]
  1087                                  
  1088 00000F34 4829D8                      sub rax, rbx
  1089 00000F37 7F02                        jg saltoHaciaIzq ; Si la columna original es mayor que la columna destino, el salto es hacia la izquierda
  1090 00000F39 7C75                        jl saltoHaciaDer ; Si la columna original es menor que la columna destino, el salto es hacia la derecha
  1091                                  
  1092                                      saltoHaciaIzq:
  1093                                          mMov filaAux, filaAMover, 1
    31 00000F3B B901000000          <1>  mov rcx, %3
    32 00000F40 488D3425[A0000000]  <1>  lea rsi, [%2]
    33 00000F48 488D3C25[B8000000]  <1>  lea rdi, [%1]
    34 00000F50 F3A4                <1>  rep movsb
  1094                                          mMov columnaAux, columnaAMover, 1
    31 00000F52 B901000000          <1>  mov rcx, %3
    32 00000F57 488D3425[A8000000]  <1>  lea rsi, [%2]
    33 00000F5F 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 00000F67 F3A4                <1>  rep movsb
  1095 00000F69 48FF0C25[C0000000]              dec qword[columnaAux]
  1096                                  
  1097                                          mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    87 00000F71 488B3C25[B8000000]  <1>  mov rdi, %1
    88 00000F79 488B3425[C0000000]  <1>  mov rsi, %2
    89 00000F81 E89AFDFFFF          <1>  call calcularDesplazamiento
    90 00000F86 48890425[C8000000]  <1>  mov %3, rax
  1098                                          mEstaVacia qword[desplazAux]
    94 00000F8E B800000000          <1>  mov rax, 0
    95 00000F93 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00000F9B E847FDFFFF          <1>  call estaVacia
  1099 00000FA0 4883F801                        cmp rax, 1
  1100 00000FA4 0F84BB010000                    je saltoInvalido
  1101                                  
  1102 00000FAA B800000000                      mov rax, 0
  1103 00000FAF C3                              ret
  1104                                  
  1105                                      saltoHaciaDer:
  1106                                          mMov filaAux, filaAMover, 1
    31 00000FB0 B901000000          <1>  mov rcx, %3
    32 00000FB5 488D3425[A0000000]  <1>  lea rsi, [%2]
    33 00000FBD 488D3C25[B8000000]  <1>  lea rdi, [%1]
    34 00000FC5 F3A4                <1>  rep movsb
  1107                                          mMov columnaAux, columnaAMover, 1
    31 00000FC7 B901000000          <1>  mov rcx, %3
    32 00000FCC 488D3425[A8000000]  <1>  lea rsi, [%2]
    33 00000FD4 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 00000FDC F3A4                <1>  rep movsb
  1108 00000FDE 48FF0425[C0000000]              inc qword[columnaAux]
  1109                                  
  1110                                          mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    87 00000FE6 488B3C25[B8000000]  <1>  mov rdi, %1
    88 00000FEE 488B3425[C0000000]  <1>  mov rsi, %2
    89 00000FF6 E825FDFFFF          <1>  call calcularDesplazamiento
    90 00000FFB 48890425[C8000000]  <1>  mov %3, rax
  1111                                          mEstaVacia qword[desplazAux]
    94 00001003 B800000000          <1>  mov rax, 0
    95 00001008 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001010 E8D2FCFFFF          <1>  call estaVacia
  1112 00001015 4883F801                        cmp rax, 1
  1113 00001019 0F8446010000                    je saltoInvalido
  1114                                  
  1115 0000101F B800000000                      mov rax, 0
  1116 00001024 C3                              ret
  1117                                  
  1118                                      saltoHaciaArriba:
  1119                                          mMov filaAux, filaAMover, 1
    31 00001025 B901000000          <1>  mov rcx, %3
    32 0000102A 488D3425[A0000000]  <1>  lea rsi, [%2]
    33 00001032 488D3C25[B8000000]  <1>  lea rdi, [%1]
    34 0000103A F3A4                <1>  rep movsb
  1120                                          mMov columnaAux, columnaAMover, 1
    31 0000103C B901000000          <1>  mov rcx, %3
    32 00001041 488D3425[A8000000]  <1>  lea rsi, [%2]
    33 00001049 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 00001051 F3A4                <1>  rep movsb
  1121 00001053 48FF0C25[B8000000]              dec qword[filaAux]
  1122                                          
  1123                                          mCmp [columna], [columnaAMover], 1
    38 0000105B B901000000          <1>  mov rcx, %3
    39 00001060 488D3425[90000000]  <1>  lea rsi, %1
    40 00001068 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00001070 F3A6                <1>  repe cmpsb
  1124 00001072 7414                            je seguirSaltoArriba ; Si las columnas son iguales, el salto es hacia arriba y en línea recta
  1125 00001074 7F0A                            jg haciaArribaIzq ; Si la columna original es mayor que la columna destino, el salto es hacia la izquierda
  1126                                  
  1127                                          ; Salto hacia arriba y a la derecha
  1128 00001076 48FF0425[C0000000]              inc qword[columnaAux] 
  1129 0000107E EB08                            jmp seguirSaltoArriba
  1130                                  
  1131                                          ; Salto hacia arriba y a la izquierda
  1132                                          haciaArribaIzq:
  1133 00001080 48FF0C25[C0000000]                  dec qword[columnaAux] 
  1134                                  
  1135                                          seguirSaltoArriba:
  1136                                              mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    87 00001088 488B3C25[B8000000]  <1>  mov rdi, %1
    88 00001090 488B3425[C0000000]  <1>  mov rsi, %2
    89 00001098 E883FCFFFF          <1>  call calcularDesplazamiento
    90 0000109D 48890425[C8000000]  <1>  mov %3, rax
  1137                                              mEstaVacia qword[desplazAux]
    94 000010A5 B800000000          <1>  mov rax, 0
    95 000010AA 488B3C25[C8000000]  <1>  mov rdi, %1
    96 000010B2 E830FCFFFF          <1>  call estaVacia
  1138 000010B7 4883F801                            cmp rax, 1
  1139 000010BB 0F84A4000000                        je saltoInvalido
  1140                                  
  1141 000010C1 B800000000                          mov rax, 0
  1142 000010C6 C3                                  ret
  1143                                  
  1144                                      saltoHaciaAbajo:
  1145                                          mMov filaAux, filaAMover, 1
    31 000010C7 B901000000          <1>  mov rcx, %3
    32 000010CC 488D3425[A0000000]  <1>  lea rsi, [%2]
    33 000010D4 488D3C25[B8000000]  <1>  lea rdi, [%1]
    34 000010DC F3A4                <1>  rep movsb
  1146                                          mMov columnaAux, columnaAMover, 1
    31 000010DE B901000000          <1>  mov rcx, %3
    32 000010E3 488D3425[A8000000]  <1>  lea rsi, [%2]
    33 000010EB 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 000010F3 F3A4                <1>  rep movsb
  1147 000010F5 48FF0425[B8000000]              inc qword[filaAux]
  1148                                          
  1149                                          mCmp [columna], [columnaAMover], 1
    38 000010FD B901000000          <1>  mov rcx, %3
    39 00001102 488D3425[90000000]  <1>  lea rsi, %1
    40 0000110A 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00001112 F3A6                <1>  repe cmpsb
  1150 00001114 7414                            je seguirSaltoAbajo ; Si las columnas son iguales, el salto es hacia abajo y en línea recta
  1151 00001116 7F0A                            jg haciaAbajoIzq ; Si la columna original es mayor que la columna destino, el salto es hacia la izquierda
  1152                                  
  1153                                          ; Salto hacia abajo y a la derecha
  1154 00001118 48FF0425[C0000000]              inc qword[columnaAux] 
  1155 00001120 EB08                            jmp seguirSaltoAbajo
  1156                                  
  1157                                          ; Salto hacia abajo y a la izquierda
  1158                                          haciaAbajoIzq:
  1159 00001122 48FF0C25[C0000000]                  dec qword[columnaAux] 
  1160                                  
  1161                                          seguirSaltoAbajo:
  1162                                              mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    87 0000112A 488B3C25[B8000000]  <1>  mov rdi, %1
    88 00001132 488B3425[C0000000]  <1>  mov rsi, %2
    89 0000113A E8E1FBFFFF          <1>  call calcularDesplazamiento
    90 0000113F 48890425[C8000000]  <1>  mov %3, rax
  1163                                              mEstaVacia qword[desplazAux]
    94 00001147 B800000000          <1>  mov rax, 0
    95 0000114C 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001154 E88EFBFFFF          <1>  call estaVacia
  1164 00001159 4883F801                            cmp rax, 1
  1165 0000115D 7406                                je saltoInvalido
  1166                                  
  1167 0000115F B800000000                          mov rax, 0
  1168 00001164 C3                                  ret
  1169                                  
  1170                                      saltoInvalido:
  1171 00001165 B801000000                      mov rax, 1
  1172 0000116A C3                              ret
  1173                                  
  1174 0000116B C3                          ret
  1175                                  
  1176                                  ; --------------------------------------------------------------------------------------------
  1177                                  ; RUTINA PARA CAPTURAR UN SOLDADO
  1178                                  ; --------------------------------------------------------------------------------------------
  1179                                  
  1180                                  capturarSoldado:
  1181 0000116C 488B0425[98000000]          mov rax, qword[desplazCasOrig] ; Oficial a mover
  1182 00001174 488B1C25[B0000000]          mov rbx, qword[desplazCasAMover] ; Soldado a capturar
  1183 0000117C 488B0C25[C8000000]          mov rcx, qword[desplazAux] ; Casilla destino del oficial (donde va a quedar)
  1184                                  
  1185 00001184 C680[04000000]20            mov byte[tableroEnJuego+rax], ' '
  1186 0000118B C683[04000000]20            mov byte[tableroEnJuego+rbx], ' '
  1187                                      
  1188 00001192 8A1425[A4080000]            mov dl, byte[simboloOficiales]
  1189 00001199 8891[04000000]              mov byte[tableroEnJuego+rcx], dl
  1190                                  
  1191 0000119F 48FF0425[64080000]          inc qword[cantSoldCapturados] ; Aumentamos el contador de capturas
  1192                                  
  1193 000011A7 E876000000                  call verQueOficialEs ; Verificamos qué oficial es el que se quiere mover
  1194                                  
  1195 000011AC 4883F801                    cmp rax, 1
  1196 000011B0 7446                        je movOfic1Captura
  1197                                  
  1198 000011B2 48FF0425[9C080000]          inc qword[cantCapturasOfic2]
  1199 000011BA E852010000                  call actualizarContadoresOfic2
  1200 000011BF E85C020000                  call refrescarCasActOficLuegoCaptura
  1201                                      mMov msgCapturaSoldado, msgCapturaSold, 38
    31 000011C4 B926000000          <1>  mov rcx, %3
    32 000011C9 488D3425[4C020000]  <1>  lea rsi, [%2]
    33 000011D1 488D3C25[FC010000]  <1>  lea rdi, [%1]
    34 000011D9 F3A4                <1>  rep movsb
  1202 000011DB C3                          ret
  1203                                  
  1204                                      imprimirCapturaSoldado:
  1205                                          mPuts msgCapturaSoldado 
     2 000011DC 48BF-               <1>  mov rdi, %1
     2 000011DE [FC01000000000000]  <1>
     3 000011E6 4883EC08            <1>  sub rsp, 8
     4 000011EA E8(00000000)        <1>  call puts
     5 000011EF 4883C408            <1>  add rsp, 8
  1206 000011F3 E9D8EFFFFF                      jmp todoOkSold
  1207                                  
  1208                                      movOfic1Captura:
  1209 000011F8 48FF0425[94080000]              inc qword[cantCapturasOfic1]
  1210 00001200 E85B000000                      call actualizarContadoresOfic1
  1211 00001205 E816020000                      call refrescarCasActOficLuegoCaptura
  1212                                          mMov msgCapturaSoldado, msgCapturaSold, 38
    31 0000120A B926000000          <1>  mov rcx, %3
    32 0000120F 488D3425[4C020000]  <1>  lea rsi, [%2]
    33 00001217 488D3C25[FC010000]  <1>  lea rdi, [%1]
    34 0000121F F3A4                <1>  rep movsb
  1213                                  
  1214 00001221 C3                          ret
  1215                                  
  1216                                  ; --------------------------------------------------------------------------------------------
  1217                                  ; RUTINA PARA VERIFICAR CUÁL OFICIAL SE ESTÁ MOVIENDO
  1218                                  ; --------------------------------------------------------------------------------------------
  1219                                  
  1220                                  verQueOficialEs:
  1221                                      ; Comenzamos verificando si el oficial 1 es el que se está moviendo
  1222                                      mCmp qword[fila], qword[casillaOfic1], 1 ; Fila de la casilla de origen vs. Fila del oficial 1
    38 00001222 B901000000          <1>  mov rcx, %3
    39 00001227 488D3425[88000000]  <1>  lea rsi, %1
    40 0000122F 488D3C25[74080000]  <1>  lea rdi, %2
    41 00001237 F3A6                <1>  repe cmpsb
  1223 00001239 751F                        jne esOfic2 ; Si las filas no son iguales, el oficial 1 no es el que se está moviendo
  1224                                      mCmp qword[columna], qword[casillaOfic1+8], 1 ; Columna de la casilla de origen vs. Columna del oficial 1
    38 0000123B B901000000          <1>  mov rcx, %3
    39 00001240 488D3425[90000000]  <1>  lea rsi, %1
    40 00001248 488D3C25[7C080000]  <1>  lea rdi, %2
    41 00001250 F3A6                <1>  repe cmpsb
  1225 00001252 7506                        jne esOfic2 ; Si las columnas no son iguales, el oficial 1 no es el que se está moviendo
  1226                                  
  1227 00001254 B801000000                  mov rax, 1 ; es el oficial 1
  1228 00001259 C3                          ret
  1229                                  
  1230                                      esOfic2:
  1231 0000125A B802000000                      mov rax, 2 ; es el oficial 2
  1232                                  
  1233 0000125F C3                          ret
  1234                                  
  1235                                  
  1236                                  ; --------------------------------------------------------------------------------------------
  1237                                  ; RUTINA PARA ACTUALIZAR LOS CONTADORES DE MOVIMIENTOS DE LOS OFICIALES
  1238                                  ; --------------------------------------------------------------------------------------------
  1239                                  
  1240                                  actualizarContadoresOfic1:
  1241 00001260 48FF0425[C4070000]          inc qword[movimientosOfic1]
  1242 00001268 488B0425[98000000]          mov rax, qword[desplazCasOrig]
  1243 00001270 482B0425[B0000000]          sub rax, qword[desplazCasAMover] ; rax = desplazOrigen - desplazDestino
  1244 00001278 4883F801                    cmp rax, 1
  1245 0000127C 742B                        je movOfic1Izq
  1246 0000127E 4883F8FF                    cmp rax, -1
  1247 00001282 742E                        je movOfic1Der
  1248 00001284 4883F80B                    cmp rax, 11
  1249 00001288 7431                        je movOfic1Arriba
  1250 0000128A 4883F8F5                    cmp rax, -11
  1251 0000128E 7434                        je movOfic1Abajo
  1252 00001290 4883F80A                    cmp rax, 10
  1253 00001294 7437                        je movOfic1ArrDer
  1254 00001296 4883F8F6                    cmp rax, -10
  1255 0000129A 7453                        je movOfic1AbjIzq
  1256 0000129C 4883F80C                    cmp rax, 12
  1257 000012A0 745E                        je movOfic1ArrIzq
  1258 000012A2 4883F8F4                    cmp rax, -12
  1259 000012A6 7436                        je movOfic1AbjDer
  1260                                  
  1261 000012A8 C3                          ret
  1262                                  
  1263                                      movOfic1Izq:
  1264 000012A9 48FF0425[E4070000]              inc qword[movOfic1Izquierda]
  1265 000012B1 C3                              ret
  1266                                      movOfic1Der:
  1267 000012B2 48FF0425[DC070000]              inc qword[movOfic1Derecha]
  1268 000012BA C3                              ret
  1269                                      movOfic1Arriba:
  1270 000012BB 48FF0425[D4070000]              inc qword[movOfic1Adelante]
  1271 000012C3 C3                              ret
  1272                                      movOfic1Abajo:
  1273 000012C4 48FF0425[EC070000]              inc qword[movOfic1Atras]
  1274 000012CC C3                              ret
  1275                                      movOfic1ArrDer:
  1276 000012CD 48FF0425[F4070000]              inc qword[movOfic1Diagonal]
  1277 000012D5 48FF0425[FC070000]              inc qword[movOfic1DiagArribaDer]
  1278 000012DD C3                              ret
  1279                                      movOfic1AbjDer:
  1280 000012DE 48FF0425[F4070000]              inc qword[movOfic1Diagonal]
  1281 000012E6 48FF0425[0C080000]              inc qword[movOfic1DiagAbajoDer]
  1282 000012EE C3                              ret
  1283                                      movOfic1AbjIzq:
  1284 000012EF 48FF0425[F4070000]              inc qword[movOfic1Diagonal]
  1285 000012F7 48FF0425[14080000]              inc qword[movOfic1DiagAbajoIzq]
  1286 000012FF C3                              ret
  1287                                      movOfic1ArrIzq:
  1288 00001300 48FF0425[F4070000]              inc qword[movOfic1Diagonal]
  1289 00001308 48FF0425[04080000]              inc qword[movOfic1DiagArribaIzq]
  1290 00001310 C3                              ret
  1291                                  
  1292                                  actualizarContadoresOfic2:
  1293 00001311 48FF0425[CC070000]          inc qword[movimientosOfic2]
  1294 00001319 488B0425[98000000]          mov rax, qword[desplazCasOrig]
  1295 00001321 482B0425[B0000000]          sub rax, qword[desplazCasAMover] ; rax = desplazOrigen - desplazDestino
  1296 00001329 4883F801                    cmp rax, 1
  1297 0000132D 742B                        je movOfic2Izq
  1298 0000132F 4883F8FF                    cmp rax, -1
  1299 00001333 742E                        je movOfic2Der
  1300 00001335 4883F80B                    cmp rax, 11
  1301 00001339 7431                        je movOfic2Arriba
  1302 0000133B 4883F8F5                    cmp rax, -11
  1303 0000133F 7434                        je movOfic2Abajo
  1304 00001341 4883F80A                    cmp rax, 10
  1305 00001345 7437                        je movOfic2ArrDer
  1306 00001347 4883F8F6                    cmp rax, -10
  1307 0000134B 7453                        je movOfic2AbjIzq
  1308 0000134D 4883F80C                    cmp rax, 12
  1309 00001351 745E                        je movOfic2ArrIzq
  1310 00001353 4883F8F4                    cmp rax, -12
  1311 00001357 7436                        je movOfic2AbjDer
  1312                                  
  1313 00001359 C3                          ret
  1314                                  
  1315                                      movOfic2Izq:
  1316 0000135A 48FF0425[2C080000]              inc qword[movOfic2Izquierda]
  1317 00001362 C3                              ret
  1318                                      movOfic2Der:
  1319 00001363 48FF0425[24080000]              inc qword[movOfic2Derecha]
  1320 0000136B C3                              ret
  1321                                      movOfic2Arriba:
  1322 0000136C 48FF0425[1C080000]              inc qword[movOfic2Adelante]
  1323 00001374 C3                              ret
  1324                                      movOfic2Abajo:
  1325 00001375 48FF0425[34080000]              inc qword[movOfic2Atras]
  1326 0000137D C3                              ret
  1327                                      movOfic2ArrDer:
  1328 0000137E 48FF0425[3C080000]              inc qword[movOfic2Diagonal]
  1329 00001386 48FF0425[44080000]              inc qword[movOfic2DiagArribaDer]
  1330 0000138E C3                              ret
  1331                                      movOfic2AbjDer:
  1332 0000138F 48FF0425[3C080000]              inc qword[movOfic2Diagonal]
  1333 00001397 48FF0425[54080000]              inc qword[movOfic2DiagAbajoDer]
  1334 0000139F C3                              ret
  1335                                      movOfic2AbjIzq:
  1336 000013A0 48FF0425[3C080000]              inc qword[movOfic2Diagonal]
  1337 000013A8 48FF0425[5C080000]              inc qword[movOfic2DiagAbajoIzq]
  1338 000013B0 C3                              ret
  1339                                      movOfic2ArrIzq:
  1340 000013B1 48FF0425[3C080000]              inc qword[movOfic2Diagonal]
  1341 000013B9 48FF0425[4C080000]              inc qword[movOfic2DiagArribaIzq]
  1342 000013C1 C3                              ret
  1343                                  
  1344                                  ; --------------------------------------------------------------------------------------------
  1345                                  ; RUTINA PARA REFRESCAR LA CASILLA ACTUAL DE LOS OFICIALES
  1346                                  ; --------------------------------------------------------------------------------------------
  1347                                  
  1348                                  refrescarCasActOfic1:
  1349                                      mMov casillaOfic1, filaAMover, 1
    31 000013C2 B901000000          <1>  mov rcx, %3
    32 000013C7 488D3425[A0000000]  <1>  lea rsi, [%2]
    33 000013CF 488D3C25[74080000]  <1>  lea rdi, [%1]
    34 000013D7 F3A4                <1>  rep movsb
  1350                                      mMov casillaOfic1+8, columnaAMover, 1
    31 000013D9 B901000000          <1>  mov rcx, %3
    32 000013DE 488D3425[A8000000]  <1>  lea rsi, [%2]
    33 000013E6 488D3C25[7C080000]  <1>  lea rdi, [%1]
    34 000013EE F3A4                <1>  rep movsb
  1351 000013F0 C3                          ret
  1352                                  
  1353                                  refrescarCasActOfic2:
  1354                                      mMov casillaOfic2, filaAMover, 1
    31 000013F1 B901000000          <1>  mov rcx, %3
    32 000013F6 488D3425[A0000000]  <1>  lea rsi, [%2]
    33 000013FE 488D3C25[84080000]  <1>  lea rdi, [%1]
    34 00001406 F3A4                <1>  rep movsb
  1355                                      mMov casillaOfic2+8, columnaAMover, 1
    31 00001408 B901000000          <1>  mov rcx, %3
    32 0000140D 488D3425[A8000000]  <1>  lea rsi, [%2]
    33 00001415 488D3C25[8C080000]  <1>  lea rdi, [%1]
    34 0000141D F3A4                <1>  rep movsb
  1356 0000141F C3                          ret    
  1357                                  
  1358                                  refrescarCasActOficLuegoCaptura:
  1359 00001420 488B0425[B0000000]          mov rax, qword[desplazCasAMover]
  1360 00001428 488B1C25[C8000000]          mov rbx, qword[desplazAux]
  1361 00001430 4829D8                      sub rax, rbx ; rax = desplazCasAMover - desplazAux
  1362                                  
  1363 00001433 4883F801                    cmp rax, 1
  1364 00001437 742A                        je saltoIzq
  1365 00001439 4883F8FF                    cmp rax, -1
  1366 0000143D 742E                        je saltoDer
  1367 0000143F 4883F80B                    cmp rax, 11
  1368 00001443 7432                        je saltoArriba
  1369 00001445 4883F8F5                    cmp rax, -11
  1370 00001449 7436                        je saltoAbajo
  1371 0000144B 4883F80A                    cmp rax, 10
  1372 0000144F 743A                        je saltoArrDer
  1373 00001451 4883F8F6                    cmp rax, -10
  1374 00001455 7446                        je saltoAbjIzq
  1375 00001457 4883F80C                    cmp rax, 12
  1376 0000145B 7452                        je saltoArrIzq
  1377 0000145D 4883F8F4                    cmp rax, -12
  1378 00001461 745E                        je saltoAbjDer
  1379                                  
  1380                                      saltoIzq:
  1381 00001463 48FF0C25[A8000000]              dec qword[columnaAMover]
  1382 0000146B EB64                            jmp finRefrescarCasActOfic
  1383                                      saltoDer:
  1384 0000146D 48FF0425[A8000000]              inc qword[columnaAMover]
  1385 00001475 EB5A                            jmp finRefrescarCasActOfic
  1386                                      saltoArriba:
  1387 00001477 48FF0C25[A0000000]              dec qword[filaAMover]
  1388 0000147F EB50                            jmp finRefrescarCasActOfic
  1389                                      saltoAbajo:
  1390 00001481 48FF0425[A0000000]              inc qword[filaAMover]
  1391 00001489 EB46                            jmp finRefrescarCasActOfic
  1392                                      saltoArrDer:
  1393 0000148B 48FF0C25[A0000000]              dec qword[filaAMover]
  1394 00001493 48FF0425[A8000000]              inc qword[columnaAMover]
  1395 0000149B EB34                            jmp finRefrescarCasActOfic
  1396                                      saltoAbjIzq:
  1397 0000149D 48FF0425[A0000000]              inc qword[filaAMover]
  1398 000014A5 48FF0C25[A8000000]              dec qword[columnaAMover]
  1399 000014AD EB22                            jmp finRefrescarCasActOfic
  1400                                      saltoArrIzq:
  1401 000014AF 48FF0C25[A0000000]              dec qword[filaAMover]
  1402 000014B7 48FF0C25[A8000000]              dec qword[columnaAMover]
  1403 000014BF EB10                            jmp finRefrescarCasActOfic
  1404                                      saltoAbjDer:
  1405 000014C1 48FF0425[A0000000]              inc qword[filaAMover]
  1406 000014C9 48FF0425[A8000000]              inc qword[columnaAMover]
  1407                                  
  1408                                      finRefrescarCasActOfic:
  1409 000014D1 E84CFDFFFF                      call verQueOficialEs
  1410                                  
  1411 000014D6 4883F801                        cmp rax, 1
  1412 000014DA 7406                            je actualizarOfic1
  1413                                  
  1414 000014DC E810FFFFFF                      call refrescarCasActOfic2
  1415 000014E1 C3                              ret
  1416                                  
  1417                                          actualizarOfic1:
  1418 000014E2 E8DBFEFFFF                          call refrescarCasActOfic1
  1419                                  
  1420 000014E7 C3                          ret
  1421                                  
  1422                                  ; --------------------------------------------------------------------------------------------
  1423                                  ; RUTINA PARA VERIFICAR SI UN OFICIAL PODÍA CAPTURAR UN SOLDADO Y NO LO HIZO
  1424                                  ; --------------------------------------------------------------------------------------------
  1425                                  
  1426                                  podiaCapturarSoldado:
  1427                                      mMov desplazAux, desplazAux2, 1
    31 000014E8 B901000000          <1>  mov rcx, %3
    32 000014ED 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 000014F5 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 000014FD F3A4                <1>  rep movsb
  1428                                  
  1429                                      ; Casilla arriba-izquierda
  1430 000014FF 48832C25[C8000000]-         sub qword[desplazAux], 12
  1430 00001507 0C                 
  1431                                      mHaySoldado qword[desplazAux]
   100 00001508 B800000000          <1>  mov rax, 0
   101 0000150D 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001515 E8E2F7FFFF          <1>  call haySoldado
  1432 0000151A 4883F800                    cmp rax, 0
  1433 0000151E 7519                        jne verCasArriba
  1434                                  
  1435                                      mPuedeCapturar 12, 1 ; restar 12 a desplazAux
   106 00001520 BF0C000000          <1>  mov rdi, %1
   107 00001525 BE01000000          <1>  mov rsi, %2
   108 0000152A E845020000          <1>  call podiaComerPieza
  1436 0000152F 4883F800                    cmp rax, 0
  1437 00001533 0F8435020000                je podiaCapturar
  1438                                  
  1439                                      ; Casilla arriba
  1440                                      verCasArriba:
  1441                                          mMov desplazAux, desplazAux2, 1
    31 00001539 B901000000          <1>  mov rcx, %3
    32 0000153E 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001546 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 0000154E F3A4                <1>  rep movsb
  1442 00001550 48832C25[C8000000]-             sub qword[desplazAux], 11
  1442 00001558 0B                 
  1443                                          mHaySoldado qword[desplazAux]
   100 00001559 B800000000          <1>  mov rax, 0
   101 0000155E 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001566 E891F7FFFF          <1>  call haySoldado
  1444 0000156B 4883F800                        cmp rax, 0
  1445 0000156F 7519                            jne verCasArribaDer
  1446                                  
  1447                                          mPuedeCapturar 11, 1 ; restar 11 a desplazAux
   106 00001571 BF0B000000          <1>  mov rdi, %1
   107 00001576 BE01000000          <1>  mov rsi, %2
   108 0000157B E8F4010000          <1>  call podiaComerPieza
  1448 00001580 4883F800                        cmp rax, 0
  1449 00001584 0F84E4010000                    je podiaCapturar
  1450                                  
  1451                                      ; Casilla arriba-derecha
  1452                                      verCasArribaDer:
  1453                                          mMov desplazAux, desplazAux2, 1
    31 0000158A B901000000          <1>  mov rcx, %3
    32 0000158F 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001597 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 0000159F F3A4                <1>  rep movsb
  1454 000015A1 48832C25[C8000000]-             sub qword[desplazAux], 10
  1454 000015A9 0A                 
  1455                                          mHaySoldado qword[desplazAux]
   100 000015AA B800000000          <1>  mov rax, 0
   101 000015AF 488B3C25[C8000000]  <1>  mov rdi, %1
   102 000015B7 E840F7FFFF          <1>  call haySoldado
  1456 000015BC 4883F800                        cmp rax, 0
  1457 000015C0 7519                            jne verCasIzq
  1458                                          
  1459                                          mPuedeCapturar 10, 1 ; restar 10 a desplazAux
   106 000015C2 BF0A000000          <1>  mov rdi, %1
   107 000015C7 BE01000000          <1>  mov rsi, %2
   108 000015CC E8A3010000          <1>  call podiaComerPieza
  1460 000015D1 4883F800                        cmp rax, 0
  1461 000015D5 0F8493010000                    je podiaCapturar
  1462                                  
  1463                                      ; Casilla izquierda
  1464                                      verCasIzq:
  1465                                          mMov desplazAux, desplazAux2, 1
    31 000015DB B901000000          <1>  mov rcx, %3
    32 000015E0 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 000015E8 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 000015F0 F3A4                <1>  rep movsb
  1466 000015F2 48832C25[C8000000]-             sub qword[desplazAux], 1
  1466 000015FA 01                 
  1467                                          mHaySoldado qword[desplazAux]
   100 000015FB B800000000          <1>  mov rax, 0
   101 00001600 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001608 E8EFF6FFFF          <1>  call haySoldado
  1468 0000160D 4883F800                        cmp rax, 0
  1469 00001611 7519                            jne verCasDer
  1470                                          
  1471                                          mPuedeCapturar 1, 1 ; restar 1 a desplazAux
   106 00001613 BF01000000          <1>  mov rdi, %1
   107 00001618 BE01000000          <1>  mov rsi, %2
   108 0000161D E852010000          <1>  call podiaComerPieza
  1472 00001622 4883F800                        cmp rax, 0
  1473 00001626 0F8442010000                    je podiaCapturar
  1474                                  
  1475                                      ; Casilla derecha
  1476                                      verCasDer:
  1477                                          mMov desplazAux, desplazAux2, 1
    31 0000162C B901000000          <1>  mov rcx, %3
    32 00001631 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001639 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001641 F3A4                <1>  rep movsb
  1478 00001643 48830425[C8000000]-             add qword[desplazAux], 1
  1478 0000164B 01                 
  1479                                          mHaySoldado qword[desplazAux]
   100 0000164C B800000000          <1>  mov rax, 0
   101 00001651 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001659 E89EF6FFFF          <1>  call haySoldado
  1480 0000165E 4883F800                        cmp rax, 0
  1481 00001662 7519                            jne verCasAbajoIzq
  1482                                          
  1483                                          mPuedeCapturar 1, 0 ; sumar 1 a desplazAux
   106 00001664 BF01000000          <1>  mov rdi, %1
   107 00001669 BE00000000          <1>  mov rsi, %2
   108 0000166E E801010000          <1>  call podiaComerPieza
  1484 00001673 4883F800                        cmp rax, 0
  1485 00001677 0F84F1000000                    je podiaCapturar
  1486                                  
  1487                                      ; Casilla abajo-izquierda
  1488                                      verCasAbajoIzq:
  1489                                          mMov desplazAux, desplazAux2, 1
    31 0000167D B901000000          <1>  mov rcx, %3
    32 00001682 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 0000168A 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001692 F3A4                <1>  rep movsb
  1490 00001694 48830425[C8000000]-             add qword[desplazAux], 10
  1490 0000169C 0A                 
  1491                                          mHaySoldado qword[desplazAux]
   100 0000169D B800000000          <1>  mov rax, 0
   101 000016A2 488B3C25[C8000000]  <1>  mov rdi, %1
   102 000016AA E84DF6FFFF          <1>  call haySoldado
  1492 000016AF 4883F800                        cmp rax, 0
  1493 000016B3 7519                            jne verCasAbajo
  1494                                          
  1495                                          mPuedeCapturar 10, 0 ; sumar 10 a desplazAux
   106 000016B5 BF0A000000          <1>  mov rdi, %1
   107 000016BA BE00000000          <1>  mov rsi, %2
   108 000016BF E8B0000000          <1>  call podiaComerPieza
  1496 000016C4 4883F800                        cmp rax, 0
  1497 000016C8 0F84A0000000                    je podiaCapturar
  1498                                  
  1499                                      ; Casilla abajo
  1500                                      verCasAbajo:
  1501                                          mMov desplazAux, desplazAux2, 1
    31 000016CE B901000000          <1>  mov rcx, %3
    32 000016D3 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 000016DB 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 000016E3 F3A4                <1>  rep movsb
  1502 000016E5 48830425[C8000000]-             add qword[desplazAux], 11
  1502 000016ED 0B                 
  1503                                          mHaySoldado qword[desplazAux]
   100 000016EE B800000000          <1>  mov rax, 0
   101 000016F3 488B3C25[C8000000]  <1>  mov rdi, %1
   102 000016FB E8FCF5FFFF          <1>  call haySoldado
  1504 00001700 4883F800                        cmp rax, 0
  1505 00001704 7515                            jne verCasAbajoDer
  1506                                          
  1507                                          mPuedeCapturar 11, 0 ; sumar 11 a desplazAux
   106 00001706 BF0B000000          <1>  mov rdi, %1
   107 0000170B BE00000000          <1>  mov rsi, %2
   108 00001710 E85F000000          <1>  call podiaComerPieza
  1508 00001715 4883F800                        cmp rax, 0
  1509 00001719 7453                            je podiaCapturar
  1510                                  
  1511                                      ; Casilla abajo-derecha
  1512                                      verCasAbajoDer:
  1513                                          mMov desplazAux, desplazAux2, 1
    31 0000171B B901000000          <1>  mov rcx, %3
    32 00001720 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001728 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001730 F3A4                <1>  rep movsb
  1514 00001732 48830425[C8000000]-             add qword[desplazAux], 12
  1514 0000173A 0C                 
  1515                                          mHaySoldado qword[desplazAux]
   100 0000173B B800000000          <1>  mov rax, 0
   101 00001740 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001748 E8AFF5FFFF          <1>  call haySoldado
  1516 0000174D 4883F800                        cmp rax, 0
  1517 00001751 7515                            jne okNoPodiaCapturar
  1518                                          
  1519                                          mPuedeCapturar 12, 0 ; sumar 12 a desplazAux
   106 00001753 BF0C000000          <1>  mov rdi, %1
   107 00001758 BE00000000          <1>  mov rsi, %2
   108 0000175D E812000000          <1>  call podiaComerPieza
  1520 00001762 4883F800                        cmp rax, 0
  1521 00001766 7406                            je podiaCapturar
  1522                                      
  1523                                      okNoPodiaCapturar:
  1524 00001768 B801000000                      mov rax, 1
  1525 0000176D C3                              ret
  1526                                      
  1527                                      podiaCapturar:
  1528 0000176E B800000000                      mov rax, 0
  1529                                  
  1530 00001773 C3                          ret
  1531                                  
  1532                                  podiaComerPieza:
  1533 00001774 4883FE00                    cmp rsi, 0 ; 0 para sumar, 1 para restar
  1534 00001778 740A                        je sumarDesplaz 
  1535                                  
  1536                                      ; Si llegamos acá, debemos restar
  1537 0000177A 48293C25[C8000000]          sub qword[desplazAux], rdi
  1538 00001782 EB08                        jmp verSiEspacioEstaLibre
  1539                                  
  1540                                      sumarDesplaz:
  1541 00001784 48013C25[C8000000]              add qword[desplazAux], rdi
  1542                                  
  1543                                      verSiEspacioEstaLibre:
  1544                                          mEstaVacia qword[desplazAux]
    94 0000178C B800000000          <1>  mov rax, 0
    95 00001791 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001799 E849F5FFFF          <1>  call estaVacia
  1545 0000179E 4883F800                        cmp rax, 0
  1546 000017A2 7406                            je okComerPieza
  1547                                  
  1548 000017A4 B801000000                      mov rax, 1
  1549 000017A9 C3                              ret
  1550                                  
  1551                                      okComerPieza:
  1552 000017AA B800000000                      mov rax, 0
  1553 000017AF C3                              ret
  1554                                  
  1555                                      
  1556                                  ; --------------------------------------------------------------------------------------------
  1557                                  ; RUTINA PARA VERIFICAR SI EL OTRO OFICIAL PODÍA CAPTURAR UN SOLDADO Y NO LO HIZO
  1558                                  ; --------------------------------------------------------------------------------------------
  1559                                  
  1560                                  podiaCapturarSoldadoOtroOficial:
  1561 000017B0 E86DFAFFFF                  call verQueOficialEs ; Verificamos qué oficial es el que se quiere mover
  1562 000017B5 4883F801                    cmp rax, 1
  1563 000017B9 742A                        je verificarOfic2
  1564                                  
  1565                                      verificarOfic1:
  1566                                          mCalcDesplaz qword[casillaOfic1], qword[casillaOfic1+8], qword[desplazAux2]
    87 000017BB 488B3C25[74080000]  <1>  mov rdi, %1
    88 000017C3 488B3425[7C080000]  <1>  mov rsi, %2
    89 000017CB E850F5FFFF          <1>  call calcularDesplazamiento
    90 000017D0 48890425[D0000000]  <1>  mov %3, rax
  1567 000017D8 E80BFDFFFF                      call podiaCapturarSoldado
  1568 000017DD 4883F800                        cmp rax, 0
  1569 000017E1 742C                            je okPodiaComerElOtro
  1570 000017E3 EB30                            jmp noPodiaComerElOtro
  1571                                      
  1572                                      verificarOfic2:
  1573                                          mCalcDesplaz qword[casillaOfic2], qword[casillaOfic2+8], qword[desplazAux2]
    87 000017E5 488B3C25[84080000]  <1>  mov rdi, %1
    88 000017ED 488B3425[8C080000]  <1>  mov rsi, %2
    89 000017F5 E826F5FFFF          <1>  call calcularDesplazamiento
    90 000017FA 48890425[D0000000]  <1>  mov %3, rax
  1574 00001802 E8E1FCFFFF                      call podiaCapturarSoldado
  1575 00001807 4883F800                        cmp rax, 0
  1576 0000180B 7402                            je okPodiaComerElOtro
  1577 0000180D EB06                            jmp noPodiaComerElOtro
  1578                                  
  1579                                      okPodiaComerElOtro:
  1580 0000180F B800000000                      mov rax, 0
  1581 00001814 C3                              ret
  1582                                  
  1583                                      noPodiaComerElOtro:
  1584 00001815 B801000000                      mov rax, 1
  1585                                  
  1586 0000181A C3                          ret
  1587                                  
  1588                                  ; --------------------------------------------------------------------------------------------
  1589                                  ; RUTINA PARA QUITAR AL OFICIAL QUE SE MOVIÓ Y NO CAPTURÓ UN SOLDADO
  1590                                  ; --------------------------------------------------------------------------------------------
  1591                                  
  1592                                  desentenderOficial:
  1593 0000181B 488B1C25[C8000000]          mov rbx, qword[desplazAux]
  1594 00001823 BA20000000                  mov rdx, ' '
  1595 00001828 8893[04000000]              mov byte[tableroEnJuego+rbx], dl
  1596                                  
  1597 0000182E E8EFF9FFFF                  call verQueOficialEs ; Verificamos qué oficial es el que se quiere mover
  1598                                  
  1599 00001833 4883F801                    cmp rax, 1
  1600 00001837 741A                        je desentenderOfic1
  1601                                  
  1602                                      desentenderOfic2:
  1603 00001839 48C70425[84080000]-             mov qword[casillaOfic2], 0
  1603 00001841 00000000           
  1604 00001845 48C70425[8C080000]-             mov qword[casillaOfic2+8], 0
  1604 0000184D 00000000           
  1605 00001851 EB18                            jmp agregarOficDesentendido
  1606                                  
  1607                                      desentenderOfic1:
  1608 00001853 48C70425[74080000]-             mov qword[casillaOfic1], 0
  1608 0000185B 00000000           
  1609 0000185F 48C70425[7C080000]-             mov qword[casillaOfic1+8], 0
  1609 00001867 00000000           
  1610                                  
  1611                                      agregarOficDesentendido:
  1612 0000186B 48FF0425[6C080000]              inc qword[cantOficInvalidados]
  1613                                      
  1614 00001873 C3                          ret
  1615                                  
  1616                                  ; --------------------------------------------------------------------------------------------
  1617                                  ; RUTINA PARA QUITAR AL OTRO OFICIAL QUE NO CAPTURÓ UN SOLDADO
  1618                                  ; --------------------------------------------------------------------------------------------
  1619                                  
  1620                                  desentenderOtroOficial:
  1621 00001874 E8A9F9FFFF                  call verQueOficialEs ; Verificamos qué oficial es el que se quiere mover
  1622                                  
  1623 00001879 4883F801                    cmp rax, 1
  1624 0000187D 744E                        je otroEsOfic2
  1625                                  
  1626                                      otroEsOfic1:
  1627                                          mCalcDesplaz qword[casillaOfic1], qword[casillaOfic1+8], qword[desplazAux]
    87 0000187F 488B3C25[74080000]  <1>  mov rdi, %1
    88 00001887 488B3425[7C080000]  <1>  mov rsi, %2
    89 0000188F E88CF4FFFF          <1>  call calcularDesplazamiento
    90 00001894 48890425[C8000000]  <1>  mov %3, rax
  1628                                  
  1629                                          ; Vacía la casilla del oficial 1
  1630 0000189C 488B1C25[C8000000]              mov rbx, qword[desplazAux]
  1631 000018A4 BA20000000                      mov rdx, ' '
  1632 000018A9 8893[04000000]                  mov byte[tableroEnJuego+rbx], dl
  1633                                  
  1634                                          ; Actualiza las variables del oficial 1
  1635 000018AF 48C70425[74080000]-             mov qword[casillaOfic1], 0
  1635 000018B7 00000000           
  1636 000018BB 48C70425[7C080000]-             mov qword[casillaOfic1+8], 0
  1636 000018C3 00000000           
  1637                                  
  1638 000018C7 E89FFFFFFF                      call agregarOficDesentendido
  1639 000018CC C3                              ret
  1640                                  
  1641                                      otroEsOfic2:
  1642                                          mCalcDesplaz qword[casillaOfic2], qword[casillaOfic2+8], qword[desplazAux]
    87 000018CD 488B3C25[84080000]  <1>  mov rdi, %1
    88 000018D5 488B3425[8C080000]  <1>  mov rsi, %2
    89 000018DD E83EF4FFFF          <1>  call calcularDesplazamiento
    90 000018E2 48890425[C8000000]  <1>  mov %3, rax
  1643                                          
  1644                                          ; Vacía la casilla del oficial 2
  1645 000018EA 488B1C25[C8000000]              mov rbx, qword[desplazAux]
  1646 000018F2 BA20000000                      mov rdx, ' '
  1647 000018F7 8893[04000000]                  mov byte[tableroEnJuego+rbx], dl
  1648                                  
  1649                                          ; Actualiza las variables del oficial 2
  1650 000018FD 48C70425[84080000]-             mov qword[casillaOfic2], 0
  1650 00001905 00000000           
  1651 00001909 48C70425[8C080000]-             mov qword[casillaOfic2+8], 0
  1651 00001911 00000000           
  1652                                      
  1653 00001915 E851FFFFFF                      call agregarOficDesentendido
  1654 0000191A C3                              ret
  1655                                  
  1656                                  ; --------------------------------------------------------------------------------------------
  1657                                  ; RUTINA PARA VER SI EL MOVIMIENTO DE UN OFICIAL RESULTA EN EL FIN DEL JUEGO
  1658                                  ; --------------------------------------------------------------------------------------------
  1659                                  
  1660                                  verificarFinJuegoOficiales:
  1661                                      ; Verificamos si ambos oficiales han sido invalidados
  1662 0000191B 48833C25[6C080000]-         cmp qword[cantOficInvalidados], 2
  1662 00001923 02                 
  1663 00001924 7411                        je finInvalidados
  1664                                  
  1665                                      ; Verificamos que los oficiales hayan capturado necesarios soldados para ganar
  1666 00001926 48833C25[64080000]-         cmp qword[cantSoldCapturados], 16
  1666 0000192E 10                 
  1667 0000192F 7413                        je finSoldCapturados
  1668                                  
  1669 00001931 B801000000                  mov rax, 1
  1670 00001936 C3                          ret
  1671                                  
  1672                                      finInvalidados:
  1673 00001937 C70425[B4040000]6F-             mov dword[varRazonFin], "oInv"
  1673 0000193F 496E76             
  1674 00001942 EB0B                            jmp hayFinJuegoOfic
  1675                                  
  1676                                      finSoldCapturados:
  1677 00001944 C70425[B4040000]73-             mov dword[varRazonFin], "sCap"
  1677 0000194C 436170             
  1678                                  
  1679                                      hayFinJuegoOfic:
  1680 0000194F B800000000                      mov rax, 0
  1681 00001954 C3                              ret
  1682                                  
  1683                                  ; --------------------------------------------------------------------------------------------
  1684                                  ; RUTINA PARA VERIFICAR SI EL MOVIMIENTO DE UN SOLDADO RESULTA EN EL FIN DEL JUEGO
  1685                                  ; --------------------------------------------------------------------------------------------
  1686                                  
  1687                                  verificarFinJuegoSoldados:
  1688 00001955 E835000000                  call soldadosOcupanFortaleza
  1689 0000195A 4883F800                    cmp rax, 0
  1690 0000195E 7411                        je finOcupFortaleza
  1691                                  
  1692 00001960 E827010000                  call oficialesRodeados
  1693 00001965 4883F800                    cmp rax, 0
  1694 00001969 7413                        je finOficRodeados
  1695                                  
  1696 0000196B B801000000                  mov rax, 1
  1697 00001970 C3                          ret
  1698                                  
  1699                                      finOcupFortaleza:
  1700 00001971 C70425[B4040000]73-             mov dword[varRazonFin], "sOcu"
  1700 00001979 4F6375             
  1701 0000197C EB0B                            jmp hayFinJuegoSold
  1702                                  
  1703                                      finOficRodeados:
  1704 0000197E C70425[B4040000]6F-             mov dword[varRazonFin], "oRod"
  1704 00001986 526F64             
  1705                                  
  1706                                      hayFinJuegoSold:
  1707 00001989 B800000000                      mov rax, 0
  1708 0000198E C3                              ret
  1709                                  
  1710                                  ; --------------------------------------------------------------------------------------------
  1711                                  ; RUTINA PARA VERIFICAR SI LOS SOLDADOS OCUPAN LA FORTALEZA
  1712                                  ; --------------------------------------------------------------------------------------------
  1713                                  
  1714                                  soldadosOcupanFortaleza:
  1715                                      mCmp byte[tableroEnJuego+70], [simboloSoldados], 1 ; Fortaleza 1-1
    38 0000198F B901000000          <1>  mov rcx, %3
    39 00001994 488D3425[4A000000]  <1>  lea rsi, %1
    40 0000199C 488D3C25[A6080000]  <1>  lea rdi, %2
    41 000019A4 F3A6                <1>  repe cmpsb
  1716 000019A6 0F85DA000000                jne noOcupaFortaleza
  1717                                      mCmp byte[tableroEnJuego+71], [simboloSoldados], 1 ; Fortaleza 1-2
    38 000019AC B901000000          <1>  mov rcx, %3
    39 000019B1 488D3425[4B000000]  <1>  lea rsi, %1
    40 000019B9 488D3C25[A6080000]  <1>  lea rdi, %2
    41 000019C1 F3A6                <1>  repe cmpsb
  1718 000019C3 0F85BD000000                jne noOcupaFortaleza
  1719                                      mCmp byte[tableroEnJuego+72], [simboloSoldados], 1 ; Fortaleza 1-3
    38 000019C9 B901000000          <1>  mov rcx, %3
    39 000019CE 488D3425[4C000000]  <1>  lea rsi, %1
    40 000019D6 488D3C25[A6080000]  <1>  lea rdi, %2
    41 000019DE F3A6                <1>  repe cmpsb
  1720 000019E0 0F85A0000000                jne noOcupaFortaleza
  1721                                      mCmp byte[tableroEnJuego+81], [simboloSoldados], 1 ; Fortaleza 2-1
    38 000019E6 B901000000          <1>  mov rcx, %3
    39 000019EB 488D3425[55000000]  <1>  lea rsi, %1
    40 000019F3 488D3C25[A6080000]  <1>  lea rdi, %2
    41 000019FB F3A6                <1>  repe cmpsb
  1722 000019FD 0F8583000000                jne noOcupaFortaleza
  1723                                      mCmp byte[tableroEnJuego+82], [simboloSoldados], 1 ; Fortaleza 2-2
    38 00001A03 B901000000          <1>  mov rcx, %3
    39 00001A08 488D3425[56000000]  <1>  lea rsi, %1
    40 00001A10 488D3C25[A6080000]  <1>  lea rdi, %2
    41 00001A18 F3A6                <1>  repe cmpsb
  1724 00001A1A 756A                        jne noOcupaFortaleza
  1725                                      mCmp byte[tableroEnJuego+83], [simboloSoldados], 1 ; Fortaleza 2-3
    38 00001A1C B901000000          <1>  mov rcx, %3
    39 00001A21 488D3425[57000000]  <1>  lea rsi, %1
    40 00001A29 488D3C25[A6080000]  <1>  lea rdi, %2
    41 00001A31 F3A6                <1>  repe cmpsb
  1726 00001A33 7551                        jne noOcupaFortaleza
  1727                                      mCmp byte[tableroEnJuego+92], [simboloSoldados], 1 ; Fortaleza 3-1
    38 00001A35 B901000000          <1>  mov rcx, %3
    39 00001A3A 488D3425[60000000]  <1>  lea rsi, %1
    40 00001A42 488D3C25[A6080000]  <1>  lea rdi, %2
    41 00001A4A F3A6                <1>  repe cmpsb
  1728 00001A4C 7538                        jne noOcupaFortaleza
  1729                                      mCmp byte[tableroEnJuego+93], [simboloSoldados], 1 ; Fortaleza 3-2
    38 00001A4E B901000000          <1>  mov rcx, %3
    39 00001A53 488D3425[61000000]  <1>  lea rsi, %1
    40 00001A5B 488D3C25[A6080000]  <1>  lea rdi, %2
    41 00001A63 F3A6                <1>  repe cmpsb
  1730 00001A65 751F                        jne noOcupaFortaleza
  1731                                      mCmp byte[tableroEnJuego+94], [simboloSoldados], 1 ; Fortaleza 3-3
    38 00001A67 B901000000          <1>  mov rcx, %3
    39 00001A6C 488D3425[62000000]  <1>  lea rsi, %1
    40 00001A74 488D3C25[A6080000]  <1>  lea rdi, %2
    41 00001A7C F3A6                <1>  repe cmpsb
  1732 00001A7E 7506                        jne noOcupaFortaleza
  1733                                  
  1734 00001A80 B800000000                  mov rax, 0
  1735 00001A85 C3                          ret
  1736                                  
  1737                                      noOcupaFortaleza:
  1738 00001A86 B801000000                      mov rax, 1
  1739                                  
  1740 00001A8B C3                          ret
  1741                                  
  1742                                  ; --------------------------------------------------------------------------------------------
  1743                                  ; RUTINA PARA VERIFICAR SI LOS OFICIALES ESTÁN RODEADOS POR SOLDADOS
  1744                                  ; --------------------------------------------------------------------------------------------
  1745                                  
  1746                                  oficialesRodeados:
  1747 00001A8C E8F8030000                  call ofic1Desentendido
  1748 00001A91 4883F800                    cmp rax, 0
  1749 00001A95 740B                        je rodeanAOfic2
  1750 00001A97 E828000000                  call verSiOfic1Rodeado
  1751 00001A9C 4883F800                    cmp rax, 0
  1752 00001AA0 751C                        jne tienenSalida
  1753                                  
  1754                                      rodeanAOfic2:
  1755 00001AA2 E8F9030000                      call ofic2Desentendido
  1756 00001AA7 4883F800                        cmp rax, 0
  1757 00001AAB 740B                            je noHaySalida
  1758 00001AAD E84C000000                      call verSiOfic2Rodeado
  1759 00001AB2 4883F800                        cmp rax, 0
  1760 00001AB6 7506                            jne tienenSalida
  1761                                  
  1762                                      noHaySalida:
  1763 00001AB8 B800000000                      mov rax, 0
  1764 00001ABD C3                              ret
  1765                                  
  1766                                      tienenSalida:
  1767 00001ABE B801000000                      mov rax, 1
  1768                                  
  1769 00001AC3 C3                          ret
  1770                                  
  1771                                  verSiOfic1Rodeado:
  1772                                      mCalcDesplaz qword[casillaOfic1], qword[casillaOfic1+8], qword[desplazAux]
    87 00001AC4 488B3C25[74080000]  <1>  mov rdi, %1
    88 00001ACC 488B3425[7C080000]  <1>  mov rsi, %2
    89 00001AD4 E847F2FFFF          <1>  call calcularDesplazamiento
    90 00001AD9 48890425[C8000000]  <1>  mov %3, rax
  1773                                      mMov desplazAux2, desplazAux, 1
    31 00001AE1 B901000000          <1>  mov rcx, %3
    32 00001AE6 488D3425[C8000000]  <1>  lea rsi, [%2]
    33 00001AEE 488D3C25[D0000000]  <1>  lea rdi, [%1]
    34 00001AF6 F3A4                <1>  rep movsb
  1774 00001AF8 E83B000000                  call verSiOficialRodeado
  1775 00001AFD C3                          ret
  1776                                  
  1777                                  verSiOfic2Rodeado:
  1778                                      mCalcDesplaz qword[casillaOfic2], qword[casillaOfic2+8], qword[desplazAux]
    87 00001AFE 488B3C25[84080000]  <1>  mov rdi, %1
    88 00001B06 488B3425[8C080000]  <1>  mov rsi, %2
    89 00001B0E E80DF2FFFF          <1>  call calcularDesplazamiento
    90 00001B13 48890425[C8000000]  <1>  mov %3, rax
  1779                                      mMov desplazAux2, desplazAux, 1
    31 00001B1B B901000000          <1>  mov rcx, %3
    32 00001B20 488D3425[C8000000]  <1>  lea rsi, [%2]
    33 00001B28 488D3C25[D0000000]  <1>  lea rdi, [%1]
    34 00001B30 F3A4                <1>  rep movsb
  1780 00001B32 E801000000                  call verSiOficialRodeado
  1781 00001B37 C3                          ret
  1782                                  
  1783                                  verSiOficialRodeado:
  1784                                      ; Casilla arriba-izquierda
  1785 00001B38 48832C25[C8000000]-         sub qword[desplazAux], 12
  1785 00001B40 0C                 
  1786                                      mEstaVacia qword[desplazAux]
    94 00001B41 B800000000          <1>  mov rax, 0
    95 00001B46 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001B4E E894F1FFFF          <1>  call estaVacia
  1787 00001B53 4883F800                    cmp rax, 0 ; Si el oficial tiene una casilla vacía, puede moverse -> no está rodeado 
  1788 00001B57 0F8426030000                je okPuedeMoverse
  1789                                      mHaySoldado qword[desplazAux]
   100 00001B5D B800000000          <1>  mov rax, 0
   101 00001B62 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001B6A E88DF1FFFF          <1>  call haySoldado
  1790 00001B6F 4883F801                    cmp rax, 1 ; Si no hay soldado, significa que es un límite del tablero -> me fijo en otra casilla
  1791 00001B73 7419                        je verEspacioArr
  1792                                      mPuedeCapturar 12, 1 ; restar 12 a desplazAux
   106 00001B75 BF0C000000          <1>  mov rdi, %1
   107 00001B7A BE01000000          <1>  mov rsi, %2
   108 00001B7F E8F0FBFFFF          <1>  call podiaComerPieza
  1793 00001B84 4883F800                    cmp rax, 0 ; Si el oficial puede capturar un soldado, no está rodeado
  1794 00001B88 0F84F5020000                je okPuedeMoverse
  1795                                  
  1796                                      ; Casilla arriba
  1797                                      verEspacioArr: 
  1798                                          mMov desplazAux, desplazAux2, 1
    31 00001B8E B901000000          <1>  mov rcx, %3
    32 00001B93 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001B9B 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001BA3 F3A4                <1>  rep movsb
  1799 00001BA5 48832C25[C8000000]-             sub qword[desplazAux], 11
  1799 00001BAD 0B                 
  1800                                          mEstaVacia qword[desplazAux]
    94 00001BAE B800000000          <1>  mov rax, 0
    95 00001BB3 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001BBB E827F1FFFF          <1>  call estaVacia
  1801 00001BC0 4883F800                        cmp rax, 0  
  1802 00001BC4 0F84B9020000                    je okPuedeMoverse
  1803                                          mHaySoldado qword[desplazAux]
   100 00001BCA B800000000          <1>  mov rax, 0
   101 00001BCF 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001BD7 E820F1FFFF          <1>  call haySoldado
  1804 00001BDC 4883F801                        cmp rax, 1
  1805 00001BE0 7419                            je verEspacioArrDer
  1806                                          mPuedeCapturar 11, 1 ; restar 11 a desplazAux
   106 00001BE2 BF0B000000          <1>  mov rdi, %1
   107 00001BE7 BE01000000          <1>  mov rsi, %2
   108 00001BEC E883FBFFFF          <1>  call podiaComerPieza
  1807 00001BF1 4883F800                        cmp rax, 0
  1808 00001BF5 0F8488020000                    je okPuedeMoverse
  1809                                  
  1810                                      ; Casilla arriba-derecha
  1811                                      verEspacioArrDer:
  1812                                          mMov desplazAux, desplazAux2, 1
    31 00001BFB B901000000          <1>  mov rcx, %3
    32 00001C00 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001C08 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001C10 F3A4                <1>  rep movsb
  1813 00001C12 48832C25[C8000000]-             sub qword[desplazAux], 10
  1813 00001C1A 0A                 
  1814                                          mEstaVacia qword[desplazAux]
    94 00001C1B B800000000          <1>  mov rax, 0
    95 00001C20 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001C28 E8BAF0FFFF          <1>  call estaVacia
  1815 00001C2D 4883F800                        cmp rax, 0  
  1816 00001C31 0F844C020000                    je okPuedeMoverse
  1817                                          mHaySoldado qword[desplazAux]
   100 00001C37 B800000000          <1>  mov rax, 0
   101 00001C3C 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001C44 E8B3F0FFFF          <1>  call haySoldado
  1818 00001C49 4883F801                        cmp rax, 1
  1819 00001C4D 7419                            je verEspacioIzq
  1820                                          mPuedeCapturar 10, 1 ; restar 10 a desplazAux
   106 00001C4F BF0A000000          <1>  mov rdi, %1
   107 00001C54 BE01000000          <1>  mov rsi, %2
   108 00001C59 E816FBFFFF          <1>  call podiaComerPieza
  1821 00001C5E 4883F800                        cmp rax, 0
  1822 00001C62 0F841B020000                    je okPuedeMoverse
  1823                                  
  1824                                      ; Casilla izquierda
  1825                                      verEspacioIzq:
  1826                                          mMov desplazAux, desplazAux2, 1
    31 00001C68 B901000000          <1>  mov rcx, %3
    32 00001C6D 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001C75 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001C7D F3A4                <1>  rep movsb
  1827 00001C7F 48832C25[C8000000]-             sub qword[desplazAux], 1
  1827 00001C87 01                 
  1828                                          mEstaVacia qword[desplazAux]
    94 00001C88 B800000000          <1>  mov rax, 0
    95 00001C8D 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001C95 E84DF0FFFF          <1>  call estaVacia
  1829 00001C9A 4883F800                        cmp rax, 0  
  1830 00001C9E 0F84DF010000                    je okPuedeMoverse
  1831                                          mHaySoldado qword[desplazAux]
   100 00001CA4 B800000000          <1>  mov rax, 0
   101 00001CA9 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001CB1 E846F0FFFF          <1>  call haySoldado
  1832 00001CB6 4883F801                        cmp rax, 1
  1833 00001CBA 7419                            je verEspacioDer
  1834                                          mPuedeCapturar 1, 1 ; restar 1 a desplazAux 
   106 00001CBC BF01000000          <1>  mov rdi, %1
   107 00001CC1 BE01000000          <1>  mov rsi, %2
   108 00001CC6 E8A9FAFFFF          <1>  call podiaComerPieza
  1835 00001CCB 4883F800                        cmp rax, 0
  1836 00001CCF 0F84AE010000                    je okPuedeMoverse
  1837                                  
  1838                                      ; Casilla derecha
  1839                                      verEspacioDer:
  1840                                          mMov desplazAux, desplazAux2, 1
    31 00001CD5 B901000000          <1>  mov rcx, %3
    32 00001CDA 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001CE2 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001CEA F3A4                <1>  rep movsb
  1841 00001CEC 48830425[C8000000]-             add qword[desplazAux], 1
  1841 00001CF4 01                 
  1842                                          mEstaVacia qword[desplazAux]
    94 00001CF5 B800000000          <1>  mov rax, 0
    95 00001CFA 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001D02 E8E0EFFFFF          <1>  call estaVacia
  1843 00001D07 4883F800                        cmp rax, 0  
  1844 00001D0B 0F8472010000                    je okPuedeMoverse
  1845                                          mHaySoldado qword[desplazAux]
   100 00001D11 B800000000          <1>  mov rax, 0
   101 00001D16 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001D1E E8D9EFFFFF          <1>  call haySoldado
  1846 00001D23 4883F801                        cmp rax, 1
  1847 00001D27 7419                            je verEspacioAbjIzq
  1848                                          mPuedeCapturar 1, 0 ; sumar 1 a desplazAux 
   106 00001D29 BF01000000          <1>  mov rdi, %1
   107 00001D2E BE00000000          <1>  mov rsi, %2
   108 00001D33 E83CFAFFFF          <1>  call podiaComerPieza
  1849 00001D38 4883F800                        cmp rax, 0
  1850 00001D3C 0F8441010000                    je okPuedeMoverse
  1851                                  
  1852                                      ; Casilla abajo-izquierda
  1853                                      verEspacioAbjIzq:
  1854                                          mMov desplazAux, desplazAux2, 1
    31 00001D42 B901000000          <1>  mov rcx, %3
    32 00001D47 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001D4F 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001D57 F3A4                <1>  rep movsb
  1855 00001D59 48830425[C8000000]-             add qword[desplazAux], 10
  1855 00001D61 0A                 
  1856                                          mEstaVacia qword[desplazAux]
    94 00001D62 B800000000          <1>  mov rax, 0
    95 00001D67 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001D6F E873EFFFFF          <1>  call estaVacia
  1857 00001D74 4883F800                        cmp rax, 0  
  1858 00001D78 0F8405010000                    je okPuedeMoverse
  1859                                          mHaySoldado qword[desplazAux]
   100 00001D7E B800000000          <1>  mov rax, 0
   101 00001D83 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001D8B E86CEFFFFF          <1>  call haySoldado
  1860 00001D90 4883F801                        cmp rax, 1
  1861 00001D94 7419                            je verEspacioAbajo
  1862                                          mPuedeCapturar 10, 0 ; sumar 10 a desplazAux 
   106 00001D96 BF0A000000          <1>  mov rdi, %1
   107 00001D9B BE00000000          <1>  mov rsi, %2
   108 00001DA0 E8CFF9FFFF          <1>  call podiaComerPieza
  1863 00001DA5 4883F800                        cmp rax, 0
  1864 00001DA9 0F84D4000000                    je okPuedeMoverse
  1865                                  
  1866                                      ; Casilla abajo
  1867                                      verEspacioAbajo:
  1868                                          mMov desplazAux, desplazAux2, 1
    31 00001DAF B901000000          <1>  mov rcx, %3
    32 00001DB4 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001DBC 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001DC4 F3A4                <1>  rep movsb
  1869 00001DC6 48830425[C8000000]-             add qword[desplazAux], 11
  1869 00001DCE 0B                 
  1870                                          mEstaVacia qword[desplazAux]
    94 00001DCF B800000000          <1>  mov rax, 0
    95 00001DD4 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001DDC E806EFFFFF          <1>  call estaVacia
  1871 00001DE1 4883F800                        cmp rax, 0  
  1872 00001DE5 0F8498000000                    je okPuedeMoverse
  1873                                          mHaySoldado qword[desplazAux]
   100 00001DEB B800000000          <1>  mov rax, 0
   101 00001DF0 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001DF8 E8FFEEFFFF          <1>  call haySoldado
  1874 00001DFD 4883F801                        cmp rax, 1
  1875 00001E01 7415                            je verEspacioAbjDer
  1876                                          mPuedeCapturar 11, 0 ; sumar 11 a desplazAux
   106 00001E03 BF0B000000          <1>  mov rdi, %1
   107 00001E08 BE00000000          <1>  mov rsi, %2
   108 00001E0D E862F9FFFF          <1>  call podiaComerPieza
  1877 00001E12 4883F800                        cmp rax, 0
  1878 00001E16 746B                            je okPuedeMoverse
  1879                                  
  1880                                      ; Casilla abajo-derecha
  1881                                      verEspacioAbjDer:
  1882                                          mMov desplazAux, desplazAux2, 1
    31 00001E18 B901000000          <1>  mov rcx, %3
    32 00001E1D 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001E25 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001E2D F3A4                <1>  rep movsb
  1883 00001E2F 48830425[C8000000]-             add qword[desplazAux], 12
  1883 00001E37 0C                 
  1884                                          mEstaVacia qword[desplazAux]
    94 00001E38 B800000000          <1>  mov rax, 0
    95 00001E3D 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001E45 E89DEEFFFF          <1>  call estaVacia
  1885 00001E4A 4883F800                        cmp rax, 0  
  1886 00001E4E 7433                            je okPuedeMoverse
  1887                                          mHaySoldado qword[desplazAux]
   100 00001E50 B800000000          <1>  mov rax, 0
   101 00001E55 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001E5D E89AEEFFFF          <1>  call haySoldado
  1888 00001E62 4883F801                        cmp rax, 1
  1889 00001E66 7415                            je noPuedeMoverse
  1890                                          mPuedeCapturar 12, 0 ; sumar 12 a desplazAux
   106 00001E68 BF0C000000          <1>  mov rdi, %1
   107 00001E6D BE00000000          <1>  mov rsi, %2
   108 00001E72 E8FDF8FFFF          <1>  call podiaComerPieza
  1891 00001E77 4883F800                        cmp rax, 0
  1892 00001E7B 7406                            je okPuedeMoverse
  1893                                  
  1894                                      ; Si llegamos acá, el oficial está rodeado -> no puede realizar ningún movimiento
  1895                                      noPuedeMoverse:
  1896 00001E7D B800000000                      mov rax, 0
  1897 00001E82 C3                              ret
  1898                                  
  1899                                      ; Si llegamos acá, el oficial puede moverse
  1900                                      okPuedeMoverse:
  1901 00001E83 B801000000                      mov rax, 1
  1902 00001E88 C3                              ret
  1903                                  
  1904                                  ofic1Desentendido:
  1905 00001E89 48833C25[74080000]-         cmp qword[casillaOfic1], 0
  1905 00001E91 00                 
  1906 00001E92 7406                        je el1EstaDesentendido
  1907                                  
  1908 00001E94 B801000000                  mov rax, 1
  1909 00001E99 C3                          ret
  1910                                  
  1911                                      el1EstaDesentendido:
  1912 00001E9A B800000000                      mov rax, 0
  1913 00001E9F C3                              ret
  1914                                  
  1915                                  ofic2Desentendido:
  1916 00001EA0 48833C25[84080000]-         cmp qword[casillaOfic2], 0
  1916 00001EA8 00                 
  1917 00001EA9 7406                        je el2EstaDesentendido
  1918                                  
  1919 00001EAB B801000000                  mov rax, 1
  1920 00001EB0 C3                          ret
  1921                                  
  1922                                      el2EstaDesentendido:
  1923 00001EB1 B800000000                      mov rax, 0
  1924 00001EB6 C3                              ret
  1925                                  
  1926                                  ; --------------------------------------------------------------------------------------------
  1927                                  ; RUTINAS PARA TERMINAR EL JUEGO Y MOSTRAR LAS ESTADÍSTICAS
  1928                                  ; --------------------------------------------------------------------------------------------
  1929                                  
  1930                                  finDeJuego:
  1931                                      mCommand cmdBorrarArchivoPartida
    24 00001EB7 48BF-               <1>  mov rdi, %1
    24 00001EB9 [CA08000000000000]  <1>
    25 00001EC1 4883EC08            <1>  sub rsp, 8
    26 00001EC5 E8(00000000)        <1>  call system
    27 00001ECA 4883C408            <1>  add rsp, 8
  1932                                      mCommand cmdLimpiarPantalla
    24 00001ECE 48BF-               <1>  mov rdi, %1
    24 00001ED0 [AA08000000000000]  <1>
    25 00001ED8 4883EC08            <1>  sub rsp, 8
    26 00001EDC E8(00000000)        <1>  call system
    27 00001EE1 4883C408            <1>  add rsp, 8
  1933                                      mPuts msgJuegoTerminado
     2 00001EE5 48BF-               <1>  mov rdi, %1
     2 00001EE7 [5504000000000000]  <1>
     3 00001EEF 4883EC08            <1>  sub rsp, 8
     4 00001EF3 E8(00000000)        <1>  call puts
     5 00001EF8 4883C408            <1>  add rsp, 8
  1934                                  
  1935 00001EFC 813C25[B4040000]73-         cmp dword[varRazonFin], "sOcu"
  1935 00001F04 4F6375             
  1936 00001F07 7430                        je soldadosFortaleza
  1937                                  
  1938 00001F09 813C25[B4040000]6F-         cmp dword[varRazonFin], "oRod"
  1938 00001F11 526F64             
  1939 00001F14 746A                        je soldadosRodeanOficiales
  1940                                  
  1941 00001F16 813C25[B4040000]6F-         cmp dword[varRazonFin], "oInv"
  1941 00001F1E 496E76             
  1942 00001F21 0F84A0000000                je oficialesInvalidados
  1943                                  
  1944 00001F27 813C25[B4040000]73-         cmp dword[varRazonFin], "sCap"
  1944 00001F2F 436170             
  1945 00001F32 0F84D3000000                je soldadosCapturados
  1946                                  
  1947 00001F38 C3                          ret
  1948                                  
  1949                                      soldadosFortaleza:
  1950                                          mPrint msgGanador, stringSoldados
     9 00001F39 48BF-               <1>  mov rdi, %1
     9 00001F3B [6F04000000000000]  <1>
    10 00001F43 48BE-               <1>  mov rsi, %2
    10 00001F45 [9504000000000000]  <1>
    11 00001F4D 4883EC08            <1>  sub rsp, 8
    12 00001F51 E8(00000000)        <1>  call printf
    13 00001F56 4883C408            <1>  add rsp, 8
  1951                                          mPrint msgRazonGanador, msgSoldadosFortaleza
     9 00001F5A 48BF-               <1>  mov rdi, %1
     9 00001F5C [A804000000000000]  <1>
    10 00001F64 48BE-               <1>  mov rsi, %2
    10 00001F66 [CD05000000000000]  <1>
    11 00001F6E 4883EC08            <1>  sub rsp, 8
    12 00001F72 E8(00000000)        <1>  call printf
    13 00001F77 4883C408            <1>  add rsp, 8
  1952 00001F7B E9CF000000                      jmp mostrarEstadisticas
  1953                                  
  1954                                      soldadosRodeanOficiales:
  1955                                          mPrint msgGanador, stringSoldados
     9 00001F80 48BF-               <1>  mov rdi, %1
     9 00001F82 [6F04000000000000]  <1>
    10 00001F8A 48BE-               <1>  mov rsi, %2
    10 00001F8C [9504000000000000]  <1>
    11 00001F94 4883EC08            <1>  sub rsp, 8
    12 00001F98 E8(00000000)        <1>  call printf
    13 00001F9D 4883C408            <1>  add rsp, 8
  1956                                          mPrint msgRazonGanador, msgSoldadosRodean
     9 00001FA1 48BF-               <1>  mov rdi, %1
     9 00001FA3 [A804000000000000]  <1>
    10 00001FAB 48BE-               <1>  mov rsi, %2
    10 00001FAD [0A06000000000000]  <1>
    11 00001FB5 4883EC08            <1>  sub rsp, 8
    12 00001FB9 E8(00000000)        <1>  call printf
    13 00001FBE 4883C408            <1>  add rsp, 8
  1957 00001FC2 E988000000                      jmp mostrarEstadisticas
  1958                                  
  1959                                      oficialesInvalidados:
  1960                                          mPrint msgGanador, stringSoldados
     9 00001FC7 48BF-               <1>  mov rdi, %1
     9 00001FC9 [6F04000000000000]  <1>
    10 00001FD1 48BE-               <1>  mov rsi, %2
    10 00001FD3 [9504000000000000]  <1>
    11 00001FDB 4883EC08            <1>  sub rsp, 8
    12 00001FDF E8(00000000)        <1>  call printf
    13 00001FE4 4883C408            <1>  add rsp, 8
  1961                                          mPrint msgRazonGanador, msgSoldadosInvalidar
     9 00001FE8 48BF-               <1>  mov rdi, %1
     9 00001FEA [A804000000000000]  <1>
    10 00001FF2 48BE-               <1>  mov rsi, %2
    10 00001FF4 [3406000000000000]  <1>
    11 00001FFC 4883EC08            <1>  sub rsp, 8
    12 00002000 E8(00000000)        <1>  call printf
    13 00002005 4883C408            <1>  add rsp, 8
  1962 00002009 EB44                            jmp mostrarEstadisticas
  1963                                  
  1964                                      soldadosCapturados:
  1965                                          mPrint msgGanador, stringOficiales
     9 0000200B 48BF-               <1>  mov rdi, %1
     9 0000200D [6F04000000000000]  <1>
    10 00002015 48BE-               <1>  mov rsi, %2
    10 00002017 [9E04000000000000]  <1>
    11 0000201F 4883EC08            <1>  sub rsp, 8
    12 00002023 E8(00000000)        <1>  call printf
    13 00002028 4883C408            <1>  add rsp, 8
  1966                                          mPrint msgRazonGanador, msgOficialesGanan
     9 0000202C 48BF-               <1>  mov rdi, %1
     9 0000202E [A804000000000000]  <1>
    10 00002036 48BE-               <1>  mov rsi, %2
    10 00002038 [5A06000000000000]  <1>
    11 00002040 4883EC08            <1>  sub rsp, 8
    12 00002044 E8(00000000)        <1>  call printf
    13 00002049 4883C408            <1>  add rsp, 8
  1967 0000204D EB00                            jmp mostrarEstadisticas
  1968                                  
  1969                                  mostrarEstadisticas:
  1970                                      mPuts msgEstadisticas
     2 0000204F 48BF-               <1>  mov rdi, %1
     2 00002051 [E502000000000000]  <1>
     3 00002059 4883EC08            <1>  sub rsp, 8
     4 0000205D E8(00000000)        <1>  call puts
     5 00002062 4883C408            <1>  add rsp, 8
  1971                                  
  1972                                      mPrint msgCantTotalCapturas, qword[cantSoldCapturados]
     9 00002066 48BF-               <1>  mov rdi, %1
     9 00002068 [0603000000000000]  <1>
    10 00002070 488B3425[64080000]  <1>  mov rsi, %2
    11 00002078 4883EC08            <1>  sub rsp, 8
    12 0000207C E8(00000000)        <1>  call printf
    13 00002081 4883C408            <1>  add rsp, 8
  1973                                  
  1974                                      ; Estadísticas del oficial 1
  1975                                      mPuts msgOficial1
     2 00002085 48BF-               <1>  mov rdi, %1
     2 00002087 [2703000000000000]  <1>
     3 0000208F 4883EC08            <1>  sub rsp, 8
     4 00002093 E8(00000000)        <1>  call puts
     5 00002098 4883C408            <1>  add rsp, 8
  1976                                      mPrint msgCantMovimientos, qword[movimientosOfic1]
     9 0000209C 48BF-               <1>  mov rdi, %1
     9 0000209E [3F03000000000000]  <1>
    10 000020A6 488B3425[C4070000]  <1>  mov rsi, %2
    11 000020AE 4883EC08            <1>  sub rsp, 8
    12 000020B2 E8(00000000)        <1>  call printf
    13 000020B7 4883C408            <1>  add rsp, 8
  1977                                      mPrint msgCantAdelante, qword[movOfic1Adelante]
     9 000020BB 48BF-               <1>  mov rdi, %1
     9 000020BD [5803000000000000]  <1>
    10 000020C5 488B3425[D4070000]  <1>  mov rsi, %2
    11 000020CD 4883EC08            <1>  sub rsp, 8
    12 000020D1 E8(00000000)        <1>  call printf
    13 000020D6 4883C408            <1>  add rsp, 8
  1978                                      mPrint msgCantDerecha, qword[movOfic1Derecha]
     9 000020DA 48BF-               <1>  mov rdi, %1
     9 000020DC [6E03000000000000]  <1>
    10 000020E4 488B3425[DC070000]  <1>  mov rsi, %2
    11 000020EC 4883EC08            <1>  sub rsp, 8
    12 000020F0 E8(00000000)        <1>  call printf
    13 000020F5 4883C408            <1>  add rsp, 8
  1979                                      mPrint msgCantIzquierda, qword[movOfic1Izquierda]
     9 000020F9 48BF-               <1>  mov rdi, %1
     9 000020FB [8603000000000000]  <1>
    10 00002103 488B3425[E4070000]  <1>  mov rsi, %2
    11 0000210B 4883EC08            <1>  sub rsp, 8
    12 0000210F E8(00000000)        <1>  call printf
    13 00002114 4883C408            <1>  add rsp, 8
  1980                                      mPrint msgCantAtras, qword[movOfic1Atras]
     9 00002118 48BF-               <1>  mov rdi, %1
     9 0000211A [A003000000000000]  <1>
    10 00002122 488B3425[EC070000]  <1>  mov rsi, %2
    11 0000212A 4883EC08            <1>  sub rsp, 8
    12 0000212E E8(00000000)        <1>  call printf
    13 00002133 4883C408            <1>  add rsp, 8
  1981                                      mPrint msgCantDiagonal, qword[movOfic1Diagonal]
     9 00002137 48BF-               <1>  mov rdi, %1
     9 00002139 [B403000000000000]  <1>
    10 00002141 488B3425[F4070000]  <1>  mov rsi, %2
    11 00002149 4883EC08            <1>  sub rsp, 8
    12 0000214D E8(00000000)        <1>  call printf
    13 00002152 4883C408            <1>  add rsp, 8
  1982                                      mPrint msgCantDiagArribaDer, qword[movOfic1DiagArribaDer]
     9 00002156 48BF-               <1>  mov rdi, %1
     9 00002158 [C703000000000000]  <1>
    10 00002160 488B3425[FC070000]  <1>  mov rsi, %2
    11 00002168 4883EC08            <1>  sub rsp, 8
    12 0000216C E8(00000000)        <1>  call printf
    13 00002171 4883C408            <1>  add rsp, 8
  1983                                      mPrint msgCantDiagArribaIzq, qword[movOfic1DiagArribaIzq]
     9 00002175 48BF-               <1>  mov rdi, %1
     9 00002177 [E103000000000000]  <1>
    10 0000217F 488B3425[04080000]  <1>  mov rsi, %2
    11 00002187 4883EC08            <1>  sub rsp, 8
    12 0000218B E8(00000000)        <1>  call printf
    13 00002190 4883C408            <1>  add rsp, 8
  1984                                      mPrint msgCantDiagAbajoDer, qword[movOfic1DiagAbajoDer]
     9 00002194 48BF-               <1>  mov rdi, %1
     9 00002196 [FD03000000000000]  <1>
    10 0000219E 488B3425[0C080000]  <1>  mov rsi, %2
    11 000021A6 4883EC08            <1>  sub rsp, 8
    12 000021AA E8(00000000)        <1>  call printf
    13 000021AF 4883C408            <1>  add rsp, 8
  1985                                      mPrint msgCantDiagAbajoIzq, qword[movOfic1DiagAbajoIzq]
     9 000021B3 48BF-               <1>  mov rdi, %1
     9 000021B5 [1504000000000000]  <1>
    10 000021BD 488B3425[14080000]  <1>  mov rsi, %2
    11 000021C5 4883EC08            <1>  sub rsp, 8
    12 000021C9 E8(00000000)        <1>  call printf
    13 000021CE 4883C408            <1>  add rsp, 8
  1986                                      mPrint msgCantSoldadosCapt, qword[cantCapturasOfic1]
     9 000021D2 48BF-               <1>  mov rdi, %1
     9 000021D4 [2F04000000000000]  <1>
    10 000021DC 488B3425[94080000]  <1>  mov rsi, %2
    11 000021E4 4883EC08            <1>  sub rsp, 8
    12 000021E8 E8(00000000)        <1>  call printf
    13 000021ED 4883C408            <1>  add rsp, 8
  1987                                  
  1988                                      ; Estadísticas del oficial 2
  1989                                      mPuts msgOficial2
     2 000021F1 48BF-               <1>  mov rdi, %1
     2 000021F3 [3303000000000000]  <1>
     3 000021FB 4883EC08            <1>  sub rsp, 8
     4 000021FF E8(00000000)        <1>  call puts
     5 00002204 4883C408            <1>  add rsp, 8
  1990                                      mPrint msgCantMovimientos, qword[movimientosOfic2]
     9 00002208 48BF-               <1>  mov rdi, %1
     9 0000220A [3F03000000000000]  <1>
    10 00002212 488B3425[CC070000]  <1>  mov rsi, %2
    11 0000221A 4883EC08            <1>  sub rsp, 8
    12 0000221E E8(00000000)        <1>  call printf
    13 00002223 4883C408            <1>  add rsp, 8
  1991                                      mPrint msgCantAdelante, qword[movOfic2Adelante]
     9 00002227 48BF-               <1>  mov rdi, %1
     9 00002229 [5803000000000000]  <1>
    10 00002231 488B3425[1C080000]  <1>  mov rsi, %2
    11 00002239 4883EC08            <1>  sub rsp, 8
    12 0000223D E8(00000000)        <1>  call printf
    13 00002242 4883C408            <1>  add rsp, 8
  1992                                      mPrint msgCantDerecha, qword[movOfic2Derecha]
     9 00002246 48BF-               <1>  mov rdi, %1
     9 00002248 [6E03000000000000]  <1>
    10 00002250 488B3425[24080000]  <1>  mov rsi, %2
    11 00002258 4883EC08            <1>  sub rsp, 8
    12 0000225C E8(00000000)        <1>  call printf
    13 00002261 4883C408            <1>  add rsp, 8
  1993                                      mPrint msgCantIzquierda, qword[movOfic2Izquierda]
     9 00002265 48BF-               <1>  mov rdi, %1
     9 00002267 [8603000000000000]  <1>
    10 0000226F 488B3425[2C080000]  <1>  mov rsi, %2
    11 00002277 4883EC08            <1>  sub rsp, 8
    12 0000227B E8(00000000)        <1>  call printf
    13 00002280 4883C408            <1>  add rsp, 8
  1994                                      mPrint msgCantAtras, qword[movOfic2Atras]
     9 00002284 48BF-               <1>  mov rdi, %1
     9 00002286 [A003000000000000]  <1>
    10 0000228E 488B3425[34080000]  <1>  mov rsi, %2
    11 00002296 4883EC08            <1>  sub rsp, 8
    12 0000229A E8(00000000)        <1>  call printf
    13 0000229F 4883C408            <1>  add rsp, 8
  1995                                      mPrint msgCantDiagonal, qword[movOfic2Diagonal]
     9 000022A3 48BF-               <1>  mov rdi, %1
     9 000022A5 [B403000000000000]  <1>
    10 000022AD 488B3425[3C080000]  <1>  mov rsi, %2
    11 000022B5 4883EC08            <1>  sub rsp, 8
    12 000022B9 E8(00000000)        <1>  call printf
    13 000022BE 4883C408            <1>  add rsp, 8
  1996                                      mPrint msgCantDiagArribaDer, qword[movOfic2DiagArribaDer]
     9 000022C2 48BF-               <1>  mov rdi, %1
     9 000022C4 [C703000000000000]  <1>
    10 000022CC 488B3425[44080000]  <1>  mov rsi, %2
    11 000022D4 4883EC08            <1>  sub rsp, 8
    12 000022D8 E8(00000000)        <1>  call printf
    13 000022DD 4883C408            <1>  add rsp, 8
  1997                                      mPrint msgCantDiagArribaIzq, qword[movOfic2DiagArribaIzq]
     9 000022E1 48BF-               <1>  mov rdi, %1
     9 000022E3 [E103000000000000]  <1>
    10 000022EB 488B3425[4C080000]  <1>  mov rsi, %2
    11 000022F3 4883EC08            <1>  sub rsp, 8
    12 000022F7 E8(00000000)        <1>  call printf
    13 000022FC 4883C408            <1>  add rsp, 8
  1998                                      mPrint msgCantDiagAbajoDer, qword[movOfic2DiagAbajoDer]
     9 00002300 48BF-               <1>  mov rdi, %1
     9 00002302 [FD03000000000000]  <1>
    10 0000230A 488B3425[54080000]  <1>  mov rsi, %2
    11 00002312 4883EC08            <1>  sub rsp, 8
    12 00002316 E8(00000000)        <1>  call printf
    13 0000231B 4883C408            <1>  add rsp, 8
  1999                                      mPrint msgCantDiagAbajoIzq, qword[movOfic2DiagAbajoIzq]
     9 0000231F 48BF-               <1>  mov rdi, %1
     9 00002321 [1504000000000000]  <1>
    10 00002329 488B3425[5C080000]  <1>  mov rsi, %2
    11 00002331 4883EC08            <1>  sub rsp, 8
    12 00002335 E8(00000000)        <1>  call printf
    13 0000233A 4883C408            <1>  add rsp, 8
  2000                                      mPrint msgCantSoldadosCapt, qword[cantCapturasOfic2]
     9 0000233E 48BF-               <1>  mov rdi, %1
     9 00002340 [2F04000000000000]  <1>
    10 00002348 488B3425[9C080000]  <1>  mov rsi, %2
    11 00002350 4883EC08            <1>  sub rsp, 8
    12 00002354 E8(00000000)        <1>  call printf
    13 00002359 4883C408            <1>  add rsp, 8
  2001                                  
  2002 0000235D EB00                        jmp salirSinGuardar
  2003                                  
  2004                                  ; --------------------------------------------------------------------------------------------
  2005                                  ; RUTINAS PARA SALIR DEL JUEGO (guardando o no la partida)
  2006                                  ; --------------------------------------------------------------------------------------------
  2007                                  
  2008                                  salirSinGuardar:
  2009 0000235F B800000000                  mov rax, 0
  2010 00002364 C3                          ret
  2011                                  
  2012                                  salirDelJuego:
  2013                                      mCommand cmdLimpiarPantalla
    24 00002365 48BF-               <1>  mov rdi, %1
    24 00002367 [AA08000000000000]  <1>
    25 0000236F 4883EC08            <1>  sub rsp, 8
    26 00002373 E8(00000000)        <1>  call system
    27 00002378 4883C408            <1>  add rsp, 8
  2014                                  
  2015                                      mPuts msgSalidaPartida
     2 0000237C 48BF-               <1>  mov rdi, %1
     2 0000237E [B904000000000000]  <1>
     3 00002386 4883EC08            <1>  sub rsp, 8
     4 0000238A E8(00000000)        <1>  call puts
     5 0000238F 4883C408            <1>  add rsp, 8
  2016                                      mPuts msgAclaracionSalida
     2 00002393 48BF-               <1>  mov rdi, %1
     2 00002395 [F604000000000000]  <1>
     3 0000239D 4883EC08            <1>  sub rsp, 8
     4 000023A1 E8(00000000)        <1>  call puts
     5 000023A6 4883C408            <1>  add rsp, 8
  2017                                  
  2018                                      recibirOpcionGuardado:
  2019                                          mGets guardadoPartida
    17 000023AA 48BF-               <1>  mov rdi, %1
    17 000023AC [8D05000000000000]  <1>
    18 000023B4 4883EC08            <1>  sub rsp, 8
    19 000023B8 E8(00000000)        <1>  call gets
    20 000023BD 4883C408            <1>  add rsp, 8
  2020                                  
  2021 000023C1 803C25[8E050000]00          cmp byte[guardadoPartida+1], 0
  2022 000023C9 7514                        jne guardadoInvalido
  2023                                  
  2024 000023CB 803C25[8D050000]73          cmp byte[guardadoPartida], 's'
  2025 000023D3 746C                        je guardarPartida
  2026                                  
  2027 000023D5 803C25[8D050000]6E          cmp byte[guardadoPartida], 'n'
  2028 000023DD 7419                        je removerArchivo
  2029                                  
  2030                                      guardadoInvalido:
  2031                                          mPuts msgOpcionInvalida
     2 000023DF 48BF-               <1>  mov rdi, %1
     2 000023E1 [A100000000000000]  <1>
     3 000023E9 4883EC08            <1>  sub rsp, 8
     4 000023ED E8(00000000)        <1>  call puts
     5 000023F2 4883C408            <1>  add rsp, 8
  2032 000023F6 EBB2                            jmp recibirOpcionGuardado
  2033                                  
  2034                                      removerArchivo:
  2035                                          mCommand cmdLimpiarPantalla
    24 000023F8 48BF-               <1>  mov rdi, %1
    24 000023FA [AA08000000000000]  <1>
    25 00002402 4883EC08            <1>  sub rsp, 8
    26 00002406 E8(00000000)        <1>  call system
    27 0000240B 4883C408            <1>  add rsp, 8
  2036                                  
  2037 0000240F 803C25[8F050000]73              cmp byte[yaHabiaGuardado], 's' ; Si ya había guardado la partida, la borramos
  2038 00002417 0F8532FCFFFF                    jne mostrarEstadisticas
  2039                                          
  2040                                          mCommand cmdBorrarArchivoPartida
    24 0000241D 48BF-               <1>  mov rdi, %1
    24 0000241F [CA08000000000000]  <1>
    25 00002427 4883EC08            <1>  sub rsp, 8
    26 0000242B E8(00000000)        <1>  call system
    27 00002430 4883C408            <1>  add rsp, 8
  2041 00002434 C60425[8F050000]6E              mov byte[yaHabiaGuardado], 'n' ; Para la próxima vez que se quiera salir, no se borra nada
  2042 0000243C E90EFCFFFF                      jmp mostrarEstadisticas
  2043                                  
  2044                                  guardarPartida:
  2045 00002441 C60425[8F050000]73          mov byte[yaHabiaGuardado], 's'
  2046                                      mOpenFile nombreArchivo, modoEscritura
   112 00002449 48BF-               <1>  mov rdi, %1
   112 0000244B [0E09000000000000]  <1>
   113 00002453 48BE-               <1>  mov rsi, %2
   113 00002455 [0809000000000000]  <1>
   114 0000245D 4883EC08            <1>  sub rsp, 8
   115 00002461 E8(00000000)        <1>  call fopen
   116 00002466 4883C408            <1>  add rsp, 8
   117 0000246A 48890425[D8000000]  <1>  mov qword[idArchGuardado], rax
  2047 00002472 E82D000000                  call agregarDatosPartida
  2048                                      mCloseFile idArchGuardado
   121 00002477 488B3C25[D8000000]  <1>  mov rdi, [%1]
   122 0000247F 4883EC08            <1>  sub rsp, 8
   123 00002483 E8(00000000)        <1>  call fclose
   124 00002488 4883C408            <1>  add rsp, 8
  2049                                  
  2050                                      mPuts msgPartidaGuardada
     2 0000248C 48BF-               <1>  mov rdi, %1
     2 0000248E [9305000000000000]  <1>
     3 00002496 4883EC08            <1>  sub rsp, 8
     4 0000249A E8(00000000)        <1>  call puts
     5 0000249F 4883C408            <1>  add rsp, 8
  2051 000024A3 C3                          ret    
  2052                                  
  2053                                  agregarDatosPartida:
  2054                                      mWriteLine tableroEnJuego, 116, 1
   138 000024A4 48BF-               <1>  mov rdi, %1
   138 000024A6 [0400000000000000]  <1>
   139 000024AE BE74000000          <1>  mov rsi, %2
   140 000024B3 BA01000000          <1>  mov rdx, %3
   141 000024B8 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 000024C0 4883EC08            <1>  sub rsp, 8
   143 000024C4 E8(00000000)        <1>  call fwrite
   144 000024C9 4883C408            <1>  add rsp, 8
  2055                                  
  2056                                      mWriteLine yaHabiaGuardado, 1, 1 ; Guardamos si ya había guardado la partida
   138 000024CD 48BF-               <1>  mov rdi, %1
   138 000024CF [8F05000000000000]  <1>
   139 000024D7 BE01000000          <1>  mov rsi, %2
   140 000024DC BA01000000          <1>  mov rdx, %3
   141 000024E1 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 000024E9 4883EC08            <1>  sub rsp, 8
   143 000024ED E8(00000000)        <1>  call fwrite
   144 000024F2 4883C408            <1>  add rsp, 8
  2057                                  
  2058                                      mWriteLine turnoDe, 1, 1 ; Guardamos el turno actual
   138 000024F6 48BF-               <1>  mov rdi, %1
   138 000024F8 [9105000000000000]  <1>
   139 00002500 BE01000000          <1>  mov rsi, %2
   140 00002505 BA01000000          <1>  mov rdx, %3
   141 0000250A 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 00002512 4883EC08            <1>  sub rsp, 8
   143 00002516 E8(00000000)        <1>  call fwrite
   144 0000251B 4883C408            <1>  add rsp, 8
  2059                                  
  2060                                      mWriteLine movimientosOfic1, 8, 1
   138 0000251F 48BF-               <1>  mov rdi, %1
   138 00002521 [C407000000000000]  <1>
   139 00002529 BE08000000          <1>  mov rsi, %2
   140 0000252E BA01000000          <1>  mov rdx, %3
   141 00002533 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 0000253B 4883EC08            <1>  sub rsp, 8
   143 0000253F E8(00000000)        <1>  call fwrite
   144 00002544 4883C408            <1>  add rsp, 8
  2061                                      mWriteLine movimientosOfic2, 8, 1
   138 00002548 48BF-               <1>  mov rdi, %1
   138 0000254A [CC07000000000000]  <1>
   139 00002552 BE08000000          <1>  mov rsi, %2
   140 00002557 BA01000000          <1>  mov rdx, %3
   141 0000255C 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 00002564 4883EC08            <1>  sub rsp, 8
   143 00002568 E8(00000000)        <1>  call fwrite
   144 0000256D 4883C408            <1>  add rsp, 8
  2062                                  
  2063                                      mWriteLine movOfic1Adelante, 8, 1
   138 00002571 48BF-               <1>  mov rdi, %1
   138 00002573 [D407000000000000]  <1>
   139 0000257B BE08000000          <1>  mov rsi, %2
   140 00002580 BA01000000          <1>  mov rdx, %3
   141 00002585 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 0000258D 4883EC08            <1>  sub rsp, 8
   143 00002591 E8(00000000)        <1>  call fwrite
   144 00002596 4883C408            <1>  add rsp, 8
  2064                                      mWriteLine movOfic1Derecha, 8, 1
   138 0000259A 48BF-               <1>  mov rdi, %1
   138 0000259C [DC07000000000000]  <1>
   139 000025A4 BE08000000          <1>  mov rsi, %2
   140 000025A9 BA01000000          <1>  mov rdx, %3
   141 000025AE 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 000025B6 4883EC08            <1>  sub rsp, 8
   143 000025BA E8(00000000)        <1>  call fwrite
   144 000025BF 4883C408            <1>  add rsp, 8
  2065                                      mWriteLine movOfic1Izquierda, 8, 1
   138 000025C3 48BF-               <1>  mov rdi, %1
   138 000025C5 [E407000000000000]  <1>
   139 000025CD BE08000000          <1>  mov rsi, %2
   140 000025D2 BA01000000          <1>  mov rdx, %3
   141 000025D7 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 000025DF 4883EC08            <1>  sub rsp, 8
   143 000025E3 E8(00000000)        <1>  call fwrite
   144 000025E8 4883C408            <1>  add rsp, 8
  2066                                      mWriteLine movOfic1Atras, 8, 1
   138 000025EC 48BF-               <1>  mov rdi, %1
   138 000025EE [EC07000000000000]  <1>
   139 000025F6 BE08000000          <1>  mov rsi, %2
   140 000025FB BA01000000          <1>  mov rdx, %3
   141 00002600 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 00002608 4883EC08            <1>  sub rsp, 8
   143 0000260C E8(00000000)        <1>  call fwrite
   144 00002611 4883C408            <1>  add rsp, 8
  2067                                      mWriteLine movOfic1Diagonal, 8, 1
   138 00002615 48BF-               <1>  mov rdi, %1
   138 00002617 [F407000000000000]  <1>
   139 0000261F BE08000000          <1>  mov rsi, %2
   140 00002624 BA01000000          <1>  mov rdx, %3
   141 00002629 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 00002631 4883EC08            <1>  sub rsp, 8
   143 00002635 E8(00000000)        <1>  call fwrite
   144 0000263A 4883C408            <1>  add rsp, 8
  2068                                      mWriteLine movOfic1DiagArribaDer, 8, 1
   138 0000263E 48BF-               <1>  mov rdi, %1
   138 00002640 [FC07000000000000]  <1>
   139 00002648 BE08000000          <1>  mov rsi, %2
   140 0000264D BA01000000          <1>  mov rdx, %3
   141 00002652 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 0000265A 4883EC08            <1>  sub rsp, 8
   143 0000265E E8(00000000)        <1>  call fwrite
   144 00002663 4883C408            <1>  add rsp, 8
  2069                                      mWriteLine movOfic1DiagArribaIzq, 8, 1
   138 00002667 48BF-               <1>  mov rdi, %1
   138 00002669 [0408000000000000]  <1>
   139 00002671 BE08000000          <1>  mov rsi, %2
   140 00002676 BA01000000          <1>  mov rdx, %3
   141 0000267B 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 00002683 4883EC08            <1>  sub rsp, 8
   143 00002687 E8(00000000)        <1>  call fwrite
   144 0000268C 4883C408            <1>  add rsp, 8
  2070                                      mWriteLine movOfic1DiagAbajoDer, 8, 1
   138 00002690 48BF-               <1>  mov rdi, %1
   138 00002692 [0C08000000000000]  <1>
   139 0000269A BE08000000          <1>  mov rsi, %2
   140 0000269F BA01000000          <1>  mov rdx, %3
   141 000026A4 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 000026AC 4883EC08            <1>  sub rsp, 8
   143 000026B0 E8(00000000)        <1>  call fwrite
   144 000026B5 4883C408            <1>  add rsp, 8
  2071                                      mWriteLine movOfic1DiagAbajoIzq, 8, 1
   138 000026B9 48BF-               <1>  mov rdi, %1
   138 000026BB [1408000000000000]  <1>
   139 000026C3 BE08000000          <1>  mov rsi, %2
   140 000026C8 BA01000000          <1>  mov rdx, %3
   141 000026CD 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 000026D5 4883EC08            <1>  sub rsp, 8
   143 000026D9 E8(00000000)        <1>  call fwrite
   144 000026DE 4883C408            <1>  add rsp, 8
  2072                                  
  2073                                      mWriteLine movOfic2Adelante, 8, 1
   138 000026E2 48BF-               <1>  mov rdi, %1
   138 000026E4 [1C08000000000000]  <1>
   139 000026EC BE08000000          <1>  mov rsi, %2
   140 000026F1 BA01000000          <1>  mov rdx, %3
   141 000026F6 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 000026FE 4883EC08            <1>  sub rsp, 8
   143 00002702 E8(00000000)        <1>  call fwrite
   144 00002707 4883C408            <1>  add rsp, 8
  2074                                      mWriteLine movOfic2Derecha, 8, 1
   138 0000270B 48BF-               <1>  mov rdi, %1
   138 0000270D [2408000000000000]  <1>
   139 00002715 BE08000000          <1>  mov rsi, %2
   140 0000271A BA01000000          <1>  mov rdx, %3
   141 0000271F 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 00002727 4883EC08            <1>  sub rsp, 8
   143 0000272B E8(00000000)        <1>  call fwrite
   144 00002730 4883C408            <1>  add rsp, 8
  2075                                      mWriteLine movOfic2Izquierda, 8, 1
   138 00002734 48BF-               <1>  mov rdi, %1
   138 00002736 [2C08000000000000]  <1>
   139 0000273E BE08000000          <1>  mov rsi, %2
   140 00002743 BA01000000          <1>  mov rdx, %3
   141 00002748 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 00002750 4883EC08            <1>  sub rsp, 8
   143 00002754 E8(00000000)        <1>  call fwrite
   144 00002759 4883C408            <1>  add rsp, 8
  2076                                      mWriteLine movOfic2Atras, 8, 1
   138 0000275D 48BF-               <1>  mov rdi, %1
   138 0000275F [3408000000000000]  <1>
   139 00002767 BE08000000          <1>  mov rsi, %2
   140 0000276C BA01000000          <1>  mov rdx, %3
   141 00002771 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 00002779 4883EC08            <1>  sub rsp, 8
   143 0000277D E8(00000000)        <1>  call fwrite
   144 00002782 4883C408            <1>  add rsp, 8
  2077                                      mWriteLine movOfic2Diagonal, 8, 1
   138 00002786 48BF-               <1>  mov rdi, %1
   138 00002788 [3C08000000000000]  <1>
   139 00002790 BE08000000          <1>  mov rsi, %2
   140 00002795 BA01000000          <1>  mov rdx, %3
   141 0000279A 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 000027A2 4883EC08            <1>  sub rsp, 8
   143 000027A6 E8(00000000)        <1>  call fwrite
   144 000027AB 4883C408            <1>  add rsp, 8
  2078                                      mWriteLine movOfic2DiagArribaDer, 8, 1
   138 000027AF 48BF-               <1>  mov rdi, %1
   138 000027B1 [4408000000000000]  <1>
   139 000027B9 BE08000000          <1>  mov rsi, %2
   140 000027BE BA01000000          <1>  mov rdx, %3
   141 000027C3 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 000027CB 4883EC08            <1>  sub rsp, 8
   143 000027CF E8(00000000)        <1>  call fwrite
   144 000027D4 4883C408            <1>  add rsp, 8
  2079                                      mWriteLine movOfic2DiagArribaIzq, 8, 1
   138 000027D8 48BF-               <1>  mov rdi, %1
   138 000027DA [4C08000000000000]  <1>
   139 000027E2 BE08000000          <1>  mov rsi, %2
   140 000027E7 BA01000000          <1>  mov rdx, %3
   141 000027EC 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 000027F4 4883EC08            <1>  sub rsp, 8
   143 000027F8 E8(00000000)        <1>  call fwrite
   144 000027FD 4883C408            <1>  add rsp, 8
  2080                                      mWriteLine movOfic2DiagAbajoDer, 8, 1
   138 00002801 48BF-               <1>  mov rdi, %1
   138 00002803 [5408000000000000]  <1>
   139 0000280B BE08000000          <1>  mov rsi, %2
   140 00002810 BA01000000          <1>  mov rdx, %3
   141 00002815 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 0000281D 4883EC08            <1>  sub rsp, 8
   143 00002821 E8(00000000)        <1>  call fwrite
   144 00002826 4883C408            <1>  add rsp, 8
  2081                                      mWriteLine movOfic2DiagAbajoIzq, 8, 1
   138 0000282A 48BF-               <1>  mov rdi, %1
   138 0000282C [5C08000000000000]  <1>
   139 00002834 BE08000000          <1>  mov rsi, %2
   140 00002839 BA01000000          <1>  mov rdx, %3
   141 0000283E 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 00002846 4883EC08            <1>  sub rsp, 8
   143 0000284A E8(00000000)        <1>  call fwrite
   144 0000284F 4883C408            <1>  add rsp, 8
  2082                                  
  2083                                      mWriteLine cantSoldCapturados, 8, 1
   138 00002853 48BF-               <1>  mov rdi, %1
   138 00002855 [6408000000000000]  <1>
   139 0000285D BE08000000          <1>  mov rsi, %2
   140 00002862 BA01000000          <1>  mov rdx, %3
   141 00002867 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 0000286F 4883EC08            <1>  sub rsp, 8
   143 00002873 E8(00000000)        <1>  call fwrite
   144 00002878 4883C408            <1>  add rsp, 8
  2084                                      mWriteLine cantOficInvalidados, 8, 1
   138 0000287C 48BF-               <1>  mov rdi, %1
   138 0000287E [6C08000000000000]  <1>
   139 00002886 BE08000000          <1>  mov rsi, %2
   140 0000288B BA01000000          <1>  mov rdx, %3
   141 00002890 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 00002898 4883EC08            <1>  sub rsp, 8
   143 0000289C E8(00000000)        <1>  call fwrite
   144 000028A1 4883C408            <1>  add rsp, 8
  2085                                  
  2086                                      mWriteLine casillaOfic1, 8, 1
   138 000028A5 48BF-               <1>  mov rdi, %1
   138 000028A7 [7408000000000000]  <1>
   139 000028AF BE08000000          <1>  mov rsi, %2
   140 000028B4 BA01000000          <1>  mov rdx, %3
   141 000028B9 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 000028C1 4883EC08            <1>  sub rsp, 8
   143 000028C5 E8(00000000)        <1>  call fwrite
   144 000028CA 4883C408            <1>  add rsp, 8
  2087                                      mWriteLine casillaOfic1+8, 8, 1
   138 000028CE 48BF-               <1>  mov rdi, %1
   138 000028D0 [7C08000000000000]  <1>
   139 000028D8 BE08000000          <1>  mov rsi, %2
   140 000028DD BA01000000          <1>  mov rdx, %3
   141 000028E2 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 000028EA 4883EC08            <1>  sub rsp, 8
   143 000028EE E8(00000000)        <1>  call fwrite
   144 000028F3 4883C408            <1>  add rsp, 8
  2088                                  
  2089                                      mWriteLine casillaOfic2, 8, 1
   138 000028F7 48BF-               <1>  mov rdi, %1
   138 000028F9 [8408000000000000]  <1>
   139 00002901 BE08000000          <1>  mov rsi, %2
   140 00002906 BA01000000          <1>  mov rdx, %3
   141 0000290B 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 00002913 4883EC08            <1>  sub rsp, 8
   143 00002917 E8(00000000)        <1>  call fwrite
   144 0000291C 4883C408            <1>  add rsp, 8
  2090                                      mWriteLine casillaOfic2+8, 8, 1
   138 00002920 48BF-               <1>  mov rdi, %1
   138 00002922 [8C08000000000000]  <1>
   139 0000292A BE08000000          <1>  mov rsi, %2
   140 0000292F BA01000000          <1>  mov rdx, %3
   141 00002934 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 0000293C 4883EC08            <1>  sub rsp, 8
   143 00002940 E8(00000000)        <1>  call fwrite
   144 00002945 4883C408            <1>  add rsp, 8
  2091                                  
  2092                                      mWriteLine cantCapturasOfic1, 8, 1
   138 00002949 48BF-               <1>  mov rdi, %1
   138 0000294B [9408000000000000]  <1>
   139 00002953 BE08000000          <1>  mov rsi, %2
   140 00002958 BA01000000          <1>  mov rdx, %3
   141 0000295D 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 00002965 4883EC08            <1>  sub rsp, 8
   143 00002969 E8(00000000)        <1>  call fwrite
   144 0000296E 4883C408            <1>  add rsp, 8
  2093                                      mWriteLine cantCapturasOfic2, 8, 1
   138 00002972 48BF-               <1>  mov rdi, %1
   138 00002974 [9C08000000000000]  <1>
   139 0000297C BE08000000          <1>  mov rsi, %2
   140 00002981 BA01000000          <1>  mov rdx, %3
   141 00002986 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 0000298E 4883EC08            <1>  sub rsp, 8
   143 00002992 E8(00000000)        <1>  call fwrite
   144 00002997 4883C408            <1>  add rsp, 8
  2094                                  
  2095 0000299B C3                          ret
  2096                                  
  2097                                  ; --------------------------------------------------------------------------------------------
  2098                                  ; RUTINA PARA OBTENER LOS DATOS DE UNA PARTIDA GUARDADA
  2099                                  ; --------------------------------------------------------------------------------------------
  2100                                  
  2101                                  abrirPartidaGuardada:
  2102                                      ; Recreamos el tablero guardado
  2103                                      mReadLine tableroEnJuego, 116, 1
   128 0000299C 48BF-               <1>  mov rdi, %1
   128 0000299E [0400000000000000]  <1>
   129 000029A6 BE74000000          <1>  mov rsi, %2
   130 000029AB BA01000000          <1>  mov rdx, %3
   131 000029B0 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 000029B8 4883EC08            <1>  sub rsp, 8
   133 000029BC E8(00000000)        <1>  call fread
   134 000029C1 4883C408            <1>  add rsp, 8
  2104                                  
  2105                                      mReadLine yaHabiaGuardado, 1, 1
   128 000029C5 48BF-               <1>  mov rdi, %1
   128 000029C7 [8F05000000000000]  <1>
   129 000029CF BE01000000          <1>  mov rsi, %2
   130 000029D4 BA01000000          <1>  mov rdx, %3
   131 000029D9 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 000029E1 4883EC08            <1>  sub rsp, 8
   133 000029E5 E8(00000000)        <1>  call fread
   134 000029EA 4883C408            <1>  add rsp, 8
  2106                                      mReadLine turnoDe, 1, 1
   128 000029EE 48BF-               <1>  mov rdi, %1
   128 000029F0 [9105000000000000]  <1>
   129 000029F8 BE01000000          <1>  mov rsi, %2
   130 000029FD BA01000000          <1>  mov rdx, %3
   131 00002A02 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002A0A 4883EC08            <1>  sub rsp, 8
   133 00002A0E E8(00000000)        <1>  call fread
   134 00002A13 4883C408            <1>  add rsp, 8
  2107                                  
  2108                                      mReadLine movimientosOfic1, 8, 1
   128 00002A17 48BF-               <1>  mov rdi, %1
   128 00002A19 [C407000000000000]  <1>
   129 00002A21 BE08000000          <1>  mov rsi, %2
   130 00002A26 BA01000000          <1>  mov rdx, %3
   131 00002A2B 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002A33 4883EC08            <1>  sub rsp, 8
   133 00002A37 E8(00000000)        <1>  call fread
   134 00002A3C 4883C408            <1>  add rsp, 8
  2109                                      mReadLine movimientosOfic2, 8, 1
   128 00002A40 48BF-               <1>  mov rdi, %1
   128 00002A42 [CC07000000000000]  <1>
   129 00002A4A BE08000000          <1>  mov rsi, %2
   130 00002A4F BA01000000          <1>  mov rdx, %3
   131 00002A54 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002A5C 4883EC08            <1>  sub rsp, 8
   133 00002A60 E8(00000000)        <1>  call fread
   134 00002A65 4883C408            <1>  add rsp, 8
  2110                                  
  2111                                      mReadLine movOfic1Adelante, 8, 1
   128 00002A69 48BF-               <1>  mov rdi, %1
   128 00002A6B [D407000000000000]  <1>
   129 00002A73 BE08000000          <1>  mov rsi, %2
   130 00002A78 BA01000000          <1>  mov rdx, %3
   131 00002A7D 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002A85 4883EC08            <1>  sub rsp, 8
   133 00002A89 E8(00000000)        <1>  call fread
   134 00002A8E 4883C408            <1>  add rsp, 8
  2112                                      mReadLine movOfic1Derecha, 8, 1
   128 00002A92 48BF-               <1>  mov rdi, %1
   128 00002A94 [DC07000000000000]  <1>
   129 00002A9C BE08000000          <1>  mov rsi, %2
   130 00002AA1 BA01000000          <1>  mov rdx, %3
   131 00002AA6 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002AAE 4883EC08            <1>  sub rsp, 8
   133 00002AB2 E8(00000000)        <1>  call fread
   134 00002AB7 4883C408            <1>  add rsp, 8
  2113                                      mReadLine movOfic1Izquierda, 8, 1
   128 00002ABB 48BF-               <1>  mov rdi, %1
   128 00002ABD [E407000000000000]  <1>
   129 00002AC5 BE08000000          <1>  mov rsi, %2
   130 00002ACA BA01000000          <1>  mov rdx, %3
   131 00002ACF 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002AD7 4883EC08            <1>  sub rsp, 8
   133 00002ADB E8(00000000)        <1>  call fread
   134 00002AE0 4883C408            <1>  add rsp, 8
  2114                                      mReadLine movOfic1Atras, 8, 1
   128 00002AE4 48BF-               <1>  mov rdi, %1
   128 00002AE6 [EC07000000000000]  <1>
   129 00002AEE BE08000000          <1>  mov rsi, %2
   130 00002AF3 BA01000000          <1>  mov rdx, %3
   131 00002AF8 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002B00 4883EC08            <1>  sub rsp, 8
   133 00002B04 E8(00000000)        <1>  call fread
   134 00002B09 4883C408            <1>  add rsp, 8
  2115                                      mReadLine movOfic1Diagonal, 8, 1
   128 00002B0D 48BF-               <1>  mov rdi, %1
   128 00002B0F [F407000000000000]  <1>
   129 00002B17 BE08000000          <1>  mov rsi, %2
   130 00002B1C BA01000000          <1>  mov rdx, %3
   131 00002B21 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002B29 4883EC08            <1>  sub rsp, 8
   133 00002B2D E8(00000000)        <1>  call fread
   134 00002B32 4883C408            <1>  add rsp, 8
  2116                                      mReadLine movOfic1DiagArribaDer, 8, 1
   128 00002B36 48BF-               <1>  mov rdi, %1
   128 00002B38 [FC07000000000000]  <1>
   129 00002B40 BE08000000          <1>  mov rsi, %2
   130 00002B45 BA01000000          <1>  mov rdx, %3
   131 00002B4A 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002B52 4883EC08            <1>  sub rsp, 8
   133 00002B56 E8(00000000)        <1>  call fread
   134 00002B5B 4883C408            <1>  add rsp, 8
  2117                                      mReadLine movOfic1DiagArribaIzq, 8, 1
   128 00002B5F 48BF-               <1>  mov rdi, %1
   128 00002B61 [0408000000000000]  <1>
   129 00002B69 BE08000000          <1>  mov rsi, %2
   130 00002B6E BA01000000          <1>  mov rdx, %3
   131 00002B73 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002B7B 4883EC08            <1>  sub rsp, 8
   133 00002B7F E8(00000000)        <1>  call fread
   134 00002B84 4883C408            <1>  add rsp, 8
  2118                                      mReadLine movOfic1DiagAbajoDer, 8, 1
   128 00002B88 48BF-               <1>  mov rdi, %1
   128 00002B8A [0C08000000000000]  <1>
   129 00002B92 BE08000000          <1>  mov rsi, %2
   130 00002B97 BA01000000          <1>  mov rdx, %3
   131 00002B9C 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002BA4 4883EC08            <1>  sub rsp, 8
   133 00002BA8 E8(00000000)        <1>  call fread
   134 00002BAD 4883C408            <1>  add rsp, 8
  2119                                      mReadLine movOfic1DiagAbajoIzq, 8, 1
   128 00002BB1 48BF-               <1>  mov rdi, %1
   128 00002BB3 [1408000000000000]  <1>
   129 00002BBB BE08000000          <1>  mov rsi, %2
   130 00002BC0 BA01000000          <1>  mov rdx, %3
   131 00002BC5 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002BCD 4883EC08            <1>  sub rsp, 8
   133 00002BD1 E8(00000000)        <1>  call fread
   134 00002BD6 4883C408            <1>  add rsp, 8
  2120                                  
  2121                                      mReadLine movOfic2Adelante, 8, 1
   128 00002BDA 48BF-               <1>  mov rdi, %1
   128 00002BDC [1C08000000000000]  <1>
   129 00002BE4 BE08000000          <1>  mov rsi, %2
   130 00002BE9 BA01000000          <1>  mov rdx, %3
   131 00002BEE 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002BF6 4883EC08            <1>  sub rsp, 8
   133 00002BFA E8(00000000)        <1>  call fread
   134 00002BFF 4883C408            <1>  add rsp, 8
  2122                                      mReadLine movOfic2Derecha, 8, 1
   128 00002C03 48BF-               <1>  mov rdi, %1
   128 00002C05 [2408000000000000]  <1>
   129 00002C0D BE08000000          <1>  mov rsi, %2
   130 00002C12 BA01000000          <1>  mov rdx, %3
   131 00002C17 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002C1F 4883EC08            <1>  sub rsp, 8
   133 00002C23 E8(00000000)        <1>  call fread
   134 00002C28 4883C408            <1>  add rsp, 8
  2123                                      mReadLine movOfic2Izquierda, 8, 1
   128 00002C2C 48BF-               <1>  mov rdi, %1
   128 00002C2E [2C08000000000000]  <1>
   129 00002C36 BE08000000          <1>  mov rsi, %2
   130 00002C3B BA01000000          <1>  mov rdx, %3
   131 00002C40 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002C48 4883EC08            <1>  sub rsp, 8
   133 00002C4C E8(00000000)        <1>  call fread
   134 00002C51 4883C408            <1>  add rsp, 8
  2124                                      mReadLine movOfic2Atras, 8, 1
   128 00002C55 48BF-               <1>  mov rdi, %1
   128 00002C57 [3408000000000000]  <1>
   129 00002C5F BE08000000          <1>  mov rsi, %2
   130 00002C64 BA01000000          <1>  mov rdx, %3
   131 00002C69 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002C71 4883EC08            <1>  sub rsp, 8
   133 00002C75 E8(00000000)        <1>  call fread
   134 00002C7A 4883C408            <1>  add rsp, 8
  2125                                      mReadLine movOfic2Diagonal, 8, 1
   128 00002C7E 48BF-               <1>  mov rdi, %1
   128 00002C80 [3C08000000000000]  <1>
   129 00002C88 BE08000000          <1>  mov rsi, %2
   130 00002C8D BA01000000          <1>  mov rdx, %3
   131 00002C92 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002C9A 4883EC08            <1>  sub rsp, 8
   133 00002C9E E8(00000000)        <1>  call fread
   134 00002CA3 4883C408            <1>  add rsp, 8
  2126                                      mReadLine movOfic2DiagArribaDer, 8, 1
   128 00002CA7 48BF-               <1>  mov rdi, %1
   128 00002CA9 [4408000000000000]  <1>
   129 00002CB1 BE08000000          <1>  mov rsi, %2
   130 00002CB6 BA01000000          <1>  mov rdx, %3
   131 00002CBB 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002CC3 4883EC08            <1>  sub rsp, 8
   133 00002CC7 E8(00000000)        <1>  call fread
   134 00002CCC 4883C408            <1>  add rsp, 8
  2127                                      mReadLine movOfic2DiagArribaIzq, 8, 1
   128 00002CD0 48BF-               <1>  mov rdi, %1
   128 00002CD2 [4C08000000000000]  <1>
   129 00002CDA BE08000000          <1>  mov rsi, %2
   130 00002CDF BA01000000          <1>  mov rdx, %3
   131 00002CE4 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002CEC 4883EC08            <1>  sub rsp, 8
   133 00002CF0 E8(00000000)        <1>  call fread
   134 00002CF5 4883C408            <1>  add rsp, 8
  2128                                      mReadLine movOfic2DiagAbajoDer, 8, 1
   128 00002CF9 48BF-               <1>  mov rdi, %1
   128 00002CFB [5408000000000000]  <1>
   129 00002D03 BE08000000          <1>  mov rsi, %2
   130 00002D08 BA01000000          <1>  mov rdx, %3
   131 00002D0D 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002D15 4883EC08            <1>  sub rsp, 8
   133 00002D19 E8(00000000)        <1>  call fread
   134 00002D1E 4883C408            <1>  add rsp, 8
  2129                                      mReadLine movOfic2DiagAbajoIzq, 8, 1
   128 00002D22 48BF-               <1>  mov rdi, %1
   128 00002D24 [5C08000000000000]  <1>
   129 00002D2C BE08000000          <1>  mov rsi, %2
   130 00002D31 BA01000000          <1>  mov rdx, %3
   131 00002D36 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002D3E 4883EC08            <1>  sub rsp, 8
   133 00002D42 E8(00000000)        <1>  call fread
   134 00002D47 4883C408            <1>  add rsp, 8
  2130                                  
  2131                                      mReadLine cantSoldCapturados, 8, 1
   128 00002D4B 48BF-               <1>  mov rdi, %1
   128 00002D4D [6408000000000000]  <1>
   129 00002D55 BE08000000          <1>  mov rsi, %2
   130 00002D5A BA01000000          <1>  mov rdx, %3
   131 00002D5F 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002D67 4883EC08            <1>  sub rsp, 8
   133 00002D6B E8(00000000)        <1>  call fread
   134 00002D70 4883C408            <1>  add rsp, 8
  2132                                      mReadLine cantOficInvalidados, 8, 1
   128 00002D74 48BF-               <1>  mov rdi, %1
   128 00002D76 [6C08000000000000]  <1>
   129 00002D7E BE08000000          <1>  mov rsi, %2
   130 00002D83 BA01000000          <1>  mov rdx, %3
   131 00002D88 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002D90 4883EC08            <1>  sub rsp, 8
   133 00002D94 E8(00000000)        <1>  call fread
   134 00002D99 4883C408            <1>  add rsp, 8
  2133                                  
  2134                                      mReadLine casillaOfic1, 8, 1
   128 00002D9D 48BF-               <1>  mov rdi, %1
   128 00002D9F [7408000000000000]  <1>
   129 00002DA7 BE08000000          <1>  mov rsi, %2
   130 00002DAC BA01000000          <1>  mov rdx, %3
   131 00002DB1 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002DB9 4883EC08            <1>  sub rsp, 8
   133 00002DBD E8(00000000)        <1>  call fread
   134 00002DC2 4883C408            <1>  add rsp, 8
  2135                                      mReadLine casillaOfic1+8, 8, 1
   128 00002DC6 48BF-               <1>  mov rdi, %1
   128 00002DC8 [7C08000000000000]  <1>
   129 00002DD0 BE08000000          <1>  mov rsi, %2
   130 00002DD5 BA01000000          <1>  mov rdx, %3
   131 00002DDA 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002DE2 4883EC08            <1>  sub rsp, 8
   133 00002DE6 E8(00000000)        <1>  call fread
   134 00002DEB 4883C408            <1>  add rsp, 8
  2136                                  
  2137                                      mReadLine casillaOfic2, 8, 1
   128 00002DEF 48BF-               <1>  mov rdi, %1
   128 00002DF1 [8408000000000000]  <1>
   129 00002DF9 BE08000000          <1>  mov rsi, %2
   130 00002DFE BA01000000          <1>  mov rdx, %3
   131 00002E03 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002E0B 4883EC08            <1>  sub rsp, 8
   133 00002E0F E8(00000000)        <1>  call fread
   134 00002E14 4883C408            <1>  add rsp, 8
  2138                                      mReadLine casillaOfic2+8, 8, 1
   128 00002E18 48BF-               <1>  mov rdi, %1
   128 00002E1A [8C08000000000000]  <1>
   129 00002E22 BE08000000          <1>  mov rsi, %2
   130 00002E27 BA01000000          <1>  mov rdx, %3
   131 00002E2C 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002E34 4883EC08            <1>  sub rsp, 8
   133 00002E38 E8(00000000)        <1>  call fread
   134 00002E3D 4883C408            <1>  add rsp, 8
  2139                                  
  2140                                      mReadLine cantCapturasOfic1, 8, 1
   128 00002E41 48BF-               <1>  mov rdi, %1
   128 00002E43 [9408000000000000]  <1>
   129 00002E4B BE08000000          <1>  mov rsi, %2
   130 00002E50 BA01000000          <1>  mov rdx, %3
   131 00002E55 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002E5D 4883EC08            <1>  sub rsp, 8
   133 00002E61 E8(00000000)        <1>  call fread
   134 00002E66 4883C408            <1>  add rsp, 8
  2141                                      mReadLine cantCapturasOfic2, 8, 1
   128 00002E6A 48BF-               <1>  mov rdi, %1
   128 00002E6C [9C08000000000000]  <1>
   129 00002E74 BE08000000          <1>  mov rsi, %2
   130 00002E79 BA01000000          <1>  mov rdx, %3
   131 00002E7E 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002E86 4883EC08            <1>  sub rsp, 8
   133 00002E8A E8(00000000)        <1>  call fread
   134 00002E8F 4883C408            <1>  add rsp, 8
  2142                                  
  2143 00002E93 C3                          ret
  2144                                  
  2145                                  ; --------------------------------------------------------------------------------------------
  2146                                  ; FIN DE LAS SUBRUTINAS
  2147                                  ; --------------------------------------------------------------------------------------------
