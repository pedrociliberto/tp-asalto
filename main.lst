     1                                  %macro mPuts 1 ; Imprime el string %1, hasta encontrar un 0
     2                                      mov rdi, %1
     3                                      sub rsp, 8
     4                                      call puts
     5                                      add rsp, 8
     6                                  %endmacro
     7                                  
     8                                  %macro mPrint 2 ; Imprime el string %2 con formato %1
     9                                      mov rdi, %1
    10                                      mov rsi, %2
    11                                      sub rsp, 8
    12                                      call printf
    13                                      add rsp, 8
    14                                  %endmacro
    15                                  
    16                                  %macro mGets 1 ; Obtiene un string por teclado, guardándolo en %1
    17                                      mov rdi, %1
    18                                      sub rsp, 8
    19                                      call gets
    20                                      add rsp, 8
    21                                  %endmacro
    22                                  
    23                                  %macro mCommand 1 ; Ejecuta el comando %1 de la terminal
    24                                      mov rdi, %1
    25                                      sub rsp, 8
    26                                      call system
    27                                      add rsp, 8
    28                                  %endmacro
    29                                  
    30                                  %macro mMov 3 ; Copia %3 bytes del campo de memoria %2 al campo de memoria %1
    31                                      mov rcx, %3
    32                                      lea rsi, [%2]
    33                                      lea rdi, [%1]
    34                                      rep movsb
    35                                  %endmacro
    36                                  
    37                                  %macro mCmp 3 ; Compara %3 bytes del campo %1 con %2
    38                                      mov rcx, %3
    39                                      lea rsi, %1
    40                                      lea rdi, %2
    41                                      repe cmpsb
    42                                  %endmacro 
    43                                  
    44                                  %macro mErrorJump 2 ; Imprime el mensaje de error %1 y salta a la etiqueta %2
    45                                      mPuts %1
    46                                      jmp %2
    47                                  %endmacro
    48                                  
    49                                  %macro mfGets 2
    50                                      mov rdi, %1
    51                                      mov rsi, %2
    52                                      mov rdx, [stdin]
    53                                      sub rsp, 8
    54                                      call fgets
    55                                      add rsp, 8
    56                                  %endmacro
    57                                  
    58                                  %macro mLeerEntradaEstandar 2
    59                                      mov rax, 0      ; syscall: read
    60                                      mov rdi, 0      ; 0: stdin
    61                                      mov rsi, %1   ; buffer (direccion de guardado de lo leido)
    62                                      mov rdx, %2     ; Cuantos bytes queremos leer
    63                                      syscall
    64                                  
    65                                      mov byte[rsi+rax], 0
    66                                  %endmacro
    67                                  
    68                                  %macro mSscanf 3
    69                                      lea rdi, %1     ; Variable Original string
    70                                      mov rsi, %2     ; Formato
    71                                      mov rdx, %3     ; Variable a guardar el int
    72                                      sub rsp, 8
    73                                      call sscanf
    74                                      add rsp, 8
    75                                  %endmacro
    76                                  
    77                                  %macro mSprintf 3
    78                                      mov rdi, %1     ; Variable donde se guardará el string
    79                                      mov rsi, %2     ; Formato
    80                                      mov rdx, %3     ; Variable a guardar en el string
    81                                      sub rsp, 8
    82                                      call sprintf
    83                                      add rsp, 8
    84                                  %endmacro
    85                                  
    86                                  %macro mCalcDesplaz 3
    87                                      mov rdi, %1
    88                                      mov rsi, %2
    89                                      call calcularDesplazamiento
    90                                      mov %3, rax
    91                                  %endmacro
    92                                  
    93                                  %macro mEstaVacia 1 
    94                                      mov rax, 0
    95                                      mov rdi, %1 ; recibe el desplazamiento
    96                                      call estaVacia
    97                                  %endmacro
    98                                  
    99                                  %macro mHaySoldado 1
   100                                      mov rax, 0
   101                                      mov rdi, %1 ; recibe el desplazamiento
   102                                      call haySoldado
   103                                  %endmacro
   104                                  
   105                                  %macro mPuedeCapturar 2
   106                                      mov rdi, %1 ; diferencia de desplazamiento
   107                                      mov rsi, %2 ; 0 para sumar [rdi] al desplazamiento, 1 para restar
   108                                      call podiaComerPieza
   109                                  %endmacro
   110                                  
   111                                  %macro mOpenFile 2
   112                                      mov rdi, %1 ; nombre del archivo
   113                                      mov rsi, %2 ; modo de apertura
   114                                      sub rsp, 8
   115                                      call fopen
   116                                      add rsp, 8
   117                                  
   118                                      cmp rax, 0
   119                                      mov qword[idArchGuardado], rax ; Guardamos el ID del archivo
   120                                  %endmacro
   121                                  
   122                                  %macro mCloseFile 1
   123                                      mov rdi, [%1] ; ID del archivo
   124                                      sub rsp, 8
   125                                      call fclose
   126                                      add rsp, 8
   127                                  %endmacro
   128                                  
   129                                  %macro mReadLine 3 
   130                                      mov rdi, %1 ; lugar a dejar lo leido
   131                                      mov rsi, %2 ; cantidad de bytes a leer
   132                                      mov rdx, %3 ; bloques de lectura
   133                                      mov rcx, [idArchGuardado] ; ID del archivo
   134                                      sub rsp, 8
   135                                      call fread
   136                                      add rsp, 8
   137                                  %endmacro
   138                                  
   139                                  %macro mWriteLine 3
   140                                      mov rdi, %1 ; string a escribir
   141                                      mov rsi, %2 ; cantidad de bytes a escribir
   142                                      mov rdx, %3 ; bloques de escritura
   143                                      mov rcx, [idArchGuardado] ; ID del archivo
   144                                      sub rsp, 8
   145                                      call fwrite
   146                                      add rsp, 8
   147                                  %endmacro
   148                                  
   149                                  ; Importación de funciones de la librería C
   150                                  extern puts, printf
   151                                  extern gets
   152                                  extern system, stdin
   153                                  extern sscanf, sprintf
   154                                  extern fopen, fclose, fread, fwrite, fgets
   155                                  
   156                                  section .data
   157                                  
   158                                      ; Tableros y sus posibles estados
   159                                  
   160 00000000 202031323334353637-         tableroOrig         db " "," ","1","2","3","4","5","6","7"," ",10
   160 00000009 200A               
   161 0000000B 2020202D5F5F5F2D20-                             db " "," "," ","-","_","_","_","-"," "," ",10 
   161 00000014 200A               
   162 00000016 3120207C5858587C20-                             db "1"," "," ","|","X","X","X","|"," "," ",10
   162 0000001F 200A               
   163 00000021 322D5F7C5858587C5F-                             db "2","-","_","|","X","X","X","|","_","-",10
   163 0000002A 2D0A               
   164 0000002C 337C58585858585858-                             db "3","|","X","X","X","X","X","X","X","|",10 
   164 00000035 7C0A               
   165 00000037 347C58585858585858-                             db "4","|","X","X","X","X","X","X","X","|",10 
   165 00000040 7C0A               
   166 00000042 357C58582020205858-                             db "5","|","X","X"," "," "," ","X","X","|",10 
   166 0000004B 7C0A               
   167 0000004D 362D2D7C20204F7C2D-                             db "6","-","-","|"," "," ","O","|","-","-",10 
   167 00000056 2D0A               
   168 00000058 3720207C4F20207C20-                             db "7"," "," ","|","O"," "," ","|"," "," ",10 
   168 00000061 200A               
   169 00000063 2020202D2D2D2D2D20-                             db " "," "," ","-","-","-","-","-"," "," ",10,0
   169 0000006C 200A00             
   170                                  
   171                                      ; Mensajes
   172                                  
   173 0000006F C2A14269656E76656E-         msgBienvenida           db "¡Bienvenido al juego El Asalto! ('#' para salir)", 0
   173 00000078 69646F20616C206A75-
   173 00000081 65676F20456C204173-
   173 0000008A 616C746F2120282723-
   173 00000093 272070617261207361-
   173 0000009C 6C69722900         
   174                                  
   175 000000A1 4F706369C3B36E2069-         msgOpcionInvalida       db "Opción inválida. Intente de nuevo.", 0
   175 000000AA 6E76C3A16C6964612E-
   175 000000B3 20496E74656E746520-
   175 000000BC 6465206E7565766F2E-
   175 000000C5 00                 
   176                                      
   177 000000C6 436173696C6C612069-         msgCasillaInvalidaSold  db "Casilla inválida: no hay un soldado en esa casilla. Intente de nuevo.", 0
   177 000000CF 6E76C3A16C6964613A-
   177 000000D8 206E6F206861792075-
   177 000000E1 6E20736F6C6461646F-
   177 000000EA 20656E206573612063-
   177 000000F3 6173696C6C612E2049-
   177 000000FC 6E74656E7465206465-
   177 00000105 206E7565766F2E00   
   178 0000010D 4572726F7220656E20-         msgErrorInputSold       db "Error en el formato de entrada del soldado. Intente de nuevo.", 0
   178 00000116 656C20666F726D6174-
   178 0000011F 6F20646520656E7472-
   178 00000128 6164612064656C2073-
   178 00000131 6F6C6461646F2E2049-
   178 0000013A 6E74656E7465206465-
   178 00000143 206E7565766F2E00   
   179 0000014B 4E6F20736520707565-         msgCasillaInvMovSold    db "No se puede mover el soldado a esa casilla. Intente de nuevo.", 0
   179 00000154 6465206D6F76657220-
   179 0000015D 656C20736F6C646164-
   179 00000166 6F2061206573612063-
   179 0000016F 6173696C6C612E2049-
   179 00000178 6E74656E7465206465-
   179 00000181 206E7565766F2E00   
   180                                  
   181 00000189 436173696C6C612069-         msgCasillaInvalidaOfic  db "Casilla inválida: no hay un oficial en esa casilla. Intente de nuevo.", 0
   181 00000192 6E76C3A16C6964613A-
   181 0000019B 206E6F206861792075-
   181 000001A4 6E206F66696369616C-
   181 000001AD 20656E206573612063-
   181 000001B6 6173696C6C612E2049-
   181 000001BF 6E74656E7465206465-
   181 000001C8 206E7565766F2E00   
   182 000001D0 4572726F7220656E20-         msgErrorInputOfic       db "Error en el formato de entrada del oficial. Intente de nuevo.", 0
   182 000001D9 656C20666F726D6174-
   182 000001E2 6F20646520656E7472-
   182 000001EB 6164612064656C206F-
   182 000001F4 66696369616C2E2049-
   182 000001FD 6E74656E7465206465-
   182 00000206 206E7565766F2E00   
   183 0000020E 4E6F20736520707565-         msgCasillaInvMovOfic    db "No se puede mover el oficial a esa casilla. Intente de nuevo.", 0
   183 00000217 6465206D6F76657220-
   183 00000220 656C206F6669636961-
   183 00000229 6C2061206573612063-
   183 00000232 6173696C6C612E2049-
   183 0000023B 6E74656E7465206465-
   183 00000244 206E7565766F2E00   
   184                                  
   185 0000024C C2BF517569C3A96E20-         msgQuienInicia          db "¿Quién inicia el juego: oficiales o soldados? (o/s): ", 0
   185 00000255 696E6963696120656C-
   185 0000025E 206A7565676F3A206F-
   185 00000267 66696369616C657320-
   185 00000270 6F20736F6C6461646F-
   185 00000279 733F20286F2F73293A-
   185 00000282 2000               
   186                                  
   187 00000284 C2A1556E206F666963-         msgOficialRetirado      db "¡Un oficial ha sido retirado del juego! Se ha olvidado de atrapar a un soldado.", 0
   187 0000028D 69616C206861207369-
   187 00000296 646F20726574697261-
   187 0000029F 646F2064656C206A75-
   187 000002A8 65676F212053652068-
   187 000002B1 61206F6C7669646164-
   187 000002BA 6F2064652061747261-
   187 000002C3 706172206120756E20-
   187 000002CC 736F6C6461646F2E00 
   188                                  
   189 000002D5 4573746164C3AD7374-         msgEstadisticas         db "Estadísticas de los oficiales:", 10, 0
   189 000002DE 69636173206465206C-
   189 000002E7 6F73206F6669636961-
   189 000002F0 6C65733A0A00       
   190                                  
   191 000002F6 43616E746964616420-         msgCantTotalCapturas    db "Cantidad total de capturas: %d", 10, 10, 0
   191 000002FF 746F74616C20646520-
   191 00000308 63617074757261733A-
   191 00000311 2025640A0A00       
   192                                  
   193 00000317 4F66696369616C2031-         msgOficial1             db "Oficial 1:", 10, 0
   193 00000320 3A0A00             
   194 00000323 4F66696369616C2032-         msgOficial2             db "Oficial 2:", 10, 0
   194 0000032C 3A0A00             
   195                                  
   196 0000032F 4D6F76696D69656E74-         msgCantMovimientos      db "Movimientos totales: %d", 10, 0
   196 00000338 6F7320746F74616C65-
   196 00000341 733A2025640A00     
   197 00000348 2D2048616369612061-         msgCantAdelante         db "- Hacia adelante: %d", 10, 0
   197 00000351 64656C616E74653A20-
   197 0000035A 25640A00           
   198 0000035E 2D204861636961206C-         msgCantDerecha          db "- Hacia la derecha: %d", 10, 0
   198 00000367 612064657265636861-
   198 00000370 3A2025640A00       
   199 00000376 2D204861636961206C-         msgCantIzquierda        db "- Hacia la izquierda: %d", 10, 0
   199 0000037F 6120697A7175696572-
   199 00000388 64613A2025640A00   
   200 00000390 2D2048616369612061-         msgCantAtras            db "- Hacia atrás: %d", 10, 0
   200 00000399 7472C3A1733A202564-
   200 000003A2 0A00               
   201 000003A4 2D20456E2064696167-         msgCantDiagonal         db "- En diagonal: %d", 10, 0
   201 000003AD 6F6E616C3A2025640A-
   201 000003B6 00                 
   202 000003B7 2D2D2D204164656C61-         msgCantDiagArribaDer    db "--- Adelante-derecha: %d", 10, 0
   202 000003C0 6E74652D6465726563-
   202 000003C9 68613A2025640A00   
   203 000003D1 2D2D2D204164656C61-         msgCantDiagArribaIzq    db "--- Adelante-izquierda: %d", 10, 0
   203 000003DA 6E74652D697A717569-
   203 000003E3 657264613A2025640A-
   203 000003EC 00                 
   204 000003ED 2D2D2D20417472C3A1-         msgCantDiagAbajoDer     db "--- Atrás-derecha: %d", 10, 0
   204 000003F6 732D64657265636861-
   204 000003FF 3A2025640A00       
   205 00000405 2D2D2D20417472C3A1-         msgCantDiagAbajoIzq     db "--- Atrás-izquierda: %d", 10, 0
   205 0000040E 732D697A7175696572-
   205 00000417 64613A2025640A00   
   206                                  
   207 0000041F 43616E746964616420-         msgCantSoldadosCapt     db "Cantidad de soldados capturados: %d", 10, 10, 0
   207 00000428 646520736F6C646164-
   207 00000431 6F7320636170747572-
   207 0000043A 61646F733A2025640A-
   207 00000443 0A00               
   208                                  
   209 00000445 C2A1456C206A756567-         msgJuegoTerminado       db "¡El juego ha terminado!", 10, 0
   209 0000044E 6F206861207465726D-
   209 00000457 696E61646F210A00   
   210 0000045F C2A1456C2067616E61-         msgGanador              db "¡El ganador es el equipo de los %s!", 10, 0
   210 00000468 646F7220657320656C-
   210 00000471 2065717569706F2064-
   210 0000047A 65206C6F7320257321-
   210 00000483 0A00               
   211 00000485 736F6C6461646F7300          stringSoldados          db "soldados", 0
   212 0000048E 6F66696369616C6573-         stringOficiales         db "oficiales", 0
   212 00000497 00                 
   213                                  
   214 00000498 52617AC3B36E3A2025-         msgRazonGanador         db "Razón: %s", 10, 0
   214 000004A1 730A00             
   215                                  
   216 000004A4 2D2D2D2D00                  varRazonFin             db '----', 0 ; Razón de fin de juego (a llenar)          
   217                                  
   218                                      ; Se ha decidido salir de la partida
   219 000004A9 536520686120646563-         msgSalidaPartida        db "Se ha decidido salir de la partida. ¿Desea guardarla? (s/n)", 0
   219 000004B2 696469646F2073616C-
   219 000004BB 6972206465206C6120-
   219 000004C4 706172746964612E20-
   219 000004CD C2BF44657365612067-
   219 000004D6 7561726461726C613F-
   219 000004DF 2028732F6E2900     
   220 000004E6 4E4F54413A20536920-         msgAclaracionSalida     db "NOTA: Si decide no guardar la partida, se perderá todo el progreso. En cambio, si decide guardarla y tenía una partida guardada, se sobreescribirá.", 0
   220 000004EF 646563696465206E6F-
   220 000004F8 206775617264617220-
   220 00000501 6C6120706172746964-
   220 0000050A 612C20736520706572-
   220 00000513 646572C3A120746F64-
   220 0000051C 6F20656C2070726F67-
   220 00000525 7265736F2E20456E20-
   220 0000052E 63616D62696F2C2073-
   220 00000537 692064656369646520-
   220 00000540 677561726461726C61-
   220 00000549 20792074656EC3AD61-
   220 00000552 20756E612070617274-
   220 0000055B 696461206775617264-
   220 00000564 6164612C2073652073-
   220 0000056D 6F6272656573637269-
   220 00000576 626972C3A12E00     
   221 0000057D 6E00                        guardadoPartida         db 'n', 0 ; guardar (s), no guardar (n)
   222                                  
   223 0000057F 6E00                        yaHabiaGuardado         db 'n', 0 ; ya había guardado (s), no había guardado (n)
   224                                  
   225 00000581 7300                        turnoDe                 db 's', 0 ; soldados (s), oficiales (o)
   226                                  
   227 00000583 C2A150617274696461-         msgPartidaGuardada      db "¡Partida guardada con éxito!", 0
   227 0000058C 206775617264616461-
   227 00000595 20636F6E20C3A97869-
   227 0000059E 746F2100           
   228                                  
   229 000005A2 4572726F7220616C20-         msgErrorOpenFile        db "Error al abrir el archivo.", 0
   229 000005AB 616272697220656C20-
   229 000005B4 6172636869766F2E00 
   230                                  
   231                                      ; Razones de victoria de soldados
   232 000005BD 6C6F7320736F6C6461-         msgSoldadosFortaleza    db "los soldados han ocupado todos los puntos de la fortaleza.", 0
   232 000005C6 646F732068616E206F-
   232 000005CF 63757061646F20746F-
   232 000005D8 646F73206C6F732070-
   232 000005E1 756E746F7320646520-
   232 000005EA 6C6120666F7274616C-
   232 000005F3 657A612E00         
   233 000005F8 6C6F7320736F6C6461-         msgSoldadosRodean       db "los soldados han rodeado a los oficiales.", 0
   233 00000601 646F732068616E2072-
   233 0000060A 6F646561646F206120-
   233 00000613 6C6F73206F66696369-
   233 0000061C 616C65732E00       
   234 00000622 616D626F73206F6669-         msgSoldadosInvalidar    db "ambos oficiales han sido invalidados.", 0
   234 0000062B 6369616C6573206861-
   234 00000634 6E207369646F20696E-
   234 0000063D 76616C696461646F73-
   234 00000646 2E00               
   235                                  
   236                                      ; Razones de victoria de oficiales
   237 00000648 6E6F2071756564616E-         msgOficialesGanan       db "no quedan suficientes soldados para ocupar la fortaleza.", 0
   237 00000651 20737566696369656E-
   237 0000065A 74657320736F6C6461-
   237 00000663 646F73207061726120-
   237 0000066C 6F6375706172206C61-
   237 00000675 20666F7274616C657A-
   237 0000067E 612E00             
   238                                  
   239                                      ; Turnos
   240 00000681 4573207475726E6F20-         msgTurnoSoldados        db "Es turno de los soldados. Decida a qué soldado desea mover: (<numFila>-<numColumna>)", 0
   240 0000068A 6465206C6F7320736F-
   240 00000693 6C6461646F732E2044-
   240 0000069C 656369646120612071-
   240 000006A5 75C3A920736F6C6461-
   240 000006AE 646F20646573656120-
   240 000006B7 6D6F7665723A20283C-
   240 000006C0 6E756D46696C613E2D-
   240 000006C9 3C6E756D436F6C756D-
   240 000006D2 6E613E2900         
   241 000006D7 4573207475726E6F20-         msgTurnoOficiales       db "Es turno de los oficiales. Decida a qué oficial desea mover: (<numFila>-<numColumna>)", 0
   241 000006E0 6465206C6F73206F66-
   241 000006E9 696369616C65732E20-
   241 000006F2 446563696461206120-
   241 000006FB 7175C3A9206F666963-
   241 00000704 69616C206465736561-
   241 0000070D 206D6F7665723A2028-
   241 00000716 3C6E756D46696C613E-
   241 0000071F 2D3C6E756D436F6C75-
   241 00000728 6D6E613E2900       
   242 0000072E C2BF41207175C3A920-         msgTurnoMovSold         db "¿A qué casilla desea mover el soldado? (<numFila>-<numColumna>)", 0
   242 00000737 636173696C6C612064-
   242 00000740 65736561206D6F7665-
   242 00000749 7220656C20736F6C64-
   242 00000752 61646F3F20283C6E75-
   242 0000075B 6D46696C613E2D3C6E-
   242 00000764 756D436F6C756D6E61-
   242 0000076D 3E2900             
   243 00000770 C2BF41207175C3A920-         msgTurnoMovOfic         db "¿A qué casilla desea mover el oficial? (<numFila>-<numColumna>)", 0
   243 00000779 636173696C6C612064-
   243 00000782 65736561206D6F7665-
   243 0000078B 7220656C206F666963-
   243 00000794 69616C3F20283C6E75-
   243 0000079D 6D46696C613E2D3C6E-
   243 000007A6 756D436F6C756D6E61-
   243 000007AF 3E2900             
   244                                  
   245 000007B2 556E206F6669636961-         msgCapturaSold          db "Un oficial ha capturado a un soldado.", 0
   245 000007BB 6C2068612063617074-
   245 000007C4 757261646F20612075-
   245 000007CD 6E20736F6C6461646F-
   245 000007D6 2E00               
   246 000007D8 C2A1556E206F666963-         msgInvalidOfic          db "¡Un oficial ha sido invalidado! No ha capturado a un soldado regalado.", 0
   246 000007E1 69616C206861207369-
   246 000007EA 646F20696E76616C69-
   246 000007F3 6461646F21204E6F20-
   246 000007FC 686120636170747572-
   246 00000805 61646F206120756E20-
   246 0000080E 736F6C6461646F2072-
   246 00000817 6567616C61646F2E00 
   247                                      
   248                                      ; Contadores
   249                                  
   250 00000820 0000000000000000            movimientosOfic1        dq 0
   251 00000828 0000000000000000            movimientosOfic2        dq 0
   252                                      
   253 00000830 0000000000000000            movOfic1Adelante        dq 0
   254 00000838 0000000000000000            movOfic1Derecha         dq 0
   255 00000840 0000000000000000            movOfic1Izquierda       dq 0
   256 00000848 0000000000000000            movOfic1Atras           dq 0
   257 00000850 0000000000000000            movOfic1Diagonal        dq 0
   258 00000858 0000000000000000            movOfic1DiagArribaDer   dq 0
   259 00000860 0000000000000000            movOfic1DiagArribaIzq   dq 0
   260 00000868 0000000000000000            movOfic1DiagAbajoDer    dq 0
   261 00000870 0000000000000000            movOfic1DiagAbajoIzq    dq 0
   262                                  
   263 00000878 0000000000000000            movOfic2Adelante        dq 0
   264 00000880 0000000000000000            movOfic2Derecha         dq 0
   265 00000888 0000000000000000            movOfic2Izquierda       dq 0
   266 00000890 0000000000000000            movOfic2Atras           dq 0
   267 00000898 0000000000000000            movOfic2Diagonal        dq 0
   268 000008A0 0000000000000000            movOfic2DiagArribaDer   dq 0
   269 000008A8 0000000000000000            movOfic2DiagArribaIzq   dq 0
   270 000008B0 0000000000000000            movOfic2DiagAbajoDer    dq 0
   271 000008B8 0000000000000000            movOfic2DiagAbajoIzq    dq 0
   272                                  
   273 000008C0 0000000000000000            cantSoldCapturados      dq 0 ; Cuando haya 16 soldados capturados, los oficiales ganan
   274 000008C8 0000000000000000            cantOficInvalidados     dq 0 ; Cuando haya 2 oficiales invalidados, los soldados ganan
   275                                  
   276 000008D0 070000000000000003-         casillaOfic1            dq 7,3
   276 000008D9 00000000000000     
   277 000008E0 060000000000000005-         casillaOfic2            dq 6,5
   277 000008E9 00000000000000     
   278                                  
   279 000008F0 0000000000000000            cantCapturasOfic1       dq 0
   280 000008F8 0000000000000000            cantCapturasOfic2       dq 0
   281                                  
   282 00000900 4F00                        simboloOficiales        db 'O', 0
   283 00000902 5800                        simboloSoldados         db 'X', 0
   284                                      
   285 00000904 04                          orientacionTablero      db  4       ; 4 -> no rotar (default) 
   286 00000905 73                          piezaDeInicio           db 's'      ; soldados (s), oficiales (o)
   287                                  
   288                                      ; Comandos 
   289 00000906 636C65617200                cmdLimpiarPantalla          db "clear", 0
   290 0000090C 746F75636820706172-         cmdCrearArchivoPartida      db "touch partidaGuardada.dat", 0
   290 00000915 746964614775617264-
   290 0000091E 6164612E64617400   
   291 00000926 726D20706172746964-         cmdBorrarArchivoPartida     db "rm partidaGuardada.dat", 0
   291 0000092F 614775617264616461-
   291 00000938 2E64617400         
   292 0000093D 6563686F202D6E203E-         cmdLimpiarArchivo           db "echo -n > partidaGuardada.dat", 0
   292 00000946 207061727469646147-
   292 0000094F 756172646164612E64-
   292 00000958 617400             
   293                                  
   294                                      ; Formatos
   295 0000095B 257500                      formatoAtoi             db "%u", 0
   296 0000095E 257300                      formatoItoa             db "%s", 0
   297                                  
   298                                      ; Modos de apertura de archivos
   299 00000961 726200                      modoLectura             db "rb", 0
   300 00000964 776200                      modoEscritura           db "wb", 0
   301 00000967 616200                      modoAppend              db "ab", 0
   302                                  
   303 0000096A 706172746964614775-         nombreArchivo           db "partidaGuardada.dat", 0
   303 00000973 6172646164612E6461-
   303 0000097C 7400               
   304                                  
   305                                  section .bss
   306                                  
   307 00000000 ????????                    piezaIniElegida     resd 1  ; Variable pivote para la pieza que inicia
   308                                  
   309 00000004 <res 74h>                   tableroEnJuego      resb 116 ; Tablero en juego
   310                                  
   311 00000078 ????????                    soldadoElegido      resb 4  ; Fila y columna del soldado a mover
   312 0000007C ????????                    casillaMovSold      resb 4  ; Fila y columna de la casilla de destino del soldado
   313                                  
   314 00000080 ????????                    oficialElegido      resb 4  ; Fila y columna del oficial a mover
   315 00000084 ????????                    casillaMovOfic      resb 4  ; Fila y columna de la casilla de destino del oficial
   316                                  
   317 00000088 ????????????????            fila                resq 1
   318 00000090 ????????????????            columna             resq 1   
   319 00000098 ????????????????            desplazCasOrig      resq 1
   320                                  
   321 000000A0 ????????????????            filaAMover          resq 1
   322 000000A8 ????????????????            columnaAMover       resq 1
   323 000000B0 ????????????????            desplazCasAMover    resq 1
   324                                  
   325 000000B8 ????????????????            filaAux             resq 1
   326 000000C0 ????????????????            columnaAux          resq 1
   327 000000C8 ????????????????            desplazAux          resq 1
   328 000000D0 ????????????????            desplazAux2         resq 1
   329                                  
   330 000000D8 ????????????????            idArchGuardado      resq 1 ; ID del archivo de la partida guardada
   331                                      
   332 000000E0 <res 47h>                   msgErrorEspecificoSold  resb 71 ; Máximo largo de mensaje de error para soldados
   333 00000127 <res 47h>                   msgErrorEspecificoOfic  resb 71 ; Máximo largo de mensaje de error para oficiales
   334                                  
   335 0000016E <res 47h>                   msgErrorEspecificoSoldMov   resb 71 ; Máximo largo de mensaje de error para movimientos de soldados
   336 000001B5 <res 47h>                   msgErrorEspecificoOficMov   resb 71 ; Máximo largo de mensaje de error para movimientos de oficiales
   337                                  
   338                                  section .text
   339                                      global main
   340                                  
   341                                  main:
   342                                      ; Vemos si hay una partida guardada
   343                                      mOpenFile nombreArchivo, modoLectura
   112 00000000 48BF-               <1>  mov rdi, %1
   112 00000002 [6A09000000000000]  <1>
   113 0000000A 48BE-               <1>  mov rsi, %2
   113 0000000C [6109000000000000]  <1>
   114 00000014 4883EC08            <1>  sub rsp, 8
   115 00000018 E8(00000000)        <1>  call fopen
   116 0000001D 4883C408            <1>  add rsp, 8
   117                              <1> 
   118 00000021 4883F800            <1>  cmp rax, 0
   119 00000025 48890425[D8000000]  <1>  mov qword[idArchGuardado], rax
   344 0000002D 4883F800                    cmp rax, 0
   345 00000031 7F02                        jg partidaGuardada
   346 00000033 EB18                        jmp bienvenida
   347                                  
   348                                      partidaGuardada:
   349 00000035 E8CF270000                      call abrirPartidaGuardada
   350 0000003A 803C25[81050000]73              cmp byte[turnoDe], 's'
   351 00000042 0F84D8000000                    je loopMovimientos
   352 00000048 E9C5010000                      jmp turnoOficiales
   353                                  
   354                                      bienvenida:
   355                                          mPuts msgBienvenida
     2 0000004D 48BF-               <1>  mov rdi, %1
     2 0000004F [6F00000000000000]  <1>
     3 00000057 4883EC08            <1>  sub rsp, 8
     4 0000005B E8(00000000)        <1>  call puts
     5 00000060 4883C408            <1>  add rsp, 8
   356                                          
   357                                      ; Se debe elegir quién inicia la partida
   358                                      personalizarQuienInicia:
   359 00000064 C70425[00000000]00-             mov dword[piezaIniElegida], ''    ; vaciar variable
   359 0000006C 000000             
   360                                          mPuts msgQuienInicia
     2 0000006F 48BF-               <1>  mov rdi, %1
     2 00000071 [4C02000000000000]  <1>
     3 00000079 4883EC08            <1>  sub rsp, 8
     4 0000007D E8(00000000)        <1>  call puts
     5 00000082 4883C408            <1>  add rsp, 8
   361                                          mGets piezaIniElegida
    17 00000086 48BF-               <1>  mov rdi, %1
    17 00000088 [0000000000000000]  <1>
    18 00000090 4883EC08            <1>  sub rsp, 8
    19 00000094 E8(00000000)        <1>  call gets
    20 00000099 4883C408            <1>  add rsp, 8
   362                                  
   363 0000009D 833C25[00000000]23              cmp dword[piezaIniElegida], '#'
   364 000000A5 0F8434210000                    je salirSinGuardar
   365                                  
   366 000000AB 833C25[00000000]6F              cmp dword[piezaIniElegida], 'o' 
   367 000000B3 7423                            je setearPiezaInicio
   368 000000B5 833C25[00000000]73              cmp dword[piezaIniElegida], 's'
   369 000000BD 7419                            je setearPiezaInicio
   370                                  
   371                                          mErrorJump msgOpcionInvalida, personalizarQuienInicia
    45                              <1>  mPuts %1
     2 000000BF 48BF-               <2>  mov rdi, %1
     2 000000C1 [A100000000000000]  <2>
     3 000000C9 4883EC08            <2>  sub rsp, 8
     4 000000CD E8(00000000)        <2>  call puts
     5 000000D2 4883C408            <2>  add rsp, 8
    46 000000D6 EB8C                <1>  jmp %2
   372                                  
   373                                          setearPiezaInicio:
   374                                              mMov piezaDeInicio, piezaIniElegida, 1
    31 000000D8 B901000000          <1>  mov rcx, %3
    32 000000DD 488D3425[00000000]  <1>  lea rsi, [%2]
    33 000000E5 488D3C25[05090000]  <1>  lea rdi, [%1]
    34 000000ED F3A4                <1>  rep movsb
   375 000000EF EB00                                jmp comenzarPorInicio
   376                                  
   377                                  ; --------------------------------------------------------------------------------------------
   378                                  ; RUTINA PARA COMENZAR EL JUEGO -> Se comienza desde el jugador elegido (o el default)
   379                                  ; --------------------------------------------------------------------------------------------
   380                                  
   381                                  comenzarPorInicio:
   382                                      mMov tableroEnJuego, tableroOrig, 116
    31 000000F1 B974000000          <1>  mov rcx, %3
    32 000000F6 488D3425[00000000]  <1>  lea rsi, [%2]
    33 000000FE 488D3C25[04000000]  <1>  lea rdi, [%1]
    34 00000106 F3A4                <1>  rep movsb
   383                                  
   384 00000108 803C25[05090000]73          cmp byte[piezaDeInicio], 's'
   385 00000110 740E                        je loopMovimientos
   386 00000112 803C25[05090000]6F          cmp byte[piezaDeInicio], 'o'
   387 0000011A 0F84F2000000                je turnoOficiales
   388                                  
   389                                  
   390                                  ; COMIENZA EL JUEGO
   391                                  loopMovimientos:; mostrarTablero, mostrarTurno, realizarMovimiento, verificarFinJuego
   392 00000120 C60425[E0000000]00          mov byte[msgErrorEspecificoSold], 0
   393                                      turnoSoldados:
   394 00000128 C60425[81050000]73              mov byte[turnoDe], 's'
   395 00000130 C60425[78000000]30              mov byte [soldadoElegido], '0'
   396                                      
   397                                          mCommand cmdLimpiarPantalla ; Limpia la pantalla para mostrar el tablero
    24 00000138 48BF-               <1>  mov rdi, %1
    24 0000013A [0609000000000000]  <1>
    25 00000142 4883EC08            <1>  sub rsp, 8
    26 00000146 E8(00000000)        <1>  call system
    27 0000014B 4883C408            <1>  add rsp, 8
   398                                  
   399                                          mPuts tableroEnJuego ; Muestro el tablero
     2 0000014F 48BF-               <1>  mov rdi, %1
     2 00000151 [0400000000000000]  <1>
     3 00000159 4883EC08            <1>  sub rsp, 8
     4 0000015D E8(00000000)        <1>  call puts
     5 00000162 4883C408            <1>  add rsp, 8
   400                                  
   401 00000166 803C25[E0000000]00              cmp byte[msgErrorEspecificoSold], 0
   402 0000016E 0F85FB020000                    jne imprimirErrorSold
   403                                  
   404                                          todoOkSold:
   405                                  
   406                                              mPuts msgTurnoSoldados      ; Muestra el mensaje de seleccionar ficha a mover
     2 00000174 48BF-               <1>  mov rdi, %1
     2 00000176 [8106000000000000]  <1>
     3 0000017E 4883EC08            <1>  sub rsp, 8
     4 00000182 E8(00000000)        <1>  call puts
     5 00000187 4883C408            <1>  add rsp, 8
   407                                              mGets soldadoElegido        ; Obtiene la ficha a mover
    17 0000018B 48BF-               <1>  mov rdi, %1
    17 0000018D [7800000000000000]  <1>
    18 00000195 4883EC08            <1>  sub rsp, 8
    19 00000199 E8(00000000)        <1>  call gets
    20 0000019E 4883C408            <1>  add rsp, 8
   408                                  
   409 000001A2 803C25[78000000]23                  cmp byte[soldadoElegido], '#'
   410 000001AA 0F8435200000                        je salirDelJuego
   411                                              
   412 000001B0 E95E010000                          jmp verificarFichaSold ; Verifica si la ficha elegida es valida
   413                                  
   414                                              casillaAMoverseSold:
   415                                                  
   416                                                  mPuts msgTurnoMovSold   ; Muestra el mensaje de seleccionar casilla a mover
     2 000001B5 48BF-               <1>  mov rdi, %1
     2 000001B7 [2E07000000000000]  <1>
     3 000001BF 4883EC08            <1>  sub rsp, 8
     4 000001C3 E8(00000000)        <1>  call puts
     5 000001C8 4883C408            <1>  add rsp, 8
   417                                                  mGets casillaMovSold    ; Obtiene la casilla a mover
    17 000001CC 48BF-               <1>  mov rdi, %1
    17 000001CE [7C00000000000000]  <1>
    18 000001D6 4883EC08            <1>  sub rsp, 8
    19 000001DA E8(00000000)        <1>  call gets
    20 000001DF 4883C408            <1>  add rsp, 8
   418                                  
   419 000001E3 803C25[7C000000]23                      cmp byte[casillaMovSold], '#'
   420 000001EB 0F84F41F0000                            je salirDelJuego
   421                                  
   422 000001F1 E913040000                              jmp verificarMovimientoSold ; Verifica si el movimiento es valido
   423                                  
   424                                                  moverSoldado:
   425 000001F6 E85E0A0000                                  call realizarMovimientoSold ; Realiza el movimiento
   426                                                      
   427 000001FB E8D5150000                                  call verificarFinJuegoSoldados ; Verificar fin de juego por algún movimiento de soldado
   428 00000200 4883F800                                    cmp rax, 0
   429 00000204 0F842D1B0000                                je finDeJuego
   430                                  
   431 0000020A C60425[27010000]00          mov byte[msgErrorEspecificoOfic], 0
   432                                      turnoOficiales:
   433 00000212 C60425[81050000]6F              mov byte[turnoDe], 'o'
   434 0000021A C60425[80000000]30              mov byte[oficialElegido], '0'
   435                                          
   436                                          mCommand cmdLimpiarPantalla ; Limpia la pantalla para mostrar el tablero
    24 00000222 48BF-               <1>  mov rdi, %1
    24 00000224 [0609000000000000]  <1>
    25 0000022C 4883EC08            <1>  sub rsp, 8
    26 00000230 E8(00000000)        <1>  call system
    27 00000235 4883C408            <1>  add rsp, 8
   437                                  
   438                                          mPuts tableroEnJuego ; Muestra el tablero
     2 00000239 48BF-               <1>  mov rdi, %1
     2 0000023B [0400000000000000]  <1>
     3 00000243 4883EC08            <1>  sub rsp, 8
     4 00000247 E8(00000000)        <1>  call puts
     5 0000024C 4883C408            <1>  add rsp, 8
   439                                  
   440 00000250 803C25[27010000]00              cmp byte[msgErrorEspecificoOfic], 0
   441 00000258 0F858F030000                    jne imprimirErrorOfic
   442                                  
   443                                          todoOkOfic:
   444                                  
   445                                              mPuts msgTurnoOficiales ; Muestra el mensaje de seleccionar ficha a mover
     2 0000025E 48BF-               <1>  mov rdi, %1
     2 00000260 [D706000000000000]  <1>
     3 00000268 4883EC08            <1>  sub rsp, 8
     4 0000026C E8(00000000)        <1>  call puts
     5 00000271 4883C408            <1>  add rsp, 8
   446                                              mGets oficialElegido    ; Obtiene la ficha a mover
    17 00000275 48BF-               <1>  mov rdi, %1
    17 00000277 [8000000000000000]  <1>
    18 0000027F 4883EC08            <1>  sub rsp, 8
    19 00000283 E8(00000000)        <1>  call gets
    20 00000288 4883C408            <1>  add rsp, 8
   447                                  
   448 0000028C 803C25[80000000]23                  cmp byte[oficialElegido], '#'
   449 00000294 0F844B1F0000                        je salirDelJuego
   450                                  
   451 0000029A E9EC010000                          jmp verificarFichaOfic ; Verifica si la ficha elegida es valida
   452                                  
   453                                              casillaAMoverseOfic:
   454                                  
   455                                                  mPuts msgTurnoMovOfic   ; Muestra el mensaje de seleccionar casilla a mover
     2 0000029F 48BF-               <1>  mov rdi, %1
     2 000002A1 [7007000000000000]  <1>
     3 000002A9 4883EC08            <1>  sub rsp, 8
     4 000002AD E8(00000000)        <1>  call puts
     5 000002B2 4883C408            <1>  add rsp, 8
   456                                                  mGets casillaMovOfic    ; Obtiene la casilla a mover
    17 000002B6 48BF-               <1>  mov rdi, %1
    17 000002B8 [8400000000000000]  <1>
    18 000002C0 4883EC08            <1>  sub rsp, 8
    19 000002C4 E8(00000000)        <1>  call gets
    20 000002C9 4883C408            <1>  add rsp, 8
   457                                  
   458 000002CD 803C25[84000000]23                      cmp byte[casillaMovOfic], '#'
   459 000002D5 0F840A1F0000                            je salirDelJuego
   460                                                  
   461 000002DB E9C3060000                              jmp verificarMovimientoOfic ; Verifica si el movimiento es valido
   462                                  
   463                                                  moverOficial:
   464 000002E0 E8A2090000                                  call realizarMovimientoOfic ; Realiza el movimiento
   465                                                      ; Verificar fin de juego por algún movimiento de oficial
   466 000002E5 E8B1140000                                  call verificarFinJuegoOficiales
   467 000002EA 4883F800                                    cmp rax, 0
   468 000002EE 0F84431A0000                                je finDeJuego
   469                                                      
   470 000002F4 E927FEFFFF                                  jmp loopMovimientos
   471                                                  
   472                                                  capturar:
   473 000002F9 E88E0D0000                                  call capturarSoldado ; Captura soldado
   474                                                      ; Verificar fin de juego por captura de soldado
   475 000002FE E898140000                                  call verificarFinJuegoOficiales
   476 00000303 4883F800                                    cmp rax, 0
   477 00000307 0F842A1A0000                                je finDeJuego
   478                                                      
   479                                                  ; Repetir en loop
   480 0000030D E90EFEFFFF                              jmp loopMovimientos
   481                                  
   482 00000312 C3                          ret
   483                                  
   484                                  ;; --------------------------------------------------------------------------------------------
   485                                  ; VERIFICACIONES DE PIEZAS ORIGINALES A MOVER PARA SOLDADOS Y OFICIALES
   486                                  ; --------------------------------------------------------------------------------------------
   487                                  
   488                                  verificarFichaSold:
   489 00000313 8A0425[78000000]            mov al, byte[soldadoElegido] ; Numero de fila
   490                                      
   491                                      ; Compromabos que el caracter ingresado sea un número entre 1 y 7
   492 0000031A 3C31                        cmp al, '1'
   493 0000031C 0F8C05010000                jl errorInputSold
   494 00000322 3C37                        cmp al, '7'
   495 00000324 0F8FFD000000                jg errorInputSold
   496                                  
   497                                      ; Parseamos el número de fila de string a int
   498 0000032A 48C70425[88000000]-         mov qword[fila], 0
   498 00000332 00000000           
   499                                      mSscanf byte[soldadoElegido], formatoAtoi, fila
    69 00000336 488D3C25[78000000]  <1>  lea rdi, %1
    70 0000033E 48BE-               <1>  mov rsi, %2
    70 00000340 [5B09000000000000]  <1>
    71 00000348 48BA-               <1>  mov rdx, %3
    71 0000034A [8800000000000000]  <1>
    72 00000352 4883EC08            <1>  sub rsp, 8
    73 00000356 E8(00000000)        <1>  call sscanf
    74 0000035B 4883C408            <1>  add rsp, 8
   500 0000035F 4883F801                    cmp rax, 1
   501 00000363 0F8CBE000000                jl errorInputSold
   502                                  
   503                                      ; Comprobamos que el caracter siguiente sea un guión para que cumpla con el formato establecido
   504 00000369 8A0425[79000000]            mov al, byte[soldadoElegido+1] ; Caracter '-'
   505 00000370 3C2D                        cmp al, '-'
   506 00000372 0F85AF000000                jne errorInputSold
   507                                      
   508                                      ; Comprobamos que el número de columna sea un número entre 1 y 7
   509 00000378 8A0425[7A000000]            mov al, byte[soldadoElegido+2] ; Numero de columna
   510 0000037F 3C31                        cmp al, '1'
   511 00000381 0F8CA0000000                jl errorInputSold
   512 00000387 3C37                        cmp al, '7'
   513 00000389 0F8F98000000                jg errorInputSold
   514                                  
   515                                      ; Parseamos el número de columna de string a int
   516 0000038F 48C70425[90000000]-         mov qword[columna], 0
   516 00000397 00000000           
   517                                      mSscanf byte[soldadoElegido+2], formatoAtoi, columna
    69 0000039B 488D3C25[7A000000]  <1>  lea rdi, %1
    70 000003A3 48BE-               <1>  mov rsi, %2
    70 000003A5 [5B09000000000000]  <1>
    71 000003AD 48BA-               <1>  mov rdx, %3
    71 000003AF [9000000000000000]  <1>
    72 000003B7 4883EC08            <1>  sub rsp, 8
    73 000003BB E8(00000000)        <1>  call sscanf
    74 000003C0 4883C408            <1>  add rsp, 8
   518 000003C4 4883F801                    cmp rax, 1
   519 000003C8 7C5D                        jl errorInputSold
   520                                  
   521                                      ; El ultimo caracter del string ingresado debe ser un caracter nulo
   522 000003CA 8A0425[7B000000]            mov al, byte[soldadoElegido+3] ; Caracter nulo
   523 000003D1 3C00                        cmp al, 0
   524 000003D3 7552                        jne errorInputSold
   525                                  
   526                                      ; Calculamos desplazamiento en el tablero
   527                                      ;  mCalcDesplaz calcula el desplazamiento en el tablero en base a la fila y columna y lo almacena en desplazCasOrig usando una formula
   528                                      mCalcDesplaz [fila], [columna], qword[desplazCasOrig]
    87 000003D5 488B3C25[88000000]  <1>  mov rdi, %1
    88 000003DD 488B3425[90000000]  <1>  mov rsi, %2
    89 000003E5 E859080000          <1>  call calcularDesplazamiento
    90 000003EA 48890425[98000000]  <1>  mov %3, rax
   529 000003F2 488B1C25[98000000]          mov rbx, qword[desplazCasOrig]
   530                                      
   531                                      ; Limpio los registros
   532 000003FA B800000000                  mov rax,0
   533 000003FF BA00000000                  mov rdx, 0
   534                                  
   535                                      ; Cargo en dl el caracter de la casilla en el tablero y en al el simbolo de los soldados
   536 00000404 8A93[04000000]              mov dl, byte[tableroEnJuego+rbx]
   537 0000040A 8A0425[02090000]            mov al, [simboloSoldados]
   538                                  
   539                                      ; Comparo los caracteres, deben ser iguales para que el movimiento no sea invalido
   540 00000411 38C2                        cmp dl, al
   541 00000413 7536                        jne errorCasillaInvalidaSold
   542                                      
   543                                      ; Si no hubo errores, limpio el mensaje de error y sigo con la ejecucion
   544 00000415 B800000000                  mov rax, 0
   545 0000041A 48890425[E0000000]          mov [msgErrorEspecificoSold], rax
   546 00000422 E98EFDFFFF                  jmp casillaAMoverseSold
   547                                  
   548                                      ; Errores
   549                                      errorInputSold:
   550 00000427 488B0425[0D010000]              mov rax, [msgErrorInputSold]
   551                                          mMov msgErrorEspecificoSold, msgErrorInputSold, 62
    31 0000042F B93E000000          <1>  mov rcx, %3
    32 00000434 488D3425[0D010000]  <1>  lea rsi, [%2]
    33 0000043C 488D3C25[E0000000]  <1>  lea rdi, [%1]
    34 00000444 F3A4                <1>  rep movsb
   552 00000446 E9DDFCFFFF                      jmp turnoSoldados
   553                                  
   554                                      errorCasillaInvalidaSold:
   555 0000044B 488B0425[C6000000]              mov rax, [msgCasillaInvalidaSold]
   556                                          mMov msgErrorEspecificoSold, msgCasillaInvalidaSold, 71
    31 00000453 B947000000          <1>  mov rcx, %3
    32 00000458 488D3425[C6000000]  <1>  lea rsi, [%2]
    33 00000460 488D3C25[E0000000]  <1>  lea rdi, [%1]
    34 00000468 F3A4                <1>  rep movsb
   557 0000046A E9B9FCFFFF                      jmp turnoSoldados
   558                                  
   559                                      imprimirErrorSold:
   560                                          mPuts msgErrorEspecificoSold
     2 0000046F 48BF-               <1>  mov rdi, %1
     2 00000471 [E000000000000000]  <1>
     3 00000479 4883EC08            <1>  sub rsp, 8
     4 0000047D E8(00000000)        <1>  call puts
     5 00000482 4883C408            <1>  add rsp, 8
   561 00000486 E9E9FCFFFF                      jmp todoOkSold
   562                                      
   563                                  
   564                                  verificarFichaOfic:
   565 0000048B 8A0C25[80000000]            mov cl, byte[oficialElegido] ; Numero de fila
   566                                      
   567                                      ; Compromabos que el caracter ingresado para la fila sea un número entre 1 y 7
   568 00000492 80F931                      cmp cl, '1'
   569 00000495 0F8C0A010000                jl errorInputOfic
   570 0000049B 80F937                      cmp cl, '7'
   571 0000049E 0F8F01010000                jg errorInputOfic
   572                                      
   573                                      ; Parseamos el número de fila de string a int
   574 000004A4 48C70425[88000000]-         mov qword[fila], 0
   574 000004AC 00000000           
   575                                      mSscanf byte[oficialElegido], formatoAtoi, fila
    69 000004B0 488D3C25[80000000]  <1>  lea rdi, %1
    70 000004B8 48BE-               <1>  mov rsi, %2
    70 000004BA [5B09000000000000]  <1>
    71 000004C2 48BA-               <1>  mov rdx, %3
    71 000004C4 [8800000000000000]  <1>
    72 000004CC 4883EC08            <1>  sub rsp, 8
    73 000004D0 E8(00000000)        <1>  call sscanf
    74 000004D5 4883C408            <1>  add rsp, 8
   576 000004D9 4883F801                    cmp rax, 1
   577 000004DD 0F8CC2000000                jl errorInputOfic
   578                                  
   579                                      ; Comprobamos que el caracter siguiente sea un guión para que cumpla con el formato establecido
   580 000004E3 8A0C25[81000000]            mov cl, byte[oficialElegido+1] ; Caracter '-'
   581 000004EA 80F92D                      cmp cl, '-'
   582 000004ED 0F85B2000000                jne errorInputOfic
   583                                      
   584                                      ; Comprobamos que el número de columna sea un número entre 1 y 7
   585 000004F3 8A0C25[82000000]            mov cl, byte[oficialElegido+2] ; Numero de columna
   586 000004FA 80F931                      cmp cl, '1'
   587 000004FD 0F8CA2000000                jl errorInputOfic
   588 00000503 80F937                      cmp cl, '7'
   589 00000506 0F8F99000000                jg errorInputOfic
   590                                  
   591                                      ; Parseamos el número de columna de string a int
   592 0000050C 48C70425[90000000]-         mov qword[columna], 0
   592 00000514 00000000           
   593                                      mSscanf byte[oficialElegido+2], formatoAtoi, columna
    69 00000518 488D3C25[82000000]  <1>  lea rdi, %1
    70 00000520 48BE-               <1>  mov rsi, %2
    70 00000522 [5B09000000000000]  <1>
    71 0000052A 48BA-               <1>  mov rdx, %3
    71 0000052C [9000000000000000]  <1>
    72 00000534 4883EC08            <1>  sub rsp, 8
    73 00000538 E8(00000000)        <1>  call sscanf
    74 0000053D 4883C408            <1>  add rsp, 8
   594 00000541 4883F801                    cmp rax, 1
   595 00000545 7C5E                        jl errorInputOfic
   596                                  
   597                                      ; El ultimo caracter del string ingresado debe ser un caracter nulo
   598 00000547 8A0C25[83000000]            mov cl, byte[oficialElegido+3] ; Caracter nulo
   599 0000054E 80F900                      cmp cl, 0
   600 00000551 7552                        jne errorInputOfic
   601                                  
   602                                      ; Calculamos desplazamiento en tablero
   603                                      ; mCalcDesplaz calcula el desplazamiento en el tablero en base a la fila y columna y lo almacena en desplazCasOrig usando una formula
   604                                      mCalcDesplaz [fila], [columna], qword[desplazCasOrig]
    87 00000553 488B3C25[88000000]  <1>  mov rdi, %1
    88 0000055B 488B3425[90000000]  <1>  mov rsi, %2
    89 00000563 E8DB060000          <1>  call calcularDesplazamiento
    90 00000568 48890425[98000000]  <1>  mov %3, rax
   605 00000570 488B1C25[98000000]          mov rbx, qword[desplazCasOrig]
   606                                      
   607                                      ; Limpio los registros
   608 00000578 B800000000                  mov rax, 0
   609 0000057D BA00000000                  mov rdx, 0
   610                                  
   611                                      ; Cargo en dl el caracter de la casilla en el tablero y en cl el simbolo de los oficiales
   612 00000582 8A93[04000000]              mov dl, byte[tableroEnJuego+rbx]
   613 00000588 8A0C25[00090000]            mov cl, [simboloOficiales]
   614                                  
   615                                      ; Comparo los caracteres, deben ser iguales para que el movimiento no sea invalido
   616 0000058F 38CA                        cmp dl, cl
   617 00000591 7536                        jne errorCasillaInvalidaOfic
   618                                  
   619                                      ; Si no hubo errores, limpio el mensaje de error y sigo con la ejecucion
   620 00000593 B800000000                  mov rax, 0
   621 00000598 48890425[27010000]          mov [msgErrorEspecificoOfic], rax
   622 000005A0 E9FAFCFFFF                  jmp casillaAMoverseOfic
   623                                  
   624                                      ; Errores
   625                                      errorInputOfic:
   626 000005A5 488B0425[D0010000]              mov rax, [msgErrorInputOfic]
   627                                          mMov msgErrorEspecificoOfic, msgErrorInputOfic, 62
    31 000005AD B93E000000          <1>  mov rcx, %3
    32 000005B2 488D3425[D0010000]  <1>  lea rsi, [%2]
    33 000005BA 488D3C25[27010000]  <1>  lea rdi, [%1]
    34 000005C2 F3A4                <1>  rep movsb
   628 000005C4 E949FCFFFF                      jmp turnoOficiales
   629                                  
   630                                      errorCasillaInvalidaOfic:
   631 000005C9 488B0425[89010000]              mov rax, [msgCasillaInvalidaOfic]
   632                                          mMov msgErrorEspecificoOfic, msgCasillaInvalidaOfic, 71
    31 000005D1 B947000000          <1>  mov rcx, %3
    32 000005D6 488D3425[89010000]  <1>  lea rsi, [%2]
    33 000005DE 488D3C25[27010000]  <1>  lea rdi, [%1]
    34 000005E6 F3A4                <1>  rep movsb
   633 000005E8 E925FCFFFF                      jmp turnoOficiales
   634                                  
   635                                      imprimirErrorOfic:
   636                                          mPuts msgErrorEspecificoOfic
     2 000005ED 48BF-               <1>  mov rdi, %1
     2 000005EF [2701000000000000]  <1>
     3 000005F7 4883EC08            <1>  sub rsp, 8
     4 000005FB E8(00000000)        <1>  call puts
     5 00000600 4883C408            <1>  add rsp, 8
   637 00000604 E955FCFFFF                      jmp todoOkOfic
   638                                  
   639                                  ; --------------------------------------------------------------------------------------------
   640                                  ; VERFICIACIONES DE CASILLAS DESTINO PARA SOLDADOS Y OFICIALES
   641                                  ; --------------------------------------------------------------------------------------------
   642                                  
   643                                  verificarMovimientoSold:
   644 00000609 8A0425[7C000000]            mov al, byte[casillaMovSold] ; Numero de fila
   645                                      
   646                                      ; Compromabos que el caracter ingresado sea un número entre 1 y 7
   647 00000610 3C31                        cmp al, '1'
   648 00000612 0F8CE0010000                jl errorInputSoldMov
   649 00000618 3C37                        cmp al, '7'
   650 0000061A 0F8FD8010000                jg errorInputSoldMov
   651                                  
   652                                      ; Parseamos el número de fila de string a int
   653 00000620 48C70425[A0000000]-         mov qword[filaAMover], 0
   653 00000628 00000000           
   654                                      mSscanf byte[casillaMovSold], formatoAtoi, filaAMover
    69 0000062C 488D3C25[7C000000]  <1>  lea rdi, %1
    70 00000634 48BE-               <1>  mov rsi, %2
    70 00000636 [5B09000000000000]  <1>
    71 0000063E 48BA-               <1>  mov rdx, %3
    71 00000640 [A000000000000000]  <1>
    72 00000648 4883EC08            <1>  sub rsp, 8
    73 0000064C E8(00000000)        <1>  call sscanf
    74 00000651 4883C408            <1>  add rsp, 8
   655 00000655 4883F801                    cmp rax, 1
   656 00000659 0F8C99010000                jl errorInputSoldMov
   657                                  
   658                                      ; Comprobamos que el caracter siguiente sea un guión para que cumpla con el formato establecido
   659 0000065F 8A0425[7D000000]            mov al, byte[casillaMovSold+1] ; Caracter '-'
   660 00000666 3C2D                        cmp al, '-'
   661 00000668 0F858A010000                jne errorInputSoldMov
   662                                      
   663                                      ; Comprobamos que el número de columna sea un número entre 1 y 7
   664 0000066E 8A0425[7E000000]            mov al, byte[casillaMovSold+2] ; Numero de columna
   665 00000675 3C31                        cmp al, '1'
   666 00000677 0F8C7B010000                jl errorInputSoldMov
   667 0000067D 3C37                        cmp al, '7'
   668 0000067F 0F8F73010000                jg errorInputSoldMov
   669                                      
   670                                      ; Parseamos el número de columna de string a int
   671 00000685 48C70425[A8000000]-         mov qword[columnaAMover], 0
   671 0000068D 00000000           
   672                                      mSscanf byte[casillaMovSold+2], formatoAtoi, columnaAMover
    69 00000691 488D3C25[7E000000]  <1>  lea rdi, %1
    70 00000699 48BE-               <1>  mov rsi, %2
    70 0000069B [5B09000000000000]  <1>
    71 000006A3 48BA-               <1>  mov rdx, %3
    71 000006A5 [A800000000000000]  <1>
    72 000006AD 4883EC08            <1>  sub rsp, 8
    73 000006B1 E8(00000000)        <1>  call sscanf
    74 000006B6 4883C408            <1>  add rsp, 8
   673 000006BA 4883F801                    cmp rax, 1
   674 000006BE 0F8C34010000                jl errorInputSoldMov
   675                                  
   676                                      ; El ultimo caracter del string ingresado debe ser un caracter nulo
   677 000006C4 8A0425[7F000000]            mov al, byte[casillaMovSold+3] ; Caracter nulo
   678 000006CB 3C00                        cmp al, 0
   679 000006CD 0F8525010000                jne errorInputSoldMov
   680                                  
   681                                      ; Primero chequeamos si el soldado original está en alguna de las posiciones especiales
   682 000006D3 E8E0060000                  call chequearSoldPosEspeciales
   683 000006D8 4883F800                    cmp rax, 0
   684 000006DC 7423                        je lugaresComunesSold ; Si recibimos 1, la casilla original es un lugar común: intentamos hacer el movimiento normal
   685                                      
   686 000006DE 4883F801                    cmp rax, 1 ; Si recibimos 1, la casilla original es un lugar especial: solo podemos movernos a la derecha
   687 000006E2 0F8474010000                je soloDerechaSold
   688 000006E8 4883F802                    cmp rax, 2 ; Si recibimos 2, la casilla original es un lugar especial: solo podemos movernos a la izquierda
   689 000006EC 0F840D020000                je soloIzquierdaSold
   690                                      
   691                                      casillaEspecialAMover:
   692 000006F2 4983F800                        cmp r8, 0
   693 000006F6 0F8520010000                    jne errorCasillaInvalidaSoldMov
   694 000006FC E9F5FAFFFF                      jmp moverSoldado
   695                                  
   696                                      lugaresComunesSold:
   697                                          ; Comparamos la fila a mover con la fila actual, la fila a mover debe ser igual a la fila actual + 1
   698                                          mMov filaAux, fila, 1
    31 00000701 B901000000          <1>  mov rcx, %3
    32 00000706 488D3425[88000000]  <1>  lea rsi, [%2]
    33 0000070E 488D3C25[B8000000]  <1>  lea rdi, [%1]
    34 00000716 F3A4                <1>  rep movsb
   699 00000718 48FF0425[B8000000]              inc qword[filaAux]
   700                                          mCmp [filaAux], [filaAMover], 1
    38 00000720 B901000000          <1>  mov rcx, %3
    39 00000725 488D3425[B8000000]  <1>  lea rsi, %1
    40 0000072D 488D3C25[A0000000]  <1>  lea rdi, %2
    41 00000735 F3A6                <1>  repe cmpsb
   701 00000737 0F85DF000000                    jne errorCasillaInvalidaSoldMov
   702                                  
   703                                          ; Comparamos la columna a mover con la columna actual
   704 0000073D 48C70425[C0000000]-             mov qword[columnaAux], 0 ; Reiniciamos la columna auxiliar
   704 00000745 00000000           
   705                                          mMov columnaAux, columna, 1
    31 00000749 B901000000          <1>  mov rcx, %3
    32 0000074E 488D3425[90000000]  <1>  lea rsi, [%2]
    33 00000756 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 0000075E F3A4                <1>  rep movsb
   706                                  
   707                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento hacia adelante
    38 00000760 B901000000          <1>  mov rcx, %3
    39 00000765 488D3425[C0000000]  <1>  lea rsi, %1
    40 0000076D 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00000775 F3A6                <1>  repe cmpsb
   708 00000777 7445                            je columnaSoldAMoverValida
   709                                  
   710 00000779 48FF0425[C0000000]              inc qword[columnaAux]
   711                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la izquierda
    38 00000781 B901000000          <1>  mov rcx, %3
    39 00000786 488D3425[C0000000]  <1>  lea rsi, %1
    40 0000078E 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00000796 F3A6                <1>  repe cmpsb
   712 00000798 7424                            je columnaSoldAMoverValida
   713                                  
   714 0000079A 48832C25[C0000000]-             sub qword[columnaAux], 2
   714 000007A2 02                 
   715                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la derecha
    38 000007A3 B901000000          <1>  mov rcx, %3
    39 000007A8 488D3425[C0000000]  <1>  lea rsi, %1
    40 000007B0 488D3C25[A8000000]  <1>  lea rdi, %2
    41 000007B8 F3A6                <1>  repe cmpsb
   716 000007BA 7402                            je columnaSoldAMoverValida
   717                                  
   718 000007BC EB5E                            jmp errorCasillaInvalidaSoldMov
   719                                  
   720                                      columnaSoldAMoverValida: ; Queda ver si en esa casilla está vacía o no
   721                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    87 000007BE 488B3C25[A0000000]  <1>  mov rdi, %1
    88 000007C6 488B3425[A8000000]  <1>  mov rsi, %2
    89 000007CE E870040000          <1>  call calcularDesplazamiento
    90 000007D3 48890425[B0000000]  <1>  mov %3, rax
   722                                          mEstaVacia qword[desplazCasAMover]
    94 000007DB B800000000          <1>  mov rax, 0
    95 000007E0 488B3C25[B0000000]  <1>  mov rdi, %1
    96 000007E8 E841040000          <1>  call estaVacia
   723 000007ED 4883F801                        cmp rax, 1
   724 000007F1 7429                            je errorCasillaInvalidaSoldMov ; Si recibimos 1, la casilla está ocupada (o está fuera del tablero)
   725                                          
   726 000007F3 E9FEF9FFFF                      jmp moverSoldado 
   727                                  
   728                                      ; Errores
   729                                      errorInputSoldMov:
   730 000007F8 488B0425[0D010000]              mov rax, [msgErrorInputSold]
   731                                          mMov msgErrorEspecificoSold, msgErrorInputSold, 62
    31 00000800 B93E000000          <1>  mov rcx, %3
    32 00000805 488D3425[0D010000]  <1>  lea rsi, [%2]
    33 0000080D 488D3C25[E0000000]  <1>  lea rdi, [%1]
    34 00000815 F3A4                <1>  rep movsb
   732 00000817 E90CF9FFFF                      jmp turnoSoldados
   733                                  
   734                                      errorCasillaInvalidaSoldMov:
   735 0000081C 488B0425[4B010000]              mov rax, [msgCasillaInvMovSold]
   736                                          mMov msgErrorEspecificoSold, msgCasillaInvMovSold, 62
    31 00000824 B93E000000          <1>  mov rcx, %3
    32 00000829 488D3425[4B010000]  <1>  lea rsi, [%2]
    33 00000831 488D3C25[E0000000]  <1>  lea rdi, [%1]
    34 00000839 F3A4                <1>  rep movsb
   737 0000083B E9E8F8FFFF                      jmp turnoSoldados
   738                                  
   739                                      imprimirErrorSoldMov:
   740                                          mPuts msgErrorEspecificoSold
     2 00000840 48BF-               <1>  mov rdi, %1
     2 00000842 [E000000000000000]  <1>
     3 0000084A 4883EC08            <1>  sub rsp, 8
     4 0000084E E8(00000000)        <1>  call puts
     5 00000853 4883C408            <1>  add rsp, 8
   741 00000857 E9CCF8FFFF                      jmp turnoSoldados
   742                                  
   743                                      ; Si la casilla original es una casilla especial, solo podemos movernos a la derecha o a la izquierda
   744                                      soloDerechaSold:
   745 0000085C 41B801000000                    mov r8, 1 ; Suponemos que el movimiento es inválido
   746                                  
   747                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover] ; Calculamos el desplazamiento de la casilla a mover
    87 00000862 488B3C25[A0000000]  <1>  mov rdi, %1
    88 0000086A 488B3425[A8000000]  <1>  mov rsi, %2
    89 00000872 E8CC030000          <1>  call calcularDesplazamiento
    90 00000877 48890425[B0000000]  <1>  mov %3, rax
   748                                          mEstaVacia qword[desplazCasAMover] ; Verificamos si la casilla a mover está vacía
    94 0000087F B800000000          <1>  mov rax, 0
    95 00000884 488B3C25[B0000000]  <1>  mov rdi, %1
    96 0000088C E89D030000          <1>  call estaVacia
   749 00000891 4883F801                        cmp rax, 1 ; Si recibimos 1, la casilla a mover está ocupada (o está fuera del tablero)
   750 00000895 0F8457FEFFFF                    je casillaEspecialAMover
   751                                          
   752                                          mCmp [fila], [filaAMover], 1 ; Las filas deben ser iguales (el movimiento especial es para el costado)
    38 0000089B B901000000          <1>  mov rcx, %3
    39 000008A0 488D3425[88000000]  <1>  lea rsi, %1
    40 000008A8 488D3C25[A0000000]  <1>  lea rdi, %2
    41 000008B0 F3A6                <1>  repe cmpsb
   753 000008B2 0F853AFEFFFF                    jne casillaEspecialAMover
   754                                  
   755                                          mMov columnaAux, columna, 1
    31 000008B8 B901000000          <1>  mov rcx, %3
    32 000008BD 488D3425[90000000]  <1>  lea rsi, [%2]
    33 000008C5 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 000008CD F3A4                <1>  rep movsb
   756 000008CF 48FF0425[C0000000]              inc qword[columnaAux]
   757                                          mCmp [columnaAux], [columnaAMover], 1
    38 000008D7 B901000000          <1>  mov rcx, %3
    39 000008DC 488D3425[C0000000]  <1>  lea rsi, %1
    40 000008E4 488D3C25[A8000000]  <1>  lea rdi, %2
    41 000008EC F3A6                <1>  repe cmpsb
   758 000008EE 0F85FEFDFFFF                    jne casillaEspecialAMover
   759                                          
   760 000008F4 41B800000000                    mov r8, 0 ; Si llegamos acá, el movimiento es válido
   761 000008FA E9F3FDFFFF                      jmp casillaEspecialAMover
   762                                      
   763                                      soloIzquierdaSold:
   764 000008FF 41B801000000                    mov r8, 1 ; Suponemos que el movimiento es inválido
   765                                  
   766                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    87 00000905 488B3C25[A0000000]  <1>  mov rdi, %1
    88 0000090D 488B3425[A8000000]  <1>  mov rsi, %2
    89 00000915 E829030000          <1>  call calcularDesplazamiento
    90 0000091A 48890425[B0000000]  <1>  mov %3, rax
   767                                          mEstaVacia qword[desplazCasAMover]
    94 00000922 B800000000          <1>  mov rax, 0
    95 00000927 488B3C25[B0000000]  <1>  mov rdi, %1
    96 0000092F E8FA020000          <1>  call estaVacia
   768 00000934 4883F801                        cmp rax, 1 
   769 00000938 0F84B4FDFFFF                    je casillaEspecialAMover
   770                                  
   771                                          mCmp [fila], [filaAMover], 1 ; Las filas deben ser iguales (el movimiento especial es para el costado)
    38 0000093E B901000000          <1>  mov rcx, %3
    39 00000943 488D3425[88000000]  <1>  lea rsi, %1
    40 0000094B 488D3C25[A0000000]  <1>  lea rdi, %2
    41 00000953 F3A6                <1>  repe cmpsb
   772 00000955 0F8597FDFFFF                    jne casillaEspecialAMover
   773                                  
   774                                          mMov columnaAux, columna, 1
    31 0000095B B901000000          <1>  mov rcx, %3
    32 00000960 488D3425[90000000]  <1>  lea rsi, [%2]
    33 00000968 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 00000970 F3A4                <1>  rep movsb
   775 00000972 48FF0C25[C0000000]              dec qword[columnaAux]
   776                                          mCmp [columnaAux], [columnaAMover], 1
    38 0000097A B901000000          <1>  mov rcx, %3
    39 0000097F 488D3425[C0000000]  <1>  lea rsi, %1
    40 00000987 488D3C25[A8000000]  <1>  lea rdi, %2
    41 0000098F F3A6                <1>  repe cmpsb
   777 00000991 0F855BFDFFFF                    jne casillaEspecialAMover
   778                                  
   779 00000997 41B800000000                    mov r8, 0 ; Si llegamos acá, el movimiento es válido
   780 0000099D E950FDFFFF                      jmp casillaEspecialAMover
   781                                      
   782 000009A2 C3                          ret
   783                                  
   784                                  verificarMovimientoOfic:
   785 000009A3 8A0425[84000000]            mov al, byte[casillaMovOfic] ; Numero de fila
   786                                      
   787 000009AA 3C31                        cmp al, '1'
   788 000009AC 0F8C18020000                jl errorInputOficMov
   789 000009B2 3C37                        cmp al, '7'
   790 000009B4 0F8F10020000                jg errorInputOficMov
   791                                  
   792 000009BA 48C70425[A0000000]-         mov qword[filaAMover], 0
   792 000009C2 00000000           
   793                                      mSscanf byte[casillaMovOfic], formatoAtoi, filaAMover
    69 000009C6 488D3C25[84000000]  <1>  lea rdi, %1
    70 000009CE 48BE-               <1>  mov rsi, %2
    70 000009D0 [5B09000000000000]  <1>
    71 000009D8 48BA-               <1>  mov rdx, %3
    71 000009DA [A000000000000000]  <1>
    72 000009E2 4883EC08            <1>  sub rsp, 8
    73 000009E6 E8(00000000)        <1>  call sscanf
    74 000009EB 4883C408            <1>  add rsp, 8
   794                                  
   795 000009EF 4883F801                    cmp rax, 1
   796 000009F3 0F8CD1010000                jl errorInputOficMov
   797                                  
   798 000009F9 8A0425[85000000]            mov al, byte[casillaMovOfic+1] ; Caracter '-'
   799 00000A00 3C2D                        cmp al, '-'
   800 00000A02 0F85C2010000                jne errorInputOficMov
   801                                      
   802 00000A08 8A0425[86000000]            mov al, byte[casillaMovOfic+2] ; Numero de columna
   803 00000A0F 3C31                        cmp al, '1'
   804 00000A11 0F8CB3010000                jl errorInputOficMov
   805 00000A17 3C37                        cmp al, '7'
   806 00000A19 0F8FAB010000                jg errorInputOficMov
   807                                  
   808 00000A1F 48C70425[A8000000]-         mov qword[columnaAMover], 0
   808 00000A27 00000000           
   809                                      mSscanf byte[casillaMovOfic+2], formatoAtoi, columnaAMover
    69 00000A2B 488D3C25[86000000]  <1>  lea rdi, %1
    70 00000A33 48BE-               <1>  mov rsi, %2
    70 00000A35 [5B09000000000000]  <1>
    71 00000A3D 48BA-               <1>  mov rdx, %3
    71 00000A3F [A800000000000000]  <1>
    72 00000A47 4883EC08            <1>  sub rsp, 8
    73 00000A4B E8(00000000)        <1>  call sscanf
    74 00000A50 4883C408            <1>  add rsp, 8
   810                                  
   811 00000A54 4883F801                    cmp rax, 1
   812 00000A58 0F8C6C010000                jl errorInputOficMov
   813                                  
   814 00000A5E 8A0425[87000000]            mov al, byte[casillaMovOfic+3] ; Caracter nulo
   815 00000A65 3C00                        cmp al, 0
   816 00000A67 0F855D010000                jne errorInputOficMov
   817                                  
   818                                      ; Comparamos la fila a mover con la fila actual
   819                                      mMov filaAux, fila, 1
    31 00000A6D B901000000          <1>  mov rcx, %3
    32 00000A72 488D3425[88000000]  <1>  lea rsi, [%2]
    33 00000A7A 488D3C25[B8000000]  <1>  lea rdi, [%1]
    34 00000A82 F3A4                <1>  rep movsb
   820                                  
   821                                      mCmp [filaAux], [filaAMover], 1
    38 00000A84 B901000000          <1>  mov rcx, %3
    39 00000A89 488D3425[B8000000]  <1>  lea rsi, %1
    40 00000A91 488D3C25[A0000000]  <1>  lea rdi, %2
    41 00000A99 F3A6                <1>  repe cmpsb
   822 00000A9B 7448                        je filaOficAMoverValida ; Filas iguales -> válido
   823 00000A9D 48FF0425[B8000000]          inc qword[filaAux]
   824                                      mCmp [filaAux], [filaAMover], 1
    38 00000AA5 B901000000          <1>  mov rcx, %3
    39 00000AAA 488D3425[B8000000]  <1>  lea rsi, %1
    40 00000AB2 488D3C25[A0000000]  <1>  lea rdi, %2
    41 00000ABA F3A6                <1>  repe cmpsb
   825 00000ABC 7427                        je filaOficAMoverValida
   826 00000ABE 48832C25[B8000000]-         sub qword[filaAux], 2
   826 00000AC6 02                 
   827                                      mCmp [filaAux], [filaAMover], 1
    38 00000AC7 B901000000          <1>  mov rcx, %3
    39 00000ACC 488D3425[B8000000]  <1>  lea rsi, %1
    40 00000AD4 488D3C25[A0000000]  <1>  lea rdi, %2
    41 00000ADC F3A6                <1>  repe cmpsb
   828 00000ADE 7405                        je filaOficAMoverValida
   829                                  
   830 00000AE0 E909010000                  jmp errorCasillaInvalidaOficMov
   831                                  
   832                                      filaOficAMoverValida:
   833                                          ; Comparamos la columna a mover con la columna actual
   834 00000AE5 48C70425[C0000000]-             mov qword[columnaAux], 0 ; Reiniciamos la columna auxiliar
   834 00000AED 00000000           
   835                                          mMov columnaAux, columna, 1
    31 00000AF1 B901000000          <1>  mov rcx, %3
    32 00000AF6 488D3425[90000000]  <1>  lea rsi, [%2]
    33 00000AFE 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 00000B06 F3A4                <1>  rep movsb
   836                                  
   837                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento hacia adelante
    38 00000B08 B901000000          <1>  mov rcx, %3
    39 00000B0D 488D3425[C0000000]  <1>  lea rsi, %1
    40 00000B15 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00000B1D F3A6                <1>  repe cmpsb
   838 00000B1F 7448                            je columnaOficAMoverValida
   839                                  
   840 00000B21 48FF0425[C0000000]              inc qword[columnaAux]
   841                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la izquierda
    38 00000B29 B901000000          <1>  mov rcx, %3
    39 00000B2E 488D3425[C0000000]  <1>  lea rsi, %1
    40 00000B36 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00000B3E F3A6                <1>  repe cmpsb
   842 00000B40 7427                            je columnaOficAMoverValida
   843                                  
   844 00000B42 48832C25[C0000000]-             sub qword[columnaAux], 2
   844 00000B4A 02                 
   845                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la derecha
    38 00000B4B B901000000          <1>  mov rcx, %3
    39 00000B50 488D3425[C0000000]  <1>  lea rsi, %1
    40 00000B58 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00000B60 F3A6                <1>  repe cmpsb
   846 00000B62 7405                            je columnaOficAMoverValida
   847                                  
   848 00000B64 E985000000                      jmp errorCasillaInvalidaOficMov
   849                                  
   850                                      columnaOficAMoverValida: ; Podríamos hacer un movimiento normal (casilla vacía) o capturar un soldado...
   851                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    87 00000B69 488B3C25[A0000000]  <1>  mov rdi, %1
    88 00000B71 488B3425[A8000000]  <1>  mov rsi, %2
    89 00000B79 E8C5000000          <1>  call calcularDesplazamiento
    90 00000B7E 48890425[B0000000]  <1>  mov %3, rax
   852                                          mEstaVacia qword[desplazCasAMover]
    94 00000B86 B800000000          <1>  mov rax, 0
    95 00000B8B 488B3C25[B0000000]  <1>  mov rdi, %1
    96 00000B93 E896000000          <1>  call estaVacia
   853 00000B98 4883F800                        cmp rax, 0
   854 00000B9C 0F843EF7FFFF                    je moverOficial ; Si llegamos acá, la casilla a mover está vacía -> movimiento normal
   855                                          
   856                                          ; Si llegamos acá, la casilla no está vacía: ver si hay un soldado para capturar
   857                                          mHaySoldado qword[desplazCasAMover]
   100 00000BA2 B800000000          <1>  mov rax, 0
   101 00000BA7 488B3C25[B0000000]  <1>  mov rdi, %1
   102 00000BAF E84D020000          <1>  call haySoldado
   858 00000BB4 4883F801                        cmp rax, 1
   859 00000BB8 7434                            je errorCasillaInvalidaOficMov ; Si recibimos 1, la casilla a ocupar no tiene un soldado -> movimiento inválido
   860                                  
   861                                          ; Si llegamos acá, la casilla a ocupar tiene un soldado: debemos ver si el oficial puede saltar sobre él...
   862 00000BBA E866020000                      call sePuedeSaltarSoldado
   863 00000BBF 4883F801                        cmp rax, 1
   864 00000BC3 7429                            je errorCasillaInvalidaOficMov ; Si recibimos 1, el oficial no puede saltar sobre el soldado -> movimiento inválido
   865                                  
   866 00000BC5 E92FF7FFFF                      jmp capturar
   867                                  
   868                                  
   869                                      errorInputOficMov:
   870 00000BCA 488B0425[D0010000]              mov rax, [msgErrorInputOfic]
   871                                          mMov msgErrorEspecificoOfic, msgErrorInputOfic, 62
    31 00000BD2 B93E000000          <1>  mov rcx, %3
    32 00000BD7 488D3425[D0010000]  <1>  lea rsi, [%2]
    33 00000BDF 488D3C25[27010000]  <1>  lea rdi, [%1]
    34 00000BE7 F3A4                <1>  rep movsb
   872 00000BE9 E924F6FFFF                      jmp turnoOficiales
   873                                  
   874                                      errorCasillaInvalidaOficMov:
   875 00000BEE 488B0425[0E020000]              mov rax, [msgCasillaInvMovOfic]
   876                                          mMov msgErrorEspecificoOfic, msgCasillaInvMovOfic, 62
    31 00000BF6 B93E000000          <1>  mov rcx, %3
    32 00000BFB 488D3425[0E020000]  <1>  lea rsi, [%2]
    33 00000C03 488D3C25[27010000]  <1>  lea rdi, [%1]
    34 00000C0B F3A4                <1>  rep movsb
   877 00000C0D E900F6FFFF                      jmp turnoOficiales
   878                                  
   879                                      imprimirErrorOficMov:
   880                                          mPuts msgErrorEspecificoOfic
     2 00000C12 48BF-               <1>  mov rdi, %1
     2 00000C14 [2701000000000000]  <1>
     3 00000C1C 4883EC08            <1>  sub rsp, 8
     4 00000C20 E8(00000000)        <1>  call puts
     5 00000C25 4883C408            <1>  add rsp, 8
   881 00000C29 E9E4F5FFFF                      jmp turnoOficiales
   882                                  
   883                                  ; --------------------------------------------------------------------------------------------
   884                                  ; RUTINA PARA VERIFICAR SI UNA CASILLA ESTÁ VACÍA
   885                                  ; --------------------------------------------------------------------------------------------
   886                                  
   887                                  estaVacia:
   888 00000C2E 80BF[04000000]20            cmp byte[tableroEnJuego+rdi], ' '
   889 00000C35 7406                        je okVacia
   890                                  
   891 00000C37 B801000000                  mov rax, 1
   892 00000C3C C3                          ret
   893                                  
   894                                      okVacia:
   895 00000C3D B800000000                      mov rax, 0
   896 00000C42 C3                              ret
   897                                  
   898                                  ; --------------------------------------------------------------------------------------------
   899                                  ; RUTINA PARA CALCULAR EL DESPLAZAMIENTO DE UNA CASILLA EN EL TABLERO
   900                                  ; --------------------------------------------------------------------------------------------
   901                                  
   902                                  calcularDesplazamiento:
   903 00000C43 B800000000                  mov rax, 0
   904 00000C48 4889F8                      mov rax, rdi
   905 00000C4B 48FFC0                      inc rax
   906 00000C4E 666BC00B                    imul ax, 11
   907 00000C52 4801F0                      add rax, rsi
   908 00000C55 48FFC0                      inc rax
   909                                  
   910 00000C58 C3                          ret
   911                                  
   912                                  ; --------------------------------------------------------------------------------------------
   913                                  ; RUTINAS PARA REALIZAR MOVIMIENTOS SIMPLES DE SOLDADOS Y OFICIALES (los que no requieren capturas)
   914                                  ; --------------------------------------------------------------------------------------------
   915                                  
   916                                  realizarMovimientoSold:
   917 00000C59 488B0425[98000000]          mov rax, qword[desplazCasOrig]
   918 00000C61 488B1C25[B0000000]          mov rbx, qword[desplazCasAMover]
   919                                  
   920 00000C69 C680[04000000]20            mov byte[tableroEnJuego+rax], ' '
   921                                      mMov tableroEnJuego+rbx, simboloSoldados, 1
    31 00000C70 B901000000          <1>  mov rcx, %3
    32 00000C75 488D3425[02090000]  <1>  lea rsi, [%2]
    33 00000C7D 488DBB[04000000]    <1>  lea rdi, [%1]
    34 00000C84 F3A4                <1>  rep movsb
   922                                  
   923 00000C86 C3                          ret
   924                                  
   925                                  realizarMovimientoOfic:
   926                                      ; Vemos si el oficial podía capturar un soldado y no lo hizo
   927                                      mMov desplazAux2, desplazCasOrig, 1
    31 00000C87 B901000000          <1>  mov rcx, %3
    32 00000C8C 488D3425[98000000]  <1>  lea rsi, [%2]
    33 00000C94 488D3C25[D0000000]  <1>  lea rdi, [%1]
    34 00000C9C F3A4                <1>  rep movsb
   928 00000C9E E81B070000                  call podiaCapturarSoldado 
   929 00000CA3 4883F800                    cmp rax, 0 ; Si fue así, significa que el oficial se desentendió de su deber
   930 00000CA7 740D                        je quitarOficial
   931                                  
   932                                      ; Necesitamos chequear si el otro oficial podría haber capturado al soldado
   933 00000CA9 E8310A0000                  call podiaCapturarSoldadoOtroOficial
   934 00000CAE 4883F800                    cmp rax, 0 ; Si fue así, significa que el otro oficial se desentendió de su deber
   935 00000CB2 7453                        je quitarOtroOficial
   936                                  
   937 00000CB4 EB57                        jmp noPodianCapturar
   938                                  
   939                                      quitarOficial:
   940 00000CB6 E83D040000                      call verQueOficialEs
   941 00000CBB 4883F801                        cmp rax, 1 ; Si recibimos 1, el oficial 1 es el que se mueve
   942 00000CBF 7423                            je quitarOfic1
   943                                  
   944                                          mCalcDesplaz [casillaOfic2], [casillaOfic2+8], qword[desplazAux]
    87 00000CC1 488B3C25[E0080000]  <1>  mov rdi, %1
    88 00000CC9 488B3425[E8080000]  <1>  mov rsi, %2
    89 00000CD1 E86DFFFFFF          <1>  call calcularDesplazamiento
    90 00000CD6 48890425[C8000000]  <1>  mov %3, rax
   945 00000CDE E8A3090000                      call desentenderOficial
   946 00000CE3 C3                              ret
   947                                  
   948                                      quitarOfic1:
   949                                          mCalcDesplaz [casillaOfic1], [casillaOfic1+8], qword[desplazAux]
    87 00000CE4 488B3C25[D0080000]  <1>  mov rdi, %1
    88 00000CEC 488B3425[D8080000]  <1>  mov rsi, %2
    89 00000CF4 E84AFFFFFF          <1>  call calcularDesplazamiento
    90 00000CF9 48890425[C8000000]  <1>  mov %3, rax
   950 00000D01 E880090000                      call desentenderOficial
   951 00000D06 C3                              ret
   952                                      
   953                                      quitarOtroOficial:
   954 00000D07 E83E0A0000                      call desentenderOtroOficial
   955 00000D0C C3                              ret
   956                                  
   957                                      ; Si llegamos acá, el oficial no podía capturar un soldado -> OK!
   958                                      noPodianCapturar:
   959 00000D0D 488B0425[98000000]              mov rax, qword[desplazCasOrig]
   960 00000D15 488B1C25[B0000000]              mov rbx, qword[desplazCasAMover]
   961                                  
   962 00000D1D C680[04000000]20                mov byte[tableroEnJuego+rax], ' '
   963                                          mMov tableroEnJuego+rbx, simboloOficiales, 1
    31 00000D24 B901000000          <1>  mov rcx, %3
    32 00000D29 488D3425[00090000]  <1>  lea rsi, [%2]
    33 00000D31 488DBB[04000000]    <1>  lea rdi, [%1]
    34 00000D38 F3A4                <1>  rep movsb
   964                                  
   965 00000D3A E8B9030000                      call verQueOficialEs ; Verificamos qué oficial es el que se quiere mover
   966                                  
   967                                          ; Incrementamos la cantidad de movimientos del oficial correspondiente
   968 00000D3F 4883F801                        cmp rax, 1 ; Si recibimos 1, el oficial 1 es el que se mueve
   969 00000D43 740B                            je movOfic1
   970                                          
   971                                          ; Si llegamos acá, el oficial 2 es el que se mueve
   972 00000D45 E89D040000                      call actualizarContadoresOfic2
   973 00000D4A E878050000                      call refrescarCasActOfic2
   974 00000D4F C3                              ret
   975                                      
   976                                      movOfic1: ; Si llegamos acá, el oficial 1 es el que se mueve
   977 00000D50 E8E1030000                      call actualizarContadoresOfic1
   978 00000D55 E83E050000                      call refrescarCasActOfic1
   979                                  
   980 00000D5A C3                          ret
   981                                      
   982                                  ; --------------------------------------------------------------------------------------------
   983                                  ; RUTINAS PARA CAMBIAR EL TABLERO CON LOS SIMBOLOS PERSONALIZADOS
   984                                  ; --------------------------------------------------------------------------------------------
   985                                  
   986                                  cambiarTableroSoldNuevo:
   987 00000D5B BB1A000000                  mov rbx, 26 ; Desplazamiento de la primera casilla en donde puede haber piezas
   988                                  
   989                                      cicloCambiarSoldados:
   990 00000D60 80BB[04000000]58                cmp byte[tableroEnJuego+rbx], 'X'
   991 00000D67 7516                            jne noCambiarSoldado
   992                                          mMov tableroEnJuego+rbx, simboloSoldados, 1 ; Cambio el simbolo de los soldados
    31 00000D69 B901000000          <1>  mov rcx, %3
    32 00000D6E 488D3425[02090000]  <1>  lea rsi, [%2]
    33 00000D76 488DBB[04000000]    <1>  lea rdi, [%1]
    34 00000D7D F3A4                <1>  rep movsb
   993                                  
   994                                          noCambiarSoldado:
   995 00000D7F 48FFC3                              inc rbx
   996 00000D82 4883FB4B                            cmp rbx, 75 ; Desplazamiento de la última casilla en donde puede haber piezas
   997 00000D86 7CD8                                jl cicloCambiarSoldados
   998                                  
   999 00000D88 C3                          ret
  1000                                  
  1001                                  cambiarTableroOficNuevo:
  1002                                      mMov tableroEnJuego+83, simboloOficiales, 1 ; Primer oficial (desplazamiento)
    31 00000D89 B901000000          <1>  mov rcx, %3
    32 00000D8E 488D3425[00090000]  <1>  lea rsi, [%2]
    33 00000D96 488D3C25[57000000]  <1>  lea rdi, [%1]
    34 00000D9E F3A4                <1>  rep movsb
  1003                                      mMov tableroEnJuego+92, simboloOficiales, 1 ; Segundo oficial (desplazamiento)
    31 00000DA0 B901000000          <1>  mov rcx, %3
    32 00000DA5 488D3425[00090000]  <1>  lea rsi, [%2]
    33 00000DAD 488D3C25[60000000]  <1>  lea rdi, [%1]
    34 00000DB5 F3A4                <1>  rep movsb
  1004 00000DB7 C3                          ret
  1005                                  
  1006                                  ; --------------------------------------------------------------------------------------------
  1007                                  ; RUTINA PARA CHEQUEAR SI LA CASILLA DE ORIGEN DE UN SOLDADO ES UNA POSICIÓN ESPECIAL
  1008                                  ; --------------------------------------------------------------------------------------------
  1009                                  
  1010                                  chequearSoldPosEspeciales:
  1011 00000DB8 B800000000                  mov rax, 0
  1012                                  
  1013 00000DBD 48833C25[88000000]-         cmp qword[fila], 5
  1013 00000DC5 05                 
  1014 00000DC6 752C                        jne noEsLugarEspecial ; Si la fila no es 5, no estamos en una posición especial
  1015                                  
  1016                                      ; Si la columna es 1 o 2 (fila 5), estamos en una posición especial: solo podemos movernos a la derecha
  1017 00000DC8 48833C25[90000000]-         cmp qword[columna], 1
  1017 00000DD0 01                 
  1018 00000DD1 7428                        je esLugarEspecialADer 
  1019 00000DD3 48833C25[90000000]-         cmp qword[columna], 2
  1019 00000DDB 02                 
  1020 00000DDC 741D                        je esLugarEspecialADer 
  1021                                  
  1022                                      ; Si la columna es 6 o 7 (fila 5), estamos en una posición especial: solo podemos movernos a la izquierda
  1023 00000DDE 48833C25[90000000]-         cmp qword[columna], 6
  1023 00000DE6 06                 
  1024 00000DE7 740C                        je esLugarEspecialAIzq 
  1025 00000DE9 48833C25[90000000]-         cmp qword[columna], 7
  1025 00000DF1 07                 
  1026 00000DF2 7401                        je esLugarEspecialAIzq
  1027                                  
  1028                                      noEsLugarEspecial:
  1029 00000DF4 C3                              ret
  1030                                  
  1031                                      esLugarEspecialAIzq:
  1032 00000DF5 B802000000                      mov rax, 2
  1033 00000DFA C3                              ret
  1034                                      
  1035                                      esLugarEspecialADer:
  1036 00000DFB B801000000                      mov rax, 1
  1037 00000E00 C3                              ret
  1038                                  
  1039                                  ; --------------------------------------------------------------------------------------------
  1040                                  ; RUTINA PARA VERIFICAR SI HAY UN SOLDADO EN LA CASILLA DESTINO
  1041                                  ; --------------------------------------------------------------------------------------------
  1042                                  
  1043                                  haySoldado:
  1044                                      ; Calculamos desplazamiento en tablero
  1045                                      mCmp byte[tableroEnJuego+rdi], [simboloSoldados], 1
    38 00000E01 B901000000          <1>  mov rcx, %3
    39 00000E06 488DB7[04000000]    <1>  lea rsi, %1
    40 00000E0D 488D3C25[02090000]  <1>  lea rdi, %2
    41 00000E15 F3A6                <1>  repe cmpsb
  1046 00000E17 7406                        je okSoldado
  1047                                  
  1048 00000E19 B801000000                  mov rax, 1
  1049 00000E1E C3                          ret
  1050                                  
  1051                                      okSoldado:
  1052 00000E1F B800000000                      mov rax, 0
  1053 00000E24 C3                              ret
  1054                                  
  1055                                  ; --------------------------------------------------------------------------------------------
  1056                                  ; RUTINA PARA VERIFICAR SI UN OFICIAL PUEDE SALTAR SOBRE UN SOLDADO
  1057                                  ; --------------------------------------------------------------------------------------------
  1058                                  
  1059                                  sePuedeSaltarSoldado:
  1060 00000E25 488B0425[88000000]          mov rax, qword[fila]
  1061 00000E2D 488B1C25[A0000000]          mov rbx, qword[filaAMover]
  1062 00000E35 4829D8                      sub rax, rbx
  1063 00000E38 0F8F07010000                jg saltoHaciaArriba ; Si la fila original es mayor que la fila destino, el salto es hacia arriba
  1064 00000E3E 0F8CA3010000                jl saltoHaciaAbajo ; Si la fila original es menor que la fila destino, el salto es hacia abajo
  1065                                  
  1066                                      ; Si estamos acá, el salto es en la misma fila
  1067 00000E44 488B0425[90000000]          mov rax, qword[columna]
  1068 00000E4C 488B1C25[A8000000]          mov rbx, qword[columnaAMover]
  1069                                  
  1070 00000E54 4829D8                      sub rax, rbx
  1071 00000E57 7F02                        jg saltoHaciaIzq ; Si la columna original es mayor que la columna destino, el salto es hacia la izquierda
  1072 00000E59 7C75                        jl saltoHaciaDer ; Si la columna original es menor que la columna destino, el salto es hacia la derecha
  1073                                  
  1074                                      saltoHaciaIzq:
  1075                                          mMov filaAux, filaAMover, 1
    31 00000E5B B901000000          <1>  mov rcx, %3
    32 00000E60 488D3425[A0000000]  <1>  lea rsi, [%2]
    33 00000E68 488D3C25[B8000000]  <1>  lea rdi, [%1]
    34 00000E70 F3A4                <1>  rep movsb
  1076                                          mMov columnaAux, columnaAMover, 1
    31 00000E72 B901000000          <1>  mov rcx, %3
    32 00000E77 488D3425[A8000000]  <1>  lea rsi, [%2]
    33 00000E7F 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 00000E87 F3A4                <1>  rep movsb
  1077 00000E89 48FF0C25[C0000000]              dec qword[columnaAux]
  1078                                  
  1079                                          mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    87 00000E91 488B3C25[B8000000]  <1>  mov rdi, %1
    88 00000E99 488B3425[C0000000]  <1>  mov rsi, %2
    89 00000EA1 E89DFDFFFF          <1>  call calcularDesplazamiento
    90 00000EA6 48890425[C8000000]  <1>  mov %3, rax
  1080                                          mEstaVacia qword[desplazAux]
    94 00000EAE B800000000          <1>  mov rax, 0
    95 00000EB3 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00000EBB E86EFDFFFF          <1>  call estaVacia
  1081 00000EC0 4883F801                        cmp rax, 1
  1082 00000EC4 0F84BB010000                    je saltoInvalido
  1083                                  
  1084 00000ECA B800000000                      mov rax, 0
  1085 00000ECF C3                              ret
  1086                                  
  1087                                      saltoHaciaDer:
  1088                                          mMov filaAux, filaAMover, 1
    31 00000ED0 B901000000          <1>  mov rcx, %3
    32 00000ED5 488D3425[A0000000]  <1>  lea rsi, [%2]
    33 00000EDD 488D3C25[B8000000]  <1>  lea rdi, [%1]
    34 00000EE5 F3A4                <1>  rep movsb
  1089                                          mMov columnaAux, columnaAMover, 1
    31 00000EE7 B901000000          <1>  mov rcx, %3
    32 00000EEC 488D3425[A8000000]  <1>  lea rsi, [%2]
    33 00000EF4 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 00000EFC F3A4                <1>  rep movsb
  1090 00000EFE 48FF0425[C0000000]              inc qword[columnaAux]
  1091                                  
  1092                                          mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    87 00000F06 488B3C25[B8000000]  <1>  mov rdi, %1
    88 00000F0E 488B3425[C0000000]  <1>  mov rsi, %2
    89 00000F16 E828FDFFFF          <1>  call calcularDesplazamiento
    90 00000F1B 48890425[C8000000]  <1>  mov %3, rax
  1093                                          mEstaVacia qword[desplazAux]
    94 00000F23 B800000000          <1>  mov rax, 0
    95 00000F28 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00000F30 E8F9FCFFFF          <1>  call estaVacia
  1094 00000F35 4883F801                        cmp rax, 1
  1095 00000F39 0F8446010000                    je saltoInvalido
  1096                                  
  1097 00000F3F B800000000                      mov rax, 0
  1098 00000F44 C3                              ret
  1099                                  
  1100                                      saltoHaciaArriba:
  1101                                          mMov filaAux, filaAMover, 1
    31 00000F45 B901000000          <1>  mov rcx, %3
    32 00000F4A 488D3425[A0000000]  <1>  lea rsi, [%2]
    33 00000F52 488D3C25[B8000000]  <1>  lea rdi, [%1]
    34 00000F5A F3A4                <1>  rep movsb
  1102                                          mMov columnaAux, columnaAMover, 1
    31 00000F5C B901000000          <1>  mov rcx, %3
    32 00000F61 488D3425[A8000000]  <1>  lea rsi, [%2]
    33 00000F69 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 00000F71 F3A4                <1>  rep movsb
  1103 00000F73 48FF0C25[B8000000]              dec qword[filaAux]
  1104                                          
  1105                                          mCmp [columna], [columnaAMover], 1
    38 00000F7B B901000000          <1>  mov rcx, %3
    39 00000F80 488D3425[90000000]  <1>  lea rsi, %1
    40 00000F88 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00000F90 F3A6                <1>  repe cmpsb
  1106 00000F92 7414                            je seguirSaltoArriba ; Si las columnas son iguales, el salto es hacia arriba y en línea recta
  1107 00000F94 7F0A                            jg haciaArribaIzq ; Si la columna original es mayor que la columna destino, el salto es hacia la izquierda
  1108                                  
  1109 00000F96 48FF0425[C0000000]              inc qword[columnaAux] ; Salto hacia arriba y a la derecha
  1110 00000F9E EB08                            jmp seguirSaltoArriba
  1111                                  
  1112                                          haciaArribaIzq:
  1113 00000FA0 48FF0C25[C0000000]                  dec qword[columnaAux] ; Salto hacia arriba y a la izquierda
  1114                                  
  1115                                          seguirSaltoArriba:
  1116                                              mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    87 00000FA8 488B3C25[B8000000]  <1>  mov rdi, %1
    88 00000FB0 488B3425[C0000000]  <1>  mov rsi, %2
    89 00000FB8 E886FCFFFF          <1>  call calcularDesplazamiento
    90 00000FBD 48890425[C8000000]  <1>  mov %3, rax
  1117                                              mEstaVacia qword[desplazAux]
    94 00000FC5 B800000000          <1>  mov rax, 0
    95 00000FCA 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00000FD2 E857FCFFFF          <1>  call estaVacia
  1118 00000FD7 4883F801                            cmp rax, 1
  1119 00000FDB 0F84A4000000                        je saltoInvalido
  1120                                  
  1121 00000FE1 B800000000                          mov rax, 0
  1122 00000FE6 C3                                  ret
  1123                                  
  1124                                      saltoHaciaAbajo:
  1125                                          mMov filaAux, filaAMover, 1
    31 00000FE7 B901000000          <1>  mov rcx, %3
    32 00000FEC 488D3425[A0000000]  <1>  lea rsi, [%2]
    33 00000FF4 488D3C25[B8000000]  <1>  lea rdi, [%1]
    34 00000FFC F3A4                <1>  rep movsb
  1126                                          mMov columnaAux, columnaAMover, 1
    31 00000FFE B901000000          <1>  mov rcx, %3
    32 00001003 488D3425[A8000000]  <1>  lea rsi, [%2]
    33 0000100B 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 00001013 F3A4                <1>  rep movsb
  1127 00001015 48FF0425[B8000000]              inc qword[filaAux]
  1128                                          
  1129                                          mCmp [columna], [columnaAMover], 1
    38 0000101D B901000000          <1>  mov rcx, %3
    39 00001022 488D3425[90000000]  <1>  lea rsi, %1
    40 0000102A 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00001032 F3A6                <1>  repe cmpsb
  1130 00001034 7414                            je seguirSaltoAbajo ; Si las columnas son iguales, el salto es hacia abajo y en línea recta
  1131 00001036 7F0A                            jg haciaAbajoIzq ; Si la columna original es mayor que la columna destino, el salto es hacia la izquierda
  1132                                  
  1133 00001038 48FF0425[C0000000]              inc qword[columnaAux] ; Salto hacia abajo y a la derecha
  1134 00001040 EB08                            jmp seguirSaltoAbajo
  1135                                  
  1136                                          haciaAbajoIzq:
  1137 00001042 48FF0C25[C0000000]                  dec qword[columnaAux] ; Salto hacia abajo y a la izquierda
  1138                                  
  1139                                          seguirSaltoAbajo:
  1140                                              mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    87 0000104A 488B3C25[B8000000]  <1>  mov rdi, %1
    88 00001052 488B3425[C0000000]  <1>  mov rsi, %2
    89 0000105A E8E4FBFFFF          <1>  call calcularDesplazamiento
    90 0000105F 48890425[C8000000]  <1>  mov %3, rax
  1141                                              mEstaVacia qword[desplazAux]
    94 00001067 B800000000          <1>  mov rax, 0
    95 0000106C 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001074 E8B5FBFFFF          <1>  call estaVacia
  1142 00001079 4883F801                            cmp rax, 1
  1143 0000107D 7406                                je saltoInvalido
  1144                                  
  1145 0000107F B800000000                          mov rax, 0
  1146 00001084 C3                                  ret
  1147                                  
  1148                                      saltoInvalido:
  1149 00001085 B801000000                      mov rax, 1
  1150 0000108A C3                              ret
  1151                                  
  1152 0000108B C3                          ret
  1153                                  
  1154                                  ; --------------------------------------------------------------------------------------------
  1155                                  ; RUTINA PARA CAPTURAR UN SOLDADO
  1156                                  ; --------------------------------------------------------------------------------------------
  1157                                  
  1158                                  capturarSoldado:
  1159 0000108C 488B0425[98000000]          mov rax, qword[desplazCasOrig] ; Oficial a mover
  1160 00001094 488B1C25[B0000000]          mov rbx, qword[desplazCasAMover] ; Soldado a capturar
  1161 0000109C 488B0C25[C8000000]          mov rcx, qword[desplazAux] ; Casilla destino del oficial (donde va a quedar)
  1162                                  
  1163 000010A4 C680[04000000]20            mov byte[tableroEnJuego+rax], ' '
  1164 000010AB C683[04000000]20            mov byte[tableroEnJuego+rbx], ' '
  1165                                      
  1166 000010B2 8A1425[00090000]            mov dl, byte[simboloOficiales]
  1167 000010B9 8891[04000000]              mov byte[tableroEnJuego+rcx], dl
  1168                                  
  1169 000010BF 48FF0425[C0080000]          inc qword[cantSoldCapturados] ; Aumentamos el contador de capturas
  1170                                  
  1171 000010C7 E82C000000                  call verQueOficialEs ; Verificamos qué oficial es el que se quiere mover
  1172                                  
  1173 000010CC 4883F801                    cmp rax, 1
  1174 000010D0 7413                        je movOfic1Captura
  1175                                  
  1176 000010D2 48FF0425[F8080000]          inc qword[cantCapturasOfic2]
  1177 000010DA E808010000                  call actualizarContadoresOfic2
  1178 000010DF E812020000                  call refrescarCasActOficLuegoCaptura
  1179 000010E4 C3                          ret
  1180                                  
  1181                                      movOfic1Captura:
  1182 000010E5 48FF0425[F0080000]              inc qword[cantCapturasOfic1]
  1183 000010ED E844000000                      call actualizarContadoresOfic1
  1184 000010F2 E8FF010000                      call refrescarCasActOficLuegoCaptura
  1185                                  
  1186 000010F7 C3                          ret
  1187                                  
  1188                                  ; --------------------------------------------------------------------------------------------
  1189                                  ; RUTINA PARA VERIFICAR CUÁL OFICIAL SE ESTÁ MOVIENDO
  1190                                  ; --------------------------------------------------------------------------------------------
  1191                                  
  1192                                  verQueOficialEs:
  1193                                      ; Comenzamos verificando si el oficial 1 es el que se está moviendo
  1194                                      mCmp qword[fila], qword[casillaOfic1], 1 ; Fila de la casilla de origen vs. Fila del oficial 1
    38 000010F8 B901000000          <1>  mov rcx, %3
    39 000010FD 488D3425[88000000]  <1>  lea rsi, %1
    40 00001105 488D3C25[D0080000]  <1>  lea rdi, %2
    41 0000110D F3A6                <1>  repe cmpsb
  1195 0000110F 751F                        jne esOfic2 ; Si las filas no son iguales, el oficial 1 no es el que se está moviendo
  1196                                      mCmp qword[columna], qword[casillaOfic1+8], 1 ; Columna de la casilla de origen vs. Columna del oficial 1
    38 00001111 B901000000          <1>  mov rcx, %3
    39 00001116 488D3425[90000000]  <1>  lea rsi, %1
    40 0000111E 488D3C25[D8080000]  <1>  lea rdi, %2
    41 00001126 F3A6                <1>  repe cmpsb
  1197 00001128 7506                        jne esOfic2 ; Si las columnas no son iguales, el oficial 1 no es el que se está moviendo
  1198                                  
  1199 0000112A B801000000                  mov rax, 1 ; es el oficial 1
  1200 0000112F C3                          ret
  1201                                  
  1202                                      esOfic2:
  1203 00001130 B802000000                      mov rax, 2 ; es el oficial 2
  1204                                  
  1205 00001135 C3                          ret
  1206                                  
  1207                                  
  1208                                  ; --------------------------------------------------------------------------------------------
  1209                                  ; RUTINA PARA ACTUALIZAR LOS CONTADORES DE MOVIMIENTOS DE LOS OFICIALES
  1210                                  ; --------------------------------------------------------------------------------------------
  1211                                  
  1212                                  actualizarContadoresOfic1:
  1213 00001136 48FF0425[20080000]          inc qword[movimientosOfic1]
  1214 0000113E 488B0425[98000000]          mov rax, qword[desplazCasOrig]
  1215 00001146 482B0425[B0000000]          sub rax, qword[desplazCasAMover] ; rax = desplazOrigen - desplazDestino
  1216 0000114E 4883F801                    cmp rax, 1
  1217 00001152 742B                        je movOfic1Izq
  1218 00001154 4883F8FF                    cmp rax, -1
  1219 00001158 742E                        je movOfic1Der
  1220 0000115A 4883F80B                    cmp rax, 11
  1221 0000115E 7431                        je movOfic1Arriba
  1222 00001160 4883F8F5                    cmp rax, -11
  1223 00001164 7434                        je movOfic1Abajo
  1224 00001166 4883F80A                    cmp rax, 10
  1225 0000116A 7437                        je movOfic1ArrDer
  1226 0000116C 4883F8F6                    cmp rax, -10
  1227 00001170 7453                        je movOfic1AbjIzq
  1228 00001172 4883F80C                    cmp rax, 12
  1229 00001176 745E                        je movOfic1ArrIzq
  1230 00001178 4883F8F4                    cmp rax, -12
  1231 0000117C 7436                        je movOfic1AbjDer
  1232                                  
  1233 0000117E C3                          ret
  1234                                  
  1235                                      movOfic1Izq:
  1236 0000117F 48FF0425[40080000]              inc qword[movOfic1Izquierda]
  1237 00001187 C3                              ret
  1238                                      movOfic1Der:
  1239 00001188 48FF0425[38080000]              inc qword[movOfic1Derecha]
  1240 00001190 C3                              ret
  1241                                      movOfic1Arriba:
  1242 00001191 48FF0425[30080000]              inc qword[movOfic1Adelante]
  1243 00001199 C3                              ret
  1244                                      movOfic1Abajo:
  1245 0000119A 48FF0425[48080000]              inc qword[movOfic1Atras]
  1246 000011A2 C3                              ret
  1247                                      movOfic1ArrDer:
  1248 000011A3 48FF0425[50080000]              inc qword[movOfic1Diagonal]
  1249 000011AB 48FF0425[58080000]              inc qword[movOfic1DiagArribaDer]
  1250 000011B3 C3                              ret
  1251                                      movOfic1AbjDer:
  1252 000011B4 48FF0425[50080000]              inc qword[movOfic1Diagonal]
  1253 000011BC 48FF0425[68080000]              inc qword[movOfic1DiagAbajoDer]
  1254 000011C4 C3                              ret
  1255                                      movOfic1AbjIzq:
  1256 000011C5 48FF0425[50080000]              inc qword[movOfic1Diagonal]
  1257 000011CD 48FF0425[70080000]              inc qword[movOfic1DiagAbajoIzq]
  1258 000011D5 C3                              ret
  1259                                      movOfic1ArrIzq:
  1260 000011D6 48FF0425[50080000]              inc qword[movOfic1Diagonal]
  1261 000011DE 48FF0425[60080000]              inc qword[movOfic1DiagArribaIzq]
  1262 000011E6 C3                              ret
  1263                                  
  1264                                  actualizarContadoresOfic2:
  1265 000011E7 48FF0425[28080000]          inc qword[movimientosOfic2]
  1266 000011EF 488B0425[98000000]          mov rax, qword[desplazCasOrig]
  1267 000011F7 482B0425[B0000000]          sub rax, qword[desplazCasAMover] ; rax = desplazOrigen - desplazDestino
  1268 000011FF 4883F801                    cmp rax, 1
  1269 00001203 742B                        je movOfic2Izq
  1270 00001205 4883F8FF                    cmp rax, -1
  1271 00001209 742E                        je movOfic2Der
  1272 0000120B 4883F80B                    cmp rax, 11
  1273 0000120F 7431                        je movOfic2Arriba
  1274 00001211 4883F8F5                    cmp rax, -11
  1275 00001215 7434                        je movOfic2Abajo
  1276 00001217 4883F80A                    cmp rax, 10
  1277 0000121B 7437                        je movOfic2ArrDer
  1278 0000121D 4883F8F6                    cmp rax, -10
  1279 00001221 7453                        je movOfic2AbjIzq
  1280 00001223 4883F80C                    cmp rax, 12
  1281 00001227 745E                        je movOfic2ArrIzq
  1282 00001229 4883F8F4                    cmp rax, -12
  1283 0000122D 7436                        je movOfic2AbjDer
  1284                                  
  1285 0000122F C3                          ret
  1286                                  
  1287                                      movOfic2Izq:
  1288 00001230 48FF0425[88080000]              inc qword[movOfic2Izquierda]
  1289 00001238 C3                              ret
  1290                                      movOfic2Der:
  1291 00001239 48FF0425[80080000]              inc qword[movOfic2Derecha]
  1292 00001241 C3                              ret
  1293                                      movOfic2Arriba:
  1294 00001242 48FF0425[78080000]              inc qword[movOfic2Adelante]
  1295 0000124A C3                              ret
  1296                                      movOfic2Abajo:
  1297 0000124B 48FF0425[90080000]              inc qword[movOfic2Atras]
  1298 00001253 C3                              ret
  1299                                      movOfic2ArrDer:
  1300 00001254 48FF0425[98080000]              inc qword[movOfic2Diagonal]
  1301 0000125C 48FF0425[A0080000]              inc qword[movOfic2DiagArribaDer]
  1302 00001264 C3                              ret
  1303                                      movOfic2AbjDer:
  1304 00001265 48FF0425[98080000]              inc qword[movOfic2Diagonal]
  1305 0000126D 48FF0425[B0080000]              inc qword[movOfic2DiagAbajoDer]
  1306 00001275 C3                              ret
  1307                                      movOfic2AbjIzq:
  1308 00001276 48FF0425[98080000]              inc qword[movOfic2Diagonal]
  1309 0000127E 48FF0425[B8080000]              inc qword[movOfic2DiagAbajoIzq]
  1310 00001286 C3                              ret
  1311                                      movOfic2ArrIzq:
  1312 00001287 48FF0425[98080000]              inc qword[movOfic2Diagonal]
  1313 0000128F 48FF0425[A8080000]              inc qword[movOfic2DiagArribaIzq]
  1314 00001297 C3                              ret
  1315                                  
  1316                                  ; --------------------------------------------------------------------------------------------
  1317                                  ; RUTINA PARA REFRESCAR LA CASILLA ACTUAL DE LOS OFICIALES
  1318                                  ; --------------------------------------------------------------------------------------------
  1319                                  
  1320                                  refrescarCasActOfic1:
  1321                                      mMov casillaOfic1, filaAMover, 1
    31 00001298 B901000000          <1>  mov rcx, %3
    32 0000129D 488D3425[A0000000]  <1>  lea rsi, [%2]
    33 000012A5 488D3C25[D0080000]  <1>  lea rdi, [%1]
    34 000012AD F3A4                <1>  rep movsb
  1322                                      mMov casillaOfic1+8, columnaAMover, 1
    31 000012AF B901000000          <1>  mov rcx, %3
    32 000012B4 488D3425[A8000000]  <1>  lea rsi, [%2]
    33 000012BC 488D3C25[D8080000]  <1>  lea rdi, [%1]
    34 000012C4 F3A4                <1>  rep movsb
  1323 000012C6 C3                          ret
  1324                                  
  1325                                  refrescarCasActOfic2:
  1326                                      mMov casillaOfic2, filaAMover, 1
    31 000012C7 B901000000          <1>  mov rcx, %3
    32 000012CC 488D3425[A0000000]  <1>  lea rsi, [%2]
    33 000012D4 488D3C25[E0080000]  <1>  lea rdi, [%1]
    34 000012DC F3A4                <1>  rep movsb
  1327                                      mMov casillaOfic2+8, columnaAMover, 1
    31 000012DE B901000000          <1>  mov rcx, %3
    32 000012E3 488D3425[A8000000]  <1>  lea rsi, [%2]
    33 000012EB 488D3C25[E8080000]  <1>  lea rdi, [%1]
    34 000012F3 F3A4                <1>  rep movsb
  1328 000012F5 C3                          ret    
  1329                                  
  1330                                  refrescarCasActOficLuegoCaptura:
  1331 000012F6 488B0425[B0000000]          mov rax, qword[desplazCasAMover]
  1332 000012FE 488B1C25[C8000000]          mov rbx, qword[desplazAux]
  1333 00001306 4829D8                      sub rax, rbx ; rax = desplazCasAMover - desplazAux
  1334                                  
  1335 00001309 4883F801                    cmp rax, 1
  1336 0000130D 742A                        je saltoIzq
  1337 0000130F 4883F8FF                    cmp rax, -1
  1338 00001313 742E                        je saltoDer
  1339 00001315 4883F80B                    cmp rax, 11
  1340 00001319 7432                        je saltoArriba
  1341 0000131B 4883F8F5                    cmp rax, -11
  1342 0000131F 7436                        je saltoAbajo
  1343 00001321 4883F80A                    cmp rax, 10
  1344 00001325 743A                        je saltoArrDer
  1345 00001327 4883F8F6                    cmp rax, -10
  1346 0000132B 7446                        je saltoAbjIzq
  1347 0000132D 4883F80C                    cmp rax, 12
  1348 00001331 7452                        je saltoArrIzq
  1349 00001333 4883F8F4                    cmp rax, -12
  1350 00001337 745E                        je saltoAbjDer
  1351                                  
  1352                                      saltoIzq:
  1353 00001339 48FF0C25[A8000000]              dec qword[columnaAMover]
  1354 00001341 EB64                            jmp finRefrescarCasActOfic
  1355                                      saltoDer:
  1356 00001343 48FF0425[A8000000]              inc qword[columnaAMover]
  1357 0000134B EB5A                            jmp finRefrescarCasActOfic
  1358                                      saltoArriba:
  1359 0000134D 48FF0C25[A0000000]              dec qword[filaAMover]
  1360 00001355 EB50                            jmp finRefrescarCasActOfic
  1361                                      saltoAbajo:
  1362 00001357 48FF0425[A0000000]              inc qword[filaAMover]
  1363 0000135F EB46                            jmp finRefrescarCasActOfic
  1364                                      saltoArrDer:
  1365 00001361 48FF0C25[A0000000]              dec qword[filaAMover]
  1366 00001369 48FF0425[A8000000]              inc qword[columnaAMover]
  1367 00001371 EB34                            jmp finRefrescarCasActOfic
  1368                                      saltoAbjIzq:
  1369 00001373 48FF0425[A0000000]              inc qword[filaAMover]
  1370 0000137B 48FF0C25[A8000000]              dec qword[columnaAMover]
  1371 00001383 EB22                            jmp finRefrescarCasActOfic
  1372                                      saltoArrIzq:
  1373 00001385 48FF0C25[A0000000]              dec qword[filaAMover]
  1374 0000138D 48FF0C25[A8000000]              dec qword[columnaAMover]
  1375 00001395 EB10                            jmp finRefrescarCasActOfic
  1376                                      saltoAbjDer:
  1377 00001397 48FF0425[A0000000]              inc qword[filaAMover]
  1378 0000139F 48FF0425[A8000000]              inc qword[columnaAMover]
  1379                                  
  1380                                      finRefrescarCasActOfic:
  1381 000013A7 E84CFDFFFF                      call verQueOficialEs
  1382                                  
  1383 000013AC 4883F801                        cmp rax, 1
  1384 000013B0 7406                            je actualizarOfic1
  1385                                  
  1386 000013B2 E810FFFFFF                      call refrescarCasActOfic2
  1387 000013B7 C3                              ret
  1388                                  
  1389                                          actualizarOfic1:
  1390 000013B8 E8DBFEFFFF                          call refrescarCasActOfic1
  1391                                  
  1392 000013BD C3                          ret
  1393                                  
  1394                                  
  1395                                  
  1396                                  ; --------------------------------------------------------------------------------------------
  1397                                  ; RUTINA PARA VERIFICAR SI UN OFICIAL PODÍA CAPTURAR UN SOLDADO Y NO LO HIZO
  1398                                  ; --------------------------------------------------------------------------------------------
  1399                                  
  1400                                  podiaCapturarSoldado:
  1401                                      mMov desplazAux, desplazAux2, 1
    31 000013BE B901000000          <1>  mov rcx, %3
    32 000013C3 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 000013CB 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 000013D3 F3A4                <1>  rep movsb
  1402                                  
  1403                                      ; Casilla arriba-izquierda
  1404 000013D5 48832C25[C8000000]-         sub qword[desplazAux], 12
  1404 000013DD 0C                 
  1405                                      mHaySoldado qword[desplazAux]
   100 000013DE B800000000          <1>  mov rax, 0
   101 000013E3 488B3C25[C8000000]  <1>  mov rdi, %1
   102 000013EB E811FAFFFF          <1>  call haySoldado
  1406 000013F0 4883F800                    cmp rax, 0
  1407 000013F4 7519                        jne verCasArriba
  1408                                  
  1409                                      mPuedeCapturar 12, 1 ; restar 12 a desplazAux
   106 000013F6 BF0C000000          <1>  mov rdi, %1
   107 000013FB BE01000000          <1>  mov rsi, %2
   108 00001400 E845020000          <1>  call podiaComerPieza
  1410 00001405 4883F800                    cmp rax, 0
  1411 00001409 0F8435020000                je podiaCapturar
  1412                                  
  1413                                      ; Casilla arriba
  1414                                      verCasArriba:
  1415                                          mMov desplazAux, desplazAux2, 1
    31 0000140F B901000000          <1>  mov rcx, %3
    32 00001414 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 0000141C 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001424 F3A4                <1>  rep movsb
  1416 00001426 48832C25[C8000000]-             sub qword[desplazAux], 11
  1416 0000142E 0B                 
  1417                                          mHaySoldado qword[desplazAux]
   100 0000142F B800000000          <1>  mov rax, 0
   101 00001434 488B3C25[C8000000]  <1>  mov rdi, %1
   102 0000143C E8C0F9FFFF          <1>  call haySoldado
  1418 00001441 4883F800                        cmp rax, 0
  1419 00001445 7519                            jne verCasArribaDer
  1420                                  
  1421                                          mPuedeCapturar 11, 1 ; restar 11 a desplazAux
   106 00001447 BF0B000000          <1>  mov rdi, %1
   107 0000144C BE01000000          <1>  mov rsi, %2
   108 00001451 E8F4010000          <1>  call podiaComerPieza
  1422 00001456 4883F800                        cmp rax, 0
  1423 0000145A 0F84E4010000                    je podiaCapturar
  1424                                  
  1425                                      ; Casilla arriba-derecha
  1426                                      verCasArribaDer:
  1427                                          mMov desplazAux, desplazAux2, 1
    31 00001460 B901000000          <1>  mov rcx, %3
    32 00001465 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 0000146D 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001475 F3A4                <1>  rep movsb
  1428 00001477 48832C25[C8000000]-             sub qword[desplazAux], 10
  1428 0000147F 0A                 
  1429                                          mHaySoldado qword[desplazAux]
   100 00001480 B800000000          <1>  mov rax, 0
   101 00001485 488B3C25[C8000000]  <1>  mov rdi, %1
   102 0000148D E86FF9FFFF          <1>  call haySoldado
  1430 00001492 4883F800                        cmp rax, 0
  1431 00001496 7519                            jne verCasIzq
  1432                                          
  1433                                          mPuedeCapturar 10, 1 ; restar 10 a desplazAux
   106 00001498 BF0A000000          <1>  mov rdi, %1
   107 0000149D BE01000000          <1>  mov rsi, %2
   108 000014A2 E8A3010000          <1>  call podiaComerPieza
  1434 000014A7 4883F800                        cmp rax, 0
  1435 000014AB 0F8493010000                    je podiaCapturar
  1436                                  
  1437                                      ; Casilla izquierda
  1438                                      verCasIzq:
  1439                                          mMov desplazAux, desplazAux2, 1
    31 000014B1 B901000000          <1>  mov rcx, %3
    32 000014B6 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 000014BE 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 000014C6 F3A4                <1>  rep movsb
  1440 000014C8 48832C25[C8000000]-             sub qword[desplazAux], 1
  1440 000014D0 01                 
  1441                                          mHaySoldado qword[desplazAux]
   100 000014D1 B800000000          <1>  mov rax, 0
   101 000014D6 488B3C25[C8000000]  <1>  mov rdi, %1
   102 000014DE E81EF9FFFF          <1>  call haySoldado
  1442 000014E3 4883F800                        cmp rax, 0
  1443 000014E7 7519                            jne verCasDer
  1444                                          
  1445                                          mPuedeCapturar 1, 1 ; restar 1 a desplazAux
   106 000014E9 BF01000000          <1>  mov rdi, %1
   107 000014EE BE01000000          <1>  mov rsi, %2
   108 000014F3 E852010000          <1>  call podiaComerPieza
  1446 000014F8 4883F800                        cmp rax, 0
  1447 000014FC 0F8442010000                    je podiaCapturar
  1448                                  
  1449                                      ; Casilla derecha
  1450                                      verCasDer:
  1451                                          mMov desplazAux, desplazAux2, 1
    31 00001502 B901000000          <1>  mov rcx, %3
    32 00001507 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 0000150F 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001517 F3A4                <1>  rep movsb
  1452 00001519 48830425[C8000000]-             add qword[desplazAux], 1
  1452 00001521 01                 
  1453                                          mHaySoldado qword[desplazAux]
   100 00001522 B800000000          <1>  mov rax, 0
   101 00001527 488B3C25[C8000000]  <1>  mov rdi, %1
   102 0000152F E8CDF8FFFF          <1>  call haySoldado
  1454 00001534 4883F800                        cmp rax, 0
  1455 00001538 7519                            jne verCasAbajoIzq
  1456                                          
  1457                                          mPuedeCapturar 1, 0 ; sumar 1 a desplazAux
   106 0000153A BF01000000          <1>  mov rdi, %1
   107 0000153F BE00000000          <1>  mov rsi, %2
   108 00001544 E801010000          <1>  call podiaComerPieza
  1458 00001549 4883F800                        cmp rax, 0
  1459 0000154D 0F84F1000000                    je podiaCapturar
  1460                                  
  1461                                      ; Casilla abajo-izquierda
  1462                                      verCasAbajoIzq:
  1463                                          mMov desplazAux, desplazAux2, 1
    31 00001553 B901000000          <1>  mov rcx, %3
    32 00001558 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001560 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001568 F3A4                <1>  rep movsb
  1464 0000156A 48830425[C8000000]-             add qword[desplazAux], 10
  1464 00001572 0A                 
  1465                                          mHaySoldado qword[desplazAux]
   100 00001573 B800000000          <1>  mov rax, 0
   101 00001578 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001580 E87CF8FFFF          <1>  call haySoldado
  1466 00001585 4883F800                        cmp rax, 0
  1467 00001589 7519                            jne verCasAbajo
  1468                                          
  1469                                          mPuedeCapturar 10, 0 ; sumar 10 a desplazAux
   106 0000158B BF0A000000          <1>  mov rdi, %1
   107 00001590 BE00000000          <1>  mov rsi, %2
   108 00001595 E8B0000000          <1>  call podiaComerPieza
  1470 0000159A 4883F800                        cmp rax, 0
  1471 0000159E 0F84A0000000                    je podiaCapturar
  1472                                  
  1473                                      ; Casilla abajo
  1474                                      verCasAbajo:
  1475                                          mMov desplazAux, desplazAux2, 1
    31 000015A4 B901000000          <1>  mov rcx, %3
    32 000015A9 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 000015B1 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 000015B9 F3A4                <1>  rep movsb
  1476 000015BB 48830425[C8000000]-             add qword[desplazAux], 11
  1476 000015C3 0B                 
  1477                                          mHaySoldado qword[desplazAux]
   100 000015C4 B800000000          <1>  mov rax, 0
   101 000015C9 488B3C25[C8000000]  <1>  mov rdi, %1
   102 000015D1 E82BF8FFFF          <1>  call haySoldado
  1478 000015D6 4883F800                        cmp rax, 0
  1479 000015DA 7515                            jne verCasAbajoDer
  1480                                          
  1481                                          mPuedeCapturar 11, 0 ; sumar 11 a desplazAux
   106 000015DC BF0B000000          <1>  mov rdi, %1
   107 000015E1 BE00000000          <1>  mov rsi, %2
   108 000015E6 E85F000000          <1>  call podiaComerPieza
  1482 000015EB 4883F800                        cmp rax, 0
  1483 000015EF 7453                            je podiaCapturar
  1484                                  
  1485                                      ; Casilla abajo-derecha
  1486                                      verCasAbajoDer:
  1487                                          mMov desplazAux, desplazAux2, 1
    31 000015F1 B901000000          <1>  mov rcx, %3
    32 000015F6 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 000015FE 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001606 F3A4                <1>  rep movsb
  1488 00001608 48830425[C8000000]-             add qword[desplazAux], 12
  1488 00001610 0C                 
  1489                                          mHaySoldado qword[desplazAux]
   100 00001611 B800000000          <1>  mov rax, 0
   101 00001616 488B3C25[C8000000]  <1>  mov rdi, %1
   102 0000161E E8DEF7FFFF          <1>  call haySoldado
  1490 00001623 4883F800                        cmp rax, 0
  1491 00001627 7515                            jne okNoPodiaCapturar
  1492                                          
  1493                                          mPuedeCapturar 12, 0 ; sumar 12 a desplazAux
   106 00001629 BF0C000000          <1>  mov rdi, %1
   107 0000162E BE00000000          <1>  mov rsi, %2
   108 00001633 E812000000          <1>  call podiaComerPieza
  1494 00001638 4883F800                        cmp rax, 0
  1495 0000163C 7406                            je podiaCapturar
  1496                                      
  1497                                      okNoPodiaCapturar:
  1498 0000163E B801000000                      mov rax, 1
  1499 00001643 C3                              ret
  1500                                      
  1501                                      podiaCapturar:
  1502 00001644 B800000000                      mov rax, 0
  1503                                  
  1504 00001649 C3                          ret
  1505                                  
  1506                                  podiaComerPieza:
  1507 0000164A 4883FE00                    cmp rsi, 0
  1508 0000164E 740A                        je sumarDesplaz 
  1509 00001650 48293C25[C8000000]          sub qword[desplazAux], rdi
  1510 00001658 EB08                        jmp verSiEspacioEstaLibre
  1511                                  
  1512                                      sumarDesplaz:
  1513 0000165A 48013C25[C8000000]              add qword[desplazAux], rdi
  1514                                  
  1515                                      verSiEspacioEstaLibre:
  1516                                          mEstaVacia qword[desplazAux]
    94 00001662 B800000000          <1>  mov rax, 0
    95 00001667 488B3C25[C8000000]  <1>  mov rdi, %1
    96 0000166F E8BAF5FFFF          <1>  call estaVacia
  1517 00001674 4883F800                        cmp rax, 0
  1518 00001678 7406                            je okComerPieza
  1519                                  
  1520 0000167A B801000000                      mov rax, 1
  1521 0000167F C3                              ret
  1522                                  
  1523                                      okComerPieza:
  1524 00001680 B800000000                      mov rax, 0
  1525 00001685 C3                              ret
  1526                                  
  1527                                  ; --------------------------------------------------------------------------------------------
  1528                                  ; RUTINA PARA QUITAR AL OFICIAL QUE SE DESPREOCUPÓ DE CAPTURAR SOLDADOS
  1529                                  ; --------------------------------------------------------------------------------------------
  1530                                  
  1531                                  desentenderOficial:
  1532 00001686 488B1C25[C8000000]          mov rbx, qword[desplazAux]
  1533 0000168E BA20000000                  mov rdx, ' '
  1534 00001693 8893[04000000]              mov byte[tableroEnJuego+rbx], dl
  1535                                  
  1536 00001699 E85AFAFFFF                  call verQueOficialEs ; Verificamos qué oficial es el que se quiere mover
  1537                                  
  1538 0000169E 4883F801                    cmp rax, 1
  1539 000016A2 741A                        je desentenderOfic1
  1540                                  
  1541                                      desentenderOfic2:
  1542 000016A4 48C70425[E0080000]-             mov qword[casillaOfic2], 0
  1542 000016AC 00000000           
  1543 000016B0 48C70425[E8080000]-             mov qword[casillaOfic2+8], 0
  1543 000016B8 00000000           
  1544 000016BC EB18                            jmp agregarOficDesentendido
  1545                                  
  1546                                      desentenderOfic1:
  1547 000016BE 48C70425[D0080000]-             mov qword[casillaOfic1], 0
  1547 000016C6 00000000           
  1548 000016CA 48C70425[D8080000]-             mov qword[casillaOfic1+8], 0
  1548 000016D2 00000000           
  1549                                  
  1550                                      agregarOficDesentendido:
  1551 000016D6 48FF0425[C8080000]              inc qword[cantOficInvalidados]
  1552                                      
  1553 000016DE C3                          ret
  1554                                      
  1555                                  ; --------------------------------------------------------------------------------------------
  1556                                  ; RUTINA PARA VERIFICAR SI EL OTRO OFICIAL PODÍA CAPTURAR UN SOLDADO Y NO LO HIZO
  1557                                  ; --------------------------------------------------------------------------------------------
  1558                                  
  1559                                  podiaCapturarSoldadoOtroOficial:
  1560 000016DF E814FAFFFF                  call verQueOficialEs ; Verificamos qué oficial es el que se quiere mover
  1561 000016E4 4883F801                    cmp rax, 1
  1562 000016E8 742A                        je verificarOfic2
  1563                                  
  1564                                      verificarOfic1:
  1565                                          mCalcDesplaz qword[casillaOfic1], qword[casillaOfic1+8], qword[desplazAux2]
    87 000016EA 488B3C25[D0080000]  <1>  mov rdi, %1
    88 000016F2 488B3425[D8080000]  <1>  mov rsi, %2
    89 000016FA E844F5FFFF          <1>  call calcularDesplazamiento
    90 000016FF 48890425[D0000000]  <1>  mov %3, rax
  1566 00001707 E8B2FCFFFF                      call podiaCapturarSoldado
  1567 0000170C 4883F800                        cmp rax, 0
  1568 00001710 742C                            je okPodiaComerElOtro
  1569 00001712 EB30                            jmp noPodiaComerElOtro
  1570                                      
  1571                                      verificarOfic2:
  1572                                          mCalcDesplaz qword[casillaOfic2], qword[casillaOfic2+8], qword[desplazAux2]
    87 00001714 488B3C25[E0080000]  <1>  mov rdi, %1
    88 0000171C 488B3425[E8080000]  <1>  mov rsi, %2
    89 00001724 E81AF5FFFF          <1>  call calcularDesplazamiento
    90 00001729 48890425[D0000000]  <1>  mov %3, rax
  1573 00001731 E888FCFFFF                      call podiaCapturarSoldado
  1574 00001736 4883F800                        cmp rax, 0
  1575 0000173A 7402                            je okPodiaComerElOtro
  1576 0000173C EB06                            jmp noPodiaComerElOtro
  1577                                  
  1578                                      okPodiaComerElOtro:
  1579 0000173E B800000000                      mov rax, 0
  1580 00001743 C3                              ret
  1581                                  
  1582                                      noPodiaComerElOtro:
  1583 00001744 B801000000                      mov rax, 1
  1584                                  
  1585 00001749 C3                          ret
  1586                                  
  1587                                  ; --------------------------------------------------------------------------------------------
  1588                                  ; RUTINA PARA INVALIDAR AL OTRO OFICIAL QUE NO SE MOVIÓ (el cual podía capturar un soldado)
  1589                                  ; --------------------------------------------------------------------------------------------
  1590                                  
  1591                                  desentenderOtroOficial:
  1592 0000174A E8A9F9FFFF                  call verQueOficialEs ; Verificamos qué oficial es el que se quiere mover
  1593                                  
  1594 0000174F 4883F801                    cmp rax, 1
  1595 00001753 7423                        je otroEsOfic2
  1596                                  
  1597                                      otroEsOfic1:
  1598                                          mCalcDesplaz qword[casillaOfic1], qword[casillaOfic1+8], qword[desplazAux]
    87 00001755 488B3C25[D0080000]  <1>  mov rdi, %1
    88 0000175D 488B3425[D8080000]  <1>  mov rsi, %2
    89 00001765 E8D9F4FFFF          <1>  call calcularDesplazamiento
    90 0000176A 48890425[C8000000]  <1>  mov %3, rax
  1599 00001772 E80FFFFFFF                      call desentenderOficial
  1600 00001777 C3                              ret
  1601                                  
  1602                                      otroEsOfic2:
  1603                                          mCalcDesplaz qword[casillaOfic2], qword[casillaOfic2+8], qword[desplazAux]
    87 00001778 488B3C25[E0080000]  <1>  mov rdi, %1
    88 00001780 488B3425[E8080000]  <1>  mov rsi, %2
    89 00001788 E8B6F4FFFF          <1>  call calcularDesplazamiento
    90 0000178D 48890425[C8000000]  <1>  mov %3, rax
  1604 00001795 E8ECFEFFFF                      call desentenderOficial
  1605                                      
  1606 0000179A C3                          ret
  1607                                  
  1608                                  ; --------------------------------------------------------------------------------------------
  1609                                  ; RUTINA PARA VER SI EL MOVIMIENTO DE UN OFICIAL RESULTA EN EL FIN DEL JUEGO
  1610                                  ; --------------------------------------------------------------------------------------------
  1611                                  
  1612                                  verificarFinJuegoOficiales:
  1613                                      ; Verificamos si ambos oficiales han sido invalidados
  1614 0000179B 48833C25[C8080000]-         cmp qword[cantOficInvalidados], 2
  1614 000017A3 02                 
  1615 000017A4 7411                        je finInvalidados
  1616                                  
  1617                                      ; Verificamos que los oficiales hayan capturado necesarios soldados para ganar
  1618 000017A6 48833C25[C0080000]-         cmp qword[cantSoldCapturados], 16
  1618 000017AE 10                 
  1619 000017AF 7413                        je finSoldCapturados
  1620                                  
  1621 000017B1 B801000000                  mov rax, 1
  1622 000017B6 C3                          ret
  1623                                  
  1624                                      finInvalidados:
  1625 000017B7 C70425[A4040000]6F-             mov dword[varRazonFin], "oInv"
  1625 000017BF 496E76             
  1626 000017C2 EB0B                            jmp hayFinJuegoOfic
  1627                                  
  1628                                      finSoldCapturados:
  1629 000017C4 C70425[A4040000]73-             mov dword[varRazonFin], "sCap"
  1629 000017CC 436170             
  1630                                  
  1631                                      hayFinJuegoOfic:
  1632 000017CF B800000000                      mov rax, 0
  1633 000017D4 C3                              ret
  1634                                  
  1635                                  ; --------------------------------------------------------------------------------------------
  1636                                  ; RUTINA PARA VERIFICAR SI EL MOVIMIENTO DE UN SOLDADO RESULTA EN EL FIN DEL JUEGO
  1637                                  ; --------------------------------------------------------------------------------------------
  1638                                  
  1639                                  verificarFinJuegoSoldados:
  1640 000017D5 E835000000                  call soldadosOcupanFortaleza
  1641 000017DA 4883F800                    cmp rax, 0
  1642 000017DE 7411                        je finOcupFortaleza
  1643                                  
  1644 000017E0 E827010000                  call oficialesRodeados
  1645 000017E5 4883F800                    cmp rax, 0
  1646 000017E9 7413                        je finOficRodeados
  1647                                  
  1648 000017EB B801000000                  mov rax, 1
  1649 000017F0 C3                          ret
  1650                                  
  1651                                      finOcupFortaleza:
  1652 000017F1 C70425[A4040000]73-             mov dword[varRazonFin], "sOcu"
  1652 000017F9 4F6375             
  1653 000017FC EB0B                            jmp hayFinJuegoSold
  1654                                  
  1655                                      finOficRodeados:
  1656 000017FE C70425[A4040000]6F-             mov dword[varRazonFin], "oRod"
  1656 00001806 526F64             
  1657                                  
  1658                                      hayFinJuegoSold:
  1659 00001809 B800000000                      mov rax, 0
  1660 0000180E C3                              ret
  1661                                  
  1662                                  ; --------------------------------------------------------------------------------------------
  1663                                  ; RUTINA PARA VERIFICAR SI LOS SOLDADOS OCUPAN LA FORTALEZA
  1664                                  ; --------------------------------------------------------------------------------------------
  1665                                  
  1666                                  soldadosOcupanFortaleza:
  1667                                      mCmp byte[tableroEnJuego+70], [simboloSoldados], 1 ; Fortaleza 1-1
    38 0000180F B901000000          <1>  mov rcx, %3
    39 00001814 488D3425[4A000000]  <1>  lea rsi, %1
    40 0000181C 488D3C25[02090000]  <1>  lea rdi, %2
    41 00001824 F3A6                <1>  repe cmpsb
  1668 00001826 0F85DA000000                jne noOcupaFortaleza
  1669                                      mCmp byte[tableroEnJuego+71], [simboloSoldados], 1 ; Fortaleza 1-2
    38 0000182C B901000000          <1>  mov rcx, %3
    39 00001831 488D3425[4B000000]  <1>  lea rsi, %1
    40 00001839 488D3C25[02090000]  <1>  lea rdi, %2
    41 00001841 F3A6                <1>  repe cmpsb
  1670 00001843 0F85BD000000                jne noOcupaFortaleza
  1671                                      mCmp byte[tableroEnJuego+72], [simboloSoldados], 1 ; Fortaleza 1-3
    38 00001849 B901000000          <1>  mov rcx, %3
    39 0000184E 488D3425[4C000000]  <1>  lea rsi, %1
    40 00001856 488D3C25[02090000]  <1>  lea rdi, %2
    41 0000185E F3A6                <1>  repe cmpsb
  1672 00001860 0F85A0000000                jne noOcupaFortaleza
  1673                                      mCmp byte[tableroEnJuego+81], [simboloSoldados], 1 ; Fortaleza 2-1
    38 00001866 B901000000          <1>  mov rcx, %3
    39 0000186B 488D3425[55000000]  <1>  lea rsi, %1
    40 00001873 488D3C25[02090000]  <1>  lea rdi, %2
    41 0000187B F3A6                <1>  repe cmpsb
  1674 0000187D 0F8583000000                jne noOcupaFortaleza
  1675                                      mCmp byte[tableroEnJuego+82], [simboloSoldados], 1 ; Fortaleza 2-2
    38 00001883 B901000000          <1>  mov rcx, %3
    39 00001888 488D3425[56000000]  <1>  lea rsi, %1
    40 00001890 488D3C25[02090000]  <1>  lea rdi, %2
    41 00001898 F3A6                <1>  repe cmpsb
  1676 0000189A 756A                        jne noOcupaFortaleza
  1677                                      mCmp byte[tableroEnJuego+83], [simboloSoldados], 1 ; Fortaleza 2-3
    38 0000189C B901000000          <1>  mov rcx, %3
    39 000018A1 488D3425[57000000]  <1>  lea rsi, %1
    40 000018A9 488D3C25[02090000]  <1>  lea rdi, %2
    41 000018B1 F3A6                <1>  repe cmpsb
  1678 000018B3 7551                        jne noOcupaFortaleza
  1679                                      mCmp byte[tableroEnJuego+92], [simboloSoldados], 1 ; Fortaleza 3-1
    38 000018B5 B901000000          <1>  mov rcx, %3
    39 000018BA 488D3425[60000000]  <1>  lea rsi, %1
    40 000018C2 488D3C25[02090000]  <1>  lea rdi, %2
    41 000018CA F3A6                <1>  repe cmpsb
  1680 000018CC 7538                        jne noOcupaFortaleza
  1681                                      mCmp byte[tableroEnJuego+93], [simboloSoldados], 1 ; Fortaleza 3-2
    38 000018CE B901000000          <1>  mov rcx, %3
    39 000018D3 488D3425[61000000]  <1>  lea rsi, %1
    40 000018DB 488D3C25[02090000]  <1>  lea rdi, %2
    41 000018E3 F3A6                <1>  repe cmpsb
  1682 000018E5 751F                        jne noOcupaFortaleza
  1683                                      mCmp byte[tableroEnJuego+94], [simboloSoldados], 1 ; Fortaleza 3-3
    38 000018E7 B901000000          <1>  mov rcx, %3
    39 000018EC 488D3425[62000000]  <1>  lea rsi, %1
    40 000018F4 488D3C25[02090000]  <1>  lea rdi, %2
    41 000018FC F3A6                <1>  repe cmpsb
  1684 000018FE 7506                        jne noOcupaFortaleza
  1685                                  
  1686 00001900 B800000000                  mov rax, 0
  1687 00001905 C3                          ret
  1688                                  
  1689                                      noOcupaFortaleza:
  1690 00001906 B801000000                      mov rax, 1
  1691                                  
  1692 0000190B C3                          ret
  1693                                  
  1694                                  ; --------------------------------------------------------------------------------------------
  1695                                  ; RUTINA PARA VERIFICAR SI LOS OFICIALES ESTÁN RODEADOS POR SOLDADOS
  1696                                  ; --------------------------------------------------------------------------------------------
  1697                                  
  1698                                  oficialesRodeados:
  1699 0000190C E8F8030000                  call ofic1Desentendido
  1700 00001911 4883F800                    cmp rax, 0
  1701 00001915 740B                        je rodeanAOfic2
  1702 00001917 E828000000                  call verSiOfic1Rodeado
  1703 0000191C 4883F800                    cmp rax, 0
  1704 00001920 751C                        jne tienenSalida
  1705                                  
  1706                                      rodeanAOfic2:
  1707 00001922 E8F9030000                      call ofic2Desentendido
  1708 00001927 4883F800                        cmp rax, 0
  1709 0000192B 740B                            je noHaySalida
  1710 0000192D E84C000000                      call verSiOfic2Rodeado
  1711 00001932 4883F800                        cmp rax, 0
  1712 00001936 7506                            jne tienenSalida
  1713                                  
  1714                                      noHaySalida:
  1715 00001938 B800000000                      mov rax, 0
  1716 0000193D C3                              ret
  1717                                  
  1718                                      tienenSalida:
  1719 0000193E B801000000                      mov rax, 1
  1720                                  
  1721 00001943 C3                          ret
  1722                                  
  1723                                  verSiOfic1Rodeado:
  1724                                      mCalcDesplaz qword[casillaOfic1], qword[casillaOfic1+8], qword[desplazAux]
    87 00001944 488B3C25[D0080000]  <1>  mov rdi, %1
    88 0000194C 488B3425[D8080000]  <1>  mov rsi, %2
    89 00001954 E8EAF2FFFF          <1>  call calcularDesplazamiento
    90 00001959 48890425[C8000000]  <1>  mov %3, rax
  1725                                      mMov desplazAux2, desplazAux, 1
    31 00001961 B901000000          <1>  mov rcx, %3
    32 00001966 488D3425[C8000000]  <1>  lea rsi, [%2]
    33 0000196E 488D3C25[D0000000]  <1>  lea rdi, [%1]
    34 00001976 F3A4                <1>  rep movsb
  1726 00001978 E83B000000                  call verSiOficialRodeado
  1727 0000197D C3                          ret
  1728                                  
  1729                                  verSiOfic2Rodeado:
  1730                                      mCalcDesplaz qword[casillaOfic2], qword[casillaOfic2+8], qword[desplazAux]
    87 0000197E 488B3C25[E0080000]  <1>  mov rdi, %1
    88 00001986 488B3425[E8080000]  <1>  mov rsi, %2
    89 0000198E E8B0F2FFFF          <1>  call calcularDesplazamiento
    90 00001993 48890425[C8000000]  <1>  mov %3, rax
  1731                                      mMov desplazAux2, desplazAux, 1
    31 0000199B B901000000          <1>  mov rcx, %3
    32 000019A0 488D3425[C8000000]  <1>  lea rsi, [%2]
    33 000019A8 488D3C25[D0000000]  <1>  lea rdi, [%1]
    34 000019B0 F3A4                <1>  rep movsb
  1732 000019B2 E801000000                  call verSiOficialRodeado
  1733 000019B7 C3                          ret
  1734                                  
  1735                                  verSiOficialRodeado:
  1736                                      ; Casilla arriba-izquierda
  1737 000019B8 48832C25[C8000000]-         sub qword[desplazAux], 12
  1737 000019C0 0C                 
  1738                                      mEstaVacia qword[desplazAux]
    94 000019C1 B800000000          <1>  mov rax, 0
    95 000019C6 488B3C25[C8000000]  <1>  mov rdi, %1
    96 000019CE E85BF2FFFF          <1>  call estaVacia
  1739 000019D3 4883F800                    cmp rax, 0 ; Si el oficial tiene una casilla vacía, puede moverse -> no está rodeado 
  1740 000019D7 0F8426030000                je okPuedeMoverse
  1741                                      mHaySoldado qword[desplazAux]
   100 000019DD B800000000          <1>  mov rax, 0
   101 000019E2 488B3C25[C8000000]  <1>  mov rdi, %1
   102 000019EA E812F4FFFF          <1>  call haySoldado
  1742 000019EF 4883F801                    cmp rax, 1 ; Si no hay soldado, significa que es un límite del tablero -> me fijo en otra casilla
  1743 000019F3 7419                        je verEspacioArr
  1744                                      mPuedeCapturar 12, 1 ; restar 12 a desplazAux
   106 000019F5 BF0C000000          <1>  mov rdi, %1
   107 000019FA BE01000000          <1>  mov rsi, %2
   108 000019FF E846FCFFFF          <1>  call podiaComerPieza
  1745 00001A04 4883F800                    cmp rax, 0 ; Si el oficial puede capturar un soldado, no está rodeado
  1746 00001A08 0F84F5020000                je okPuedeMoverse
  1747                                  
  1748                                      ; Casilla arriba
  1749                                      verEspacioArr:
  1750                                          mMov desplazAux, desplazAux2, 1
    31 00001A0E B901000000          <1>  mov rcx, %3
    32 00001A13 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001A1B 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001A23 F3A4                <1>  rep movsb
  1751 00001A25 48832C25[C8000000]-             sub qword[desplazAux], 11
  1751 00001A2D 0B                 
  1752                                          mEstaVacia qword[desplazAux]
    94 00001A2E B800000000          <1>  mov rax, 0
    95 00001A33 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001A3B E8EEF1FFFF          <1>  call estaVacia
  1753 00001A40 4883F800                        cmp rax, 0  
  1754 00001A44 0F84B9020000                    je okPuedeMoverse
  1755                                          mHaySoldado qword[desplazAux]
   100 00001A4A B800000000          <1>  mov rax, 0
   101 00001A4F 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001A57 E8A5F3FFFF          <1>  call haySoldado
  1756 00001A5C 4883F801                        cmp rax, 1
  1757 00001A60 7419                            je verEspacioArrDer
  1758                                          mPuedeCapturar 11, 1 ; restar 11 a desplazAux
   106 00001A62 BF0B000000          <1>  mov rdi, %1
   107 00001A67 BE01000000          <1>  mov rsi, %2
   108 00001A6C E8D9FBFFFF          <1>  call podiaComerPieza
  1759 00001A71 4883F800                        cmp rax, 0
  1760 00001A75 0F8488020000                    je okPuedeMoverse
  1761                                  
  1762                                      ; Casilla arriba-derecha
  1763                                      verEspacioArrDer:
  1764                                          mMov desplazAux, desplazAux2, 1
    31 00001A7B B901000000          <1>  mov rcx, %3
    32 00001A80 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001A88 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001A90 F3A4                <1>  rep movsb
  1765 00001A92 48832C25[C8000000]-             sub qword[desplazAux], 10
  1765 00001A9A 0A                 
  1766                                          mEstaVacia qword[desplazAux]
    94 00001A9B B800000000          <1>  mov rax, 0
    95 00001AA0 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001AA8 E881F1FFFF          <1>  call estaVacia
  1767 00001AAD 4883F800                        cmp rax, 0  
  1768 00001AB1 0F844C020000                    je okPuedeMoverse
  1769                                          mHaySoldado qword[desplazAux]
   100 00001AB7 B800000000          <1>  mov rax, 0
   101 00001ABC 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001AC4 E838F3FFFF          <1>  call haySoldado
  1770 00001AC9 4883F801                        cmp rax, 1
  1771 00001ACD 7419                            je verEspacioIzq
  1772                                          mPuedeCapturar 10, 1 ; restar 10 a desplazAux
   106 00001ACF BF0A000000          <1>  mov rdi, %1
   107 00001AD4 BE01000000          <1>  mov rsi, %2
   108 00001AD9 E86CFBFFFF          <1>  call podiaComerPieza
  1773 00001ADE 4883F800                        cmp rax, 0
  1774 00001AE2 0F841B020000                    je okPuedeMoverse
  1775                                  
  1776                                      ; Casilla izquierda
  1777                                      verEspacioIzq:
  1778                                          mMov desplazAux, desplazAux2, 1
    31 00001AE8 B901000000          <1>  mov rcx, %3
    32 00001AED 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001AF5 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001AFD F3A4                <1>  rep movsb
  1779 00001AFF 48832C25[C8000000]-             sub qword[desplazAux], 1
  1779 00001B07 01                 
  1780                                          mEstaVacia qword[desplazAux]
    94 00001B08 B800000000          <1>  mov rax, 0
    95 00001B0D 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001B15 E814F1FFFF          <1>  call estaVacia
  1781 00001B1A 4883F800                        cmp rax, 0  
  1782 00001B1E 0F84DF010000                    je okPuedeMoverse
  1783                                          mHaySoldado qword[desplazAux]
   100 00001B24 B800000000          <1>  mov rax, 0
   101 00001B29 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001B31 E8CBF2FFFF          <1>  call haySoldado
  1784 00001B36 4883F801                        cmp rax, 1
  1785 00001B3A 7419                            je verEspacioDer
  1786                                          mPuedeCapturar 1, 1 ; restar 1 a desplazAux 
   106 00001B3C BF01000000          <1>  mov rdi, %1
   107 00001B41 BE01000000          <1>  mov rsi, %2
   108 00001B46 E8FFFAFFFF          <1>  call podiaComerPieza
  1787 00001B4B 4883F800                        cmp rax, 0
  1788 00001B4F 0F84AE010000                    je okPuedeMoverse
  1789                                  
  1790                                      ; Casilla derecha
  1791                                      verEspacioDer:
  1792                                          mMov desplazAux, desplazAux2, 1
    31 00001B55 B901000000          <1>  mov rcx, %3
    32 00001B5A 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001B62 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001B6A F3A4                <1>  rep movsb
  1793 00001B6C 48830425[C8000000]-             add qword[desplazAux], 1
  1793 00001B74 01                 
  1794                                          mEstaVacia qword[desplazAux]
    94 00001B75 B800000000          <1>  mov rax, 0
    95 00001B7A 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001B82 E8A7F0FFFF          <1>  call estaVacia
  1795 00001B87 4883F800                        cmp rax, 0  
  1796 00001B8B 0F8472010000                    je okPuedeMoverse
  1797                                          mHaySoldado qword[desplazAux]
   100 00001B91 B800000000          <1>  mov rax, 0
   101 00001B96 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001B9E E85EF2FFFF          <1>  call haySoldado
  1798 00001BA3 4883F801                        cmp rax, 1
  1799 00001BA7 7419                            je verEspacioAbjIzq
  1800                                          mPuedeCapturar 1, 0 ; sumar 1 a desplazAux 
   106 00001BA9 BF01000000          <1>  mov rdi, %1
   107 00001BAE BE00000000          <1>  mov rsi, %2
   108 00001BB3 E892FAFFFF          <1>  call podiaComerPieza
  1801 00001BB8 4883F800                        cmp rax, 0
  1802 00001BBC 0F8441010000                    je okPuedeMoverse
  1803                                  
  1804                                      ; Casilla abajo-izquierda
  1805                                      verEspacioAbjIzq:
  1806                                          mMov desplazAux, desplazAux2, 1
    31 00001BC2 B901000000          <1>  mov rcx, %3
    32 00001BC7 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001BCF 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001BD7 F3A4                <1>  rep movsb
  1807 00001BD9 48830425[C8000000]-             add qword[desplazAux], 10
  1807 00001BE1 0A                 
  1808                                          mEstaVacia qword[desplazAux]
    94 00001BE2 B800000000          <1>  mov rax, 0
    95 00001BE7 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001BEF E83AF0FFFF          <1>  call estaVacia
  1809 00001BF4 4883F800                        cmp rax, 0  
  1810 00001BF8 0F8405010000                    je okPuedeMoverse
  1811                                          mHaySoldado qword[desplazAux]
   100 00001BFE B800000000          <1>  mov rax, 0
   101 00001C03 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001C0B E8F1F1FFFF          <1>  call haySoldado
  1812 00001C10 4883F801                        cmp rax, 1
  1813 00001C14 7419                            je verEspacioAbajo
  1814                                          mPuedeCapturar 10, 0 ; sumar 10 a desplazAux 
   106 00001C16 BF0A000000          <1>  mov rdi, %1
   107 00001C1B BE00000000          <1>  mov rsi, %2
   108 00001C20 E825FAFFFF          <1>  call podiaComerPieza
  1815 00001C25 4883F800                        cmp rax, 0
  1816 00001C29 0F84D4000000                    je okPuedeMoverse
  1817                                  
  1818                                      ; Casilla abajo
  1819                                      verEspacioAbajo:
  1820                                          mMov desplazAux, desplazAux2, 1
    31 00001C2F B901000000          <1>  mov rcx, %3
    32 00001C34 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001C3C 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001C44 F3A4                <1>  rep movsb
  1821 00001C46 48830425[C8000000]-             add qword[desplazAux], 11
  1821 00001C4E 0B                 
  1822                                          mEstaVacia qword[desplazAux]
    94 00001C4F B800000000          <1>  mov rax, 0
    95 00001C54 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001C5C E8CDEFFFFF          <1>  call estaVacia
  1823 00001C61 4883F800                        cmp rax, 0  
  1824 00001C65 0F8498000000                    je okPuedeMoverse
  1825                                          mHaySoldado qword[desplazAux]
   100 00001C6B B800000000          <1>  mov rax, 0
   101 00001C70 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001C78 E884F1FFFF          <1>  call haySoldado
  1826 00001C7D 4883F801                        cmp rax, 1
  1827 00001C81 7415                            je verEspacioAbjDer
  1828                                          mPuedeCapturar 11, 0 ; sumar 11 a desplazAux
   106 00001C83 BF0B000000          <1>  mov rdi, %1
   107 00001C88 BE00000000          <1>  mov rsi, %2
   108 00001C8D E8B8F9FFFF          <1>  call podiaComerPieza
  1829 00001C92 4883F800                        cmp rax, 0
  1830 00001C96 746B                            je okPuedeMoverse
  1831                                  
  1832                                      ; Casilla abajo-derecha
  1833                                      verEspacioAbjDer:
  1834                                          mMov desplazAux, desplazAux2, 1
    31 00001C98 B901000000          <1>  mov rcx, %3
    32 00001C9D 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001CA5 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001CAD F3A4                <1>  rep movsb
  1835 00001CAF 48830425[C8000000]-             add qword[desplazAux], 12
  1835 00001CB7 0C                 
  1836                                          mEstaVacia qword[desplazAux]
    94 00001CB8 B800000000          <1>  mov rax, 0
    95 00001CBD 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001CC5 E864EFFFFF          <1>  call estaVacia
  1837 00001CCA 4883F800                        cmp rax, 0  
  1838 00001CCE 7433                            je okPuedeMoverse
  1839                                          mHaySoldado qword[desplazAux]
   100 00001CD0 B800000000          <1>  mov rax, 0
   101 00001CD5 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001CDD E81FF1FFFF          <1>  call haySoldado
  1840 00001CE2 4883F801                        cmp rax, 1
  1841 00001CE6 7415                            je noPuedeMoverse
  1842                                          mPuedeCapturar 12, 0 ; sumar 12 a desplazAux
   106 00001CE8 BF0C000000          <1>  mov rdi, %1
   107 00001CED BE00000000          <1>  mov rsi, %2
   108 00001CF2 E853F9FFFF          <1>  call podiaComerPieza
  1843 00001CF7 4883F800                        cmp rax, 0
  1844 00001CFB 7406                            je okPuedeMoverse
  1845                                  
  1846                                      ; Si llegamos acá, el oficial está rodeado -> no puede realizar ningún movimiento
  1847                                      noPuedeMoverse:
  1848 00001CFD B800000000                      mov rax, 0
  1849 00001D02 C3                              ret
  1850                                  
  1851                                      ; Si llegamos acá, el oficial puede moverse
  1852                                      okPuedeMoverse:
  1853 00001D03 B801000000                      mov rax, 1
  1854 00001D08 C3                              ret
  1855                                  
  1856                                  ofic1Desentendido:
  1857 00001D09 48833C25[D0080000]-         cmp qword[casillaOfic1], 0
  1857 00001D11 00                 
  1858 00001D12 7406                        je el1EstaDesentendido
  1859                                  
  1860 00001D14 B801000000                  mov rax, 1
  1861 00001D19 C3                          ret
  1862                                  
  1863                                      el1EstaDesentendido:
  1864 00001D1A B800000000                      mov rax, 0
  1865 00001D1F C3                              ret
  1866                                  
  1867                                  ofic2Desentendido:
  1868 00001D20 48833C25[E0080000]-         cmp qword[casillaOfic2], 0
  1868 00001D28 00                 
  1869 00001D29 7406                        je el2EstaDesentendido
  1870                                  
  1871 00001D2B B801000000                  mov rax, 1
  1872 00001D30 C3                          ret
  1873                                  
  1874                                      el2EstaDesentendido:
  1875 00001D31 B800000000                      mov rax, 0
  1876 00001D36 C3                              ret
  1877                                  
  1878                                  ; --------------------------------------------------------------------------------------------
  1879                                  ; RUTINAS PARA TERMINAR EL JUEGO Y MOSTRAR LAS ESTADÍSTICAS
  1880                                  ; --------------------------------------------------------------------------------------------
  1881                                  
  1882                                  finDeJuego:
  1883                                      mCommand cmdBorrarArchivoPartida
    24 00001D37 48BF-               <1>  mov rdi, %1
    24 00001D39 [2609000000000000]  <1>
    25 00001D41 4883EC08            <1>  sub rsp, 8
    26 00001D45 E8(00000000)        <1>  call system
    27 00001D4A 4883C408            <1>  add rsp, 8
  1884                                      mCommand cmdLimpiarPantalla
    24 00001D4E 48BF-               <1>  mov rdi, %1
    24 00001D50 [0609000000000000]  <1>
    25 00001D58 4883EC08            <1>  sub rsp, 8
    26 00001D5C E8(00000000)        <1>  call system
    27 00001D61 4883C408            <1>  add rsp, 8
  1885                                      mPuts msgJuegoTerminado
     2 00001D65 48BF-               <1>  mov rdi, %1
     2 00001D67 [4504000000000000]  <1>
     3 00001D6F 4883EC08            <1>  sub rsp, 8
     4 00001D73 E8(00000000)        <1>  call puts
     5 00001D78 4883C408            <1>  add rsp, 8
  1886                                  
  1887 00001D7C 813C25[A4040000]73-         cmp dword[varRazonFin], "sOcu"
  1887 00001D84 4F6375             
  1888 00001D87 7430                        je soldadosFortaleza
  1889                                  
  1890 00001D89 813C25[A4040000]6F-         cmp dword[varRazonFin], "oRod"
  1890 00001D91 526F64             
  1891 00001D94 746A                        je soldadosRodeanOficiales
  1892                                  
  1893 00001D96 813C25[A4040000]6F-         cmp dword[varRazonFin], "oInv"
  1893 00001D9E 496E76             
  1894 00001DA1 0F84A0000000                je oficialesInvalidados
  1895                                  
  1896 00001DA7 813C25[A4040000]73-         cmp dword[varRazonFin], "sCap"
  1896 00001DAF 436170             
  1897 00001DB2 0F84D3000000                je soldadosCapturados
  1898                                  
  1899 00001DB8 C3                          ret
  1900                                  
  1901                                      soldadosFortaleza:
  1902                                          mPrint msgGanador, stringSoldados
     9 00001DB9 48BF-               <1>  mov rdi, %1
     9 00001DBB [5F04000000000000]  <1>
    10 00001DC3 48BE-               <1>  mov rsi, %2
    10 00001DC5 [8504000000000000]  <1>
    11 00001DCD 4883EC08            <1>  sub rsp, 8
    12 00001DD1 E8(00000000)        <1>  call printf
    13 00001DD6 4883C408            <1>  add rsp, 8
  1903                                          mPrint msgRazonGanador, msgSoldadosFortaleza
     9 00001DDA 48BF-               <1>  mov rdi, %1
     9 00001DDC [9804000000000000]  <1>
    10 00001DE4 48BE-               <1>  mov rsi, %2
    10 00001DE6 [BD05000000000000]  <1>
    11 00001DEE 4883EC08            <1>  sub rsp, 8
    12 00001DF2 E8(00000000)        <1>  call printf
    13 00001DF7 4883C408            <1>  add rsp, 8
  1904 00001DFB E9CF000000                      jmp mostrarEstadisticas
  1905                                  
  1906                                      soldadosRodeanOficiales:
  1907                                          mPrint msgGanador, stringSoldados
     9 00001E00 48BF-               <1>  mov rdi, %1
     9 00001E02 [5F04000000000000]  <1>
    10 00001E0A 48BE-               <1>  mov rsi, %2
    10 00001E0C [8504000000000000]  <1>
    11 00001E14 4883EC08            <1>  sub rsp, 8
    12 00001E18 E8(00000000)        <1>  call printf
    13 00001E1D 4883C408            <1>  add rsp, 8
  1908                                          mPrint msgRazonGanador, msgSoldadosRodean
     9 00001E21 48BF-               <1>  mov rdi, %1
     9 00001E23 [9804000000000000]  <1>
    10 00001E2B 48BE-               <1>  mov rsi, %2
    10 00001E2D [F805000000000000]  <1>
    11 00001E35 4883EC08            <1>  sub rsp, 8
    12 00001E39 E8(00000000)        <1>  call printf
    13 00001E3E 4883C408            <1>  add rsp, 8
  1909 00001E42 E988000000                      jmp mostrarEstadisticas
  1910                                  
  1911                                      oficialesInvalidados:
  1912                                          mPrint msgGanador, stringSoldados
     9 00001E47 48BF-               <1>  mov rdi, %1
     9 00001E49 [5F04000000000000]  <1>
    10 00001E51 48BE-               <1>  mov rsi, %2
    10 00001E53 [8504000000000000]  <1>
    11 00001E5B 4883EC08            <1>  sub rsp, 8
    12 00001E5F E8(00000000)        <1>  call printf
    13 00001E64 4883C408            <1>  add rsp, 8
  1913                                          mPrint msgRazonGanador, msgSoldadosInvalidar
     9 00001E68 48BF-               <1>  mov rdi, %1
     9 00001E6A [9804000000000000]  <1>
    10 00001E72 48BE-               <1>  mov rsi, %2
    10 00001E74 [2206000000000000]  <1>
    11 00001E7C 4883EC08            <1>  sub rsp, 8
    12 00001E80 E8(00000000)        <1>  call printf
    13 00001E85 4883C408            <1>  add rsp, 8
  1914 00001E89 EB44                            jmp mostrarEstadisticas
  1915                                  
  1916                                      soldadosCapturados:
  1917                                          mPrint msgGanador, stringOficiales
     9 00001E8B 48BF-               <1>  mov rdi, %1
     9 00001E8D [5F04000000000000]  <1>
    10 00001E95 48BE-               <1>  mov rsi, %2
    10 00001E97 [8E04000000000000]  <1>
    11 00001E9F 4883EC08            <1>  sub rsp, 8
    12 00001EA3 E8(00000000)        <1>  call printf
    13 00001EA8 4883C408            <1>  add rsp, 8
  1918                                          mPrint msgRazonGanador, msgOficialesGanan
     9 00001EAC 48BF-               <1>  mov rdi, %1
     9 00001EAE [9804000000000000]  <1>
    10 00001EB6 48BE-               <1>  mov rsi, %2
    10 00001EB8 [4806000000000000]  <1>
    11 00001EC0 4883EC08            <1>  sub rsp, 8
    12 00001EC4 E8(00000000)        <1>  call printf
    13 00001EC9 4883C408            <1>  add rsp, 8
  1919 00001ECD EB00                            jmp mostrarEstadisticas
  1920                                  
  1921                                  
  1922                                  mostrarEstadisticas:
  1923                                      mPuts msgEstadisticas
     2 00001ECF 48BF-               <1>  mov rdi, %1
     2 00001ED1 [D502000000000000]  <1>
     3 00001ED9 4883EC08            <1>  sub rsp, 8
     4 00001EDD E8(00000000)        <1>  call puts
     5 00001EE2 4883C408            <1>  add rsp, 8
  1924                                  
  1925                                      mPrint msgCantTotalCapturas, qword[cantSoldCapturados]
     9 00001EE6 48BF-               <1>  mov rdi, %1
     9 00001EE8 [F602000000000000]  <1>
    10 00001EF0 488B3425[C0080000]  <1>  mov rsi, %2
    11 00001EF8 4883EC08            <1>  sub rsp, 8
    12 00001EFC E8(00000000)        <1>  call printf
    13 00001F01 4883C408            <1>  add rsp, 8
  1926                                  
  1927                                      ; Estadísticas del oficial 1
  1928                                      mPuts msgOficial1
     2 00001F05 48BF-               <1>  mov rdi, %1
     2 00001F07 [1703000000000000]  <1>
     3 00001F0F 4883EC08            <1>  sub rsp, 8
     4 00001F13 E8(00000000)        <1>  call puts
     5 00001F18 4883C408            <1>  add rsp, 8
  1929                                      mPrint msgCantMovimientos, qword[movimientosOfic1]
     9 00001F1C 48BF-               <1>  mov rdi, %1
     9 00001F1E [2F03000000000000]  <1>
    10 00001F26 488B3425[20080000]  <1>  mov rsi, %2
    11 00001F2E 4883EC08            <1>  sub rsp, 8
    12 00001F32 E8(00000000)        <1>  call printf
    13 00001F37 4883C408            <1>  add rsp, 8
  1930                                      mPrint msgCantAdelante, qword[movOfic1Adelante]
     9 00001F3B 48BF-               <1>  mov rdi, %1
     9 00001F3D [4803000000000000]  <1>
    10 00001F45 488B3425[30080000]  <1>  mov rsi, %2
    11 00001F4D 4883EC08            <1>  sub rsp, 8
    12 00001F51 E8(00000000)        <1>  call printf
    13 00001F56 4883C408            <1>  add rsp, 8
  1931                                      mPrint msgCantDerecha, qword[movOfic1Derecha]
     9 00001F5A 48BF-               <1>  mov rdi, %1
     9 00001F5C [5E03000000000000]  <1>
    10 00001F64 488B3425[38080000]  <1>  mov rsi, %2
    11 00001F6C 4883EC08            <1>  sub rsp, 8
    12 00001F70 E8(00000000)        <1>  call printf
    13 00001F75 4883C408            <1>  add rsp, 8
  1932                                      mPrint msgCantIzquierda, qword[movOfic1Izquierda]
     9 00001F79 48BF-               <1>  mov rdi, %1
     9 00001F7B [7603000000000000]  <1>
    10 00001F83 488B3425[40080000]  <1>  mov rsi, %2
    11 00001F8B 4883EC08            <1>  sub rsp, 8
    12 00001F8F E8(00000000)        <1>  call printf
    13 00001F94 4883C408            <1>  add rsp, 8
  1933                                      mPrint msgCantAtras, qword[movOfic1Atras]
     9 00001F98 48BF-               <1>  mov rdi, %1
     9 00001F9A [9003000000000000]  <1>
    10 00001FA2 488B3425[48080000]  <1>  mov rsi, %2
    11 00001FAA 4883EC08            <1>  sub rsp, 8
    12 00001FAE E8(00000000)        <1>  call printf
    13 00001FB3 4883C408            <1>  add rsp, 8
  1934                                      mPrint msgCantDiagonal, qword[movOfic1Diagonal]
     9 00001FB7 48BF-               <1>  mov rdi, %1
     9 00001FB9 [A403000000000000]  <1>
    10 00001FC1 488B3425[50080000]  <1>  mov rsi, %2
    11 00001FC9 4883EC08            <1>  sub rsp, 8
    12 00001FCD E8(00000000)        <1>  call printf
    13 00001FD2 4883C408            <1>  add rsp, 8
  1935                                      mPrint msgCantDiagArribaDer, qword[movOfic1DiagArribaDer]
     9 00001FD6 48BF-               <1>  mov rdi, %1
     9 00001FD8 [B703000000000000]  <1>
    10 00001FE0 488B3425[58080000]  <1>  mov rsi, %2
    11 00001FE8 4883EC08            <1>  sub rsp, 8
    12 00001FEC E8(00000000)        <1>  call printf
    13 00001FF1 4883C408            <1>  add rsp, 8
  1936                                      mPrint msgCantDiagArribaIzq, qword[movOfic1DiagArribaIzq]
     9 00001FF5 48BF-               <1>  mov rdi, %1
     9 00001FF7 [D103000000000000]  <1>
    10 00001FFF 488B3425[60080000]  <1>  mov rsi, %2
    11 00002007 4883EC08            <1>  sub rsp, 8
    12 0000200B E8(00000000)        <1>  call printf
    13 00002010 4883C408            <1>  add rsp, 8
  1937                                      mPrint msgCantDiagAbajoDer, qword[movOfic1DiagAbajoDer]
     9 00002014 48BF-               <1>  mov rdi, %1
     9 00002016 [ED03000000000000]  <1>
    10 0000201E 488B3425[68080000]  <1>  mov rsi, %2
    11 00002026 4883EC08            <1>  sub rsp, 8
    12 0000202A E8(00000000)        <1>  call printf
    13 0000202F 4883C408            <1>  add rsp, 8
  1938                                      mPrint msgCantDiagAbajoIzq, qword[movOfic1DiagAbajoIzq]
     9 00002033 48BF-               <1>  mov rdi, %1
     9 00002035 [0504000000000000]  <1>
    10 0000203D 488B3425[70080000]  <1>  mov rsi, %2
    11 00002045 4883EC08            <1>  sub rsp, 8
    12 00002049 E8(00000000)        <1>  call printf
    13 0000204E 4883C408            <1>  add rsp, 8
  1939                                      mPrint msgCantSoldadosCapt, qword[cantCapturasOfic1]
     9 00002052 48BF-               <1>  mov rdi, %1
     9 00002054 [1F04000000000000]  <1>
    10 0000205C 488B3425[F0080000]  <1>  mov rsi, %2
    11 00002064 4883EC08            <1>  sub rsp, 8
    12 00002068 E8(00000000)        <1>  call printf
    13 0000206D 4883C408            <1>  add rsp, 8
  1940                                  
  1941                                      ; Estadísticas del oficial 2
  1942                                      mPuts msgOficial2
     2 00002071 48BF-               <1>  mov rdi, %1
     2 00002073 [2303000000000000]  <1>
     3 0000207B 4883EC08            <1>  sub rsp, 8
     4 0000207F E8(00000000)        <1>  call puts
     5 00002084 4883C408            <1>  add rsp, 8
  1943                                      mPrint msgCantMovimientos, qword[movimientosOfic2]
     9 00002088 48BF-               <1>  mov rdi, %1
     9 0000208A [2F03000000000000]  <1>
    10 00002092 488B3425[28080000]  <1>  mov rsi, %2
    11 0000209A 4883EC08            <1>  sub rsp, 8
    12 0000209E E8(00000000)        <1>  call printf
    13 000020A3 4883C408            <1>  add rsp, 8
  1944                                      mPrint msgCantAdelante, qword[movOfic2Adelante]
     9 000020A7 48BF-               <1>  mov rdi, %1
     9 000020A9 [4803000000000000]  <1>
    10 000020B1 488B3425[78080000]  <1>  mov rsi, %2
    11 000020B9 4883EC08            <1>  sub rsp, 8
    12 000020BD E8(00000000)        <1>  call printf
    13 000020C2 4883C408            <1>  add rsp, 8
  1945                                      mPrint msgCantDerecha, qword[movOfic2Derecha]
     9 000020C6 48BF-               <1>  mov rdi, %1
     9 000020C8 [5E03000000000000]  <1>
    10 000020D0 488B3425[80080000]  <1>  mov rsi, %2
    11 000020D8 4883EC08            <1>  sub rsp, 8
    12 000020DC E8(00000000)        <1>  call printf
    13 000020E1 4883C408            <1>  add rsp, 8
  1946                                      mPrint msgCantIzquierda, qword[movOfic2Izquierda]
     9 000020E5 48BF-               <1>  mov rdi, %1
     9 000020E7 [7603000000000000]  <1>
    10 000020EF 488B3425[88080000]  <1>  mov rsi, %2
    11 000020F7 4883EC08            <1>  sub rsp, 8
    12 000020FB E8(00000000)        <1>  call printf
    13 00002100 4883C408            <1>  add rsp, 8
  1947                                      mPrint msgCantAtras, qword[movOfic2Atras]
     9 00002104 48BF-               <1>  mov rdi, %1
     9 00002106 [9003000000000000]  <1>
    10 0000210E 488B3425[90080000]  <1>  mov rsi, %2
    11 00002116 4883EC08            <1>  sub rsp, 8
    12 0000211A E8(00000000)        <1>  call printf
    13 0000211F 4883C408            <1>  add rsp, 8
  1948                                      mPrint msgCantDiagonal, qword[movOfic2Diagonal]
     9 00002123 48BF-               <1>  mov rdi, %1
     9 00002125 [A403000000000000]  <1>
    10 0000212D 488B3425[98080000]  <1>  mov rsi, %2
    11 00002135 4883EC08            <1>  sub rsp, 8
    12 00002139 E8(00000000)        <1>  call printf
    13 0000213E 4883C408            <1>  add rsp, 8
  1949                                      mPrint msgCantDiagArribaDer, qword[movOfic2DiagArribaDer]
     9 00002142 48BF-               <1>  mov rdi, %1
     9 00002144 [B703000000000000]  <1>
    10 0000214C 488B3425[A0080000]  <1>  mov rsi, %2
    11 00002154 4883EC08            <1>  sub rsp, 8
    12 00002158 E8(00000000)        <1>  call printf
    13 0000215D 4883C408            <1>  add rsp, 8
  1950                                      mPrint msgCantDiagArribaIzq, qword[movOfic2DiagArribaIzq]
     9 00002161 48BF-               <1>  mov rdi, %1
     9 00002163 [D103000000000000]  <1>
    10 0000216B 488B3425[A8080000]  <1>  mov rsi, %2
    11 00002173 4883EC08            <1>  sub rsp, 8
    12 00002177 E8(00000000)        <1>  call printf
    13 0000217C 4883C408            <1>  add rsp, 8
  1951                                      mPrint msgCantDiagAbajoDer, qword[movOfic2DiagAbajoDer]
     9 00002180 48BF-               <1>  mov rdi, %1
     9 00002182 [ED03000000000000]  <1>
    10 0000218A 488B3425[B0080000]  <1>  mov rsi, %2
    11 00002192 4883EC08            <1>  sub rsp, 8
    12 00002196 E8(00000000)        <1>  call printf
    13 0000219B 4883C408            <1>  add rsp, 8
  1952                                      mPrint msgCantDiagAbajoIzq, qword[movOfic2DiagAbajoIzq]
     9 0000219F 48BF-               <1>  mov rdi, %1
     9 000021A1 [0504000000000000]  <1>
    10 000021A9 488B3425[B8080000]  <1>  mov rsi, %2
    11 000021B1 4883EC08            <1>  sub rsp, 8
    12 000021B5 E8(00000000)        <1>  call printf
    13 000021BA 4883C408            <1>  add rsp, 8
  1953                                      mPrint msgCantSoldadosCapt, qword[cantCapturasOfic2]
     9 000021BE 48BF-               <1>  mov rdi, %1
     9 000021C0 [1F04000000000000]  <1>
    10 000021C8 488B3425[F8080000]  <1>  mov rsi, %2
    11 000021D0 4883EC08            <1>  sub rsp, 8
    12 000021D4 E8(00000000)        <1>  call printf
    13 000021D9 4883C408            <1>  add rsp, 8
  1954                                  
  1955 000021DD EB00                        jmp salirSinGuardar
  1956                                  
  1957                                  ; --------------------------------------------------------------------------------------------
  1958                                  ; RUTINAS PARA SALIR DEL JUEGO (guardando o no la partida)
  1959                                  ; --------------------------------------------------------------------------------------------
  1960                                  
  1961                                  salirSinGuardar:
  1962 000021DF B800000000                  mov rax, 0
  1963 000021E4 C3                          ret
  1964                                  
  1965                                  salirDelJuego:
  1966                                      mCommand cmdLimpiarPantalla
    24 000021E5 48BF-               <1>  mov rdi, %1
    24 000021E7 [0609000000000000]  <1>
    25 000021EF 4883EC08            <1>  sub rsp, 8
    26 000021F3 E8(00000000)        <1>  call system
    27 000021F8 4883C408            <1>  add rsp, 8
  1967                                  
  1968                                      mPuts msgSalidaPartida
     2 000021FC 48BF-               <1>  mov rdi, %1
     2 000021FE [A904000000000000]  <1>
     3 00002206 4883EC08            <1>  sub rsp, 8
     4 0000220A E8(00000000)        <1>  call puts
     5 0000220F 4883C408            <1>  add rsp, 8
  1969                                      mPuts msgAclaracionSalida
     2 00002213 48BF-               <1>  mov rdi, %1
     2 00002215 [E604000000000000]  <1>
     3 0000221D 4883EC08            <1>  sub rsp, 8
     4 00002221 E8(00000000)        <1>  call puts
     5 00002226 4883C408            <1>  add rsp, 8
  1970                                  
  1971                                      recibirOpcionGuardado:
  1972                                          mGets guardadoPartida
    17 0000222A 48BF-               <1>  mov rdi, %1
    17 0000222C [7D05000000000000]  <1>
    18 00002234 4883EC08            <1>  sub rsp, 8
    19 00002238 E8(00000000)        <1>  call gets
    20 0000223D 4883C408            <1>  add rsp, 8
  1973                                  
  1974 00002241 803C25[7E050000]00          cmp byte[guardadoPartida+1], 0
  1975 00002249 7514                        jne guardadoInvalido
  1976                                  
  1977 0000224B 803C25[7D050000]73          cmp byte[guardadoPartida], 's'
  1978 00002253 7455                        je guardarPartida
  1979                                  
  1980 00002255 803C25[7D050000]6E          cmp byte[guardadoPartida], 'n'
  1981 0000225D 7419                        je removerArchivo
  1982                                  
  1983                                      guardadoInvalido:
  1984                                          mPuts msgOpcionInvalida
     2 0000225F 48BF-               <1>  mov rdi, %1
     2 00002261 [A100000000000000]  <1>
     3 00002269 4883EC08            <1>  sub rsp, 8
     4 0000226D E8(00000000)        <1>  call puts
     5 00002272 4883C408            <1>  add rsp, 8
  1985 00002276 EBB2                            jmp recibirOpcionGuardado
  1986                                  
  1987                                      removerArchivo:
  1988 00002278 803C25[7F050000]73              cmp byte[yaHabiaGuardado], 's' ; Si ya había guardado la partida, la borramos
  1989 00002280 0F8559FFFFFF                    jne salirSinGuardar
  1990                                          
  1991                                          mCommand cmdBorrarArchivoPartida
    24 00002286 48BF-               <1>  mov rdi, %1
    24 00002288 [2609000000000000]  <1>
    25 00002290 4883EC08            <1>  sub rsp, 8
    26 00002294 E8(00000000)        <1>  call system
    27 00002299 4883C408            <1>  add rsp, 8
  1992 0000229D C60425[7F050000]6E              mov byte[yaHabiaGuardado], 'n' ; Para la próxima vez que se quiera salir, no se borra nada
  1993 000022A5 E935FFFFFF                      jmp salirSinGuardar
  1994                                  
  1995                                  
  1996                                  guardarPartida:
  1997 000022AA C60425[7F050000]73          mov byte[yaHabiaGuardado], 's'
  1998                                      mOpenFile nombreArchivo, modoEscritura
   112 000022B2 48BF-               <1>  mov rdi, %1
   112 000022B4 [6A09000000000000]  <1>
   113 000022BC 48BE-               <1>  mov rsi, %2
   113 000022BE [6409000000000000]  <1>
   114 000022C6 4883EC08            <1>  sub rsp, 8
   115 000022CA E8(00000000)        <1>  call fopen
   116 000022CF 4883C408            <1>  add rsp, 8
   117                              <1> 
   118 000022D3 4883F800            <1>  cmp rax, 0
   119 000022D7 48890425[D8000000]  <1>  mov qword[idArchGuardado], rax
  1999 000022DF E82D000000                  call agregarDatosPartida
  2000                                      mCloseFile idArchGuardado
   123 000022E4 488B3C25[D8000000]  <1>  mov rdi, [%1]
   124 000022EC 4883EC08            <1>  sub rsp, 8
   125 000022F0 E8(00000000)        <1>  call fclose
   126 000022F5 4883C408            <1>  add rsp, 8
  2001                                  
  2002                                      mPuts msgPartidaGuardada
     2 000022F9 48BF-               <1>  mov rdi, %1
     2 000022FB [8305000000000000]  <1>
     3 00002303 4883EC08            <1>  sub rsp, 8
     4 00002307 E8(00000000)        <1>  call puts
     5 0000230C 4883C408            <1>  add rsp, 8
  2003 00002310 C3                          ret    
  2004                                  
  2005                                  agregarDatosPartida:
  2006                                      mWriteLine tableroEnJuego, 116, 1
   140 00002311 48BF-               <1>  mov rdi, %1
   140 00002313 [0400000000000000]  <1>
   141 0000231B BE74000000          <1>  mov rsi, %2
   142 00002320 BA01000000          <1>  mov rdx, %3
   143 00002325 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 0000232D 4883EC08            <1>  sub rsp, 8
   145 00002331 E8(00000000)        <1>  call fwrite
   146 00002336 4883C408            <1>  add rsp, 8
  2007                                  
  2008                                      mWriteLine yaHabiaGuardado, 1, 1 ; Guardamos si ya había guardado la partida
   140 0000233A 48BF-               <1>  mov rdi, %1
   140 0000233C [7F05000000000000]  <1>
   141 00002344 BE01000000          <1>  mov rsi, %2
   142 00002349 BA01000000          <1>  mov rdx, %3
   143 0000234E 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002356 4883EC08            <1>  sub rsp, 8
   145 0000235A E8(00000000)        <1>  call fwrite
   146 0000235F 4883C408            <1>  add rsp, 8
  2009                                  
  2010                                      mWriteLine turnoDe, 1, 1 ; Guardamos el turno actual
   140 00002363 48BF-               <1>  mov rdi, %1
   140 00002365 [8105000000000000]  <1>
   141 0000236D BE01000000          <1>  mov rsi, %2
   142 00002372 BA01000000          <1>  mov rdx, %3
   143 00002377 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 0000237F 4883EC08            <1>  sub rsp, 8
   145 00002383 E8(00000000)        <1>  call fwrite
   146 00002388 4883C408            <1>  add rsp, 8
  2011                                  
  2012                                      mWriteLine movimientosOfic1, 8, 1
   140 0000238C 48BF-               <1>  mov rdi, %1
   140 0000238E [2008000000000000]  <1>
   141 00002396 BE08000000          <1>  mov rsi, %2
   142 0000239B BA01000000          <1>  mov rdx, %3
   143 000023A0 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000023A8 4883EC08            <1>  sub rsp, 8
   145 000023AC E8(00000000)        <1>  call fwrite
   146 000023B1 4883C408            <1>  add rsp, 8
  2013                                      mWriteLine movimientosOfic2, 8, 1
   140 000023B5 48BF-               <1>  mov rdi, %1
   140 000023B7 [2808000000000000]  <1>
   141 000023BF BE08000000          <1>  mov rsi, %2
   142 000023C4 BA01000000          <1>  mov rdx, %3
   143 000023C9 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000023D1 4883EC08            <1>  sub rsp, 8
   145 000023D5 E8(00000000)        <1>  call fwrite
   146 000023DA 4883C408            <1>  add rsp, 8
  2014                                  
  2015                                      mWriteLine movOfic1Adelante, 8, 1
   140 000023DE 48BF-               <1>  mov rdi, %1
   140 000023E0 [3008000000000000]  <1>
   141 000023E8 BE08000000          <1>  mov rsi, %2
   142 000023ED BA01000000          <1>  mov rdx, %3
   143 000023F2 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000023FA 4883EC08            <1>  sub rsp, 8
   145 000023FE E8(00000000)        <1>  call fwrite
   146 00002403 4883C408            <1>  add rsp, 8
  2016                                      mWriteLine movOfic1Derecha, 8, 1
   140 00002407 48BF-               <1>  mov rdi, %1
   140 00002409 [3808000000000000]  <1>
   141 00002411 BE08000000          <1>  mov rsi, %2
   142 00002416 BA01000000          <1>  mov rdx, %3
   143 0000241B 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002423 4883EC08            <1>  sub rsp, 8
   145 00002427 E8(00000000)        <1>  call fwrite
   146 0000242C 4883C408            <1>  add rsp, 8
  2017                                      mWriteLine movOfic1Izquierda, 8, 1
   140 00002430 48BF-               <1>  mov rdi, %1
   140 00002432 [4008000000000000]  <1>
   141 0000243A BE08000000          <1>  mov rsi, %2
   142 0000243F BA01000000          <1>  mov rdx, %3
   143 00002444 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 0000244C 4883EC08            <1>  sub rsp, 8
   145 00002450 E8(00000000)        <1>  call fwrite
   146 00002455 4883C408            <1>  add rsp, 8
  2018                                      mWriteLine movOfic1Atras, 8, 1
   140 00002459 48BF-               <1>  mov rdi, %1
   140 0000245B [4808000000000000]  <1>
   141 00002463 BE08000000          <1>  mov rsi, %2
   142 00002468 BA01000000          <1>  mov rdx, %3
   143 0000246D 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002475 4883EC08            <1>  sub rsp, 8
   145 00002479 E8(00000000)        <1>  call fwrite
   146 0000247E 4883C408            <1>  add rsp, 8
  2019                                      mWriteLine movOfic1Diagonal, 8, 1
   140 00002482 48BF-               <1>  mov rdi, %1
   140 00002484 [5008000000000000]  <1>
   141 0000248C BE08000000          <1>  mov rsi, %2
   142 00002491 BA01000000          <1>  mov rdx, %3
   143 00002496 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 0000249E 4883EC08            <1>  sub rsp, 8
   145 000024A2 E8(00000000)        <1>  call fwrite
   146 000024A7 4883C408            <1>  add rsp, 8
  2020                                      mWriteLine movOfic1DiagArribaDer, 8, 1
   140 000024AB 48BF-               <1>  mov rdi, %1
   140 000024AD [5808000000000000]  <1>
   141 000024B5 BE08000000          <1>  mov rsi, %2
   142 000024BA BA01000000          <1>  mov rdx, %3
   143 000024BF 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000024C7 4883EC08            <1>  sub rsp, 8
   145 000024CB E8(00000000)        <1>  call fwrite
   146 000024D0 4883C408            <1>  add rsp, 8
  2021                                      mWriteLine movOfic1DiagArribaIzq, 8, 1
   140 000024D4 48BF-               <1>  mov rdi, %1
   140 000024D6 [6008000000000000]  <1>
   141 000024DE BE08000000          <1>  mov rsi, %2
   142 000024E3 BA01000000          <1>  mov rdx, %3
   143 000024E8 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000024F0 4883EC08            <1>  sub rsp, 8
   145 000024F4 E8(00000000)        <1>  call fwrite
   146 000024F9 4883C408            <1>  add rsp, 8
  2022                                      mWriteLine movOfic1DiagAbajoDer, 8, 1
   140 000024FD 48BF-               <1>  mov rdi, %1
   140 000024FF [6808000000000000]  <1>
   141 00002507 BE08000000          <1>  mov rsi, %2
   142 0000250C BA01000000          <1>  mov rdx, %3
   143 00002511 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002519 4883EC08            <1>  sub rsp, 8
   145 0000251D E8(00000000)        <1>  call fwrite
   146 00002522 4883C408            <1>  add rsp, 8
  2023                                      mWriteLine movOfic1DiagAbajoIzq, 8, 1
   140 00002526 48BF-               <1>  mov rdi, %1
   140 00002528 [7008000000000000]  <1>
   141 00002530 BE08000000          <1>  mov rsi, %2
   142 00002535 BA01000000          <1>  mov rdx, %3
   143 0000253A 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002542 4883EC08            <1>  sub rsp, 8
   145 00002546 E8(00000000)        <1>  call fwrite
   146 0000254B 4883C408            <1>  add rsp, 8
  2024                                  
  2025                                      mWriteLine movOfic2Adelante, 8, 1
   140 0000254F 48BF-               <1>  mov rdi, %1
   140 00002551 [7808000000000000]  <1>
   141 00002559 BE08000000          <1>  mov rsi, %2
   142 0000255E BA01000000          <1>  mov rdx, %3
   143 00002563 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 0000256B 4883EC08            <1>  sub rsp, 8
   145 0000256F E8(00000000)        <1>  call fwrite
   146 00002574 4883C408            <1>  add rsp, 8
  2026                                      mWriteLine movOfic2Derecha, 8, 1
   140 00002578 48BF-               <1>  mov rdi, %1
   140 0000257A [8008000000000000]  <1>
   141 00002582 BE08000000          <1>  mov rsi, %2
   142 00002587 BA01000000          <1>  mov rdx, %3
   143 0000258C 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002594 4883EC08            <1>  sub rsp, 8
   145 00002598 E8(00000000)        <1>  call fwrite
   146 0000259D 4883C408            <1>  add rsp, 8
  2027                                      mWriteLine movOfic2Izquierda, 8, 1
   140 000025A1 48BF-               <1>  mov rdi, %1
   140 000025A3 [8808000000000000]  <1>
   141 000025AB BE08000000          <1>  mov rsi, %2
   142 000025B0 BA01000000          <1>  mov rdx, %3
   143 000025B5 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000025BD 4883EC08            <1>  sub rsp, 8
   145 000025C1 E8(00000000)        <1>  call fwrite
   146 000025C6 4883C408            <1>  add rsp, 8
  2028                                      mWriteLine movOfic2Atras, 8, 1
   140 000025CA 48BF-               <1>  mov rdi, %1
   140 000025CC [9008000000000000]  <1>
   141 000025D4 BE08000000          <1>  mov rsi, %2
   142 000025D9 BA01000000          <1>  mov rdx, %3
   143 000025DE 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000025E6 4883EC08            <1>  sub rsp, 8
   145 000025EA E8(00000000)        <1>  call fwrite
   146 000025EF 4883C408            <1>  add rsp, 8
  2029                                      mWriteLine movOfic2Diagonal, 8, 1
   140 000025F3 48BF-               <1>  mov rdi, %1
   140 000025F5 [9808000000000000]  <1>
   141 000025FD BE08000000          <1>  mov rsi, %2
   142 00002602 BA01000000          <1>  mov rdx, %3
   143 00002607 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 0000260F 4883EC08            <1>  sub rsp, 8
   145 00002613 E8(00000000)        <1>  call fwrite
   146 00002618 4883C408            <1>  add rsp, 8
  2030                                      mWriteLine movOfic2DiagArribaDer, 8, 1
   140 0000261C 48BF-               <1>  mov rdi, %1
   140 0000261E [A008000000000000]  <1>
   141 00002626 BE08000000          <1>  mov rsi, %2
   142 0000262B BA01000000          <1>  mov rdx, %3
   143 00002630 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002638 4883EC08            <1>  sub rsp, 8
   145 0000263C E8(00000000)        <1>  call fwrite
   146 00002641 4883C408            <1>  add rsp, 8
  2031                                      mWriteLine movOfic2DiagArribaIzq, 8, 1
   140 00002645 48BF-               <1>  mov rdi, %1
   140 00002647 [A808000000000000]  <1>
   141 0000264F BE08000000          <1>  mov rsi, %2
   142 00002654 BA01000000          <1>  mov rdx, %3
   143 00002659 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002661 4883EC08            <1>  sub rsp, 8
   145 00002665 E8(00000000)        <1>  call fwrite
   146 0000266A 4883C408            <1>  add rsp, 8
  2032                                      mWriteLine movOfic2DiagAbajoDer, 8, 1
   140 0000266E 48BF-               <1>  mov rdi, %1
   140 00002670 [B008000000000000]  <1>
   141 00002678 BE08000000          <1>  mov rsi, %2
   142 0000267D BA01000000          <1>  mov rdx, %3
   143 00002682 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 0000268A 4883EC08            <1>  sub rsp, 8
   145 0000268E E8(00000000)        <1>  call fwrite
   146 00002693 4883C408            <1>  add rsp, 8
  2033                                      mWriteLine movOfic2DiagAbajoIzq, 8, 1
   140 00002697 48BF-               <1>  mov rdi, %1
   140 00002699 [B808000000000000]  <1>
   141 000026A1 BE08000000          <1>  mov rsi, %2
   142 000026A6 BA01000000          <1>  mov rdx, %3
   143 000026AB 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000026B3 4883EC08            <1>  sub rsp, 8
   145 000026B7 E8(00000000)        <1>  call fwrite
   146 000026BC 4883C408            <1>  add rsp, 8
  2034                                  
  2035                                      mWriteLine cantSoldCapturados, 8, 1
   140 000026C0 48BF-               <1>  mov rdi, %1
   140 000026C2 [C008000000000000]  <1>
   141 000026CA BE08000000          <1>  mov rsi, %2
   142 000026CF BA01000000          <1>  mov rdx, %3
   143 000026D4 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000026DC 4883EC08            <1>  sub rsp, 8
   145 000026E0 E8(00000000)        <1>  call fwrite
   146 000026E5 4883C408            <1>  add rsp, 8
  2036                                      mWriteLine cantOficInvalidados, 8, 1
   140 000026E9 48BF-               <1>  mov rdi, %1
   140 000026EB [C808000000000000]  <1>
   141 000026F3 BE08000000          <1>  mov rsi, %2
   142 000026F8 BA01000000          <1>  mov rdx, %3
   143 000026FD 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002705 4883EC08            <1>  sub rsp, 8
   145 00002709 E8(00000000)        <1>  call fwrite
   146 0000270E 4883C408            <1>  add rsp, 8
  2037                                  
  2038                                      mWriteLine casillaOfic1, 8, 1
   140 00002712 48BF-               <1>  mov rdi, %1
   140 00002714 [D008000000000000]  <1>
   141 0000271C BE08000000          <1>  mov rsi, %2
   142 00002721 BA01000000          <1>  mov rdx, %3
   143 00002726 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 0000272E 4883EC08            <1>  sub rsp, 8
   145 00002732 E8(00000000)        <1>  call fwrite
   146 00002737 4883C408            <1>  add rsp, 8
  2039                                      mWriteLine casillaOfic1+8, 8, 1
   140 0000273B 48BF-               <1>  mov rdi, %1
   140 0000273D [D808000000000000]  <1>
   141 00002745 BE08000000          <1>  mov rsi, %2
   142 0000274A BA01000000          <1>  mov rdx, %3
   143 0000274F 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002757 4883EC08            <1>  sub rsp, 8
   145 0000275B E8(00000000)        <1>  call fwrite
   146 00002760 4883C408            <1>  add rsp, 8
  2040                                  
  2041                                      mWriteLine casillaOfic2, 8, 1
   140 00002764 48BF-               <1>  mov rdi, %1
   140 00002766 [E008000000000000]  <1>
   141 0000276E BE08000000          <1>  mov rsi, %2
   142 00002773 BA01000000          <1>  mov rdx, %3
   143 00002778 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 00002780 4883EC08            <1>  sub rsp, 8
   145 00002784 E8(00000000)        <1>  call fwrite
   146 00002789 4883C408            <1>  add rsp, 8
  2042                                      mWriteLine casillaOfic2+8, 8, 1
   140 0000278D 48BF-               <1>  mov rdi, %1
   140 0000278F [E808000000000000]  <1>
   141 00002797 BE08000000          <1>  mov rsi, %2
   142 0000279C BA01000000          <1>  mov rdx, %3
   143 000027A1 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000027A9 4883EC08            <1>  sub rsp, 8
   145 000027AD E8(00000000)        <1>  call fwrite
   146 000027B2 4883C408            <1>  add rsp, 8
  2043                                  
  2044                                      mWriteLine cantCapturasOfic1, 8, 1
   140 000027B6 48BF-               <1>  mov rdi, %1
   140 000027B8 [F008000000000000]  <1>
   141 000027C0 BE08000000          <1>  mov rsi, %2
   142 000027C5 BA01000000          <1>  mov rdx, %3
   143 000027CA 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000027D2 4883EC08            <1>  sub rsp, 8
   145 000027D6 E8(00000000)        <1>  call fwrite
   146 000027DB 4883C408            <1>  add rsp, 8
  2045                                      mWriteLine cantCapturasOfic2, 8, 1
   140 000027DF 48BF-               <1>  mov rdi, %1
   140 000027E1 [F808000000000000]  <1>
   141 000027E9 BE08000000          <1>  mov rsi, %2
   142 000027EE BA01000000          <1>  mov rdx, %3
   143 000027F3 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   144 000027FB 4883EC08            <1>  sub rsp, 8
   145 000027FF E8(00000000)        <1>  call fwrite
   146 00002804 4883C408            <1>  add rsp, 8
  2046                                  
  2047 00002808 C3                          ret
  2048                                  
  2049                                  ; --------------------------------------------------------------------------------------------
  2050                                  ; RUTINA PARA OBTENER LOS DATOS DE UNA PARTIDA GUARDADA
  2051                                  ; --------------------------------------------------------------------------------------------
  2052                                  
  2053                                  abrirPartidaGuardada:
  2054                                      ; Recreamos el tablero guardado
  2055                                      mReadLine tableroEnJuego, 116, 1
   130 00002809 48BF-               <1>  mov rdi, %1
   130 0000280B [0400000000000000]  <1>
   131 00002813 BE74000000          <1>  mov rsi, %2
   132 00002818 BA01000000          <1>  mov rdx, %3
   133 0000281D 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002825 4883EC08            <1>  sub rsp, 8
   135 00002829 E8(00000000)        <1>  call fread
   136 0000282E 4883C408            <1>  add rsp, 8
  2056                                  
  2057                                      mReadLine yaHabiaGuardado, 1, 1
   130 00002832 48BF-               <1>  mov rdi, %1
   130 00002834 [7F05000000000000]  <1>
   131 0000283C BE01000000          <1>  mov rsi, %2
   132 00002841 BA01000000          <1>  mov rdx, %3
   133 00002846 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 0000284E 4883EC08            <1>  sub rsp, 8
   135 00002852 E8(00000000)        <1>  call fread
   136 00002857 4883C408            <1>  add rsp, 8
  2058                                      mReadLine turnoDe, 1, 1
   130 0000285B 48BF-               <1>  mov rdi, %1
   130 0000285D [8105000000000000]  <1>
   131 00002865 BE01000000          <1>  mov rsi, %2
   132 0000286A BA01000000          <1>  mov rdx, %3
   133 0000286F 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002877 4883EC08            <1>  sub rsp, 8
   135 0000287B E8(00000000)        <1>  call fread
   136 00002880 4883C408            <1>  add rsp, 8
  2059                                  
  2060                                      mReadLine movimientosOfic1, 8, 1
   130 00002884 48BF-               <1>  mov rdi, %1
   130 00002886 [2008000000000000]  <1>
   131 0000288E BE08000000          <1>  mov rsi, %2
   132 00002893 BA01000000          <1>  mov rdx, %3
   133 00002898 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 000028A0 4883EC08            <1>  sub rsp, 8
   135 000028A4 E8(00000000)        <1>  call fread
   136 000028A9 4883C408            <1>  add rsp, 8
  2061                                      mReadLine movimientosOfic2, 8, 1
   130 000028AD 48BF-               <1>  mov rdi, %1
   130 000028AF [2808000000000000]  <1>
   131 000028B7 BE08000000          <1>  mov rsi, %2
   132 000028BC BA01000000          <1>  mov rdx, %3
   133 000028C1 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 000028C9 4883EC08            <1>  sub rsp, 8
   135 000028CD E8(00000000)        <1>  call fread
   136 000028D2 4883C408            <1>  add rsp, 8
  2062                                  
  2063                                      mReadLine movOfic1Adelante, 8, 1
   130 000028D6 48BF-               <1>  mov rdi, %1
   130 000028D8 [3008000000000000]  <1>
   131 000028E0 BE08000000          <1>  mov rsi, %2
   132 000028E5 BA01000000          <1>  mov rdx, %3
   133 000028EA 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 000028F2 4883EC08            <1>  sub rsp, 8
   135 000028F6 E8(00000000)        <1>  call fread
   136 000028FB 4883C408            <1>  add rsp, 8
  2064                                      mReadLine movOfic1Derecha, 8, 1
   130 000028FF 48BF-               <1>  mov rdi, %1
   130 00002901 [3808000000000000]  <1>
   131 00002909 BE08000000          <1>  mov rsi, %2
   132 0000290E BA01000000          <1>  mov rdx, %3
   133 00002913 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 0000291B 4883EC08            <1>  sub rsp, 8
   135 0000291F E8(00000000)        <1>  call fread
   136 00002924 4883C408            <1>  add rsp, 8
  2065                                      mReadLine movOfic1Izquierda, 8, 1
   130 00002928 48BF-               <1>  mov rdi, %1
   130 0000292A [4008000000000000]  <1>
   131 00002932 BE08000000          <1>  mov rsi, %2
   132 00002937 BA01000000          <1>  mov rdx, %3
   133 0000293C 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002944 4883EC08            <1>  sub rsp, 8
   135 00002948 E8(00000000)        <1>  call fread
   136 0000294D 4883C408            <1>  add rsp, 8
  2066                                      mReadLine movOfic1Atras, 8, 1
   130 00002951 48BF-               <1>  mov rdi, %1
   130 00002953 [4808000000000000]  <1>
   131 0000295B BE08000000          <1>  mov rsi, %2
   132 00002960 BA01000000          <1>  mov rdx, %3
   133 00002965 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 0000296D 4883EC08            <1>  sub rsp, 8
   135 00002971 E8(00000000)        <1>  call fread
   136 00002976 4883C408            <1>  add rsp, 8
  2067                                      mReadLine movOfic1Diagonal, 8, 1
   130 0000297A 48BF-               <1>  mov rdi, %1
   130 0000297C [5008000000000000]  <1>
   131 00002984 BE08000000          <1>  mov rsi, %2
   132 00002989 BA01000000          <1>  mov rdx, %3
   133 0000298E 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002996 4883EC08            <1>  sub rsp, 8
   135 0000299A E8(00000000)        <1>  call fread
   136 0000299F 4883C408            <1>  add rsp, 8
  2068                                      mReadLine movOfic1DiagArribaDer, 8, 1
   130 000029A3 48BF-               <1>  mov rdi, %1
   130 000029A5 [5808000000000000]  <1>
   131 000029AD BE08000000          <1>  mov rsi, %2
   132 000029B2 BA01000000          <1>  mov rdx, %3
   133 000029B7 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 000029BF 4883EC08            <1>  sub rsp, 8
   135 000029C3 E8(00000000)        <1>  call fread
   136 000029C8 4883C408            <1>  add rsp, 8
  2069                                      mReadLine movOfic1DiagArribaIzq, 8, 1
   130 000029CC 48BF-               <1>  mov rdi, %1
   130 000029CE [6008000000000000]  <1>
   131 000029D6 BE08000000          <1>  mov rsi, %2
   132 000029DB BA01000000          <1>  mov rdx, %3
   133 000029E0 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 000029E8 4883EC08            <1>  sub rsp, 8
   135 000029EC E8(00000000)        <1>  call fread
   136 000029F1 4883C408            <1>  add rsp, 8
  2070                                      mReadLine movOfic1DiagAbajoDer, 8, 1
   130 000029F5 48BF-               <1>  mov rdi, %1
   130 000029F7 [6808000000000000]  <1>
   131 000029FF BE08000000          <1>  mov rsi, %2
   132 00002A04 BA01000000          <1>  mov rdx, %3
   133 00002A09 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002A11 4883EC08            <1>  sub rsp, 8
   135 00002A15 E8(00000000)        <1>  call fread
   136 00002A1A 4883C408            <1>  add rsp, 8
  2071                                      mReadLine movOfic1DiagAbajoIzq, 8, 1
   130 00002A1E 48BF-               <1>  mov rdi, %1
   130 00002A20 [7008000000000000]  <1>
   131 00002A28 BE08000000          <1>  mov rsi, %2
   132 00002A2D BA01000000          <1>  mov rdx, %3
   133 00002A32 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002A3A 4883EC08            <1>  sub rsp, 8
   135 00002A3E E8(00000000)        <1>  call fread
   136 00002A43 4883C408            <1>  add rsp, 8
  2072                                  
  2073                                      mReadLine movOfic2Adelante, 8, 1
   130 00002A47 48BF-               <1>  mov rdi, %1
   130 00002A49 [7808000000000000]  <1>
   131 00002A51 BE08000000          <1>  mov rsi, %2
   132 00002A56 BA01000000          <1>  mov rdx, %3
   133 00002A5B 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002A63 4883EC08            <1>  sub rsp, 8
   135 00002A67 E8(00000000)        <1>  call fread
   136 00002A6C 4883C408            <1>  add rsp, 8
  2074                                      mReadLine movOfic2Derecha, 8, 1
   130 00002A70 48BF-               <1>  mov rdi, %1
   130 00002A72 [8008000000000000]  <1>
   131 00002A7A BE08000000          <1>  mov rsi, %2
   132 00002A7F BA01000000          <1>  mov rdx, %3
   133 00002A84 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002A8C 4883EC08            <1>  sub rsp, 8
   135 00002A90 E8(00000000)        <1>  call fread
   136 00002A95 4883C408            <1>  add rsp, 8
  2075                                      mReadLine movOfic2Izquierda, 8, 1
   130 00002A99 48BF-               <1>  mov rdi, %1
   130 00002A9B [8808000000000000]  <1>
   131 00002AA3 BE08000000          <1>  mov rsi, %2
   132 00002AA8 BA01000000          <1>  mov rdx, %3
   133 00002AAD 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002AB5 4883EC08            <1>  sub rsp, 8
   135 00002AB9 E8(00000000)        <1>  call fread
   136 00002ABE 4883C408            <1>  add rsp, 8
  2076                                      mReadLine movOfic2Atras, 8, 1
   130 00002AC2 48BF-               <1>  mov rdi, %1
   130 00002AC4 [9008000000000000]  <1>
   131 00002ACC BE08000000          <1>  mov rsi, %2
   132 00002AD1 BA01000000          <1>  mov rdx, %3
   133 00002AD6 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002ADE 4883EC08            <1>  sub rsp, 8
   135 00002AE2 E8(00000000)        <1>  call fread
   136 00002AE7 4883C408            <1>  add rsp, 8
  2077                                      mReadLine movOfic2Diagonal, 8, 1
   130 00002AEB 48BF-               <1>  mov rdi, %1
   130 00002AED [9808000000000000]  <1>
   131 00002AF5 BE08000000          <1>  mov rsi, %2
   132 00002AFA BA01000000          <1>  mov rdx, %3
   133 00002AFF 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002B07 4883EC08            <1>  sub rsp, 8
   135 00002B0B E8(00000000)        <1>  call fread
   136 00002B10 4883C408            <1>  add rsp, 8
  2078                                      mReadLine movOfic2DiagArribaDer, 8, 1
   130 00002B14 48BF-               <1>  mov rdi, %1
   130 00002B16 [A008000000000000]  <1>
   131 00002B1E BE08000000          <1>  mov rsi, %2
   132 00002B23 BA01000000          <1>  mov rdx, %3
   133 00002B28 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002B30 4883EC08            <1>  sub rsp, 8
   135 00002B34 E8(00000000)        <1>  call fread
   136 00002B39 4883C408            <1>  add rsp, 8
  2079                                      mReadLine movOfic2DiagArribaIzq, 8, 1
   130 00002B3D 48BF-               <1>  mov rdi, %1
   130 00002B3F [A808000000000000]  <1>
   131 00002B47 BE08000000          <1>  mov rsi, %2
   132 00002B4C BA01000000          <1>  mov rdx, %3
   133 00002B51 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002B59 4883EC08            <1>  sub rsp, 8
   135 00002B5D E8(00000000)        <1>  call fread
   136 00002B62 4883C408            <1>  add rsp, 8
  2080                                      mReadLine movOfic2DiagAbajoDer, 8, 1
   130 00002B66 48BF-               <1>  mov rdi, %1
   130 00002B68 [B008000000000000]  <1>
   131 00002B70 BE08000000          <1>  mov rsi, %2
   132 00002B75 BA01000000          <1>  mov rdx, %3
   133 00002B7A 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002B82 4883EC08            <1>  sub rsp, 8
   135 00002B86 E8(00000000)        <1>  call fread
   136 00002B8B 4883C408            <1>  add rsp, 8
  2081                                      mReadLine movOfic2DiagAbajoIzq, 8, 1
   130 00002B8F 48BF-               <1>  mov rdi, %1
   130 00002B91 [B808000000000000]  <1>
   131 00002B99 BE08000000          <1>  mov rsi, %2
   132 00002B9E BA01000000          <1>  mov rdx, %3
   133 00002BA3 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002BAB 4883EC08            <1>  sub rsp, 8
   135 00002BAF E8(00000000)        <1>  call fread
   136 00002BB4 4883C408            <1>  add rsp, 8
  2082                                  
  2083                                      mReadLine cantSoldCapturados, 8, 1
   130 00002BB8 48BF-               <1>  mov rdi, %1
   130 00002BBA [C008000000000000]  <1>
   131 00002BC2 BE08000000          <1>  mov rsi, %2
   132 00002BC7 BA01000000          <1>  mov rdx, %3
   133 00002BCC 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002BD4 4883EC08            <1>  sub rsp, 8
   135 00002BD8 E8(00000000)        <1>  call fread
   136 00002BDD 4883C408            <1>  add rsp, 8
  2084                                      mReadLine cantOficInvalidados, 8, 1
   130 00002BE1 48BF-               <1>  mov rdi, %1
   130 00002BE3 [C808000000000000]  <1>
   131 00002BEB BE08000000          <1>  mov rsi, %2
   132 00002BF0 BA01000000          <1>  mov rdx, %3
   133 00002BF5 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002BFD 4883EC08            <1>  sub rsp, 8
   135 00002C01 E8(00000000)        <1>  call fread
   136 00002C06 4883C408            <1>  add rsp, 8
  2085                                  
  2086                                      mReadLine casillaOfic1, 8, 1
   130 00002C0A 48BF-               <1>  mov rdi, %1
   130 00002C0C [D008000000000000]  <1>
   131 00002C14 BE08000000          <1>  mov rsi, %2
   132 00002C19 BA01000000          <1>  mov rdx, %3
   133 00002C1E 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002C26 4883EC08            <1>  sub rsp, 8
   135 00002C2A E8(00000000)        <1>  call fread
   136 00002C2F 4883C408            <1>  add rsp, 8
  2087                                      mReadLine casillaOfic1+8, 8, 1
   130 00002C33 48BF-               <1>  mov rdi, %1
   130 00002C35 [D808000000000000]  <1>
   131 00002C3D BE08000000          <1>  mov rsi, %2
   132 00002C42 BA01000000          <1>  mov rdx, %3
   133 00002C47 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002C4F 4883EC08            <1>  sub rsp, 8
   135 00002C53 E8(00000000)        <1>  call fread
   136 00002C58 4883C408            <1>  add rsp, 8
  2088                                  
  2089                                      mReadLine casillaOfic2, 8, 1
   130 00002C5C 48BF-               <1>  mov rdi, %1
   130 00002C5E [E008000000000000]  <1>
   131 00002C66 BE08000000          <1>  mov rsi, %2
   132 00002C6B BA01000000          <1>  mov rdx, %3
   133 00002C70 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002C78 4883EC08            <1>  sub rsp, 8
   135 00002C7C E8(00000000)        <1>  call fread
   136 00002C81 4883C408            <1>  add rsp, 8
  2090                                      mReadLine casillaOfic2+8, 8, 1
   130 00002C85 48BF-               <1>  mov rdi, %1
   130 00002C87 [E808000000000000]  <1>
   131 00002C8F BE08000000          <1>  mov rsi, %2
   132 00002C94 BA01000000          <1>  mov rdx, %3
   133 00002C99 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002CA1 4883EC08            <1>  sub rsp, 8
   135 00002CA5 E8(00000000)        <1>  call fread
   136 00002CAA 4883C408            <1>  add rsp, 8
  2091                                  
  2092                                      mReadLine cantCapturasOfic1, 8, 1
   130 00002CAE 48BF-               <1>  mov rdi, %1
   130 00002CB0 [F008000000000000]  <1>
   131 00002CB8 BE08000000          <1>  mov rsi, %2
   132 00002CBD BA01000000          <1>  mov rdx, %3
   133 00002CC2 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002CCA 4883EC08            <1>  sub rsp, 8
   135 00002CCE E8(00000000)        <1>  call fread
   136 00002CD3 4883C408            <1>  add rsp, 8
  2093                                      mReadLine cantCapturasOfic2, 8, 1
   130 00002CD7 48BF-               <1>  mov rdi, %1
   130 00002CD9 [F808000000000000]  <1>
   131 00002CE1 BE08000000          <1>  mov rsi, %2
   132 00002CE6 BA01000000          <1>  mov rdx, %3
   133 00002CEB 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   134 00002CF3 4883EC08            <1>  sub rsp, 8
   135 00002CF7 E8(00000000)        <1>  call fread
   136 00002CFC 4883C408            <1>  add rsp, 8
  2094                                  
  2095 00002D00 C3                          ret
