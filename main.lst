     1                                  %macro mPuts 1 ; Imprime el string %1, hasta encontrar un 0
     2                                      mov rdi, %1
     3                                      sub rsp, 8
     4                                      call puts
     5                                      add rsp, 8
     6                                  %endmacro
     7                                  
     8                                  %macro mPrint 2 ; Imprime el string %2 con formato %1
     9                                      mov rdi, %1
    10                                      mov rsi, %2
    11                                      sub rsp, 8
    12                                      call printf
    13                                      add rsp, 8
    14                                  %endmacro
    15                                  
    16                                  %macro mGets 1 ; Obtiene un string por teclado, guardándolo en %1
    17                                      mov rdi, %1
    18                                      sub rsp, 8
    19                                      call gets
    20                                      add rsp, 8
    21                                  %endmacro
    22                                  
    23                                  %macro mCommand 1 ; Ejecuta el comando %1 de la terminal
    24                                      mov rdi, %1
    25                                      sub rsp, 8
    26                                      call system
    27                                      add rsp, 8
    28                                  %endmacro
    29                                  
    30                                  %macro mMov 3 ; Copia %3 bytes del campo de memoria %2 al campo de memoria %1
    31                                      mov rcx, %3
    32                                      lea rsi, [%2]
    33                                      lea rdi, [%1]
    34                                      rep movsb
    35                                  %endmacro
    36                                  
    37                                  %macro mCmp 3 ; Compara %3 bytes del campo %1 con %2
    38                                      mov rcx, %3
    39                                      lea rsi, %1
    40                                      lea rdi, %2
    41                                      repe cmpsb
    42                                  %endmacro 
    43                                  
    44                                  %macro mErrorJump 2 ; Imprime el mensaje de error %1 y salta a la etiqueta %2
    45                                      mPuts %1
    46                                      jmp %2
    47                                  %endmacro
    48                                  
    49                                  %macro mfGets 2
    50                                      mov rdi, %1
    51                                      mov rsi, %2
    52                                      mov rdx, [stdin]
    53                                      sub rsp, 8
    54                                      call fgets
    55                                      add rsp, 8
    56                                  %endmacro
    57                                  
    58                                  %macro mLeerEntradaEstandar 2
    59                                      mov rax, 0      ; syscall: read
    60                                      mov rdi, 0      ; 0: stdin
    61                                      mov rsi, %1   ; buffer (direccion de guardado de lo leido)
    62                                      mov rdx, %2     ; Cuantos bytes queremos leer
    63                                      syscall
    64                                  
    65                                      mov byte[rsi+rax], 0
    66                                  %endmacro
    67                                  
    68                                  %macro mSscanf 3
    69                                      lea rdi, %1     ; Variable Original string
    70                                      mov rsi, %2     ; Formato
    71                                      mov rdx, %3     ; Variable a guardar el int
    72                                      sub rsp, 8
    73                                      call sscanf
    74                                      add rsp, 8
    75                                  %endmacro
    76                                  
    77                                  %macro mSprintf 3
    78                                      mov rdi, %1     ; Variable donde se guardará el string
    79                                      mov rsi, %2     ; Formato
    80                                      mov rdx, %3     ; Variable a guardar en el string
    81                                      sub rsp, 8
    82                                      call sprintf
    83                                      add rsp, 8
    84                                  %endmacro
    85                                  
    86                                  %macro mCalcDesplaz 3
    87                                      mov rdi, %1
    88                                      mov rsi, %2
    89                                      call calcularDesplazamiento
    90                                      mov %3, rax
    91                                  %endmacro
    92                                  
    93                                  %macro mEstaVacia 1 
    94                                      mov rax, 0
    95                                      mov rdi, %1 ; recibe el desplazamiento
    96                                      call estaVacia
    97                                  %endmacro
    98                                  
    99                                  %macro mHaySoldado 1
   100                                      mov rax, 0
   101                                      mov rdi, %1 ; recibe el desplazamiento
   102                                      call haySoldado
   103                                  %endmacro
   104                                  
   105                                  %macro mPuedeCapturar 2
   106                                      mov rdi, %1 ; diferencia de desplazamiento
   107                                      mov rsi, %2 ; 0 para sumar [rdi] al desplazamiento, 1 para restar
   108                                      call podiaComerPieza
   109                                  %endmacro
   110                                  
   111                                  %macro mOpenFile 2
   112                                      mov rdi, %1 ; nombre del archivo
   113                                      mov rsi, %2 ; modo de apertura
   114                                      sub rsp, 8
   115                                      call fopen
   116                                      add rsp, 8
   117                                  
   118                                      cmp rax, 0
   119                                      mov qword[idArchGuardado], rax ; Guardamos el ID del archivo
   120                                  %endmacro
   121                                  
   122                                  %macro mCloseFile 1
   123                                      mov rdi, [%1] ; ID del archivo
   124                                      sub rsp, 8
   125                                      call fclose
   126                                      add rsp, 8
   127                                  %endmacro
   128                                  
   129                                  %macro mReadLine 3 
   130                                      mov rdi, %1 ; lugar a dejar lo leido
   131                                      mov rsi, %2 ; cantidad de bytes a leer
   132                                      mov rdx, %3 ; bloques de lectura
   133                                      mov rcx, [idArchGuardado] ; ID del archivo
   134                                      sub rsp, 8
   135                                      call fread
   136                                      add rsp, 8
   137                                  %endmacro
   138                                  
   139                                  %macro mWriteLine 3
   140                                      mov rdi, %1 ; string a escribir
   141                                      mov rsi, %2 ; cantidad de bytes a escribir
   142                                      mov rdx, %3 ; bloques de escritura
   143                                      mov rcx, [idArchGuardado] ; ID del archivo
   144                                      sub rsp, 8
   145                                      call fwrite
   146                                      add rsp, 8
   147                                  %endmacro
   148                                  
   149                                  ; Importación de funciones de la librería C
   150                                  extern puts, printf
   151                                  extern gets
   152                                  extern system, stdin
   153                                  extern sscanf, sprintf
   154                                  extern fopen, fclose, fread, fwrite, fgets
   155                                  
   156                                  section .data
   157                                  
   158                                      ; Tableros y sus posibles estados
   159                                  
   160 00000000 202031323334353637-         tableroOrig         db " "," ","1","2","3","4","5","6","7"," ",10
   160 00000009 200A               
   161 0000000B 2020202D5F5F5F2D20-                             db " "," "," ","-","_","_","_","-"," "," ",10 
   161 00000014 200A               
   162 00000016 3120207C5858587C20-                             db "1"," "," ","|","X","X","X","|"," "," ",10
   162 0000001F 200A               
   163 00000021 322D5F7C5858587C5F-                             db "2","-","_","|","X","X","X","|","_","-",10
   163 0000002A 2D0A               
   164 0000002C 337C58585858585858-                             db "3","|","X","X","X","X","X","X","X","|",10 
   164 00000035 7C0A               
   165 00000037 347C58585858585858-                             db "4","|","X","X","X","X","X","X","X","|",10 
   165 00000040 7C0A               
   166 00000042 357C58582020205858-                             db "5","|","X","X"," "," "," ","X","X","|",10 
   166 0000004B 7C0A               
   167 0000004D 362D2D7C20204F7C2D-                             db "6","-","-","|"," "," ","O","|","-","-",10 
   167 00000056 2D0A               
   168 00000058 3720207C4F20207C20-                             db "7"," "," ","|","O"," "," ","|"," "," ",10 
   168 00000061 200A               
   169 00000063 2020202D2D2D2D2D20-                             db " "," "," ","-","-","-","-","-"," "," ",10,0
   169 0000006C 200A00             
   170                                  
   171 0000006F 202031323334353637-         tableroInv          db " "," ","1","2","3","4","5","6","7"," ",10
   171 00000078 200A               
   172 0000007A 202020205F5F5F2020-                             db " "," "," "," ","_","_","_"," "," "," ",10 
   172 00000083 200A               
   173 00000085 3120207C4F20207C20-                             db "1"," "," ","|","O"," "," ","|"," "," ",10
   173 0000008E 200A               
   174 00000090 32205F7C20204F7C5F-                             db "2"," ","_","|"," "," ","O","|","_"," ",10
   174 00000099 200A               
   175 0000009B 337C58582020205858-                             db "3","|","X","X"," "," "," ","X","X","|",10 
   175 000000A4 7C0A               
   176 000000A6 347C58585858585858-                             db "4","|","X","X","X","X","X","X","X","|",10 
   176 000000AF 7C0A               
   177 000000B1 357C58585858585858-                             db "5","|","X","X","X","X","X","X","X","|",10 
   177 000000BA 7C0A               
   178 000000BC 36202D7C5858587C2D-                             db "6"," ","-","|","X","X","X","|","-"," ",10 
   178 000000C5 200A               
   179 000000C7 3720207C5858587C20-                             db "7"," "," ","|","X","X","X","|"," "," ",10 
   179 000000D0 200A               
   180 000000D2 202020202D2D2D2020-                             db " "," "," "," ","-","-","-"," "," "," ",10,0
   180 000000DB 200A00             
   181                                  
   182 000000DE 202031323334353637-         tableroDer          db " "," ","1","2","3","4","5","6","7"," ",10
   182 000000E7 200A               
   183 000000E9 202020205F5F5F2020-                             db " "," "," "," ","_","_","_"," "," "," ",10 
   183 000000F2 200A               
   184 000000F4 3120207C5858587C20-                             db "1"," "," ","|","X","X","X","|"," "," ",10
   184 000000FD 200A               
   185 000000FF 32205F7C5858587C5F-                             db "2"," ","_","|","X","X","X","|","_"," ",10
   185 00000108 200A               
   186 0000010A 337C5858585820204F-                             db "3","|","X","X","X","X"," "," ","O","|",10 
   186 00000113 7C0A               
   187 00000115 347C58585858202020-                             db "4","|","X","X","X","X"," "," "," ","|",10 
   187 0000011E 7C0A               
   188 00000120 357C58585858204F20-                             db "5","|","X","X","X","X"," ","O"," ","|",10 
   188 00000129 7C0A               
   189 0000012B 36202D7C5858587C2D-                             db "6"," ","-","|","X","X","X","|","-"," ",10 
   189 00000134 200A               
   190 00000136 3720207C5858587C20-                             db "7"," "," ","|","X","X","X","|"," "," ",10 
   190 0000013F 200A               
   191 00000141 202020202D2D2D2020-                             db " "," "," "," ","-","-","-"," "," "," ",10,0
   191 0000014A 200A00             
   192                                  
   193 0000014D 202031323334353637-         tableroIzq          db " "," ","1","2","3","4","5","6","7"," ",10
   193 00000156 200A               
   194 00000158 202020205F5F5F2020-                             db " "," "," "," ","_","_","_"," "," "," ",10 
   194 00000161 200A               
   195 00000163 3120207C5858587C20-                             db "1"," "," ","|","X","X","X","|"," "," ",10
   195 0000016C 200A               
   196 0000016E 32205F7C5858587C5F-                             db "2"," ","_","|","X","X","X","|","_"," ",10
   196 00000177 200A               
   197 00000179 337C4F202058585858-                             db "3","|","O"," "," ","X","X","X","X","|",10 
   197 00000182 7C0A               
   198 00000184 347C20202058585858-                             db "4","|"," "," "," ","X","X","X","X","|",10 
   198 0000018D 7C0A               
   199 0000018F 357C204F2058585858-                             db "5","|"," ","O"," ","X","X","X","X","|",10 
   199 00000198 7C0A               
   200 0000019A 36202D7C5858587C2D-                             db "6"," ","-","|","X","X","X","|","-"," ",10 
   200 000001A3 200A               
   201 000001A5 3720207C5858587C20-                             db "7"," "," ","|","X","X","X","|"," "," ",10 
   201 000001AE 200A               
   202 000001B0 202020202D2D2D2020-                             db " "," "," "," ","-","-","-"," "," "," ",10,0
   202 000001B9 200A00             
   203                                  
   204                                      ; Mensajes
   205                                  
   206 000001BC C2A14269656E76656E-         msgBienvenida           db "¡Bienvenido al juego El Asalto! ('#' para salir)", 0
   206 000001C5 69646F20616C206A75-
   206 000001CE 65676F20456C204173-
   206 000001D7 616C746F2120282723-
   206 000001E0 272070617261207361-
   206 000001E9 6C69722900         
   207                                  
   208 000001EE C2BF44657365612070-         msgPersonalizarTablero  db "¿Desea personalizar el tablero? (s/n): ", 0 
   208 000001F7 6572736F6E616C697A-
   208 00000200 617220656C20746162-
   208 00000209 6C65726F3F2028732F-
   208 00000212 6E293A2000         
   209                                  
   210 00000217 4F706369C3B36E2069-         msgOpcionInvalida       db "Opción inválida. Intente de nuevo.", 0
   210 00000220 6E76C3A16C6964612E-
   210 00000229 20496E74656E746520-
   210 00000232 6465206E7565766F2E-
   210 0000023B 00                 
   211                                      
   212 0000023C 436173696C6C612069-         msgCasillaInvalidaSold  db "Casilla inválida: no hay un soldado en esa casilla. Intente de nuevo.", 0
   212 00000245 6E76C3A16C6964613A-
   212 0000024E 206E6F206861792075-
   212 00000257 6E20736F6C6461646F-
   212 00000260 20656E206573612063-
   212 00000269 6173696C6C612E2049-
   212 00000272 6E74656E7465206465-
   212 0000027B 206E7565766F2E00   
   213 00000283 4572726F7220656E20-         msgErrorInputSold       db "Error en el formato de entrada del soldado. Intente de nuevo.", 0
   213 0000028C 656C20666F726D6174-
   213 00000295 6F20646520656E7472-
   213 0000029E 6164612064656C2073-
   213 000002A7 6F6C6461646F2E2049-
   213 000002B0 6E74656E7465206465-
   213 000002B9 206E7565766F2E00   
   214 000002C1 4E6F20736520707565-         msgCasillaInvMovSold    db "No se puede mover el soldado a esa casilla. Intente de nuevo.", 0
   214 000002CA 6465206D6F76657220-
   214 000002D3 656C20736F6C646164-
   214 000002DC 6F2061206573612063-
   214 000002E5 6173696C6C612E2049-
   214 000002EE 6E74656E7465206465-
   214 000002F7 206E7565766F2E00   
   215                                  
   216 000002FF 436173696C6C612069-         msgCasillaInvalidaOfic  db "Casilla inválida: no hay un oficial en esa casilla. Intente de nuevo.", 0
   216 00000308 6E76C3A16C6964613A-
   216 00000311 206E6F206861792075-
   216 0000031A 6E206F66696369616C-
   216 00000323 20656E206573612063-
   216 0000032C 6173696C6C612E2049-
   216 00000335 6E74656E7465206465-
   216 0000033E 206E7565766F2E00   
   217 00000346 4572726F7220656E20-         msgErrorInputOfic       db "Error en el formato de entrada del oficial. Intente de nuevo.", 0
   217 0000034F 656C20666F726D6174-
   217 00000358 6F20646520656E7472-
   217 00000361 6164612064656C206F-
   217 0000036A 66696369616C2E2049-
   217 00000373 6E74656E7465206465-
   217 0000037C 206E7565766F2E00   
   218 00000384 4E6F20736520707565-         msgCasillaInvMovOfic    db "No se puede mover el oficial a esa casilla. Intente de nuevo.", 0
   218 0000038D 6465206D6F76657220-
   218 00000396 656C206F6669636961-
   218 0000039F 6C2061206573612063-
   218 000003A8 6173696C6C612E2049-
   218 000003B1 6E74656E7465206465-
   218 000003BA 206E7565766F2E00   
   219                                  
   220 000003C2 C2A153652070756564-         msgPregRotacion         db "¡Se puede rotar el tablero! Elija una de las opciones (1-4):", 0
   220 000003CB 6520726F7461722065-
   220 000003D4 6C207461626C65726F-
   220 000003DD 2120456C696A612075-
   220 000003E6 6E61206465206C6173-
   220 000003EF 206F7063696F6E6573-
   220 000003F8 2028312D34293A00   
   221 00000400 312E20526F74617220-         msgRotacionesPosibles   db "1. Rotar a la izquierda", 10
   221 00000409 61206C6120697A7175-
   221 00000412 69657264610A       
   222 00000418 322E20526F74617220-                                 db "2. Rotar a la derecha", 10
   222 00000421 61206C612064657265-
   222 0000042A 6368610A           
   223 0000042E 332E20496E76657274-                                 db "3. Invertir el tablero", 10
   223 00000437 697220656C20746162-
   223 00000440 6C65726F0A         
   224 00000445 342E204E6F20726F74-                                 db "4. No rotar", 0
   224 0000044E 617200             
   225                                      
   226 00000451 C2A1456C696A616D6F-         msgPersonalizarSimb     db "¡Elijamos los símbolos para cada personaje! Escriba UN (1) solo caracter para cada uno.", 0
   226 0000045A 73206C6F732073C3AD-
   226 00000463 6D626F6C6F73207061-
   226 0000046C 726120636164612070-
   226 00000475 6572736F6E616A6521-
   226 0000047E 204573637269626120-
   226 00000487 554E2028312920736F-
   226 00000490 6C6F20636172616374-
   226 00000499 657220706172612063-
   226 000004A2 61646120756E6F2E00 
   227 000004AB 53C3AD6D626F6C6F20-         msgSimboloOficiales     db "Símbolo para los oficiales:", 0
   227 000004B4 70617261206C6F7320-
   227 000004BD 6F66696369616C6573-
   227 000004C6 3A00               
   228 000004C8 53C3AD6D626F6C6F20-         msgSimboloSoldados      db "Símbolo para los soldados:", 0
   228 000004D1 70617261206C6F7320-
   228 000004DA 736F6C6461646F733A-
   228 000004E3 00                 
   229                                  
   230 000004E4 C2BF517569C3A96E20-         msgQuienInicia          db "¿Quién inicia el juego: oficiales o soldados? (o/s): ", 0
   230 000004ED 696E6963696120656C-
   230 000004F6 206A7565676F3A206F-
   230 000004FF 66696369616C657320-
   230 00000508 6F20736F6C6461646F-
   230 00000511 733F20286F2F73293A-
   230 0000051A 2000               
   231                                  
   232 0000051C C2A1556E206F666963-         msgOficialRetirado      db "¡Un oficial ha sido retirado del juego! Se ha olvidado de atrapar a un soldado.", 0
   232 00000525 69616C206861207369-
   232 0000052E 646F20726574697261-
   232 00000537 646F2064656C206A75-
   232 00000540 65676F212053652068-
   232 00000549 61206F6C7669646164-
   232 00000552 6F2064652061747261-
   232 0000055B 706172206120756E20-
   232 00000564 736F6C6461646F2E00 
   233                                  
   234 0000056D 4573746164C3AD7374-         msgEstadisticas         db "Estadísticas de los oficiales:", 10, 0
   234 00000576 69636173206465206C-
   234 0000057F 6F73206F6669636961-
   234 00000588 6C65733A0A00       
   235                                  
   236 0000058E 43616E746964616420-         msgCantTotalCapturas    db "Cantidad total de capturas: %d", 10, 10, 0
   236 00000597 746F74616C20646520-
   236 000005A0 63617074757261733A-
   236 000005A9 2025640A0A00       
   237                                  
   238 000005AF 4F66696369616C2031-         msgOficial1             db "Oficial 1:", 10, 0
   238 000005B8 3A0A00             
   239 000005BB 4F66696369616C2032-         msgOficial2             db "Oficial 2:", 10, 0
   239 000005C4 3A0A00             
   240                                  
   241 000005C7 4D6F76696D69656E74-         msgCantMovimientos      db "Movimientos totales: %d", 10, 0
   241 000005D0 6F7320746F74616C65-
   241 000005D9 733A2025640A00     
   242 000005E0 2D2048616369612061-         msgCantAdelante         db "- Hacia adelante: %d", 10, 0
   242 000005E9 64656C616E74653A20-
   242 000005F2 25640A00           
   243 000005F6 2D204861636961206C-         msgCantDerecha          db "- Hacia la derecha: %d", 10, 0
   243 000005FF 612064657265636861-
   243 00000608 3A2025640A00       
   244 0000060E 2D204861636961206C-         msgCantIzquierda        db "- Hacia la izquierda: %d", 10, 0
   244 00000617 6120697A7175696572-
   244 00000620 64613A2025640A00   
   245 00000628 2D2048616369612061-         msgCantAtras            db "- Hacia atrás: %d", 10, 0
   245 00000631 7472C3A1733A202564-
   245 0000063A 0A00               
   246 0000063C 2D20456E2064696167-         msgCantDiagonal         db "- En diagonal: %d", 10, 0
   246 00000645 6F6E616C3A2025640A-
   246 0000064E 00                 
   247 0000064F 2D2D2D204164656C61-         msgCantDiagArribaDer    db "--- Adelante-derecha: %d", 10, 0
   247 00000658 6E74652D6465726563-
   247 00000661 68613A2025640A00   
   248 00000669 2D2D2D204164656C61-         msgCantDiagArribaIzq    db "--- Adelante-izquierda: %d", 10, 0
   248 00000672 6E74652D697A717569-
   248 0000067B 657264613A2025640A-
   248 00000684 00                 
   249 00000685 2D2D2D20417472C3A1-         msgCantDiagAbajoDer     db "--- Atrás-derecha: %d", 10, 0
   249 0000068E 732D64657265636861-
   249 00000697 3A2025640A00       
   250 0000069D 2D2D2D20417472C3A1-         msgCantDiagAbajoIzq     db "--- Atrás-izquierda: %d", 10, 0
   250 000006A6 732D697A7175696572-
   250 000006AF 64613A2025640A00   
   251                                  
   252 000006B7 43616E746964616420-         msgCantSoldadosCapt     db "Cantidad de soldados capturados: %d", 10, 10, 0
   252 000006C0 646520736F6C646164-
   252 000006C9 6F7320636170747572-
   252 000006D2 61646F733A2025640A-
   252 000006DB 0A00               
   253                                  
   254 000006DD C2A1456C206A756567-         msgJuegoTerminado       db "¡El juego ha terminado!", 10, 0
   254 000006E6 6F206861207465726D-
   254 000006EF 696E61646F210A00   
   255 000006F7 C2A1456C2067616E61-         msgGanador              db "¡El ganador es el equipo de los %s!", 10, 0
   255 00000700 646F7220657320656C-
   255 00000709 2065717569706F2064-
   255 00000712 65206C6F7320257321-
   255 0000071B 0A00               
   256 0000071D 736F6C6461646F7300          stringSoldados          db "soldados", 0
   257 00000726 6F66696369616C6573-         stringOficiales         db "oficiales", 0
   257 0000072F 00                 
   258                                  
   259 00000730 52617AC3B36E3A2025-         msgRazonGanador         db "Razón: %s", 10, 0
   259 00000739 730A00             
   260                                  
   261 0000073C 2D2D2D2D00                  varRazonFin             db '----', 0 ; Razón de fin de juego (a llenar)          
   262                                  
   263                                      ; Se ha decidido salir de la partida
   264 00000741 536520686120646563-         msgSalidaPartida        db "Se ha decidido salir de la partida. ¿Desea guardarla? (s/n)", 0
   264 0000074A 696469646F2073616C-
   264 00000753 6972206465206C6120-
   264 0000075C 706172746964612E20-
   264 00000765 C2BF44657365612067-
   264 0000076E 7561726461726C613F-
   264 00000777 2028732F6E2900     
   265 0000077E 4E4F54413A20536920-         msgAclaracionSalida     db "NOTA: Si decide no guardar la partida, se perderá todo el progreso. En cambio, si decide guardarla y tenía una partida guardada, se sobreescribirá.", 0
   265 00000787 646563696465206E6F-
   265 00000790 206775617264617220-
   265 00000799 6C6120706172746964-
   265 000007A2 612C20736520706572-
   265 000007AB 646572C3A120746F64-
   265 000007B4 6F20656C2070726F67-
   265 000007BD 7265736F2E20456E20-
   265 000007C6 63616D62696F2C2073-
   265 000007CF 692064656369646520-
   265 000007D8 677561726461726C61-
   265 000007E1 20792074656EC3AD61-
   265 000007EA 20756E612070617274-
   265 000007F3 696461206775617264-
   265 000007FC 6164612C2073652073-
   265 00000805 6F6272656573637269-
   265 0000080E 626972C3A12E00     
   266 00000815 6E00                        guardadoPartida         db 'n', 0 ; guardar (s), no guardar (n)
   267                                  
   268 00000817 6E00                        yaHabiaGuardado         db 'n', 0 ; ya había guardado (s), no había guardado (n)
   269                                  
   270 00000819 7300                        turnoDe                 db 's', 0 ; soldados (s), oficiales (o)
   271                                  
   272 0000081B C2A150617274696461-         msgPartidaGuardada      db "¡Partida guardada con éxito!", 0
   272 00000824 206775617264616461-
   272 0000082D 20636F6E20C3A97869-
   272 00000836 746F2100           
   273                                  
   274 0000083A 4572726F7220616C20-         msgErrorOpenFile        db "Error al abrir el archivo.", 0
   274 00000843 616272697220656C20-
   274 0000084C 6172636869766F2E00 
   275                                  
   276                                      ; Razones de victoria de soldados
   277 00000855 6C6F7320736F6C6461-         msgSoldadosFortaleza    db "los soldados han ocupado todos los puntos de la fortaleza.", 0
   277 0000085E 646F732068616E206F-
   277 00000867 63757061646F20746F-
   277 00000870 646F73206C6F732070-
   277 00000879 756E746F7320646520-
   277 00000882 6C6120666F7274616C-
   277 0000088B 657A612E00         
   278 00000890 6C6F7320736F6C6461-         msgSoldadosRodean       db "los soldados han rodeado a los oficiales.", 0
   278 00000899 646F732068616E2072-
   278 000008A2 6F646561646F206120-
   278 000008AB 6C6F73206F66696369-
   278 000008B4 616C65732E00       
   279 000008BA 616D626F73206F6669-         msgSoldadosInvalidar    db "ambos oficiales han sido invalidados.", 0
   279 000008C3 6369616C6573206861-
   279 000008CC 6E207369646F20696E-
   279 000008D5 76616C696461646F73-
   279 000008DE 2E00               
   280                                  
   281                                      ; Razones de victoria de oficiales
   282 000008E0 6E6F2071756564616E-         msgOficialesGanan       db "no quedan suficientes soldados para ocupar la fortaleza.", 0
   282 000008E9 20737566696369656E-
   282 000008F2 74657320736F6C6461-
   282 000008FB 646F73207061726120-
   282 00000904 6F6375706172206C61-
   282 0000090D 20666F7274616C657A-
   282 00000916 612E00             
   283                                  
   284                                      ; Turnos
   285 00000919 4573207475726E6F20-         msgTurnoSoldados        db "Es turno de los soldados. Decida a qué soldado desea mover: (<numFila>-<numColumna>)", 0
   285 00000922 6465206C6F7320736F-
   285 0000092B 6C6461646F732E2044-
   285 00000934 656369646120612071-
   285 0000093D 75C3A920736F6C6461-
   285 00000946 646F20646573656120-
   285 0000094F 6D6F7665723A20283C-
   285 00000958 6E756D46696C613E2D-
   285 00000961 3C6E756D436F6C756D-
   285 0000096A 6E613E2900         
   286 0000096F 4573207475726E6F20-         msgTurnoOficiales       db "Es turno de los oficiales. Decida a qué oficial desea mover: (<numFila>-<numColumna>)", 0
   286 00000978 6465206C6F73206F66-
   286 00000981 696369616C65732E20-
   286 0000098A 446563696461206120-
   286 00000993 7175C3A9206F666963-
   286 0000099C 69616C206465736561-
   286 000009A5 206D6F7665723A2028-
   286 000009AE 3C6E756D46696C613E-
   286 000009B7 2D3C6E756D436F6C75-
   286 000009C0 6D6E613E2900       
   287 000009C6 C2BF41207175C3A920-         msgTurnoMovSold         db "¿A qué casilla desea mover el soldado? (<numFila>-<numColumna>)", 0
   287 000009CF 636173696C6C612064-
   287 000009D8 65736561206D6F7665-
   287 000009E1 7220656C20736F6C64-
   287 000009EA 61646F3F20283C6E75-
   287 000009F3 6D46696C613E2D3C6E-
   287 000009FC 756D436F6C756D6E61-
   287 00000A05 3E2900             
   288 00000A08 C2BF41207175C3A920-         msgTurnoMovOfic         db "¿A qué casilla desea mover el oficial? (<numFila>-<numColumna>)", 0
   288 00000A11 636173696C6C612064-
   288 00000A1A 65736561206D6F7665-
   288 00000A23 7220656C206F666963-
   288 00000A2C 69616C3F20283C6E75-
   288 00000A35 6D46696C613E2D3C6E-
   288 00000A3E 756D436F6C756D6E61-
   288 00000A47 3E2900             
   289                                  
   290 00000A4A 556E206F6669636961-         msgCapturaSold          db "Un oficial ha capturado a un soldado.", 0
   290 00000A53 6C2068612063617074-
   290 00000A5C 757261646F20612075-
   290 00000A65 6E20736F6C6461646F-
   290 00000A6E 2E00               
   291 00000A70 C2A1556E206F666963-         msgInvalidOfic          db "¡Un oficial ha sido invalidado! No ha capturado a un soldado regalado.", 0
   291 00000A79 69616C206861207369-
   291 00000A82 646F20696E76616C69-
   291 00000A8B 6461646F21204E6F20-
   291 00000A94 686120636170747572-
   291 00000A9D 61646F206120756E20-
   291 00000AA6 736F6C6461646F2072-
   291 00000AAF 6567616C61646F2E00 
   292                                      
   293                                      ; Contadores
   294                                  
   295 00000AB8 0000000000000000            movimientosOfic1        dq 0
   296 00000AC0 0000000000000000            movimientosOfic2        dq 0
   297                                      
   298 00000AC8 0000000000000000            movOfic1Adelante        dq 0
   299 00000AD0 0000000000000000            movOfic1Derecha         dq 0
   300 00000AD8 0000000000000000            movOfic1Izquierda       dq 0
   301 00000AE0 0000000000000000            movOfic1Atras           dq 0
   302 00000AE8 0000000000000000            movOfic1Diagonal        dq 0
   303 00000AF0 0000000000000000            movOfic1DiagArribaDer   dq 0
   304 00000AF8 0000000000000000            movOfic1DiagArribaIzq   dq 0
   305 00000B00 0000000000000000            movOfic1DiagAbajoDer    dq 0
   306 00000B08 0000000000000000            movOfic1DiagAbajoIzq    dq 0
   307                                  
   308 00000B10 0000000000000000            movOfic2Adelante        dq 0
   309 00000B18 0000000000000000            movOfic2Derecha         dq 0
   310 00000B20 0000000000000000            movOfic2Izquierda       dq 0
   311 00000B28 0000000000000000            movOfic2Atras           dq 0
   312 00000B30 0000000000000000            movOfic2Diagonal        dq 0
   313 00000B38 0000000000000000            movOfic2DiagArribaDer   dq 0
   314 00000B40 0000000000000000            movOfic2DiagArribaIzq   dq 0
   315 00000B48 0000000000000000            movOfic2DiagAbajoDer    dq 0
   316 00000B50 0000000000000000            movOfic2DiagAbajoIzq    dq 0
   317                                  
   318 00000B58 0000000000000000            cantSoldCapturados      dq 0 ; Cuando haya 16 soldados capturados, los oficiales ganan
   319 00000B60 0000000000000000            cantOficInvalidados     dq 0 ; Cuando haya 2 oficiales invalidados, los soldados ganan
   320                                  
   321 00000B68 070000000000000003-         casillaOfic1            dq 7,3
   321 00000B71 00000000000000     
   322 00000B78 060000000000000005-         casillaOfic2            dq 6,5
   322 00000B81 00000000000000     
   323                                  
   324 00000B88 0000000000000000            cantCapturasOfic1       dq 0
   325 00000B90 0000000000000000            cantCapturasOfic2       dq 0
   326                                  
   327 00000B98 4F00                        simboloOficiales        db 'O', 0
   328 00000B9A 5800                        simboloSoldados         db 'X', 0
   329                                      
   330 00000B9C 04                          orientacionTablero      db  4       ; 4 -> no rotar (default) 
   331 00000B9D 73                          piezaDeInicio           db 's'      ; soldados (s), oficiales (o)
   332                                  
   333                                      ; Comandos 
   334 00000B9E 636C65617200                cmdLimpiarPantalla          db "clear", 0
   335 00000BA4 746F75636820706172-         cmdCrearArchivoPartida      db "touch partidaGuardada.dat", 0
   335 00000BAD 746964614775617264-
   335 00000BB6 6164612E64617400   
   336 00000BBE 726D20706172746964-         cmdBorrarArchivoPartida     db "rm partidaGuardada.dat", 0
   336 00000BC7 614775617264616461-
   336 00000BD0 2E64617400         
   337 00000BD5 6563686F202D6E203E-         cmdLimpiarArchivo           db "echo -n > partidaGuardada.dat", 0
   337 00000BDE 207061727469646147-
   337 00000BE7 756172646164612E64-
   337 00000BF0 617400             
   338                                  
   339                                      ; Formatos
   340 00000BF3 257500                      formatoAtoi             db "%u", 0
   341 00000BF6 257300                      formatoItoa             db "%s", 0
   342                                  
   343                                      ; Modos de apertura de archivos
   344 00000BF9 726200                      modoLectura             db "rb", 0
   345 00000BFC 776200                      modoEscritura           db "wb", 0
   346 00000BFF 616200                      modoAppend              db "ab", 0
   347                                  
   348 00000C02 706172746964614775-         nombreArchivo           db "partidaGuardada.dat", 0
   348 00000C0B 6172646164612E6461-
   348 00000C14 7400               
   349                                  
   350                                      ; CONTADORES EN FORMATO DE CADENA
   351                                  
   352 00000C16 2000                        movimientosOfic1Str        db ' ', 0
   353 00000C18 2000                        movimientosOfic2Str        db ' ', 0
   354 00000C1A 2000                        movOfic1AdelanteStr        db ' ', 0
   355 00000C1C 2000                        movOfic1DerechaStr         db ' ', 0
   356 00000C1E 2000                        movOfic1IzquierdaStr       db ' ', 0
   357 00000C20 2000                        movOfic1AtrasStr           db ' ', 0
   358 00000C22 2000                        movOfic1DiagonalStr        db ' ', 0
   359 00000C24 2000                        movOfic1DiagArribaDerStr   db ' ', 0
   360 00000C26 2000                        movOfic1DiagArribaIzqStr   db ' ', 0
   361 00000C28 2000                        movOfic1DiagAbajoDerStr    db ' ', 0
   362 00000C2A 2000                        movOfic1DiagAbajoIzqStr    db ' ', 0
   363 00000C2C 2000                        movOfic2AdelanteStr        db ' ', 0
   364 00000C2E 2000                        movOfic2DerechaStr         db ' ', 0
   365 00000C30 2000                        movOfic2IzquierdaStr       db ' ', 0
   366 00000C32 2000                        movOfic2AtrasStr           db ' ', 0
   367 00000C34 2000                        movOfic2DiagonalStr        db ' ', 0
   368 00000C36 2000                        movOfic2DiagArribaDerStr   db ' ', 0
   369 00000C38 2000                        movOfic2DiagArribaIzqStr   db ' ', 0
   370 00000C3A 2000                        movOfic2DiagAbajoDerStr    db ' ', 0
   371 00000C3C 2000                        movOfic2DiagAbajoIzqStr    db ' ', 0
   372 00000C3E 2000                        cantSoldCapturadosStr      db ' ', 0 
   373 00000C40 2000                        cantOficInvalidadosStr     db ' ', 0 
   374                                  
   375                                  section .bss
   376                                  
   377 00000000 ????????                    eleccionRotar       resd 1  ; Variable pivote para la elección de rotar el tablero
   378 00000004 ????????                    rotacionElegida     resd 1  ; Variable pivote para la rotación del tablero
   379                                  
   380 00000008 ????                        simbOficElegido     resb 2  ; Variable pivote para el símbolo de los oficiales
   381 0000000A ????                        simbSoldElegido     resb 2  ; Variable pivote para el símbolo de los soldados
   382                                  
   383 0000000C ????????                    piezaIniElegida     resd 1  ; Variable pivote para la pieza que inicia
   384                                  
   385 00000010 <res 74h>                   tableroEnJuego      resb 116 ; Tablero en juego
   386                                  
   387 00000084 ????????                    soldadoElegido      resb 4  ; Fila y columna del soldado a mover
   388 00000088 ????????                    casillaMovSold      resb 4  ; Fila y columna de la casilla de destino del soldado
   389                                  
   390 0000008C ????????                    oficialElegido      resb 4  ; Fila y columna del oficial a mover
   391 00000090 ????????                    casillaMovOfic      resb 4  ; Fila y columna de la casilla de destino del oficial
   392                                  
   393 00000094 ????????????????            fila                resq 1
   394 0000009C ????????????????            columna             resq 1   
   395 000000A4 ????????????????            desplazCasOrig      resq 1
   396                                  
   397 000000AC ????????????????            filaAMover          resq 1
   398 000000B4 ????????????????            columnaAMover       resq 1
   399 000000BC ????????????????            desplazCasAMover    resq 1
   400                                  
   401 000000C4 ????????????????            filaAux             resq 1
   402 000000CC ????????????????            columnaAux          resq 1
   403 000000D4 ????????????????            desplazAux          resq 1
   404 000000DC ????????????????            desplazAux2         resq 1
   405                                  
   406 000000E4 ????????????????            idArchGuardado      resq 1 ; ID del archivo de la partida guardada
   407                                      
   408 000000EC <res 47h>                   msgErrorEspecificoSold  resb 71 ; Máximo largo de mensaje de error para soldados
   409 00000133 <res 47h>                   msgErrorEspecificoOfic  resb 71 ; Máximo largo de mensaje de error para oficiales
   410                                  
   411 0000017A <res 47h>                   msgErrorEspecificoSoldMov   resb 71 ; Máximo largo de mensaje de error para movimientos de soldados
   412 000001C1 <res 47h>                   msgErrorEspecificoOficMov   resb 71 ; Máximo largo de mensaje de error para movimientos de oficiales
   413                                  
   414                                  section .text
   415                                      global main
   416                                  
   417                                  main:
   418                                      ; Vemos si hay una partida guardada
   419                                      mOpenFile nombreArchivo, modoLectura
   112 00000000 48BF-               <1>  mov rdi, %1
   112 00000002 [020C000000000000]  <1>
   113 0000000A 48BE-               <1>  mov rsi, %2
   113 0000000C [F90B000000000000]  <1>
   114 00000014 4883EC08            <1>  sub rsp, 8
   115 00000018 E8(00000000)        <1>  call fopen
   116 0000001D 4883C408            <1>  add rsp, 8
   117                              <1> 
   118 00000021 4883F800            <1>  cmp rax, 0
   119 00000025 48890425[E4000000]  <1>  mov qword[idArchGuardado], rax
   420 0000002D 4883F800                    cmp rax, 0
   421 00000031 7F02                        jg partidaGuardada
   422 00000033 EB18                        jmp bienvenida
   423                                  
   424                                      partidaGuardada:
   425 00000035 E8DF2A0000                      call abrirPartidaGuardada
   426 0000003A 803C25[19080000]73              cmp byte[turnoDe], 's'
   427 00000042 0F84C0020000                    je loopMovimientos
   428 00000048 E9AD030000                      jmp turnoOficiales
   429                                  
   430                                      bienvenida:
   431                                          mPuts msgBienvenida
     2 0000004D 48BF-               <1>  mov rdi, %1
     2 0000004F [BC01000000000000]  <1>
     3 00000057 4883EC08            <1>  sub rsp, 8
     4 0000005B E8(00000000)        <1>  call puts
     5 00000060 4883C408            <1>  add rsp, 8
   432                                  
   433                                      ; Espacio de personalización del tablero
   434                                      personalizar:
   435 00000064 C70425[00000000]00-             mov dword[eleccionRotar], ''    ; vaciar variable
   435 0000006C 000000             
   436                                          mPuts msgPersonalizarTablero
     2 0000006F 48BF-               <1>  mov rdi, %1
     2 00000071 [EE01000000000000]  <1>
     3 00000079 4883EC08            <1>  sub rsp, 8
     4 0000007D E8(00000000)        <1>  call puts
     5 00000082 4883C408            <1>  add rsp, 8
   437                                          mGets eleccionRotar
    17 00000086 48BF-               <1>  mov rdi, %1
    17 00000088 [0000000000000000]  <1>
    18 00000090 4883EC08            <1>  sub rsp, 8
    19 00000094 E8(00000000)        <1>  call gets
    20 00000099 4883C408            <1>  add rsp, 8
   438                                  
   439 0000009D 833C25[00000000]6E              cmp dword[eleccionRotar], 'n' 
   440 000000A5 0F8446020000                    je dejarTableroOrig
   441 000000AB 833C25[00000000]73              cmp dword[eleccionRotar], 's'
   442 000000B3 7427                            je personalizarRotacion
   443                                  
   444 000000B5 833C25[00000000]23              cmp dword[eleccionRotar], '#'
   445 000000BD 0F842C240000                    je salirSinGuardar
   446                                  
   447                                          mErrorJump msgOpcionInvalida, personalizar
    45                              <1>  mPuts %1
     2 000000C3 48BF-               <2>  mov rdi, %1
     2 000000C5 [1702000000000000]  <2>
     3 000000CD 4883EC08            <2>  sub rsp, 8
     4 000000D1 E8(00000000)        <2>  call puts
     5 000000D6 4883C408            <2>  add rsp, 8
    46 000000DA EB88                <1>  jmp %2
   448                                  
   449                                      ; En caso de querer personalizar, se debe elegir la rotación
   450                                      personalizarRotacion:
   451                                          mPuts msgPregRotacion
     2 000000DC 48BF-               <1>  mov rdi, %1
     2 000000DE [C203000000000000]  <1>
     3 000000E6 4883EC08            <1>  sub rsp, 8
     4 000000EA E8(00000000)        <1>  call puts
     5 000000EF 4883C408            <1>  add rsp, 8
   452                                          mPuts msgRotacionesPosibles
     2 000000F3 48BF-               <1>  mov rdi, %1
     2 000000F5 [0004000000000000]  <1>
     3 000000FD 4883EC08            <1>  sub rsp, 8
     4 00000101 E8(00000000)        <1>  call puts
     5 00000106 4883C408            <1>  add rsp, 8
   453                                  
   454 0000010A C70425[04000000]00-             mov dword[rotacionElegida], '' ; limpiar variable
   454 00000112 000000             
   455                                          mGets rotacionElegida
    17 00000115 48BF-               <1>  mov rdi, %1
    17 00000117 [0400000000000000]  <1>
    18 0000011F 4883EC08            <1>  sub rsp, 8
    19 00000123 E8(00000000)        <1>  call gets
    20 00000128 4883C408            <1>  add rsp, 8
   456                                  
   457 0000012C 833C25[04000000]23              cmp dword[rotacionElegida], '#'
   458 00000134 0F84B5230000                    je salirSinGuardar
   459                                  
   460                                          mMov orientacionTablero, rotacionElegida, 1
    31 0000013A B901000000          <1>  mov rcx, %3
    32 0000013F 488D3425[04000000]  <1>  lea rsi, [%2]
    33 00000147 488D3C25[9C0B0000]  <1>  lea rdi, [%1]
    34 0000014F F3A4                <1>  rep movsb
   461                                          
   462 00000151 833C25[04000000]31              cmp dword[rotacionElegida], '1'
   463 00000159 7C0F                            jl invalidaRotacion
   464 0000015B 833C25[04000000]34              cmp dword[rotacionElegida], '4'
   465 00000163 7F05                            jg invalidaRotacion
   466                                  
   467 00000165 E9E1000000                      jmp rotarTablero
   468                                  
   469                                      invalidaRotacion:
   470                                          mErrorJump msgOpcionInvalida, personalizarRotacion
    45                              <1>  mPuts %1
     2 0000016A 48BF-               <2>  mov rdi, %1
     2 0000016C [1702000000000000]  <2>
     3 00000174 4883EC08            <2>  sub rsp, 8
     4 00000178 E8(00000000)        <2>  call puts
     5 0000017D 4883C408            <2>  add rsp, 8
    46 00000181 E956FFFFFF          <1>  jmp %2
   471                                  
   472                                      ; Luego de elegir la rotación, se debe personalizar los símbolos
   473                                      personalizarSimbolos:
   474                                          mPuts msgPersonalizarSimb
     2 00000186 48BF-               <1>  mov rdi, %1
     2 00000188 [5104000000000000]  <1>
     3 00000190 4883EC08            <1>  sub rsp, 8
     4 00000194 E8(00000000)        <1>  call puts
     5 00000199 4883C408            <1>  add rsp, 8
   475                                  
   476 0000019D E859030000                      call setearSimbSoldados
   477 000001A2 4883F800                        cmp rax, 0
   478 000001A6 0F8443230000                    je salirSinGuardar
   479                                          
   480 000001AC E8DE030000                      call setearSimbOficiales
   481 000001B1 4883F800                        cmp rax, 0
   482 000001B5 0F8434230000                    je salirSinGuardar
   483                                          
   484                                      ; Luego de personalizar los símbolos, se debe elegir quién inicia la partida
   485                                      personalizarQuienInicia:
   486 000001BB C70425[0C000000]00-             mov dword[piezaIniElegida], ''    ; vaciar variable
   486 000001C3 000000             
   487                                          mPuts msgQuienInicia
     2 000001C6 48BF-               <1>  mov rdi, %1
     2 000001C8 [E404000000000000]  <1>
     3 000001D0 4883EC08            <1>  sub rsp, 8
     4 000001D4 E8(00000000)        <1>  call puts
     5 000001D9 4883C408            <1>  add rsp, 8
   488                                          mGets piezaIniElegida
    17 000001DD 48BF-               <1>  mov rdi, %1
    17 000001DF [0C00000000000000]  <1>
    18 000001E7 4883EC08            <1>  sub rsp, 8
    19 000001EB E8(00000000)        <1>  call gets
    20 000001F0 4883C408            <1>  add rsp, 8
   489                                  
   490 000001F4 833C25[0C000000]23              cmp dword[piezaIniElegida], '#'
   491 000001FC 0F84ED220000                    je salirSinGuardar
   492                                  
   493 00000202 833C25[0C000000]6F              cmp dword[piezaIniElegida], 'o' 
   494 0000020A 7423                            je setearPiezaInicio
   495 0000020C 833C25[0C000000]73              cmp dword[piezaIniElegida], 's'
   496 00000214 7419                            je setearPiezaInicio
   497                                  
   498                                          mErrorJump msgOpcionInvalida, personalizarQuienInicia
    45                              <1>  mPuts %1
     2 00000216 48BF-               <2>  mov rdi, %1
     2 00000218 [1702000000000000]  <2>
     3 00000220 4883EC08            <2>  sub rsp, 8
     4 00000224 E8(00000000)        <2>  call puts
     5 00000229 4883C408            <2>  add rsp, 8
    46 0000022D EB8C                <1>  jmp %2
   499                                  
   500                                          setearPiezaInicio:
   501                                              mMov piezaDeInicio, piezaIniElegida, 1
    31 0000022F B901000000          <1>  mov rcx, %3
    32 00000234 488D3425[0C000000]  <1>  lea rsi, [%2]
    33 0000023C 488D3C25[9D0B0000]  <1>  lea rdi, [%1]
    34 00000244 F3A4                <1>  rep movsb
   502 00000246 E98E000000                          jmp comenzarPorInicio
   503                                  
   504                                  ; --------------------------------------------------------------------------------------------
   505                                  ; RUTINA PARA ROTAR EL TABLERO EN BASE A LA ELECCIÓN DEL USUARIO
   506                                  ; --------------------------------------------------------------------------------------------
   507                                  
   508                                  rotarTablero:
   509                                      ; Se debe mostrar el tablero (en la orientacion indicada y con los simbolos indicados), 
   510                                      ; y se debe mostrar el mensaje de turno en base a lo que haya personalizado el usuario.
   511 0000024B 803C25[9C0B0000]31              cmp byte[orientacionTablero], '1'
   512 00000253 7430                            je rotarIzquierda
   513 00000255 803C25[9C0B0000]32              cmp byte[orientacionTablero], '2'
   514 0000025D 7442                            je rotarDerecha
   515 0000025F 803C25[9C0B0000]33              cmp byte[orientacionTablero], '3'
   516 00000267 7454                            je rotarInvertir
   517                                  
   518                                          mMov tableroEnJuego, tableroOrig, 116
    31 00000269 B974000000          <1>  mov rcx, %3
    32 0000026E 488D3425[00000000]  <1>  lea rsi, [%2]
    33 00000276 488D3C25[10000000]  <1>  lea rdi, [%1]
    34 0000027E F3A4                <1>  rep movsb
   519 00000280 E901FFFFFF                      jmp personalizarSimbolos
   520                                  
   521                                      rotarIzquierda:
   522                                          mMov tableroEnJuego, tableroIzq, 116
    31 00000285 B974000000          <1>  mov rcx, %3
    32 0000028A 488D3425[4D010000]  <1>  lea rsi, [%2]
    33 00000292 488D3C25[10000000]  <1>  lea rdi, [%1]
    34 0000029A F3A4                <1>  rep movsb
   523 0000029C E9E5FEFFFF                      jmp personalizarSimbolos
   524                                      
   525                                      rotarDerecha:
   526                                          mMov tableroEnJuego, tableroDer, 116
    31 000002A1 B974000000          <1>  mov rcx, %3
    32 000002A6 488D3425[DE000000]  <1>  lea rsi, [%2]
    33 000002AE 488D3C25[10000000]  <1>  lea rdi, [%1]
    34 000002B6 F3A4                <1>  rep movsb
   527 000002B8 E9C9FEFFFF                      jmp personalizarSimbolos
   528                                  
   529                                      rotarInvertir:
   530                                          mMov tableroEnJuego, tableroInv, 116
    31 000002BD B974000000          <1>  mov rcx, %3
    32 000002C2 488D3425[6F000000]  <1>  lea rsi, [%2]
    33 000002CA 488D3C25[10000000]  <1>  lea rdi, [%1]
    34 000002D2 F3A4                <1>  rep movsb
   531 000002D4 E9ADFEFFFF                      jmp personalizarSimbolos
   532                                  
   533                                  ; --------------------------------------------------------------------------------------------
   534                                  ; RUTINA PARA COMENZAR EL JUEGO -> Se comienza desde el jugador elegido (o el default)
   535                                  ; --------------------------------------------------------------------------------------------
   536                                  
   537                                  comenzarPorInicio:
   538 000002D9 803C25[9D0B0000]73          cmp byte[piezaDeInicio], 's'
   539 000002E1 7425                        je loopMovimientos
   540 000002E3 803C25[9D0B0000]6F          cmp byte[piezaDeInicio], 'o'
   541 000002EB 0F8409010000                je turnoOficiales
   542                                  
   543                                  
   544                                  ; En caso de no haber personalizado el tablero, se debe dejar el tablero original
   545                                  dejarTableroOrig:
   546                                      mMov tableroEnJuego, tableroOrig, 116
    31 000002F1 B974000000          <1>  mov rcx, %3
    32 000002F6 488D3425[00000000]  <1>  lea rsi, [%2]
    33 000002FE 488D3C25[10000000]  <1>  lea rdi, [%1]
    34 00000306 F3A4                <1>  rep movsb
   547                                  
   548                                  ; COMIENZA EL JUEGO
   549                                  loopMovimientos:; mostrarTablero, mostrarTurno, realizarMovimiento, verificarFinJuego
   550 00000308 C60425[EC000000]00          mov byte[msgErrorEspecificoSold], 0
   551                                      turnoSoldados:
   552 00000310 C60425[19080000]73              mov byte[turnoDe], 's'
   553 00000318 C60425[84000000]30              mov byte [soldadoElegido], '0'
   554                                      
   555                                          mCommand cmdLimpiarPantalla ; Limpia la pantalla para mostrar el tablero
    24 00000320 48BF-               <1>  mov rdi, %1
    24 00000322 [9E0B000000000000]  <1>
    25 0000032A 4883EC08            <1>  sub rsp, 8
    26 0000032E E8(00000000)        <1>  call system
    27 00000333 4883C408            <1>  add rsp, 8
   556                                  
   557                                          mPuts tableroEnJuego ; Muestro el tablero
     2 00000337 48BF-               <1>  mov rdi, %1
     2 00000339 [1000000000000000]  <1>
     3 00000341 4883EC08            <1>  sub rsp, 8
     4 00000345 E8(00000000)        <1>  call puts
     5 0000034A 4883C408            <1>  add rsp, 8
   558                                  
   559 0000034E 803C25[EC000000]00              cmp byte[msgErrorEspecificoSold], 0
   560 00000356 0F8523040000                    jne imprimirErrorSold
   561                                  
   562                                          todoOkSold:
   563                                  
   564                                              mPuts msgTurnoSoldados      ; Muestra el mensaje de seleccionar ficha a mover
     2 0000035C 48BF-               <1>  mov rdi, %1
     2 0000035E [1909000000000000]  <1>
     3 00000366 4883EC08            <1>  sub rsp, 8
     4 0000036A E8(00000000)        <1>  call puts
     5 0000036F 4883C408            <1>  add rsp, 8
   565                                              mGets soldadoElegido        ; Obtiene la ficha a mover
    17 00000373 48BF-               <1>  mov rdi, %1
    17 00000375 [8400000000000000]  <1>
    18 0000037D 4883EC08            <1>  sub rsp, 8
    19 00000381 E8(00000000)        <1>  call gets
    20 00000386 4883C408            <1>  add rsp, 8
   566                                  
   567 0000038A 803C25[84000000]23                  cmp byte[soldadoElegido], '#'
   568 00000392 0F845D210000                        je salirDelJuego
   569                                              
   570 00000398 E986020000                          jmp verificarFichaSold ; Verifica si la ficha elegida es valida
   571                                  
   572                                              casillaAMoverseSold:
   573                                                  
   574                                                  mPuts msgTurnoMovSold   ; Muestra el mensaje de seleccionar casilla a mover
     2 0000039D 48BF-               <1>  mov rdi, %1
     2 0000039F [C609000000000000]  <1>
     3 000003A7 4883EC08            <1>  sub rsp, 8
     4 000003AB E8(00000000)        <1>  call puts
     5 000003B0 4883C408            <1>  add rsp, 8
   575                                                  mGets casillaMovSold    ; Obtiene la casilla a mover
    17 000003B4 48BF-               <1>  mov rdi, %1
    17 000003B6 [8800000000000000]  <1>
    18 000003BE 4883EC08            <1>  sub rsp, 8
    19 000003C2 E8(00000000)        <1>  call gets
    20 000003C7 4883C408            <1>  add rsp, 8
   576                                  
   577 000003CB 803C25[88000000]23                      cmp byte[casillaMovSold], '#'
   578 000003D3 0F841C210000                            je salirDelJuego
   579                                  
   580 000003D9 E93B050000                              jmp verificarMovimientoSold ; Verifica si el movimiento es valido
   581                                  
   582                                                  moverSoldado:
   583 000003DE E8860B0000                                  call realizarMovimientoSold ; Realiza el movimiento
   584                                                      
   585 000003E3 E8FD160000                                  call verificarFinJuegoSoldados ; Verificar fin de juego por algún movimiento de soldado
   586 000003E8 4883F800                                    cmp rax, 0
   587 000003EC 0F84551C0000                                je finDeJuego
   588                                  
   589 000003F2 C60425[33010000]00          mov byte[msgErrorEspecificoOfic], 0
   590                                      turnoOficiales:
   591 000003FA C60425[19080000]6F              mov byte[turnoDe], 'o'
   592 00000402 C60425[8C000000]30              mov byte[oficialElegido], '0'
   593                                          
   594                                          mCommand cmdLimpiarPantalla ; Limpia la pantalla para mostrar el tablero
    24 0000040A 48BF-               <1>  mov rdi, %1
    24 0000040C [9E0B000000000000]  <1>
    25 00000414 4883EC08            <1>  sub rsp, 8
    26 00000418 E8(00000000)        <1>  call system
    27 0000041D 4883C408            <1>  add rsp, 8
   595                                  
   596                                          mPuts tableroEnJuego ; Muestra el tablero
     2 00000421 48BF-               <1>  mov rdi, %1
     2 00000423 [1000000000000000]  <1>
     3 0000042B 4883EC08            <1>  sub rsp, 8
     4 0000042F E8(00000000)        <1>  call puts
     5 00000434 4883C408            <1>  add rsp, 8
   597                                  
   598 00000438 803C25[33010000]00              cmp byte[msgErrorEspecificoOfic], 0
   599 00000440 0F85B7040000                    jne imprimirErrorOfic
   600                                  
   601                                          todoOkOfic:
   602                                  
   603                                              mPuts msgTurnoOficiales ; Muestra el mensaje de seleccionar ficha a mover
     2 00000446 48BF-               <1>  mov rdi, %1
     2 00000448 [6F09000000000000]  <1>
     3 00000450 4883EC08            <1>  sub rsp, 8
     4 00000454 E8(00000000)        <1>  call puts
     5 00000459 4883C408            <1>  add rsp, 8
   604                                              mGets oficialElegido    ; Obtiene la ficha a mover
    17 0000045D 48BF-               <1>  mov rdi, %1
    17 0000045F [8C00000000000000]  <1>
    18 00000467 4883EC08            <1>  sub rsp, 8
    19 0000046B E8(00000000)        <1>  call gets
    20 00000470 4883C408            <1>  add rsp, 8
   605                                  
   606 00000474 803C25[8C000000]23                  cmp byte[oficialElegido], '#'
   607 0000047C 0F8473200000                        je salirDelJuego
   608                                  
   609 00000482 E914030000                          jmp verificarFichaOfic ; Verifica si la ficha elegida es valida
   610                                  
   611                                              casillaAMoverseOfic:
   612                                  
   613                                                  mPuts msgTurnoMovOfic   ; Muestra el mensaje de seleccionar casilla a mover
     2 00000487 48BF-               <1>  mov rdi, %1
     2 00000489 [080A000000000000]  <1>
     3 00000491 4883EC08            <1>  sub rsp, 8
     4 00000495 E8(00000000)        <1>  call puts
     5 0000049A 4883C408            <1>  add rsp, 8
   614                                                  mGets casillaMovOfic    ; Obtiene la casilla a mover
    17 0000049E 48BF-               <1>  mov rdi, %1
    17 000004A0 [9000000000000000]  <1>
    18 000004A8 4883EC08            <1>  sub rsp, 8
    19 000004AC E8(00000000)        <1>  call gets
    20 000004B1 4883C408            <1>  add rsp, 8
   615                                  
   616 000004B5 803C25[90000000]23                      cmp byte[casillaMovOfic], '#'
   617 000004BD 0F8432200000                            je salirDelJuego
   618                                                  
   619 000004C3 E9EB070000                              jmp verificarMovimientoOfic ; Verifica si el movimiento es valido
   620                                  
   621                                                  moverOficial:
   622 000004C8 E8CA0A0000                                  call realizarMovimientoOfic ; Realiza el movimiento
   623                                                      ; Verificar fin de juego por algún movimiento de oficial
   624 000004CD E8D9150000                                  call verificarFinJuegoOficiales
   625 000004D2 4883F800                                    cmp rax, 0
   626 000004D6 0F846B1B0000                                je finDeJuego
   627                                                      
   628 000004DC E927FEFFFF                                  jmp loopMovimientos
   629                                                  
   630                                                  capturar:
   631 000004E1 E8B60E0000                                  call capturarSoldado ; Captura soldado
   632                                                      ; Verificar fin de juego por captura de soldado
   633 000004E6 E8C0150000                                  call verificarFinJuegoOficiales
   634 000004EB 4883F800                                    cmp rax, 0
   635 000004EF 0F84521B0000                                je finDeJuego
   636                                                      
   637                                                  ; Repetir en loop
   638 000004F5 E90EFEFFFF                              jmp loopMovimientos
   639                                  
   640 000004FA C3                          ret
   641                                      ; Aquí termina el main !!!
   642                                  
   643                                  
   644                                  ; --------------------------------------------------------------------------------------------
   645                                  ; RUTINAS PARA SETEAR LOS SÍMBOLOS PERSONALIZADOS DE SOLDADOS Y OFICIALES
   646                                  ; --------------------------------------------------------------------------------------------
   647                                  
   648                                  setearSimbSoldados:
   649                                      mPuts msgSimboloSoldados
     2 000004FB 48BF-               <1>  mov rdi, %1
     2 000004FD [C804000000000000]  <1>
     3 00000505 4883EC08            <1>  sub rsp, 8
     4 00000509 E8(00000000)        <1>  call puts
     5 0000050E 4883C408            <1>  add rsp, 8
   650                                      mGets simbSoldElegido
    17 00000512 48BF-               <1>  mov rdi, %1
    17 00000514 [0A00000000000000]  <1>
    18 0000051C 4883EC08            <1>  sub rsp, 8
    19 00000520 E8(00000000)        <1>  call gets
    20 00000525 4883C408            <1>  add rsp, 8
   651                                  
   652 00000529 803C25[0A000000]20          cmp byte[simbSoldElegido], ' '
   653 00000531 7440                        je errSeteoSoldado
   654 00000533 803C25[0A000000]00          cmp byte[simbSoldElegido], ''
   655 0000053B 7436                        je errSeteoSoldado
   656                                  
   657 0000053D 8A0425[0B000000]            mov al, byte[simbSoldElegido+1]
   658 00000544 3C00                        cmp al, 0
   659 00000546 752B                        jne errSeteoSoldado
   660                                  
   661 00000548 803C25[0A000000]23          cmp byte[simbSoldElegido], '#'
   662 00000550 0F84991F0000                je salirSinGuardar
   663                                  
   664                                      mMov simboloSoldados, simbSoldElegido, 1
    31 00000556 B901000000          <1>  mov rcx, %3
    32 0000055B 488D3425[0A000000]  <1>  lea rsi, [%2]
    33 00000563 488D3C25[9A0B0000]  <1>  lea rdi, [%1]
    34 0000056B F3A4                <1>  rep movsb
   665                                  
   666 0000056D E8F90A0000                  call cambiarTableroSoldNuevo
   667                                  
   668 00000572 C3                          ret
   669                                  
   670                                      errSeteoSoldado:
   671                                          mErrorJump msgOpcionInvalida, setearSimbSoldados
    45                              <1>  mPuts %1
     2 00000573 48BF-               <2>  mov rdi, %1
     2 00000575 [1702000000000000]  <2>
     3 0000057D 4883EC08            <2>  sub rsp, 8
     4 00000581 E8(00000000)        <2>  call puts
     5 00000586 4883C408            <2>  add rsp, 8
    46 0000058A E96CFFFFFF          <1>  jmp %2
   672                                  
   673                                  setearSimbOficiales:
   674                                      mPuts msgSimboloOficiales
     2 0000058F 48BF-               <1>  mov rdi, %1
     2 00000591 [AB04000000000000]  <1>
     3 00000599 4883EC08            <1>  sub rsp, 8
     4 0000059D E8(00000000)        <1>  call puts
     5 000005A2 4883C408            <1>  add rsp, 8
   675                                      mGets simbOficElegido
    17 000005A6 48BF-               <1>  mov rdi, %1
    17 000005A8 [0800000000000000]  <1>
    18 000005B0 4883EC08            <1>  sub rsp, 8
    19 000005B4 E8(00000000)        <1>  call gets
    20 000005B9 4883C408            <1>  add rsp, 8
   676                                  
   677 000005BD 803C25[08000000]20          cmp byte[simbOficElegido], ' '
   678 000005C5 7440                        je errSeteoOficial
   679 000005C7 803C25[08000000]00          cmp byte[simbOficElegido], ''
   680 000005CF 7436                        je errSeteoOficial
   681                                  
   682 000005D1 8A0425[09000000]            mov al, byte[simbOficElegido+1]
   683 000005D8 3C00                        cmp al, 0
   684 000005DA 752B                        jne errSeteoOficial
   685                                  
   686 000005DC 803C25[08000000]23          cmp byte[simbOficElegido], '#'
   687 000005E4 0F84051F0000                je salirSinGuardar
   688                                  
   689                                      mMov simboloOficiales, simbOficElegido, 1
    31 000005EA B901000000          <1>  mov rcx, %3
    32 000005EF 488D3425[08000000]  <1>  lea rsi, [%2]
    33 000005F7 488D3C25[980B0000]  <1>  lea rdi, [%1]
    34 000005FF F3A4                <1>  rep movsb
   690                                  
   691 00000601 E8930A0000                  call cambiarTableroOficNuevo
   692                                  
   693 00000606 C3                          ret
   694                                  
   695                                      errSeteoOficial:
   696                                          mPuts msgOpcionInvalida
     2 00000607 48BF-               <1>  mov rdi, %1
     2 00000609 [1702000000000000]  <1>
     3 00000611 4883EC08            <1>  sub rsp, 8
     4 00000615 E8(00000000)        <1>  call puts
     5 0000061A 4883C408            <1>  add rsp, 8
   697 0000061E E96CFFFFFF                      jmp setearSimbOficiales
   698                                  
   699                                  ;; --------------------------------------------------------------------------------------------
   700                                  ; VERIFICACIONES DE PIEZAS ORIGINALES A MOVER PARA SOLDADOS Y OFICIALES
   701                                  ; --------------------------------------------------------------------------------------------
   702                                  
   703                                  verificarFichaSold:
   704 00000623 8A0425[84000000]            mov al, byte[soldadoElegido] ; Numero de fila
   705                                      
   706                                      ; Compromabos que el caracter ingresado sea un número entre 1 y 7
   707 0000062A 3C31                        cmp al, '1'
   708 0000062C 0F8C05010000                jl errorInputSold
   709 00000632 3C37                        cmp al, '7'
   710 00000634 0F8FFD000000                jg errorInputSold
   711                                  
   712                                      ; Parseamos el número de fila de string a int
   713 0000063A 48C70425[94000000]-         mov qword[fila], 0
   713 00000642 00000000           
   714                                      mSscanf byte[soldadoElegido], formatoAtoi, fila
    69 00000646 488D3C25[84000000]  <1>  lea rdi, %1
    70 0000064E 48BE-               <1>  mov rsi, %2
    70 00000650 [F30B000000000000]  <1>
    71 00000658 48BA-               <1>  mov rdx, %3
    71 0000065A [9400000000000000]  <1>
    72 00000662 4883EC08            <1>  sub rsp, 8
    73 00000666 E8(00000000)        <1>  call sscanf
    74 0000066B 4883C408            <1>  add rsp, 8
   715 0000066F 4883F801                    cmp rax, 1
   716 00000673 0F8CBE000000                jl errorInputSold
   717                                  
   718                                      ; Comprobamos que el caracter siguiente sea un guión para que cumpla con el formato establecido
   719 00000679 8A0425[85000000]            mov al, byte[soldadoElegido+1] ; Caracter '-'
   720 00000680 3C2D                        cmp al, '-'
   721 00000682 0F85AF000000                jne errorInputSold
   722                                      
   723                                      ; Comprobamos que el número de columna sea un número entre 1 y 7
   724 00000688 8A0425[86000000]            mov al, byte[soldadoElegido+2] ; Numero de columna
   725 0000068F 3C31                        cmp al, '1'
   726 00000691 0F8CA0000000                jl errorInputSold
   727 00000697 3C37                        cmp al, '7'
   728 00000699 0F8F98000000                jg errorInputSold
   729                                  
   730                                      ; Parseamos el número de columna de string a int
   731 0000069F 48C70425[9C000000]-         mov qword[columna], 0
   731 000006A7 00000000           
   732                                      mSscanf byte[soldadoElegido+2], formatoAtoi, columna
    69 000006AB 488D3C25[86000000]  <1>  lea rdi, %1
    70 000006B3 48BE-               <1>  mov rsi, %2
    70 000006B5 [F30B000000000000]  <1>
    71 000006BD 48BA-               <1>  mov rdx, %3
    71 000006BF [9C00000000000000]  <1>
    72 000006C7 4883EC08            <1>  sub rsp, 8
    73 000006CB E8(00000000)        <1>  call sscanf
    74 000006D0 4883C408            <1>  add rsp, 8
   733 000006D4 4883F801                    cmp rax, 1
   734 000006D8 7C5D                        jl errorInputSold
   735                                  
   736                                      ; El ultimo caracter del string ingresado debe ser un caracter nulo
   737 000006DA 8A0425[87000000]            mov al, byte[soldadoElegido+3] ; Caracter nulo
   738 000006E1 3C00                        cmp al, 0
   739 000006E3 7552                        jne errorInputSold
   740                                  
   741                                      ; Calculamos desplazamiento en el tablero
   742                                      ;  mCalcDesplaz calcula el desplazamiento en el tablero en base a la fila y columna y lo almacena en desplazCasOrig usando una formula
   743                                      mCalcDesplaz [fila], [columna], qword[desplazCasOrig]
    87 000006E5 488B3C25[94000000]  <1>  mov rdi, %1
    88 000006ED 488B3425[9C000000]  <1>  mov rsi, %2
    89 000006F5 E859080000          <1>  call calcularDesplazamiento
    90 000006FA 48890425[A4000000]  <1>  mov %3, rax
   744 00000702 488B1C25[A4000000]          mov rbx, qword[desplazCasOrig]
   745                                      
   746                                      ; Limpio los registros
   747 0000070A B800000000                  mov rax,0
   748 0000070F BA00000000                  mov rdx, 0
   749                                  
   750                                      ; Cargo en dl el caracter de la casilla en el tablero y en al el simbolo de los soldados
   751 00000714 8A93[10000000]              mov dl, byte[tableroEnJuego+rbx]
   752 0000071A 8A0425[9A0B0000]            mov al, [simboloSoldados]
   753                                  
   754                                      ; Comparo los caracteres, deben ser iguales para que el movimiento no sea invalido
   755 00000721 38C2                        cmp dl, al
   756 00000723 7536                        jne errorCasillaInvalidaSold
   757                                      
   758                                      ; Si no hubo errores, limpio el mensaje de error y sigo con la ejecucion
   759 00000725 B800000000                  mov rax, 0
   760 0000072A 48890425[EC000000]          mov [msgErrorEspecificoSold], rax
   761 00000732 E966FCFFFF                  jmp casillaAMoverseSold
   762                                  
   763                                      ; Errores
   764                                      errorInputSold:
   765 00000737 488B0425[83020000]              mov rax, [msgErrorInputSold]
   766                                          mMov msgErrorEspecificoSold, msgErrorInputSold, 61
    31 0000073F B93D000000          <1>  mov rcx, %3
    32 00000744 488D3425[83020000]  <1>  lea rsi, [%2]
    33 0000074C 488D3C25[EC000000]  <1>  lea rdi, [%1]
    34 00000754 F3A4                <1>  rep movsb
   767 00000756 E9B5FBFFFF                      jmp turnoSoldados
   768                                  
   769                                      errorCasillaInvalidaSold:
   770 0000075B 488B0425[3C020000]              mov rax, [msgCasillaInvalidaSold]
   771                                          mMov msgErrorEspecificoSold, msgCasillaInvalidaSold, 71
    31 00000763 B947000000          <1>  mov rcx, %3
    32 00000768 488D3425[3C020000]  <1>  lea rsi, [%2]
    33 00000770 488D3C25[EC000000]  <1>  lea rdi, [%1]
    34 00000778 F3A4                <1>  rep movsb
   772 0000077A E991FBFFFF                      jmp turnoSoldados
   773                                  
   774                                      imprimirErrorSold:
   775                                          mPuts msgErrorEspecificoSold
     2 0000077F 48BF-               <1>  mov rdi, %1
     2 00000781 [EC00000000000000]  <1>
     3 00000789 4883EC08            <1>  sub rsp, 8
     4 0000078D E8(00000000)        <1>  call puts
     5 00000792 4883C408            <1>  add rsp, 8
   776 00000796 E9C1FBFFFF                      jmp todoOkSold
   777                                      
   778                                  
   779                                  verificarFichaOfic:
   780 0000079B 8A0C25[8C000000]            mov cl, byte[oficialElegido] ; Numero de fila
   781                                      
   782                                      ; Compromabos que el caracter ingresado para la fila sea un número entre 1 y 7
   783 000007A2 80F931                      cmp cl, '1'
   784 000007A5 0F8C0A010000                jl errorInputOfic
   785 000007AB 80F937                      cmp cl, '7'
   786 000007AE 0F8F01010000                jg errorInputOfic
   787                                      
   788                                      ; Parseamos el número de fila de string a int
   789 000007B4 48C70425[94000000]-         mov qword[fila], 0
   789 000007BC 00000000           
   790                                      mSscanf byte[oficialElegido], formatoAtoi, fila
    69 000007C0 488D3C25[8C000000]  <1>  lea rdi, %1
    70 000007C8 48BE-               <1>  mov rsi, %2
    70 000007CA [F30B000000000000]  <1>
    71 000007D2 48BA-               <1>  mov rdx, %3
    71 000007D4 [9400000000000000]  <1>
    72 000007DC 4883EC08            <1>  sub rsp, 8
    73 000007E0 E8(00000000)        <1>  call sscanf
    74 000007E5 4883C408            <1>  add rsp, 8
   791 000007E9 4883F801                    cmp rax, 1
   792 000007ED 0F8CC2000000                jl errorInputOfic
   793                                  
   794                                      ; Comprobamos que el caracter siguiente sea un guión para que cumpla con el formato establecido
   795 000007F3 8A0C25[8D000000]            mov cl, byte[oficialElegido+1] ; Caracter '-'
   796 000007FA 80F92D                      cmp cl, '-'
   797 000007FD 0F85B2000000                jne errorInputOfic
   798                                      
   799                                      ; Comprobamos que el número de columna sea un número entre 1 y 7
   800 00000803 8A0C25[8E000000]            mov cl, byte[oficialElegido+2] ; Numero de columna
   801 0000080A 80F931                      cmp cl, '1'
   802 0000080D 0F8CA2000000                jl errorInputOfic
   803 00000813 80F937                      cmp cl, '7'
   804 00000816 0F8F99000000                jg errorInputOfic
   805                                  
   806                                      ; Parseamos el número de columna de string a int
   807 0000081C 48C70425[9C000000]-         mov qword[columna], 0
   807 00000824 00000000           
   808                                      mSscanf byte[oficialElegido+2], formatoAtoi, columna
    69 00000828 488D3C25[8E000000]  <1>  lea rdi, %1
    70 00000830 48BE-               <1>  mov rsi, %2
    70 00000832 [F30B000000000000]  <1>
    71 0000083A 48BA-               <1>  mov rdx, %3
    71 0000083C [9C00000000000000]  <1>
    72 00000844 4883EC08            <1>  sub rsp, 8
    73 00000848 E8(00000000)        <1>  call sscanf
    74 0000084D 4883C408            <1>  add rsp, 8
   809 00000851 4883F801                    cmp rax, 1
   810 00000855 7C5E                        jl errorInputOfic
   811                                  
   812                                      ; El ultimo caracter del string ingresado debe ser un caracter nulo
   813 00000857 8A0C25[8F000000]            mov cl, byte[oficialElegido+3] ; Caracter nulo
   814 0000085E 80F900                      cmp cl, 0
   815 00000861 7552                        jne errorInputOfic
   816                                  
   817                                      ; Calculamos desplazamiento en tablero
   818                                      ; mCalcDesplaz calcula el desplazamiento en el tablero en base a la fila y columna y lo almacena en desplazCasOrig usando una formula
   819                                      mCalcDesplaz [fila], [columna], qword[desplazCasOrig]
    87 00000863 488B3C25[94000000]  <1>  mov rdi, %1
    88 0000086B 488B3425[9C000000]  <1>  mov rsi, %2
    89 00000873 E8DB060000          <1>  call calcularDesplazamiento
    90 00000878 48890425[A4000000]  <1>  mov %3, rax
   820 00000880 488B1C25[A4000000]          mov rbx, qword[desplazCasOrig]
   821                                      
   822                                      ; Limpio los registros
   823 00000888 B800000000                  mov rax, 0
   824 0000088D BA00000000                  mov rdx, 0
   825                                  
   826                                      ; Cargo en dl el caracter de la casilla en el tablero y en cl el simbolo de los oficiales
   827 00000892 8A93[10000000]              mov dl, byte[tableroEnJuego+rbx]
   828 00000898 8A0C25[980B0000]            mov cl, [simboloOficiales]
   829                                  
   830                                      ; Comparo los caracteres, deben ser iguales para que el movimiento no sea invalido
   831 0000089F 38CA                        cmp dl, cl
   832 000008A1 7536                        jne errorCasillaInvalidaOfic
   833                                  
   834                                      ; Si no hubo errores, limpio el mensaje de error y sigo con la ejecucion
   835 000008A3 B800000000                  mov rax, 0
   836 000008A8 48890425[33010000]          mov [msgErrorEspecificoOfic], rax
   837 000008B0 E9D2FBFFFF                  jmp casillaAMoverseOfic
   838                                  
   839                                      ; Errores
   840                                      errorInputOfic:
   841 000008B5 488B0425[46030000]              mov rax, [msgErrorInputOfic]
   842                                          mMov msgErrorEspecificoOfic, msgErrorInputOfic, 61
    31 000008BD B93D000000          <1>  mov rcx, %3
    32 000008C2 488D3425[46030000]  <1>  lea rsi, [%2]
    33 000008CA 488D3C25[33010000]  <1>  lea rdi, [%1]
    34 000008D2 F3A4                <1>  rep movsb
   843 000008D4 E921FBFFFF                      jmp turnoOficiales
   844                                  
   845                                      errorCasillaInvalidaOfic:
   846 000008D9 488B0425[46030000]              mov rax, [msgErrorInputOfic]
   847                                          mMov msgErrorEspecificoOfic, msgCasillaInvalidaOfic, 71
    31 000008E1 B947000000          <1>  mov rcx, %3
    32 000008E6 488D3425[FF020000]  <1>  lea rsi, [%2]
    33 000008EE 488D3C25[33010000]  <1>  lea rdi, [%1]
    34 000008F6 F3A4                <1>  rep movsb
   848 000008F8 E9FDFAFFFF                      jmp turnoOficiales
   849                                  
   850                                      imprimirErrorOfic:
   851                                          mPuts msgErrorEspecificoOfic
     2 000008FD 48BF-               <1>  mov rdi, %1
     2 000008FF [3301000000000000]  <1>
     3 00000907 4883EC08            <1>  sub rsp, 8
     4 0000090B E8(00000000)        <1>  call puts
     5 00000910 4883C408            <1>  add rsp, 8
   852 00000914 E92DFBFFFF                      jmp todoOkOfic
   853                                  
   854                                  ; --------------------------------------------------------------------------------------------
   855                                  ; VERFICIACIONES DE CASILLAS DESTINO PARA SOLDADOS Y OFICIALES
   856                                  ; --------------------------------------------------------------------------------------------
   857                                  
   858                                  verificarMovimientoSold:
   859 00000919 8A0425[88000000]            mov al, byte[casillaMovSold] ; Numero de fila
   860                                      
   861                                      ; Compromabos que el caracter ingresado sea un número entre 1 y 7
   862 00000920 3C31                        cmp al, '1'
   863 00000922 0F8CE0010000                jl errorInputSoldMov
   864 00000928 3C37                        cmp al, '7'
   865 0000092A 0F8FD8010000                jg errorInputSoldMov
   866                                  
   867                                      ; Parseamos el número de fila de string a int
   868 00000930 48C70425[AC000000]-         mov qword[filaAMover], 0
   868 00000938 00000000           
   869                                      mSscanf byte[casillaMovSold], formatoAtoi, filaAMover
    69 0000093C 488D3C25[88000000]  <1>  lea rdi, %1
    70 00000944 48BE-               <1>  mov rsi, %2
    70 00000946 [F30B000000000000]  <1>
    71 0000094E 48BA-               <1>  mov rdx, %3
    71 00000950 [AC00000000000000]  <1>
    72 00000958 4883EC08            <1>  sub rsp, 8
    73 0000095C E8(00000000)        <1>  call sscanf
    74 00000961 4883C408            <1>  add rsp, 8
   870 00000965 4883F801                    cmp rax, 1
   871 00000969 0F8C99010000                jl errorInputSoldMov
   872                                  
   873                                      ; Comprobamos que el caracter siguiente sea un guión para que cumpla con el formato establecido
   874 0000096F 8A0425[89000000]            mov al, byte[casillaMovSold+1] ; Caracter '-'
   875 00000976 3C2D                        cmp al, '-'
   876 00000978 0F858A010000                jne errorInputSoldMov
   877                                      
   878                                      ; Comprobamos que el número de columna sea un número entre 1 y 7
   879 0000097E 8A0425[8A000000]            mov al, byte[casillaMovSold+2] ; Numero de columna
   880 00000985 3C31                        cmp al, '1'
   881 00000987 0F8C7B010000                jl errorInputSoldMov
   882 0000098D 3C37                        cmp al, '7'
   883 0000098F 0F8F73010000                jg errorInputSoldMov
   884                                      
   885                                      ; Parseamos el número de columna de string a int
   886 00000995 48C70425[B4000000]-         mov qword[columnaAMover], 0
   886 0000099D 00000000           
   887                                      mSscanf byte[casillaMovSold+2], formatoAtoi, columnaAMover
    69 000009A1 488D3C25[8A000000]  <1>  lea rdi, %1
    70 000009A9 48BE-               <1>  mov rsi, %2
    70 000009AB [F30B000000000000]  <1>
    71 000009B3 48BA-               <1>  mov rdx, %3
    71 000009B5 [B400000000000000]  <1>
    72 000009BD 4883EC08            <1>  sub rsp, 8
    73 000009C1 E8(00000000)        <1>  call sscanf
    74 000009C6 4883C408            <1>  add rsp, 8
   888 000009CA 4883F801                    cmp rax, 1
   889 000009CE 0F8C34010000                jl errorInputSoldMov
   890                                  
   891                                      ; El ultimo caracter del string ingresado debe ser un caracter nulo
   892 000009D4 8A0425[8B000000]            mov al, byte[casillaMovSold+3] ; Caracter nulo
   893 000009DB 3C00                        cmp al, 0
   894 000009DD 0F8525010000                jne errorInputSoldMov
   895                                  
   896                                      ; Primero chequeamos si el soldado original está en alguna de las posiciones especiales
   897 000009E3 E8E0060000                  call chequearSoldPosEspeciales
   898 000009E8 4883F800                    cmp rax, 0
   899 000009EC 7423                        je lugaresComunesSold ; Si recibimos 1, la casilla original es un lugar común: intentamos hacer el movimiento normal
   900                                      
   901 000009EE 4883F801                    cmp rax, 1 ; Si recibimos 1, la casilla original es un lugar especial: solo podemos movernos a la derecha
   902 000009F2 0F8474010000                je soloDerechaSold
   903 000009F8 4883F802                    cmp rax, 2 ; Si recibimos 2, la casilla original es un lugar especial: solo podemos movernos a la izquierda
   904 000009FC 0F840D020000                je soloIzquierdaSold
   905                                      
   906                                      casillaEspecialAMover:
   907 00000A02 4983F800                        cmp r8, 0
   908 00000A06 0F8520010000                    jne errorCasillaInvalidaSoldMov
   909 00000A0C E9CDF9FFFF                      jmp moverSoldado
   910                                  
   911                                      lugaresComunesSold:
   912                                          ; Comparamos la fila a mover con la fila actual, la fila a mover debe ser igual a la fila actual + 1
   913                                          mMov filaAux, fila, 1
    31 00000A11 B901000000          <1>  mov rcx, %3
    32 00000A16 488D3425[94000000]  <1>  lea rsi, [%2]
    33 00000A1E 488D3C25[C4000000]  <1>  lea rdi, [%1]
    34 00000A26 F3A4                <1>  rep movsb
   914 00000A28 48FF0425[C4000000]              inc qword[filaAux]
   915                                          mCmp [filaAux], [filaAMover], 1
    38 00000A30 B901000000          <1>  mov rcx, %3
    39 00000A35 488D3425[C4000000]  <1>  lea rsi, %1
    40 00000A3D 488D3C25[AC000000]  <1>  lea rdi, %2
    41 00000A45 F3A6                <1>  repe cmpsb
   916 00000A47 0F85DF000000                    jne errorCasillaInvalidaSoldMov
   917                                  
   918                                          ; Comparamos la columna a mover con la columna actual
   919 00000A4D 48C70425[CC000000]-             mov qword[columnaAux], 0 ; Reiniciamos la columna auxiliar
   919 00000A55 00000000           
   920                                          mMov columnaAux, columna, 1
    31 00000A59 B901000000          <1>  mov rcx, %3
    32 00000A5E 488D3425[9C000000]  <1>  lea rsi, [%2]
    33 00000A66 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 00000A6E F3A4                <1>  rep movsb
   921                                  
   922                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento hacia adelante
    38 00000A70 B901000000          <1>  mov rcx, %3
    39 00000A75 488D3425[CC000000]  <1>  lea rsi, %1
    40 00000A7D 488D3C25[B4000000]  <1>  lea rdi, %2
    41 00000A85 F3A6                <1>  repe cmpsb
   923 00000A87 7445                            je columnaSoldAMoverValida
   924                                  
   925 00000A89 48FF0425[CC000000]              inc qword[columnaAux]
   926                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la izquierda
    38 00000A91 B901000000          <1>  mov rcx, %3
    39 00000A96 488D3425[CC000000]  <1>  lea rsi, %1
    40 00000A9E 488D3C25[B4000000]  <1>  lea rdi, %2
    41 00000AA6 F3A6                <1>  repe cmpsb
   927 00000AA8 7424                            je columnaSoldAMoverValida
   928                                  
   929 00000AAA 48832C25[CC000000]-             sub qword[columnaAux], 2
   929 00000AB2 02                 
   930                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la derecha
    38 00000AB3 B901000000          <1>  mov rcx, %3
    39 00000AB8 488D3425[CC000000]  <1>  lea rsi, %1
    40 00000AC0 488D3C25[B4000000]  <1>  lea rdi, %2
    41 00000AC8 F3A6                <1>  repe cmpsb
   931 00000ACA 7402                            je columnaSoldAMoverValida
   932                                  
   933 00000ACC EB5E                            jmp errorCasillaInvalidaSoldMov
   934                                  
   935                                      columnaSoldAMoverValida: ; Queda ver si en esa casilla está vacía o no
   936                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    87 00000ACE 488B3C25[AC000000]  <1>  mov rdi, %1
    88 00000AD6 488B3425[B4000000]  <1>  mov rsi, %2
    89 00000ADE E870040000          <1>  call calcularDesplazamiento
    90 00000AE3 48890425[BC000000]  <1>  mov %3, rax
   937                                          mEstaVacia qword[desplazCasAMover]
    94 00000AEB B800000000          <1>  mov rax, 0
    95 00000AF0 488B3C25[BC000000]  <1>  mov rdi, %1
    96 00000AF8 E841040000          <1>  call estaVacia
   938 00000AFD 4883F801                        cmp rax, 1
   939 00000B01 7429                            je errorCasillaInvalidaSoldMov ; Si recibimos 1, la casilla está ocupada (o está fuera del tablero)
   940                                          
   941 00000B03 E9D6F8FFFF                      jmp moverSoldado 
   942                                  
   943                                  
   944                                      errorInputSoldMov:
   945 00000B08 488B0425[83020000]              mov rax, [msgErrorInputSold]
   946                                          mMov msgErrorEspecificoSold, msgErrorInputSold, 61
    31 00000B10 B93D000000          <1>  mov rcx, %3
    32 00000B15 488D3425[83020000]  <1>  lea rsi, [%2]
    33 00000B1D 488D3C25[EC000000]  <1>  lea rdi, [%1]
    34 00000B25 F3A4                <1>  rep movsb
   947 00000B27 E9E4F7FFFF                      jmp turnoSoldados
   948                                  
   949                                      errorCasillaInvalidaSoldMov:
   950 00000B2C 488B0425[C1020000]              mov rax, [msgCasillaInvMovSold]
   951                                          mMov msgErrorEspecificoSold, msgCasillaInvMovSold, 61
    31 00000B34 B93D000000          <1>  mov rcx, %3
    32 00000B39 488D3425[C1020000]  <1>  lea rsi, [%2]
    33 00000B41 488D3C25[EC000000]  <1>  lea rdi, [%1]
    34 00000B49 F3A4                <1>  rep movsb
   952 00000B4B E9C0F7FFFF                      jmp turnoSoldados
   953                                  
   954                                      imprimirErrorSoldMov:
   955                                          mPuts msgErrorEspecificoSold
     2 00000B50 48BF-               <1>  mov rdi, %1
     2 00000B52 [EC00000000000000]  <1>
     3 00000B5A 4883EC08            <1>  sub rsp, 8
     4 00000B5E E8(00000000)        <1>  call puts
     5 00000B63 4883C408            <1>  add rsp, 8
   956 00000B67 E9A4F7FFFF                      jmp turnoSoldados
   957                                  
   958                                      soloDerechaSold:
   959 00000B6C 41B801000000                    mov r8, 1 ; Suponemos que el movimiento es inválido
   960                                  
   961                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    87 00000B72 488B3C25[AC000000]  <1>  mov rdi, %1
    88 00000B7A 488B3425[B4000000]  <1>  mov rsi, %2
    89 00000B82 E8CC030000          <1>  call calcularDesplazamiento
    90 00000B87 48890425[BC000000]  <1>  mov %3, rax
   962                                          mEstaVacia qword[desplazCasAMover]
    94 00000B8F B800000000          <1>  mov rax, 0
    95 00000B94 488B3C25[BC000000]  <1>  mov rdi, %1
    96 00000B9C E89D030000          <1>  call estaVacia
   963 00000BA1 4883F801                        cmp rax, 1 
   964 00000BA5 0F8457FEFFFF                    je casillaEspecialAMover
   965                                  
   966                                          mCmp [fila], [filaAMover], 1 ; Las filas deben ser iguales (el movimiento especial es para el costado)
    38 00000BAB B901000000          <1>  mov rcx, %3
    39 00000BB0 488D3425[94000000]  <1>  lea rsi, %1
    40 00000BB8 488D3C25[AC000000]  <1>  lea rdi, %2
    41 00000BC0 F3A6                <1>  repe cmpsb
   967 00000BC2 0F853AFEFFFF                    jne casillaEspecialAMover
   968                                  
   969                                          mMov columnaAux, columna, 1
    31 00000BC8 B901000000          <1>  mov rcx, %3
    32 00000BCD 488D3425[9C000000]  <1>  lea rsi, [%2]
    33 00000BD5 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 00000BDD F3A4                <1>  rep movsb
   970 00000BDF 48FF0425[CC000000]              inc qword[columnaAux]
   971                                          mCmp [columnaAux], [columnaAMover], 1
    38 00000BE7 B901000000          <1>  mov rcx, %3
    39 00000BEC 488D3425[CC000000]  <1>  lea rsi, %1
    40 00000BF4 488D3C25[B4000000]  <1>  lea rdi, %2
    41 00000BFC F3A6                <1>  repe cmpsb
   972 00000BFE 0F85FEFDFFFF                    jne casillaEspecialAMover
   973                                          
   974 00000C04 41B800000000                    mov r8, 0 ; Si llegamos acá, el movimiento es válido
   975 00000C0A E9F3FDFFFF                      jmp casillaEspecialAMover
   976                                      
   977                                      soloIzquierdaSold:
   978 00000C0F 41B801000000                    mov r8, 1 ; Suponemos que el movimiento es inválido
   979                                  
   980                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    87 00000C15 488B3C25[AC000000]  <1>  mov rdi, %1
    88 00000C1D 488B3425[B4000000]  <1>  mov rsi, %2
    89 00000C25 E829030000          <1>  call calcularDesplazamiento
    90 00000C2A 48890425[BC000000]  <1>  mov %3, rax
   981                                          mEstaVacia qword[desplazCasAMover]
    94 00000C32 B800000000          <1>  mov rax, 0
    95 00000C37 488B3C25[BC000000]  <1>  mov rdi, %1
    96 00000C3F E8FA020000          <1>  call estaVacia
   982 00000C44 4883F801                        cmp rax, 1 
   983 00000C48 0F84B4FDFFFF                    je casillaEspecialAMover
   984                                  
   985                                          mCmp [fila], [filaAMover], 1 ; Las filas deben ser iguales (el movimiento especial es para el costado)
    38 00000C4E B901000000          <1>  mov rcx, %3
    39 00000C53 488D3425[94000000]  <1>  lea rsi, %1
    40 00000C5B 488D3C25[AC000000]  <1>  lea rdi, %2
    41 00000C63 F3A6                <1>  repe cmpsb
   986 00000C65 0F8597FDFFFF                    jne casillaEspecialAMover
   987                                  
   988                                          mMov columnaAux, columna, 1
    31 00000C6B B901000000          <1>  mov rcx, %3
    32 00000C70 488D3425[9C000000]  <1>  lea rsi, [%2]
    33 00000C78 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 00000C80 F3A4                <1>  rep movsb
   989 00000C82 48FF0C25[CC000000]              dec qword[columnaAux]
   990                                          mCmp [columnaAux], [columnaAMover], 1
    38 00000C8A B901000000          <1>  mov rcx, %3
    39 00000C8F 488D3425[CC000000]  <1>  lea rsi, %1
    40 00000C97 488D3C25[B4000000]  <1>  lea rdi, %2
    41 00000C9F F3A6                <1>  repe cmpsb
   991 00000CA1 0F855BFDFFFF                    jne casillaEspecialAMover
   992                                  
   993 00000CA7 41B800000000                    mov r8, 0 ; Si llegamos acá, el movimiento es válido
   994 00000CAD E950FDFFFF                      jmp casillaEspecialAMover
   995                                      
   996 00000CB2 C3                          ret
   997                                  
   998                                  verificarMovimientoOfic:
   999 00000CB3 8A0425[90000000]            mov al, byte[casillaMovOfic] ; Numero de fila
  1000                                      
  1001 00000CBA 3C31                        cmp al, '1'
  1002 00000CBC 0F8C18020000                jl errorInputOficMov
  1003 00000CC2 3C37                        cmp al, '7'
  1004 00000CC4 0F8F10020000                jg errorInputOficMov
  1005                                  
  1006 00000CCA 48C70425[AC000000]-         mov qword[filaAMover], 0
  1006 00000CD2 00000000           
  1007                                      mSscanf byte[casillaMovOfic], formatoAtoi, filaAMover
    69 00000CD6 488D3C25[90000000]  <1>  lea rdi, %1
    70 00000CDE 48BE-               <1>  mov rsi, %2
    70 00000CE0 [F30B000000000000]  <1>
    71 00000CE8 48BA-               <1>  mov rdx, %3
    71 00000CEA [AC00000000000000]  <1>
    72 00000CF2 4883EC08            <1>  sub rsp, 8
    73 00000CF6 E8(00000000)        <1>  call sscanf
    74 00000CFB 4883C408            <1>  add rsp, 8
  1008                                  
  1009 00000CFF 4883F801                    cmp rax, 1
  1010 00000D03 0F8CD1010000                jl errorInputOficMov
  1011                                  
  1012 00000D09 8A0425[91000000]            mov al, byte[casillaMovOfic+1] ; Caracter '-'
  1013 00000D10 3C2D                        cmp al, '-'
  1014 00000D12 0F85C2010000                jne errorInputOficMov
  1015                                      
  1016 00000D18 8A0425[92000000]            mov al, byte[casillaMovOfic+2] ; Numero de columna
  1017 00000D1F 3C31                        cmp al, '1'
  1018 00000D21 0F8CB3010000                jl errorInputOficMov
  1019 00000D27 3C37                        cmp al, '7'
  1020 00000D29 0F8FAB010000                jg errorInputOficMov
  1021                                  
  1022 00000D2F 48C70425[B4000000]-         mov qword[columnaAMover], 0
  1022 00000D37 00000000           
  1023                                      mSscanf byte[casillaMovOfic+2], formatoAtoi, columnaAMover
    69 00000D3B 488D3C25[92000000]  <1>  lea rdi, %1
    70 00000D43 48BE-               <1>  mov rsi, %2
    70 00000D45 [F30B000000000000]  <1>
    71 00000D4D 48BA-               <1>  mov rdx, %3
    71 00000D4F [B400000000000000]  <1>
    72 00000D57 4883EC08            <1>  sub rsp, 8
    73 00000D5B E8(00000000)        <1>  call sscanf
    74 00000D60 4883C408            <1>  add rsp, 8
  1024                                  
  1025 00000D64 4883F801                    cmp rax, 1
  1026 00000D68 0F8C6C010000                jl errorInputOficMov
  1027                                  
  1028 00000D6E 8A0425[93000000]            mov al, byte[casillaMovOfic+3] ; Caracter nulo
  1029 00000D75 3C00                        cmp al, 0
  1030 00000D77 0F855D010000                jne errorInputOficMov
  1031                                  
  1032                                      ; Comparamos la fila a mover con la fila actual
  1033                                      mMov filaAux, fila, 1
    31 00000D7D B901000000          <1>  mov rcx, %3
    32 00000D82 488D3425[94000000]  <1>  lea rsi, [%2]
    33 00000D8A 488D3C25[C4000000]  <1>  lea rdi, [%1]
    34 00000D92 F3A4                <1>  rep movsb
  1034                                  
  1035                                      mCmp [filaAux], [filaAMover], 1
    38 00000D94 B901000000          <1>  mov rcx, %3
    39 00000D99 488D3425[C4000000]  <1>  lea rsi, %1
    40 00000DA1 488D3C25[AC000000]  <1>  lea rdi, %2
    41 00000DA9 F3A6                <1>  repe cmpsb
  1036 00000DAB 7448                        je filaOficAMoverValida ; Filas iguales -> válido
  1037 00000DAD 48FF0425[C4000000]          inc qword[filaAux]
  1038                                      mCmp [filaAux], [filaAMover], 1
    38 00000DB5 B901000000          <1>  mov rcx, %3
    39 00000DBA 488D3425[C4000000]  <1>  lea rsi, %1
    40 00000DC2 488D3C25[AC000000]  <1>  lea rdi, %2
    41 00000DCA F3A6                <1>  repe cmpsb
  1039 00000DCC 7427                        je filaOficAMoverValida
  1040 00000DCE 48832C25[C4000000]-         sub qword[filaAux], 2
  1040 00000DD6 02                 
  1041                                      mCmp [filaAux], [filaAMover], 1
    38 00000DD7 B901000000          <1>  mov rcx, %3
    39 00000DDC 488D3425[C4000000]  <1>  lea rsi, %1
    40 00000DE4 488D3C25[AC000000]  <1>  lea rdi, %2
    41 00000DEC F3A6                <1>  repe cmpsb
  1042 00000DEE 7405                        je filaOficAMoverValida
  1043                                  
  1044 00000DF0 E909010000                  jmp errorCasillaInvalidaOficMov
  1045                                  
  1046                                      filaOficAMoverValida:
  1047                                          ; Comparamos la columna a mover con la columna actual
  1048 00000DF5 48C70425[CC000000]-             mov qword[columnaAux], 0 ; Reiniciamos la columna auxiliar
  1048 00000DFD 00000000           
  1049                                          mMov columnaAux, columna, 1
    31 00000E01 B901000000          <1>  mov rcx, %3
    32 00000E06 488D3425[9C000000]  <1>  lea rsi, [%2]
    33 00000E0E 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 00000E16 F3A4                <1>  rep movsb
  1050                                  
  1051                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento hacia adelante
    38 00000E18 B901000000          <1>  mov rcx, %3
    39 00000E1D 488D3425[CC000000]  <1>  lea rsi, %1
    40 00000E25 488D3C25[B4000000]  <1>  lea rdi, %2
    41 00000E2D F3A6                <1>  repe cmpsb
  1052 00000E2F 7448                            je columnaOficAMoverValida
  1053                                  
  1054 00000E31 48FF0425[CC000000]              inc qword[columnaAux]
  1055                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la izquierda
    38 00000E39 B901000000          <1>  mov rcx, %3
    39 00000E3E 488D3425[CC000000]  <1>  lea rsi, %1
    40 00000E46 488D3C25[B4000000]  <1>  lea rdi, %2
    41 00000E4E F3A6                <1>  repe cmpsb
  1056 00000E50 7427                            je columnaOficAMoverValida
  1057                                  
  1058 00000E52 48832C25[CC000000]-             sub qword[columnaAux], 2
  1058 00000E5A 02                 
  1059                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la derecha
    38 00000E5B B901000000          <1>  mov rcx, %3
    39 00000E60 488D3425[CC000000]  <1>  lea rsi, %1
    40 00000E68 488D3C25[B4000000]  <1>  lea rdi, %2
    41 00000E70 F3A6                <1>  repe cmpsb
  1060 00000E72 7405                            je columnaOficAMoverValida
  1061                                  
  1062 00000E74 E985000000                      jmp errorCasillaInvalidaOficMov
  1063                                  
  1064                                      columnaOficAMoverValida: ; Podríamos hacer un movimiento normal (casilla vacía) o capturar un soldado...
  1065                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    87 00000E79 488B3C25[AC000000]  <1>  mov rdi, %1
    88 00000E81 488B3425[B4000000]  <1>  mov rsi, %2
    89 00000E89 E8C5000000          <1>  call calcularDesplazamiento
    90 00000E8E 48890425[BC000000]  <1>  mov %3, rax
  1066                                          mEstaVacia qword[desplazCasAMover]
    94 00000E96 B800000000          <1>  mov rax, 0
    95 00000E9B 488B3C25[BC000000]  <1>  mov rdi, %1
    96 00000EA3 E896000000          <1>  call estaVacia
  1067 00000EA8 4883F800                        cmp rax, 0
  1068 00000EAC 0F8416F6FFFF                    je moverOficial ; Si llegamos acá, la casilla a mover está vacía -> movimiento normal
  1069                                          
  1070                                          ; Si llegamos acá, la casilla no está vacía: ver si hay un soldado para capturar
  1071                                          mHaySoldado qword[desplazCasAMover]
   100 00000EB2 B800000000          <1>  mov rax, 0
   101 00000EB7 488B3C25[BC000000]  <1>  mov rdi, %1
   102 00000EBF E84D020000          <1>  call haySoldado
  1072 00000EC4 4883F801                        cmp rax, 1
  1073 00000EC8 7434                            je errorCasillaInvalidaOficMov ; Si recibimos 1, la casilla a ocupar no tiene un soldado -> movimiento inválido
  1074                                  
  1075                                          ; Si llegamos acá, la casilla a ocupar tiene un soldado: debemos ver si el oficial puede saltar sobre él...
  1076 00000ECA E866020000                      call sePuedeSaltarSoldado
  1077 00000ECF 4883F801                        cmp rax, 1
  1078 00000ED3 7429                            je errorCasillaInvalidaOficMov ; Si recibimos 1, el oficial no puede saltar sobre el soldado -> movimiento inválido
  1079                                  
  1080 00000ED5 E907F6FFFF                      jmp capturar
  1081                                  
  1082                                  
  1083                                      errorInputOficMov:
  1084 00000EDA 488B0425[46030000]              mov rax, [msgErrorInputOfic]
  1085                                          mMov msgErrorEspecificoOfic, msgErrorInputOfic, 61
    31 00000EE2 B93D000000          <1>  mov rcx, %3
    32 00000EE7 488D3425[46030000]  <1>  lea rsi, [%2]
    33 00000EEF 488D3C25[33010000]  <1>  lea rdi, [%1]
    34 00000EF7 F3A4                <1>  rep movsb
  1086 00000EF9 E9FCF4FFFF                      jmp turnoOficiales
  1087                                  
  1088                                      errorCasillaInvalidaOficMov:
  1089 00000EFE 488B0425[84030000]              mov rax, [msgCasillaInvMovOfic]
  1090                                          mMov msgErrorEspecificoOfic, msgCasillaInvMovOfic, 61
    31 00000F06 B93D000000          <1>  mov rcx, %3
    32 00000F0B 488D3425[84030000]  <1>  lea rsi, [%2]
    33 00000F13 488D3C25[33010000]  <1>  lea rdi, [%1]
    34 00000F1B F3A4                <1>  rep movsb
  1091 00000F1D E9D8F4FFFF                      jmp turnoOficiales
  1092                                  
  1093                                      imprimirErrorOficMov:
  1094                                          mPuts msgErrorEspecificoOfic
     2 00000F22 48BF-               <1>  mov rdi, %1
     2 00000F24 [3301000000000000]  <1>
     3 00000F2C 4883EC08            <1>  sub rsp, 8
     4 00000F30 E8(00000000)        <1>  call puts
     5 00000F35 4883C408            <1>  add rsp, 8
  1095 00000F39 E9BCF4FFFF                      jmp turnoOficiales
  1096                                  
  1097                                  ; --------------------------------------------------------------------------------------------
  1098                                  ; RUTINA PARA VERIFICAR SI UNA CASILLA ESTÁ VACÍA
  1099                                  ; --------------------------------------------------------------------------------------------
  1100                                  
  1101                                  estaVacia:
  1102 00000F3E 80BF[10000000]20            cmp byte[tableroEnJuego+rdi], ' '
  1103 00000F45 7406                        je okVacia
  1104                                  
  1105 00000F47 B801000000                  mov rax, 1
  1106 00000F4C C3                          ret
  1107                                  
  1108                                      okVacia:
  1109 00000F4D B800000000                      mov rax, 0
  1110 00000F52 C3                              ret
  1111                                  
  1112                                  ; --------------------------------------------------------------------------------------------
  1113                                  ; RUTINA PARA CALCULAR EL DESPLAZAMIENTO DE UNA CASILLA EN EL TABLERO
  1114                                  ; --------------------------------------------------------------------------------------------
  1115                                  
  1116                                  calcularDesplazamiento:
  1117 00000F53 B800000000                  mov rax, 0
  1118 00000F58 4889F8                      mov rax, rdi
  1119 00000F5B 48FFC0                      inc rax
  1120 00000F5E 666BC00B                    imul ax, 11
  1121 00000F62 4801F0                      add rax, rsi
  1122 00000F65 48FFC0                      inc rax
  1123                                  
  1124 00000F68 C3                          ret
  1125                                  
  1126                                  ; --------------------------------------------------------------------------------------------
  1127                                  ; RUTINAS PARA REALIZAR MOVIMIENTOS SIMPLES DE SOLDADOS Y OFICIALES (los que no requieren capturas)
  1128                                  ; --------------------------------------------------------------------------------------------
  1129                                  
  1130                                  realizarMovimientoSold:
  1131 00000F69 488B0425[A4000000]          mov rax, qword[desplazCasOrig]
  1132 00000F71 488B1C25[BC000000]          mov rbx, qword[desplazCasAMover]
  1133                                  
  1134 00000F79 C680[10000000]20            mov byte[tableroEnJuego+rax], ' '
  1135                                      mMov tableroEnJuego+rbx, simboloSoldados, 1
    31 00000F80 B901000000          <1>  mov rcx, %3
    32 00000F85 488D3425[9A0B0000]  <1>  lea rsi, [%2]
    33 00000F8D 488DBB[10000000]    <1>  lea rdi, [%1]
    34 00000F94 F3A4                <1>  rep movsb
  1136                                  
  1137 00000F96 C3                          ret
  1138                                  
  1139                                  realizarMovimientoOfic:
  1140                                      ; Vemos si el oficial podía capturar un soldado y no lo hizo
  1141                                      mMov desplazAux2, desplazCasOrig, 1
    31 00000F97 B901000000          <1>  mov rcx, %3
    32 00000F9C 488D3425[A4000000]  <1>  lea rsi, [%2]
    33 00000FA4 488D3C25[DC000000]  <1>  lea rdi, [%1]
    34 00000FAC F3A4                <1>  rep movsb
  1142 00000FAE E81B070000                  call podiaCapturarSoldado 
  1143 00000FB3 4883F800                    cmp rax, 0 ; Si fue así, significa que el oficial se desentendió de su deber
  1144 00000FB7 740D                        je quitarOficial
  1145                                  
  1146                                      ; Necesitamos chequear si el otro oficial podría haber capturado al soldado
  1147 00000FB9 E8310A0000                  call podiaCapturarSoldadoOtroOficial
  1148 00000FBE 4883F800                    cmp rax, 0 ; Si fue así, significa que el otro oficial se desentendió de su deber
  1149 00000FC2 7453                        je quitarOtroOficial
  1150                                  
  1151 00000FC4 EB57                        jmp noPodianCapturar
  1152                                  
  1153                                      quitarOficial:
  1154 00000FC6 E83D040000                      call verQueOficialEs
  1155 00000FCB 4883F801                        cmp rax, 1 ; Si recibimos 1, el oficial 1 es el que se mueve
  1156 00000FCF 7423                            je quitarOfic1
  1157                                  
  1158                                          mCalcDesplaz [casillaOfic2], [casillaOfic2+8], qword[desplazAux]
    87 00000FD1 488B3C25[780B0000]  <1>  mov rdi, %1
    88 00000FD9 488B3425[800B0000]  <1>  mov rsi, %2
    89 00000FE1 E86DFFFFFF          <1>  call calcularDesplazamiento
    90 00000FE6 48890425[D4000000]  <1>  mov %3, rax
  1159 00000FEE E8A3090000                      call desentenderOficial
  1160 00000FF3 C3                              ret
  1161                                  
  1162                                      quitarOfic1:
  1163                                          mCalcDesplaz [casillaOfic1], [casillaOfic1+8], qword[desplazAux]
    87 00000FF4 488B3C25[680B0000]  <1>  mov rdi, %1
    88 00000FFC 488B3425[700B0000]  <1>  mov rsi, %2
    89 00001004 E84AFFFFFF          <1>  call calcularDesplazamiento
    90 00001009 48890425[D4000000]  <1>  mov %3, rax
  1164 00001011 E880090000                      call desentenderOficial
  1165 00001016 C3                              ret
  1166                                      
  1167                                      quitarOtroOficial:
  1168 00001017 E83E0A0000                      call desentenderOtroOficial
  1169 0000101C C3                              ret
  1170                                  
  1171                                      ; Si llegamos acá, el oficial no podía capturar un soldado -> OK!
  1172                                      noPodianCapturar:
  1173 0000101D 488B0425[A4000000]              mov rax, qword[desplazCasOrig]
  1174 00001025 488B1C25[BC000000]              mov rbx, qword[desplazCasAMover]
  1175                                  
  1176 0000102D C680[10000000]20                mov byte[tableroEnJuego+rax], ' '
  1177                                          mMov tableroEnJuego+rbx, simboloOficiales, 1
    31 00001034 B901000000          <1>  mov rcx, %3
    32 00001039 488D3425[980B0000]  <1>  lea rsi, [%2]
    33 00001041 488DBB[10000000]    <1>  lea rdi, [%1]
    34 00001048 F3A4                <1>  rep movsb
  1178                                  
  1179 0000104A E8B9030000                      call verQueOficialEs ; Verificamos qué oficial es el que se quiere mover
  1180                                  
  1181                                          ; Incrementamos la cantidad de movimientos del oficial correspondiente
  1182 0000104F 4883F801                        cmp rax, 1 ; Si recibimos 1, el oficial 1 es el que se mueve
  1183 00001053 740B                            je movOfic1
  1184                                          
  1185                                          ; Si llegamos acá, el oficial 2 es el que se mueve
  1186 00001055 E89D040000                      call actualizarContadoresOfic2
  1187 0000105A E878050000                      call refrescarCasActOfic2
  1188 0000105F C3                              ret
  1189                                      
  1190                                      movOfic1: ; Si llegamos acá, el oficial 1 es el que se mueve
  1191 00001060 E8E1030000                      call actualizarContadoresOfic1
  1192 00001065 E83E050000                      call refrescarCasActOfic1
  1193                                  
  1194 0000106A C3                          ret
  1195                                      
  1196                                  ; --------------------------------------------------------------------------------------------
  1197                                  ; RUTINAS PARA CAMBIAR EL TABLERO CON LOS SIMBOLOS PERSONALIZADOS
  1198                                  ; --------------------------------------------------------------------------------------------
  1199                                  
  1200                                  cambiarTableroSoldNuevo:
  1201 0000106B BB1A000000                  mov rbx, 26 ; Desplazamiento de la primera casilla en donde puede haber piezas
  1202                                  
  1203                                      cicloCambiarSoldados:
  1204 00001070 80BB[10000000]58                cmp byte[tableroEnJuego+rbx], 'X'
  1205 00001077 7516                            jne noCambiarSoldado
  1206                                          mMov tableroEnJuego+rbx, simboloSoldados, 1 ; Cambio el simbolo de los soldados
    31 00001079 B901000000          <1>  mov rcx, %3
    32 0000107E 488D3425[9A0B0000]  <1>  lea rsi, [%2]
    33 00001086 488DBB[10000000]    <1>  lea rdi, [%1]
    34 0000108D F3A4                <1>  rep movsb
  1207                                  
  1208                                          noCambiarSoldado:
  1209 0000108F 48FFC3                              inc rbx
  1210 00001092 4883FB4B                            cmp rbx, 75 ; Desplazamiento de la última casilla en donde puede haber piezas
  1211 00001096 7CD8                                jl cicloCambiarSoldados
  1212                                  
  1213 00001098 C3                          ret
  1214                                  
  1215                                  cambiarTableroOficNuevo:
  1216                                      mMov tableroEnJuego+83, simboloOficiales, 1 ; Primer oficial (desplazamiento)
    31 00001099 B901000000          <1>  mov rcx, %3
    32 0000109E 488D3425[980B0000]  <1>  lea rsi, [%2]
    33 000010A6 488D3C25[63000000]  <1>  lea rdi, [%1]
    34 000010AE F3A4                <1>  rep movsb
  1217                                      mMov tableroEnJuego+92, simboloOficiales, 1 ; Segundo oficial (desplazamiento)
    31 000010B0 B901000000          <1>  mov rcx, %3
    32 000010B5 488D3425[980B0000]  <1>  lea rsi, [%2]
    33 000010BD 488D3C25[6C000000]  <1>  lea rdi, [%1]
    34 000010C5 F3A4                <1>  rep movsb
  1218 000010C7 C3                          ret
  1219                                  
  1220                                  ; --------------------------------------------------------------------------------------------
  1221                                  ; RUTINA PARA CHEQUEAR SI LA CASILLA DE ORIGEN DE UN SOLDADO ES UNA POSICIÓN ESPECIAL
  1222                                  ; --------------------------------------------------------------------------------------------
  1223                                  
  1224                                  chequearSoldPosEspeciales:
  1225 000010C8 B800000000                  mov rax, 0
  1226                                  
  1227 000010CD 48833C25[94000000]-         cmp qword[fila], 5
  1227 000010D5 05                 
  1228 000010D6 752C                        jne noEsLugarEspecial ; Si la fila no es 5, no estamos en una posición especial
  1229                                  
  1230                                      ; Si la columna es 1 o 2 (fila 5), estamos en una posición especial: solo podemos movernos a la derecha
  1231 000010D8 48833C25[9C000000]-         cmp qword[columna], 1
  1231 000010E0 01                 
  1232 000010E1 7428                        je esLugarEspecialADer 
  1233 000010E3 48833C25[9C000000]-         cmp qword[columna], 2
  1233 000010EB 02                 
  1234 000010EC 741D                        je esLugarEspecialADer 
  1235                                  
  1236                                      ; Si la columna es 6 o 7 (fila 5), estamos en una posición especial: solo podemos movernos a la izquierda
  1237 000010EE 48833C25[9C000000]-         cmp qword[columna], 6
  1237 000010F6 06                 
  1238 000010F7 740C                        je esLugarEspecialAIzq 
  1239 000010F9 48833C25[9C000000]-         cmp qword[columna], 7
  1239 00001101 07                 
  1240 00001102 7401                        je esLugarEspecialAIzq
  1241                                  
  1242                                      noEsLugarEspecial:
  1243 00001104 C3                              ret
  1244                                  
  1245                                      esLugarEspecialAIzq:
  1246 00001105 B802000000                      mov rax, 2
  1247 0000110A C3                              ret
  1248                                      
  1249                                      esLugarEspecialADer:
  1250 0000110B B801000000                      mov rax, 1
  1251 00001110 C3                              ret
  1252                                  
  1253                                  ; --------------------------------------------------------------------------------------------
  1254                                  ; RUTINA PARA VERIFICAR SI HAY UN SOLDADO EN LA CASILLA DESTINO
  1255                                  ; --------------------------------------------------------------------------------------------
  1256                                  
  1257                                  haySoldado:
  1258                                      ; Calculamos desplazamiento en tablero
  1259                                      mCmp byte[tableroEnJuego+rdi], [simboloSoldados], 1
    38 00001111 B901000000          <1>  mov rcx, %3
    39 00001116 488DB7[10000000]    <1>  lea rsi, %1
    40 0000111D 488D3C25[9A0B0000]  <1>  lea rdi, %2
    41 00001125 F3A6                <1>  repe cmpsb
  1260 00001127 7406                        je okSoldado
  1261                                  
  1262 00001129 B801000000                  mov rax, 1
  1263 0000112E C3                          ret
  1264                                  
  1265                                      okSoldado:
  1266 0000112F B800000000                      mov rax, 0
  1267 00001134 C3                              ret
  1268                                  
  1269                                  ; --------------------------------------------------------------------------------------------
  1270                                  ; RUTINA PARA VERIFICAR SI UN OFICIAL PUEDE SALTAR SOBRE UN SOLDADO
  1271                                  ; --------------------------------------------------------------------------------------------
  1272                                  
  1273                                  sePuedeSaltarSoldado:
  1274 00001135 488B0425[94000000]          mov rax, qword[fila]
  1275 0000113D 488B1C25[AC000000]          mov rbx, qword[filaAMover]
  1276 00001145 4829D8                      sub rax, rbx
  1277 00001148 0F8F07010000                jg saltoHaciaArriba ; Si la fila original es mayor que la fila destino, el salto es hacia arriba
  1278 0000114E 0F8CA3010000                jl saltoHaciaAbajo ; Si la fila original es menor que la fila destino, el salto es hacia abajo
  1279                                  
  1280                                      ; Si estamos acá, el salto es en la misma fila
  1281 00001154 488B0425[9C000000]          mov rax, qword[columna]
  1282 0000115C 488B1C25[B4000000]          mov rbx, qword[columnaAMover]
  1283                                  
  1284 00001164 4829D8                      sub rax, rbx
  1285 00001167 7F02                        jg saltoHaciaIzq ; Si la columna original es mayor que la columna destino, el salto es hacia la izquierda
  1286 00001169 7C75                        jl saltoHaciaDer ; Si la columna original es menor que la columna destino, el salto es hacia la derecha
  1287                                  
  1288                                      saltoHaciaIzq:
  1289                                          mMov filaAux, filaAMover, 1
    31 0000116B B901000000          <1>  mov rcx, %3
    32 00001170 488D3425[AC000000]  <1>  lea rsi, [%2]
    33 00001178 488D3C25[C4000000]  <1>  lea rdi, [%1]
    34 00001180 F3A4                <1>  rep movsb
  1290                                          mMov columnaAux, columnaAMover, 1
    31 00001182 B901000000          <1>  mov rcx, %3
    32 00001187 488D3425[B4000000]  <1>  lea rsi, [%2]
    33 0000118F 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 00001197 F3A4                <1>  rep movsb
  1291 00001199 48FF0C25[CC000000]              dec qword[columnaAux]
  1292                                  
  1293                                          mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    87 000011A1 488B3C25[C4000000]  <1>  mov rdi, %1
    88 000011A9 488B3425[CC000000]  <1>  mov rsi, %2
    89 000011B1 E89DFDFFFF          <1>  call calcularDesplazamiento
    90 000011B6 48890425[D4000000]  <1>  mov %3, rax
  1294                                          mEstaVacia qword[desplazAux]
    94 000011BE B800000000          <1>  mov rax, 0
    95 000011C3 488B3C25[D4000000]  <1>  mov rdi, %1
    96 000011CB E86EFDFFFF          <1>  call estaVacia
  1295 000011D0 4883F801                        cmp rax, 1
  1296 000011D4 0F84BB010000                    je saltoInvalido
  1297                                  
  1298 000011DA B800000000                      mov rax, 0
  1299 000011DF C3                              ret
  1300                                  
  1301                                      saltoHaciaDer:
  1302                                          mMov filaAux, filaAMover, 1
    31 000011E0 B901000000          <1>  mov rcx, %3
    32 000011E5 488D3425[AC000000]  <1>  lea rsi, [%2]
    33 000011ED 488D3C25[C4000000]  <1>  lea rdi, [%1]
    34 000011F5 F3A4                <1>  rep movsb
  1303                                          mMov columnaAux, columnaAMover, 1
    31 000011F7 B901000000          <1>  mov rcx, %3
    32 000011FC 488D3425[B4000000]  <1>  lea rsi, [%2]
    33 00001204 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 0000120C F3A4                <1>  rep movsb
  1304 0000120E 48FF0425[CC000000]              inc qword[columnaAux]
  1305                                  
  1306                                          mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    87 00001216 488B3C25[C4000000]  <1>  mov rdi, %1
    88 0000121E 488B3425[CC000000]  <1>  mov rsi, %2
    89 00001226 E828FDFFFF          <1>  call calcularDesplazamiento
    90 0000122B 48890425[D4000000]  <1>  mov %3, rax
  1307                                          mEstaVacia qword[desplazAux]
    94 00001233 B800000000          <1>  mov rax, 0
    95 00001238 488B3C25[D4000000]  <1>  mov rdi, %1
    96 00001240 E8F9FCFFFF          <1>  call estaVacia
  1308 00001245 4883F801                        cmp rax, 1
  1309 00001249 0F8446010000                    je saltoInvalido
  1310                                  
  1311 0000124F B800000000                      mov rax, 0
  1312 00001254 C3                              ret
  1313                                  
  1314                                      saltoHaciaArriba:
  1315                                          mMov filaAux, filaAMover, 1
    31 00001255 B901000000          <1>  mov rcx, %3
    32 0000125A 488D3425[AC000000]  <1>  lea rsi, [%2]
    33 00001262 488D3C25[C4000000]  <1>  lea rdi, [%1]
    34 0000126A F3A4                <1>  rep movsb
  1316                                          mMov columnaAux, columnaAMover, 1
    31 0000126C B901000000          <1>  mov rcx, %3
    32 00001271 488D3425[B4000000]  <1>  lea rsi, [%2]
    33 00001279 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 00001281 F3A4                <1>  rep movsb
  1317 00001283 48FF0C25[C4000000]              dec qword[filaAux]
  1318                                          
  1319                                          mCmp [columna], [columnaAMover], 1
    38 0000128B B901000000          <1>  mov rcx, %3
    39 00001290 488D3425[9C000000]  <1>  lea rsi, %1
    40 00001298 488D3C25[B4000000]  <1>  lea rdi, %2
    41 000012A0 F3A6                <1>  repe cmpsb
  1320 000012A2 7414                            je seguirSaltoArriba ; Si las columnas son iguales, el salto es hacia arriba y en línea recta
  1321 000012A4 7F0A                            jg haciaArribaIzq ; Si la columna original es mayor que la columna destino, el salto es hacia la izquierda
  1322                                  
  1323 000012A6 48FF0425[CC000000]              inc qword[columnaAux] ; Salto hacia arriba y a la derecha
  1324 000012AE EB08                            jmp seguirSaltoArriba
  1325                                  
  1326                                          haciaArribaIzq:
  1327 000012B0 48FF0C25[CC000000]                  dec qword[columnaAux] ; Salto hacia arriba y a la izquierda
  1328                                  
  1329                                          seguirSaltoArriba:
  1330                                              mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    87 000012B8 488B3C25[C4000000]  <1>  mov rdi, %1
    88 000012C0 488B3425[CC000000]  <1>  mov rsi, %2
    89 000012C8 E886FCFFFF          <1>  call calcularDesplazamiento
    90 000012CD 48890425[D4000000]  <1>  mov %3, rax
  1331                                              mEstaVacia qword[desplazAux]
    94 000012D5 B800000000          <1>  mov rax, 0
    95 000012DA 488B3C25[D4000000]  <1>  mov rdi, %1
    96 000012E2 E857FCFFFF          <1>  call estaVacia
  1332 000012E7 4883F801                            cmp rax, 1
  1333 000012EB 0F84A4000000                        je saltoInvalido
  1334                                  
  1335 000012F1 B800000000                          mov rax, 0
  1336 000012F6 C3                                  ret
  1337                                  
  1338                                      saltoHaciaAbajo:
  1339                                          mMov filaAux, filaAMover, 1
    31 000012F7 B901000000          <1>  mov rcx, %3
    32 000012FC 488D3425[AC000000]  <1>  lea rsi, [%2]
    33 00001304 488D3C25[C4000000]  <1>  lea rdi, [%1]
    34 0000130C F3A4                <1>  rep movsb
  1340                                          mMov columnaAux, columnaAMover, 1
    31 0000130E B901000000          <1>  mov rcx, %3
    32 00001313 488D3425[B4000000]  <1>  lea rsi, [%2]
    33 0000131B 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 00001323 F3A4                <1>  rep movsb
  1341 00001325 48FF0425[C4000000]              inc qword[filaAux]
  1342                                          
  1343                                          mCmp [columna], [columnaAMover], 1
    38 0000132D B901000000          <1>  mov rcx, %3
    39 00001332 488D3425[9C000000]  <1>  lea rsi, %1
    40 0000133A 488D3C25[B4000000]  <1>  lea rdi, %2
    41 00001342 F3A6                <1>  repe cmpsb
  1344 00001344 7414                            je seguirSaltoAbajo ; Si las columnas son iguales, el salto es hacia abajo y en línea recta
  1345 00001346 7F0A                            jg haciaAbajoIzq ; Si la columna original es mayor que la columna destino, el salto es hacia la izquierda
  1346                                  
  1347 00001348 48FF0425[CC000000]              inc qword[columnaAux] ; Salto hacia abajo y a la derecha
  1348 00001350 EB08                            jmp seguirSaltoAbajo
  1349                                  
  1350                                          haciaAbajoIzq:
  1351 00001352 48FF0C25[CC000000]                  dec qword[columnaAux] ; Salto hacia abajo y a la izquierda
  1352                                  
  1353                                          seguirSaltoAbajo:
  1354                                              mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    87 0000135A 488B3C25[C4000000]  <1>  mov rdi, %1
    88 00001362 488B3425[CC000000]  <1>  mov rsi, %2
    89 0000136A E8E4FBFFFF          <1>  call calcularDesplazamiento
    90 0000136F 48890425[D4000000]  <1>  mov %3, rax
  1355                                              mEstaVacia qword[desplazAux]
    94 00001377 B800000000          <1>  mov rax, 0
    95 0000137C 488B3C25[D4000000]  <1>  mov rdi, %1
    96 00001384 E8B5FBFFFF          <1>  call estaVacia
  1356 00001389 4883F801                            cmp rax, 1
  1357 0000138D 7406                                je saltoInvalido
  1358                                  
  1359 0000138F B800000000                          mov rax, 0
  1360 00001394 C3                                  ret
  1361                                  
  1362                                      saltoInvalido:
  1363 00001395 B801000000                      mov rax, 1
  1364 0000139A C3                              ret
  1365                                  
  1366 0000139B C3                          ret
  1367                                  
  1368                                  ; --------------------------------------------------------------------------------------------
  1369                                  ; RUTINA PARA CAPTURAR UN SOLDADO
  1370                                  ; --------------------------------------------------------------------------------------------
  1371                                  
  1372                                  capturarSoldado:
  1373 0000139C 488B0425[A4000000]          mov rax, qword[desplazCasOrig] ; Oficial a mover
  1374 000013A4 488B1C25[BC000000]          mov rbx, qword[desplazCasAMover] ; Soldado a capturar
  1375 000013AC 488B0C25[D4000000]          mov rcx, qword[desplazAux] ; Casilla destino del oficial (donde va a quedar)
  1376                                  
  1377 000013B4 C680[10000000]20            mov byte[tableroEnJuego+rax], ' '
  1378 000013BB C683[10000000]20            mov byte[tableroEnJuego+rbx], ' '
  1379                                      
  1380 000013C2 8A1425[980B0000]            mov dl, byte[simboloOficiales]
  1381 000013C9 8891[10000000]              mov byte[tableroEnJuego+rcx], dl
  1382                                  
  1383 000013CF 48FF0425[580B0000]          inc qword[cantSoldCapturados] ; Aumentamos el contador de capturas
  1384                                  
  1385 000013D7 E82C000000                  call verQueOficialEs ; Verificamos qué oficial es el que se quiere mover
  1386                                  
  1387 000013DC 4883F801                    cmp rax, 1
  1388 000013E0 7413                        je movOfic1Captura
  1389                                  
  1390 000013E2 48FF0425[900B0000]          inc qword[cantCapturasOfic2]
  1391 000013EA E808010000                  call actualizarContadoresOfic2
  1392 000013EF E812020000                  call refrescarCasActOficLuegoCaptura
  1393 000013F4 C3                          ret
  1394                                  
  1395                                      movOfic1Captura:
  1396 000013F5 48FF0425[880B0000]              inc qword[cantCapturasOfic1]
  1397 000013FD E844000000                      call actualizarContadoresOfic1
  1398 00001402 E8FF010000                      call refrescarCasActOficLuegoCaptura
  1399                                  
  1400 00001407 C3                          ret
  1401                                  
  1402                                  ; --------------------------------------------------------------------------------------------
  1403                                  ; RUTINA PARA VERIFICAR CUÁL OFICIAL SE ESTÁ MOVIENDO
  1404                                  ; --------------------------------------------------------------------------------------------
  1405                                  
  1406                                  verQueOficialEs:
  1407                                      ; Comenzamos verificando si el oficial 1 es el que se está moviendo
  1408                                      mCmp qword[fila], qword[casillaOfic1], 1 ; Fila de la casilla de origen vs. Fila del oficial 1
    38 00001408 B901000000          <1>  mov rcx, %3
    39 0000140D 488D3425[94000000]  <1>  lea rsi, %1
    40 00001415 488D3C25[680B0000]  <1>  lea rdi, %2
    41 0000141D F3A6                <1>  repe cmpsb
  1409 0000141F 751F                        jne esOfic2 ; Si las filas no son iguales, el oficial 1 no es el que se está moviendo
  1410                                      mCmp qword[columna], qword[casillaOfic1+8], 1 ; Columna de la casilla de origen vs. Columna del oficial 1
    38 00001421 B901000000          <1>  mov rcx, %3
    39 00001426 488D3425[9C000000]  <1>  lea rsi, %1
    40 0000142E 488D3C25[700B0000]  <1>  lea rdi, %2
    41 00001436 F3A6                <1>  repe cmpsb
  1411 00001438 7506                        jne esOfic2 ; Si las columnas no son iguales, el oficial 1 no es el que se está moviendo
  1412                                  
  1413 0000143A B801000000                  mov rax, 1 ; es el oficial 1
  1414 0000143F C3                          ret
  1415                                  
  1416                                      esOfic2:
  1417 00001440 B802000000                      mov rax, 2 ; es el oficial 2
  1418                                  
  1419 00001445 C3                          ret
  1420                                  
  1421                                  
  1422                                  ; --------------------------------------------------------------------------------------------
  1423                                  ; RUTINA PARA ACTUALIZAR LOS CONTADORES DE MOVIMIENTOS DE LOS OFICIALES
  1424                                  ; --------------------------------------------------------------------------------------------
  1425                                  
  1426                                  actualizarContadoresOfic1:
  1427 00001446 48FF0425[B80A0000]          inc qword[movimientosOfic1]
  1428 0000144E 488B0425[A4000000]          mov rax, qword[desplazCasOrig]
  1429 00001456 482B0425[BC000000]          sub rax, qword[desplazCasAMover] ; rax = desplazOrigen - desplazDestino
  1430 0000145E 4883F801                    cmp rax, 1
  1431 00001462 742B                        je movOfic1Izq
  1432 00001464 4883F8FF                    cmp rax, -1
  1433 00001468 742E                        je movOfic1Der
  1434 0000146A 4883F80B                    cmp rax, 11
  1435 0000146E 7431                        je movOfic1Arriba
  1436 00001470 4883F8F5                    cmp rax, -11
  1437 00001474 7434                        je movOfic1Abajo
  1438 00001476 4883F80A                    cmp rax, 10
  1439 0000147A 7437                        je movOfic1ArrDer
  1440 0000147C 4883F8F6                    cmp rax, -10
  1441 00001480 7453                        je movOfic1AbjIzq
  1442 00001482 4883F80C                    cmp rax, 12
  1443 00001486 745E                        je movOfic1ArrIzq
  1444 00001488 4883F8F4                    cmp rax, -12
  1445 0000148C 7436                        je movOfic1AbjDer
  1446                                  
  1447 0000148E C3                          ret
  1448                                  
  1449                                      movOfic1Izq:
  1450 0000148F 48FF0425[D80A0000]              inc qword[movOfic1Izquierda]
  1451 00001497 C3                              ret
  1452                                      movOfic1Der:
  1453 00001498 48FF0425[D00A0000]              inc qword[movOfic1Derecha]
  1454 000014A0 C3                              ret
  1455                                      movOfic1Arriba:
  1456 000014A1 48FF0425[C80A0000]              inc qword[movOfic1Adelante]
  1457 000014A9 C3                              ret
  1458                                      movOfic1Abajo:
  1459 000014AA 48FF0425[E00A0000]              inc qword[movOfic1Atras]
  1460 000014B2 C3                              ret
  1461                                      movOfic1ArrDer:
  1462 000014B3 48FF0425[E80A0000]              inc qword[movOfic1Diagonal]
  1463 000014BB 48FF0425[F00A0000]              inc qword[movOfic1DiagArribaDer]
  1464 000014C3 C3                              ret
  1465                                      movOfic1AbjDer:
  1466 000014C4 48FF0425[E80A0000]              inc qword[movOfic1Diagonal]
  1467 000014CC 48FF0425[000B0000]              inc qword[movOfic1DiagAbajoDer]
  1468 000014D4 C3                              ret
  1469                                      movOfic1AbjIzq:
  1470 000014D5 48FF0425[E80A0000]              inc qword[movOfic1Diagonal]
  1471 000014DD 48FF0425[080B0000]              inc qword[movOfic1DiagAbajoIzq]
  1472 000014E5 C3                              ret
  1473                                      movOfic1ArrIzq:
  1474 000014E6 48FF0425[E80A0000]              inc qword[movOfic1Diagonal]
  1475 000014EE 48FF0425[F80A0000]              inc qword[movOfic1DiagArribaIzq]
  1476 000014F6 C3                              ret
  1477                                  
  1478                                  actualizarContadoresOfic2:
  1479 000014F7 48FF0425[C00A0000]          inc qword[movimientosOfic2]
  1480 000014FF 488B0425[A4000000]          mov rax, qword[desplazCasOrig]
  1481 00001507 482B0425[BC000000]          sub rax, qword[desplazCasAMover] ; rax = desplazOrigen - desplazDestino
  1482 0000150F 4883F801                    cmp rax, 1
  1483 00001513 742B                        je movOfic2Izq
  1484 00001515 4883F8FF                    cmp rax, -1
  1485 00001519 742E                        je movOfic2Der
  1486 0000151B 4883F80B                    cmp rax, 11
  1487 0000151F 7431                        je movOfic2Arriba
  1488 00001521 4883F8F5                    cmp rax, -11
  1489 00001525 7434                        je movOfic2Abajo
  1490 00001527 4883F80A                    cmp rax, 10
  1491 0000152B 7437                        je movOfic2ArrDer
  1492 0000152D 4883F8F6                    cmp rax, -10
  1493 00001531 7453                        je movOfic2AbjIzq
  1494 00001533 4883F80C                    cmp rax, 12
  1495 00001537 745E                        je movOfic2ArrIzq
  1496 00001539 4883F8F4                    cmp rax, -12
  1497 0000153D 7436                        je movOfic2AbjDer
  1498                                  
  1499 0000153F C3                          ret
  1500                                  
  1501                                      movOfic2Izq:
  1502 00001540 48FF0425[200B0000]              inc qword[movOfic2Izquierda]
  1503 00001548 C3                              ret
  1504                                      movOfic2Der:
  1505 00001549 48FF0425[180B0000]              inc qword[movOfic2Derecha]
  1506 00001551 C3                              ret
  1507                                      movOfic2Arriba:
  1508 00001552 48FF0425[100B0000]              inc qword[movOfic2Adelante]
  1509 0000155A C3                              ret
  1510                                      movOfic2Abajo:
  1511 0000155B 48FF0425[280B0000]              inc qword[movOfic2Atras]
  1512 00001563 C3                              ret
  1513                                      movOfic2ArrDer:
  1514 00001564 48FF0425[300B0000]              inc qword[movOfic2Diagonal]
  1515 0000156C 48FF0425[380B0000]              inc qword[movOfic2DiagArribaDer]
  1516 00001574 C3                              ret
  1517                                      movOfic2AbjDer:
  1518 00001575 48FF0425[300B0000]              inc qword[movOfic2Diagonal]
  1519 0000157D 48FF0425[480B0000]              inc qword[movOfic2DiagAbajoDer]
  1520 00001585 C3                              ret
  1521                                      movOfic2AbjIzq:
  1522 00001586 48FF0425[300B0000]              inc qword[movOfic2Diagonal]
  1523 0000158E 48FF0425[500B0000]              inc qword[movOfic2DiagAbajoIzq]
  1524 00001596 C3                              ret
  1525                                      movOfic2ArrIzq:
  1526 00001597 48FF0425[300B0000]              inc qword[movOfic2Diagonal]
  1527 0000159F 48FF0425[400B0000]              inc qword[movOfic2DiagArribaIzq]
  1528 000015A7 C3                              ret
  1529                                  
  1530                                  ; --------------------------------------------------------------------------------------------
  1531                                  ; RUTINA PARA REFRESCAR LA CASILLA ACTUAL DE LOS OFICIALES
  1532                                  ; --------------------------------------------------------------------------------------------
  1533                                  
  1534                                  refrescarCasActOfic1:
  1535                                      mMov casillaOfic1, filaAMover, 1
    31 000015A8 B901000000          <1>  mov rcx, %3
    32 000015AD 488D3425[AC000000]  <1>  lea rsi, [%2]
    33 000015B5 488D3C25[680B0000]  <1>  lea rdi, [%1]
    34 000015BD F3A4                <1>  rep movsb
  1536                                      mMov casillaOfic1+8, columnaAMover, 1
    31 000015BF B901000000          <1>  mov rcx, %3
    32 000015C4 488D3425[B4000000]  <1>  lea rsi, [%2]
    33 000015CC 488D3C25[700B0000]  <1>  lea rdi, [%1]
    34 000015D4 F3A4                <1>  rep movsb
  1537 000015D6 C3                          ret
  1538                                  
  1539                                  refrescarCasActOfic2:
  1540                                      mMov casillaOfic2, filaAMover, 1
    31 000015D7 B901000000          <1>  mov rcx, %3
    32 000015DC 488D3425[AC000000]  <1>  lea rsi, [%2]
    33 000015E4 488D3C25[780B0000]  <1>  lea rdi, [%1]
    34 000015EC F3A4                <1>  rep movsb
  1541                                      mMov casillaOfic2+8, columnaAMover, 1
    31 000015EE B901000000          <1>  mov rcx, %3
    32 000015F3 488D3425[B4000000]  <1>  lea rsi, [%2]
    33 000015FB 488D3C25[800B0000]  <1>  lea rdi, [%1]
    34 00001603 F3A4                <1>  rep movsb
  1542 00001605 C3                          ret    
  1543                                  
  1544                                  refrescarCasActOficLuegoCaptura:
  1545 00001606 488B0425[BC000000]          mov rax, qword[desplazCasAMover]
  1546 0000160E 488B1C25[D4000000]          mov rbx, qword[desplazAux]
  1547 00001616 4829D8                      sub rax, rbx ; rax = desplazCasAMover - desplazAux
  1548                                  
  1549 00001619 4883F801                    cmp rax, 1
  1550 0000161D 742A                        je saltoIzq
  1551 0000161F 4883F8FF                    cmp rax, -1
  1552 00001623 742E                        je saltoDer
  1553 00001625 4883F80B                    cmp rax, 11
  1554 00001629 7432                        je saltoArriba
  1555 0000162B 4883F8F5                    cmp rax, -11
  1556 0000162F 7436                        je saltoAbajo
  1557 00001631 4883F80A                    cmp rax, 10
  1558 00001635 743A                        je saltoArrDer
  1559 00001637 4883F8F6                    cmp rax, -10
  1560 0000163B 7446                        je saltoAbjIzq
  1561 0000163D 4883F80C                    cmp rax, 12
  1562 00001641 7452                        je saltoArrIzq
  1563 00001643 4883F8F4                    cmp rax, -12
  1564 00001647 745E                        je saltoAbjDer
  1565                                  
  1566                                      saltoIzq:
  1567 00001649 48FF0C25[B4000000]              dec qword[columnaAMover]
  1568 00001651 EB64                            jmp finRefrescarCasActOfic
  1569                                      saltoDer:
  1570 00001653 48FF0425[B4000000]              inc qword[columnaAMover]
  1571 0000165B EB5A                            jmp finRefrescarCasActOfic
  1572                                      saltoArriba:
  1573 0000165D 48FF0C25[AC000000]              dec qword[filaAMover]
  1574 00001665 EB50                            jmp finRefrescarCasActOfic
  1575                                      saltoAbajo:
  1576 00001667 48FF0425[AC000000]              inc qword[filaAMover]
  1577 0000166F EB46                            jmp finRefrescarCasActOfic
  1578                                      saltoArrDer:
  1579 00001671 48FF0C25[AC000000]              dec qword[filaAMover]
  1580 00001679 48FF0425[B4000000]              inc qword[columnaAMover]
  1581 00001681 EB34                            jmp finRefrescarCasActOfic
  1582                                      saltoAbjIzq:
  1583 00001683 48FF0425[AC000000]              inc qword[filaAMover]
  1584 0000168B 48FF0C25[B4000000]              dec qword[columnaAMover]
  1585 00001693 EB22                            jmp finRefrescarCasActOfic
  1586                                      saltoArrIzq:
  1587 00001695 48FF0C25[AC000000]              dec qword[filaAMover]
  1588 0000169D 48FF0C25[B4000000]              dec qword[columnaAMover]
  1589 000016A5 EB10                            jmp finRefrescarCasActOfic
  1590                                      saltoAbjDer:
  1591 000016A7 48FF0425[AC000000]              inc qword[filaAMover]
  1592 000016AF 48FF0425[B4000000]              inc qword[columnaAMover]
  1593                                  
  1594                                      finRefrescarCasActOfic:
  1595 000016B7 E84CFDFFFF                      call verQueOficialEs
  1596                                  
  1597 000016BC 4883F801                        cmp rax, 1
  1598 000016C0 7406                            je actualizarOfic1
  1599                                  
  1600 000016C2 E810FFFFFF                      call refrescarCasActOfic2
  1601 000016C7 C3                              ret
  1602                                  
  1603                                          actualizarOfic1:
  1604 000016C8 E8DBFEFFFF                          call refrescarCasActOfic1
  1605                                  
  1606 000016CD C3                          ret
  1607                                  
  1608                                  
  1609                                  
  1610                                  ; --------------------------------------------------------------------------------------------
  1611                                  ; RUTINA PARA VERIFICAR SI UN OFICIAL PODÍA CAPTURAR UN SOLDADO Y NO LO HIZO
  1612                                  ; --------------------------------------------------------------------------------------------
  1613                                  
  1614                                  podiaCapturarSoldado:
  1615                                      mMov desplazAux, desplazAux2, 1
    31 000016CE B901000000          <1>  mov rcx, %3
    32 000016D3 488D3425[DC000000]  <1>  lea rsi, [%2]
    33 000016DB 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 000016E3 F3A4                <1>  rep movsb
  1616                                  
  1617                                      ; Casilla arriba-izquierda
  1618 000016E5 48832C25[D4000000]-         sub qword[desplazAux], 12
  1618 000016ED 0C                 
  1619                                      mHaySoldado qword[desplazAux]
   100 000016EE B800000000          <1>  mov rax, 0
   101 000016F3 488B3C25[D4000000]  <1>  mov rdi, %1
   102 000016FB E811FAFFFF          <1>  call haySoldado
  1620 00001700 4883F800                    cmp rax, 0
  1621 00001704 7519                        jne verCasArriba
  1622                                  
  1623                                      mPuedeCapturar 12, 1 ; restar 12 a desplazAux
   106 00001706 BF0C000000          <1>  mov rdi, %1
   107 0000170B BE01000000          <1>  mov rsi, %2
   108 00001710 E845020000          <1>  call podiaComerPieza
  1624 00001715 4883F800                    cmp rax, 0
  1625 00001719 0F8435020000                je podiaCapturar
  1626                                  
  1627                                      ; Casilla arriba
  1628                                      verCasArriba:
  1629                                          mMov desplazAux, desplazAux2, 1
    31 0000171F B901000000          <1>  mov rcx, %3
    32 00001724 488D3425[DC000000]  <1>  lea rsi, [%2]
    33 0000172C 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 00001734 F3A4                <1>  rep movsb
  1630 00001736 48832C25[D4000000]-             sub qword[desplazAux], 11
  1630 0000173E 0B                 
  1631                                          mHaySoldado qword[desplazAux]
   100 0000173F B800000000          <1>  mov rax, 0
   101 00001744 488B3C25[D4000000]  <1>  mov rdi, %1
   102 0000174C E8C0F9FFFF          <1>  call haySoldado
  1632 00001751 4883F800                        cmp rax, 0
  1633 00001755 7519                            jne verCasArribaDer
  1634                                  
  1635                                          mPuedeCapturar 11, 1 ; restar 11 a desplazAux
   106 00001757 BF0B000000          <1>  mov rdi, %1
   107 0000175C BE01000000          <1>  mov rsi, %2
   108 00001761 E8F4010000          <1>  call podiaComerPieza
  1636 00001766 4883F800                        cmp rax, 0
  1637 0000176A 0F84E4010000                    je podiaCapturar
  1638                                  
  1639                                      ; Casilla arriba-derecha
  1640                                      verCasArribaDer:
  1641                                          mMov desplazAux, desplazAux2, 1
    31 00001770 B901000000          <1>  mov rcx, %3
    32 00001775 488D3425[DC000000]  <1>  lea rsi, [%2]
    33 0000177D 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 00001785 F3A4                <1>  rep movsb
  1642 00001787 48832C25[D4000000]-             sub qword[desplazAux], 10
  1642 0000178F 0A                 
  1643                                          mHaySoldado qword[desplazAux]
   100 00001790 B800000000          <1>  mov rax, 0
   101 00001795 488B3C25[D4000000]  <1>  mov rdi, %1
   102 0000179D E86FF9FFFF          <1>  call haySoldado
  1644 000017A2 4883F800                        cmp rax, 0
  1645 000017A6 7519                            jne verCasIzq
  1646                                          
  1647                                          mPuedeCapturar 10, 1 ; restar 10 a desplazAux
   106 000017A8 BF0A000000          <1>  mov rdi, %1
   107 000017AD BE01000000          <1>  mov rsi, %2
   108 000017B2 E8A3010000          <1>  call podiaComerPieza
  1648 000017B7 4883F800                        cmp rax, 0
  1649 000017BB 0F8493010000                    je podiaCapturar
  1650                                  
  1651                                      ; Casilla izquierda
  1652                                      verCasIzq:
  1653                                          mMov desplazAux, desplazAux2, 1
    31 000017C1 B901000000          <1>  mov rcx, %3
    32 000017C6 488D3425[DC000000]  <1>  lea rsi, [%2]
    33 000017CE 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 000017D6 F3A4                <1>  rep movsb
  1654 000017D8 48832C25[D4000000]-             sub qword[desplazAux], 1
  1654 000017E0 01                 
  1655                                          mHaySoldado qword[desplazAux]
   100 000017E1 B800000000          <1>  mov rax, 0
   101 000017E6 488B3C25[D4000000]  <1>  mov rdi, %1
   102 000017EE E81EF9FFFF          <1>  call haySoldado
  1656 000017F3 4883F800                        cmp rax, 0
  1657 000017F7 7519                            jne verCasDer
  1658                                          
  1659                                          mPuedeCapturar 1, 1 ; restar 1 a desplazAux
   106 000017F9 BF01000000          <1>  mov rdi, %1
   107 000017FE BE01000000          <1>  mov rsi, %2
   108 00001803 E852010000          <1>  call podiaComerPieza
  1660 00001808 4883F800                        cmp rax, 0
  1661 0000180C 0F8442010000                    je podiaCapturar
  1662                                  
  1663                                      ; Casilla derecha
  1664                                      verCasDer:
  1665                                          mMov desplazAux, desplazAux2, 1
    31 00001812 B901000000          <1>  mov rcx, %3
    32 00001817 488D3425[DC000000]  <1>  lea rsi, [%2]
    33 0000181F 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 00001827 F3A4                <1>  rep movsb
  1666 00001829 48830425[D4000000]-             add qword[desplazAux], 1
  1666 00001831 01                 
  1667                                          mHaySoldado qword[desplazAux]
   100 00001832 B800000000          <1>  mov rax, 0
   101 00001837 488B3C25[D4000000]  <1>  mov rdi, %1
   102 0000183F E8CDF8FFFF          <1>  call haySoldado
  1668 00001844 4883F800                        cmp rax, 0
  1669 00001848 7519                            jne verCasAbajoIzq
  1670                                          
  1671                                          mPuedeCapturar 1, 0 ; sumar 1 a desplazAux
   106 0000184A BF01000000          <1>  mov rdi, %1
   107 0000184F BE00000000          <1>  mov rsi, %2
   108 00001854 E801010000          <1>  call podiaComerPieza
  1672 00001859 4883F800                        cmp rax, 0
  1673 0000185D 0F84F1000000                    je podiaCapturar
  1674                                  
  1675                                      ; Casilla abajo-izquierda
  1676                                      verCasAbajoIzq:
  1677                                          mMov desplazAux, desplazAux2, 1
    31 00001863 B901000000          <1>  mov rcx, %3
    32 00001868 488D3425[DC000000]  <1>  lea rsi, [%2]
    33 00001870 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 00001878 F3A4                <1>  rep movsb
  1678 0000187A 48830425[D4000000]-             add qword[desplazAux], 10
  1678 00001882 0A                 
  1679                                          mHaySoldado qword[desplazAux]
   100 00001883 B800000000          <1>  mov rax, 0
   101 00001888 488B3C25[D4000000]  <1>  mov rdi, %1
   102 00001890 E87CF8FFFF          <1>  call haySoldado
  1680 00001895 4883F800                        cmp rax, 0
  1681 00001899 7519                            jne verCasAbajo
  1682                                          
  1683                                          mPuedeCapturar 10, 0 ; sumar 10 a desplazAux
   106 0000189B BF0A000000          <1>  mov rdi, %1
   107 000018A0 BE00000000          <1>  mov rsi, %2
   108 000018A5 E8B0000000          <1>  call podiaComerPieza
  1684 000018AA 4883F800                        cmp rax, 0
  1685 000018AE 0F84A0000000                    je podiaCapturar
  1686                                  
  1687                                      ; Casilla abajo
  1688                                      verCasAbajo:
  1689                                          mMov desplazAux, desplazAux2, 1
    31 000018B4 B901000000          <1>  mov rcx, %3
    32 000018B9 488D3425[DC000000]  <1>  lea rsi, [%2]
    33 000018C1 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 000018C9 F3A4                <1>  rep movsb
  1690 000018CB 48830425[D4000000]-             add qword[desplazAux], 11
  1690 000018D3 0B                 
  1691                                          mHaySoldado qword[desplazAux]
   100 000018D4 B800000000          <1>  mov rax, 0
   101 000018D9 488B3C25[D4000000]  <1>  mov rdi, %1
   102 000018E1 E82BF8FFFF          <1>  call haySoldado
  1692 000018E6 4883F800                        cmp rax, 0
  1693 000018EA 7515                            jne verCasAbajoDer
  1694                                          
  1695                                          mPuedeCapturar 11, 0 ; sumar 11 a desplazAux
   106 000018EC BF0B000000          <1>  mov rdi, %1
   107 000018F1 BE00000000          <1>  mov rsi, %2
   108 000018F6 E85F000000          <1>  call podiaComerPieza
  1696 000018FB 4883F800                        cmp rax, 0
  1697 000018FF 7453                            je podiaCapturar
  1698                                  
  1699                                      ; Casilla abajo-derecha
  1700                                      verCasAbajoDer:
  1701                                          mMov desplazAux, desplazAux2, 1
    31 00001901 B901000000          <1>  mov rcx, %3
    32 00001906 488D3425[DC000000]  <1>  lea rsi, [%2]
    33 0000190E 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 00001916 F3A4                <1>  rep movsb
  1702 00001918 48830425[D4000000]-             add qword[desplazAux], 12
  1702 00001920 0C                 
  1703                                          mHaySoldado qword[desplazAux]
   100 00001921 B800000000          <1>  mov rax, 0
   101 00001926 488B3C25[D4000000]  <1>  mov rdi, %1
   102 0000192E E8DEF7FFFF          <1>  call haySoldado
  1704 00001933 4883F800                        cmp rax, 0
  1705 00001937 7515                            jne okNoPodiaCapturar
  1706                                          
  1707                                          mPuedeCapturar 12, 0 ; sumar 12 a desplazAux
   106 00001939 BF0C000000          <1>  mov rdi, %1
   107 0000193E BE00000000          <1>  mov rsi, %2
   108 00001943 E812000000          <1>  call podiaComerPieza
  1708 00001948 4883F800                        cmp rax, 0
  1709 0000194C 7406                            je podiaCapturar
  1710                                      
  1711                                      okNoPodiaCapturar:
  1712 0000194E B801000000                      mov rax, 1
  1713 00001953 C3                              ret
  1714                                      
  1715                                      podiaCapturar:
  1716 00001954 B800000000                      mov rax, 0
  1717                                  
  1718 00001959 C3                          ret
  1719                                  
  1720                                  podiaComerPieza:
  1721 0000195A 4883FE00                    cmp rsi, 0
  1722 0000195E 740A                        je sumarDesplaz 
  1723 00001960 48293C25[D4000000]          sub qword[desplazAux], rdi
  1724 00001968 EB08                        jmp verSiEspacioEstaLibre
  1725                                  
  1726                                      sumarDesplaz:
  1727 0000196A 48013C25[D4000000]              add qword[desplazAux], rdi
  1728                                  
  1729                                      verSiEspacioEstaLibre:
  1730                                          mEstaVacia qword[desplazAux]
    94 00001972 B800000000          <1>  mov rax, 0
    95 00001977 488B3C25[D4000000]  <1>  mov rdi, %1
    96 0000197F E8BAF5FFFF          <1>  call estaVacia
  1731 00001984 4883F800                        cmp rax, 0
  1732 00001988 7406                            je okComerPieza
  1733                                  
  1734 0000198A B801000000                      mov rax, 1
  1735 0000198F C3                              ret
  1736                                  
  1737                                      okComerPieza:
  1738 00001990 B800000000                      mov rax, 0
  1739 00001995 C3                              ret
  1740                                  
  1741                                  ; --------------------------------------------------------------------------------------------
  1742                                  ; RUTINA PARA QUITAR AL OFICIAL QUE SE DESPREOCUPÓ DE CAPTURAR SOLDADOS
  1743                                  ; --------------------------------------------------------------------------------------------
  1744                                  
  1745                                  desentenderOficial:
  1746 00001996 488B1C25[D4000000]          mov rbx, qword[desplazAux]
  1747 0000199E BA20000000                  mov rdx, ' '
  1748 000019A3 8893[10000000]              mov byte[tableroEnJuego+rbx], dl
  1749                                  
  1750 000019A9 E85AFAFFFF                  call verQueOficialEs ; Verificamos qué oficial es el que se quiere mover
  1751                                  
  1752 000019AE 4883F801                    cmp rax, 1
  1753 000019B2 741A                        je desentenderOfic1
  1754                                  
  1755                                      desentenderOfic2:
  1756 000019B4 48C70425[780B0000]-             mov qword[casillaOfic2], 0
  1756 000019BC 00000000           
  1757 000019C0 48C70425[800B0000]-             mov qword[casillaOfic2+8], 0
  1757 000019C8 00000000           
  1758 000019CC EB18                            jmp agregarOficDesentendido
  1759                                  
  1760                                      desentenderOfic1:
  1761 000019CE 48C70425[680B0000]-             mov qword[casillaOfic1], 0
  1761 000019D6 00000000           
  1762 000019DA 48C70425[700B0000]-             mov qword[casillaOfic1+8], 0
  1762 000019E2 00000000           
  1763                                  
  1764                                      agregarOficDesentendido:
  1765 000019E6 48FF0425[600B0000]              inc qword[cantOficInvalidados]
  1766                                      
  1767 000019EE C3                          ret
  1768                                      
  1769                                  ; --------------------------------------------------------------------------------------------
  1770                                  ; RUTINA PARA VERIFICAR SI EL OTRO OFICIAL PODÍA CAPTURAR UN SOLDADO Y NO LO HIZO
  1771                                  ; --------------------------------------------------------------------------------------------
  1772                                  
  1773                                  podiaCapturarSoldadoOtroOficial:
  1774 000019EF E814FAFFFF                  call verQueOficialEs ; Verificamos qué oficial es el que se quiere mover
  1775 000019F4 4883F801                    cmp rax, 1
  1776 000019F8 742A                        je verificarOfic2
  1777                                  
  1778                                      verificarOfic1:
  1779                                          mCalcDesplaz qword[casillaOfic1], qword[casillaOfic1+8], qword[desplazAux2]
    87 000019FA 488B3C25[680B0000]  <1>  mov rdi, %1
    88 00001A02 488B3425[700B0000]  <1>  mov rsi, %2
    89 00001A0A E844F5FFFF          <1>  call calcularDesplazamiento
    90 00001A0F 48890425[DC000000]  <1>  mov %3, rax
  1780 00001A17 E8B2FCFFFF                      call podiaCapturarSoldado
  1781 00001A1C 4883F800                        cmp rax, 0
  1782 00001A20 742C                            je okPodiaComerElOtro
  1783 00001A22 EB30                            jmp noPodiaComerElOtro
  1784                                      
  1785                                      verificarOfic2:
  1786                                          mCalcDesplaz qword[casillaOfic2], qword[casillaOfic2+8], qword[desplazAux2]
    87 00001A24 488B3C25[780B0000]  <1>  mov rdi, %1
    88 00001A2C 488B3425[800B0000]  <1>  mov rsi, %2
    89 00001A34 E81AF5FFFF          <1>  call calcularDesplazamiento
    90 00001A39 48890425[DC000000]  <1>  mov %3, rax
  1787 00001A41 E888FCFFFF                      call podiaCapturarSoldado
  1788 00001A46 4883F800                        cmp rax, 0
  1789 00001A4A 7402                            je okPodiaComerElOtro
  1790 00001A4C EB06                            jmp noPodiaComerElOtro
  1791                                  
  1792                                      okPodiaComerElOtro:
  1793 00001A4E B800000000                      mov rax, 0
  1794 00001A53 C3                              ret
  1795                                  
  1796                                      noPodiaComerElOtro:
  1797 00001A54 B801000000                      mov rax, 1
  1798                                  
  1799 00001A59 C3                          ret
  1800                                  
  1801                                  ; --------------------------------------------------------------------------------------------
  1802                                  ; RUTINA PARA INVALIDAR AL OTRO OFICIAL QUE NO SE MOVIÓ (el cual podía capturar un soldado)
  1803                                  ; --------------------------------------------------------------------------------------------
  1804                                  
  1805                                  desentenderOtroOficial:
  1806 00001A5A E8A9F9FFFF                  call verQueOficialEs ; Verificamos qué oficial es el que se quiere mover
  1807                                  
  1808 00001A5F 4883F801                    cmp rax, 1
  1809 00001A63 7423                        je otroEsOfic2
  1810                                  
  1811                                      otroEsOfic1:
  1812                                          mCalcDesplaz qword[casillaOfic1], qword[casillaOfic1+8], qword[desplazAux]
    87 00001A65 488B3C25[680B0000]  <1>  mov rdi, %1
    88 00001A6D 488B3425[700B0000]  <1>  mov rsi, %2
    89 00001A75 E8D9F4FFFF          <1>  call calcularDesplazamiento
    90 00001A7A 48890425[D4000000]  <1>  mov %3, rax
  1813 00001A82 E80FFFFFFF                      call desentenderOficial
  1814 00001A87 C3                              ret
  1815                                  
  1816                                      otroEsOfic2:
  1817                                          mCalcDesplaz qword[casillaOfic2], qword[casillaOfic2+8], qword[desplazAux]
    87 00001A88 488B3C25[780B0000]  <1>  mov rdi, %1
    88 00001A90 488B3425[800B0000]  <1>  mov rsi, %2
    89 00001A98 E8B6F4FFFF          <1>  call calcularDesplazamiento
    90 00001A9D 48890425[D4000000]  <1>  mov %3, rax
  1818 00001AA5 E8ECFEFFFF                      call desentenderOficial
  1819                                      
  1820 00001AAA C3                          ret
  1821                                  
  1822                                  ; --------------------------------------------------------------------------------------------
  1823                                  ; RUTINA PARA VER SI EL MOVIMIENTO DE UN OFICIAL RESULTA EN EL FIN DEL JUEGO
  1824                                  ; --------------------------------------------------------------------------------------------
  1825                                  
  1826                                  verificarFinJuegoOficiales:
  1827                                      ; Verificamos si ambos oficiales han sido invalidados
  1828 00001AAB 48833C25[600B0000]-         cmp qword[cantOficInvalidados], 2
  1828 00001AB3 02                 
  1829 00001AB4 7411                        je finInvalidados
  1830                                  
  1831                                      ; Verificamos que los oficiales hayan capturado necesarios soldados para ganar
  1832 00001AB6 48833C25[580B0000]-         cmp qword[cantSoldCapturados], 16
  1832 00001ABE 10                 
  1833 00001ABF 7413                        je finSoldCapturados
  1834                                  
  1835 00001AC1 B801000000                  mov rax, 1
  1836 00001AC6 C3                          ret
  1837                                  
  1838                                      finInvalidados:
  1839 00001AC7 C70425[3C070000]6F-             mov dword[varRazonFin], "oInv"
  1839 00001ACF 496E76             
  1840 00001AD2 EB0B                            jmp hayFinJuegoOfic
  1841                                  
  1842                                      finSoldCapturados:
  1843 00001AD4 C70425[3C070000]73-             mov dword[varRazonFin], "sCap"
  1843 00001ADC 436170             
  1844                                  
  1845                                      hayFinJuegoOfic:
  1846 00001ADF B800000000                      mov rax, 0
  1847 00001AE4 C3                              ret
  1848                                  
  1849                                  ; --------------------------------------------------------------------------------------------
  1850                                  ; RUTINA PARA VERIFICAR SI EL MOVIMIENTO DE UN SOLDADO RESULTA EN EL FIN DEL JUEGO
  1851                                  ; --------------------------------------------------------------------------------------------
  1852                                  
  1853                                  verificarFinJuegoSoldados:
  1854 00001AE5 E835000000                  call soldadosOcupanFortaleza
  1855 00001AEA 4883F800                    cmp rax, 0
  1856 00001AEE 7411                        je finOcupFortaleza
  1857                                  
  1858 00001AF0 E827010000                  call oficialesRodeados
  1859 00001AF5 4883F800                    cmp rax, 0
  1860 00001AF9 7413                        je finOficRodeados
  1861                                  
  1862 00001AFB B801000000                  mov rax, 1
  1863 00001B00 C3                          ret
  1864                                  
  1865                                      finOcupFortaleza:
  1866 00001B01 C70425[3C070000]73-             mov dword[varRazonFin], "sOcu"
  1866 00001B09 4F6375             
  1867 00001B0C EB0B                            jmp hayFinJuegoSold
  1868                                  
  1869                                      finOficRodeados:
  1870 00001B0E C70425[3C070000]6F-             mov dword[varRazonFin], "oRod"
  1870 00001B16 526F64             
  1871                                  
  1872                                      hayFinJuegoSold:
  1873 00001B19 B800000000                      mov rax, 0
  1874 00001B1E C3                              ret
  1875                                  
  1876                                  ; --------------------------------------------------------------------------------------------
  1877                                  ; RUTINA PARA VERIFICAR SI LOS SOLDADOS OCUPAN LA FORTALEZA
  1878                                  ; --------------------------------------------------------------------------------------------
  1879                                  
  1880                                  soldadosOcupanFortaleza:
  1881                                      mCmp byte[tableroEnJuego+70], [simboloSoldados], 1 ; Fortaleza 1-1
    38 00001B1F B901000000          <1>  mov rcx, %3
    39 00001B24 488D3425[56000000]  <1>  lea rsi, %1
    40 00001B2C 488D3C25[9A0B0000]  <1>  lea rdi, %2
    41 00001B34 F3A6                <1>  repe cmpsb
  1882 00001B36 0F85DA000000                jne noOcupaFortaleza
  1883                                      mCmp byte[tableroEnJuego+71], [simboloSoldados], 1 ; Fortaleza 1-2
    38 00001B3C B901000000          <1>  mov rcx, %3
    39 00001B41 488D3425[57000000]  <1>  lea rsi, %1
    40 00001B49 488D3C25[9A0B0000]  <1>  lea rdi, %2
    41 00001B51 F3A6                <1>  repe cmpsb
  1884 00001B53 0F85BD000000                jne noOcupaFortaleza
  1885                                      mCmp byte[tableroEnJuego+72], [simboloSoldados], 1 ; Fortaleza 1-3
    38 00001B59 B901000000          <1>  mov rcx, %3
    39 00001B5E 488D3425[58000000]  <1>  lea rsi, %1
    40 00001B66 488D3C25[9A0B0000]  <1>  lea rdi, %2
    41 00001B6E F3A6                <1>  repe cmpsb
  1886 00001B70 0F85A0000000                jne noOcupaFortaleza
  1887                                      mCmp byte[tableroEnJuego+81], [simboloSoldados], 1 ; Fortaleza 2-1
    38 00001B76 B901000000          <1>  mov rcx, %3
    39 00001B7B 488D3425[61000000]  <1>  lea rsi, %1
    40 00001B83 488D3C25[9A0B0000]  <1>  lea rdi, %2
    41 00001B8B F3A6                <1>  repe cmpsb
  1888 00001B8D 0F8583000000                jne noOcupaFortaleza
  1889                                      mCmp byte[tableroEnJuego+82], [simboloSoldados], 1 ; Fortaleza 2-2
    38 00001B93 B901000000          <1>  mov rcx, %3
    39 00001B98 488D3425[62000000]  <1>  lea rsi, %1
    40 00001BA0 488D3C25[9A0B0000]  <1>  lea rdi, %2
    41 00001BA8 F3A6                <1>  repe cmpsb
  1890 00001BAA 756A                        jne noOcupaFortaleza
  1891                                      mCmp byte[tableroEnJuego+83], [simboloSoldados], 1 ; Fortaleza 2-3
    38 00001BAC B901000000          <1>  mov rcx, %3
    39 00001BB1 488D3425[63000000]  <1>  lea rsi, %1
    40 00001BB9 488D3C25[9A0B0000]  <1>  lea rdi, %2
    41 00001BC1 F3A6                <1>  repe cmpsb
  1892 00001BC3 7551                        jne noOcupaFortaleza
  1893                                      mCmp byte[tableroEnJuego+92], [simboloSoldados], 1 ; Fortaleza 3-1
    38 00001BC5 B901000000          <1>  mov rcx, %3
    39 00001BCA 488D3425[6C000000]  <1>  lea rsi, %1
    40 00001BD2 488D3C25[9A0B0000]  <1>  lea rdi, %2
    41 00001BDA F3A6                <1>  repe cmpsb
  1894 00001BDC 7538                        jne noOcupaFortaleza
  1895                                      mCmp byte[tableroEnJuego+93], [simboloSoldados], 1 ; Fortaleza 3-2
    38 00001BDE B901000000          <1>  mov rcx, %3
    39 00001BE3 488D3425[6D000000]  <1>  lea rsi, %1
    40 00001BEB 488D3C25[9A0B0000]  <1>  lea rdi, %2
    41 00001BF3 F3A6                <1>  repe cmpsb
  1896 00001BF5 751F                        jne noOcupaFortaleza
  1897                                      mCmp byte[tableroEnJuego+94], [simboloSoldados], 1 ; Fortaleza 3-3
    38 00001BF7 B901000000          <1>  mov rcx, %3
    39 00001BFC 488D3425[6E000000]  <1>  lea rsi, %1
    40 00001C04 488D3C25[9A0B0000]  <1>  lea rdi, %2
    41 00001C0C F3A6                <1>  repe cmpsb
  1898 00001C0E 7506                        jne noOcupaFortaleza
  1899                                  
  1900 00001C10 B800000000                  mov rax, 0
  1901 00001C15 C3                          ret
  1902                                  
  1903                                      noOcupaFortaleza:
  1904 00001C16 B801000000                      mov rax, 1
  1905                                  
  1906 00001C1B C3                          ret
  1907                                  
  1908                                  ; --------------------------------------------------------------------------------------------
  1909                                  ; RUTINA PARA VERIFICAR SI LOS OFICIALES ESTÁN RODEADOS POR SOLDADOS
  1910                                  ; --------------------------------------------------------------------------------------------
  1911                                  
  1912                                  oficialesRodeados:
  1913 00001C1C E8F8030000                  call ofic1Desentendido
  1914 00001C21 4883F800                    cmp rax, 0
  1915 00001C25 740B                        je rodeanAOfic2
  1916 00001C27 E828000000                  call verSiOfic1Rodeado
  1917 00001C2C 4883F800                    cmp rax, 0
  1918 00001C30 751C                        jne tienenSalida
  1919                                  
  1920                                      rodeanAOfic2:
  1921 00001C32 E8F9030000                      call ofic2Desentendido
  1922 00001C37 4883F800                        cmp rax, 0
  1923 00001C3B 740B                            je noHaySalida
  1924 00001C3D E84C000000                      call verSiOfic2Rodeado
  1925 00001C42 4883F800                        cmp rax, 0
  1926 00001C46 7506                            jne tienenSalida
  1927                                  
  1928                                      noHaySalida:
  1929 00001C48 B800000000                      mov rax, 0
  1930 00001C4D C3                              ret
  1931                                  
  1932                                      tienenSalida:
  1933 00001C4E B801000000                      mov rax, 1
  1934                                  
  1935 00001C53 C3                          ret
  1936                                  
  1937                                  verSiOfic1Rodeado:
  1938                                      mCalcDesplaz qword[casillaOfic1], qword[casillaOfic1+8], qword[desplazAux]
    87 00001C54 488B3C25[680B0000]  <1>  mov rdi, %1
    88 00001C5C 488B3425[700B0000]  <1>  mov rsi, %2
    89 00001C64 E8EAF2FFFF          <1>  call calcularDesplazamiento
    90 00001C69 48890425[D4000000]  <1>  mov %3, rax
  1939                                      mMov desplazAux2, desplazAux, 1
    31 00001C71 B901000000          <1>  mov rcx, %3
    32 00001C76 488D3425[D4000000]  <1>  lea rsi, [%2]
    33 00001C7E 488D3C25[DC000000]  <1>  lea rdi, [%1]
    34 00001C86 F3A4                <1>  rep movsb
  1940 00001C88 E83B000000                  call verSiOficialRodeado
  1941 00001C8D C3                          ret
  1942                                  
  1943                                  verSiOfic2Rodeado:
  1944                                      mCalcDesplaz qword[casillaOfic2], qword[casillaOfic2+8], qword[desplazAux]
    87 00001C8E 488B3C25[780B0000]  <1>  mov rdi, %1
    88 00001C96 488B3425[800B0000]  <1>  mov rsi, %2
    89 00001C9E E8B0F2FFFF          <1>  call calcularDesplazamiento
    90 00001CA3 48890425[D4000000]  <1>  mov %3, rax
  1945                                      mMov desplazAux2, desplazAux, 1
    31 00001CAB B901000000          <1>  mov rcx, %3
    32 00001CB0 488D3425[D4000000]  <1>  lea rsi, [%2]
    33 00001CB8 488D3C25[DC000000]  <1>  lea rdi, [%1]
    34 00001CC0 F3A4                <1>  rep movsb
  1946 00001CC2 E801000000                  call verSiOficialRodeado
  1947 00001CC7 C3                          ret
  1948                                  
  1949                                  verSiOficialRodeado:
  1950                                      ; Casilla arriba-izquierda
  1951 00001CC8 48832C25[D4000000]-         sub qword[desplazAux], 12
  1951 00001CD0 0C                 
  1952                                      mEstaVacia qword[desplazAux]
    94 00001CD1 B800000000          <1>  mov rax, 0
    95 00001CD6 488B3C25[D4000000]  <1>  mov rdi, %1
    96 00001CDE E85BF2FFFF          <1>  call estaVacia
  1953 00001CE3 4883F800                    cmp rax, 0 ; Si el oficial tiene una casilla vacía, puede moverse -> no está rodeado 
  1954 00001CE7 0F8426030000                je okPuedeMoverse
  1955                                      mHaySoldado qword[desplazAux]
   100 00001CED B800000000          <1>  mov rax, 0
   101 00001CF2 488B3C25[D4000000]  <1>  mov rdi, %1
   102 00001CFA E812F4FFFF          <1>  call haySoldado
  1956 00001CFF 4883F801                    cmp rax, 1 ; Si no hay soldado, significa que es un límite del tablero -> me fijo en otra casilla
  1957 00001D03 7419                        je verEspacioArr
  1958                                      mPuedeCapturar 12, 1 ; restar 12 a desplazAux
   106 00001D05 BF0C000000          <1>  mov rdi, %1
   107 00001D0A BE01000000          <1>  mov rsi, %2
   108 00001D0F E846FCFFFF          <1>  call podiaComerPieza
  1959 00001D14 4883F800                    cmp rax, 0 ; Si el oficial puede capturar un soldado, no está rodeado
  1960 00001D18 0F84F5020000                je okPuedeMoverse
  1961                                  
  1962                                      ; Casilla arriba
  1963                                      verEspacioArr:
  1964                                          mMov desplazAux, desplazAux2, 1
    31 00001D1E B901000000          <1>  mov rcx, %3
    32 00001D23 488D3425[DC000000]  <1>  lea rsi, [%2]
    33 00001D2B 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 00001D33 F3A4                <1>  rep movsb
  1965 00001D35 48832C25[D4000000]-             sub qword[desplazAux], 11
  1965 00001D3D 0B                 
  1966                                          mEstaVacia qword[desplazAux]
    94 00001D3E B800000000          <1>  mov rax, 0
    95 00001D43 488B3C25[D4000000]  <1>  mov rdi, %1
    96 00001D4B E8EEF1FFFF          <1>  call estaVacia
  1967 00001D50 4883F800                        cmp rax, 0  
  1968 00001D54 0F84B9020000                    je okPuedeMoverse
  1969                                          mHaySoldado qword[desplazAux]
   100 00001D5A B800000000          <1>  mov rax, 0
   101 00001D5F 488B3C25[D4000000]  <1>  mov rdi, %1
   102 00001D67 E8A5F3FFFF          <1>  call haySoldado
  1970 00001D6C 4883F801                        cmp rax, 1
  1971 00001D70 7419                            je verEspacioArrDer
  1972                                          mPuedeCapturar 11, 1 ; restar 11 a desplazAux
   106 00001D72 BF0B000000          <1>  mov rdi, %1
   107 00001D77 BE01000000          <1>  mov rsi, %2
   108 00001D7C E8D9FBFFFF          <1>  call podiaComerPieza
  1973 00001D81 4883F800                        cmp rax, 0
  1974 00001D85 0F8488020000                    je okPuedeMoverse
  1975                                  
  1976                                      ; Casilla arriba-derecha
  1977                                      verEspacioArrDer:
  1978                                          mMov desplazAux, desplazAux2, 1
    31 00001D8B B901000000          <1>  mov rcx, %3
    32 00001D90 488D3425[DC000000]  <1>  lea rsi, [%2]
    33 00001D98 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 00001DA0 F3A4                <1>  rep movsb
  1979 00001DA2 48832C25[D4000000]-             sub qword[desplazAux], 10
  1979 00001DAA 0A                 
  1980                                          mEstaVacia qword[desplazAux]
    94 00001DAB B800000000          <1>  mov rax, 0
    95 00001DB0 488B3C25[D4000000]  <1>  mov rdi, %1
    96 00001DB8 E881F1FFFF          <1>  call estaVacia
  1981 00001DBD 4883F800                        cmp rax, 0  
  1982 00001DC1 0F844C020000                    je okPuedeMoverse
  1983                                          mHaySoldado qword[desplazAux]
   100 00001DC7 B800000000          <1>  mov rax, 0
   101 00001DCC 488B3C25[D4000000]  <1>  mov rdi, %1
   102 00001DD4 E838F3FFFF          <1>  call haySoldado
  1984 00001DD9 4883F801                        cmp rax, 1
  1985 00001DDD 7419                            je verEspacioIzq
  1986                                          mPuedeCapturar 10, 1 ; restar 10 a desplazAux
   106 00001DDF BF0A000000          <1>  mov rdi, %1
   107 00001DE4 BE01000000          <1>  mov rsi, %2
   108 00001DE9 E86CFBFFFF          <1>  call podiaComerPieza
  1987 00001DEE 4883F800                        cmp rax, 0
  1988 00001DF2 0F841B020000                    je okPuedeMoverse
  1989                                  
  1990                                      ; Casilla izquierda
  1991                                      verEspacioIzq:
  1992                                          mMov desplazAux, desplazAux2, 1
    31 00001DF8 B901000000          <1>  mov rcx, %3
    32 00001DFD 488D3425[DC000000]  <1>  lea rsi, [%2]
    33 00001E05 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 00001E0D F3A4                <1>  rep movsb
  1993 00001E0F 48832C25[D4000000]-             sub qword[desplazAux], 1
  1993 00001E17 01                 
  1994                                          mEstaVacia qword[desplazAux]
    94 00001E18 B800000000          <1>  mov rax, 0
    95 00001E1D 488B3C25[D4000000]  <1>  mov rdi, %1
    96 00001E25 E814F1FFFF          <1>  call estaVacia
  1995 00001E2A 4883F800                        cmp rax, 0  
  1996 00001E2E 0F84DF010000                    je okPuedeMoverse
  1997                                          mHaySoldado qword[desplazAux]
   100 00001E34 B800000000          <1>  mov rax, 0
   101 00001E39 488B3C25[D4000000]  <1>  mov rdi, %1
   102 00001E41 E8CBF2FFFF          <1>  call haySoldado
  1998 00001E46 4883F801                        cmp rax, 1
  1999 00001E4A 7419                            je verEspacioDer
  2000                                          mPuedeCapturar 1, 1 ; restar 1 a desplazAux 
   106 00001E4C BF01000000          <1>  mov rdi, %1
   107 00001E51 BE01000000          <1>  mov rsi, %2
   108 00001E56 E8FFFAFFFF          <1>  call podiaComerPieza
  2001 00001E5B 4883F800                        cmp rax, 0
  2002 00001E5F 0F84AE010000                    je okPuedeMoverse
  2003                                  
  2004                                      ; Casilla derecha
  2005                                      verEspacioDer:
  2006                                          mMov desplazAux, desplazAux2, 1
    31 00001E65 B901000000          <1>  mov rcx, %3
    32 00001E6A 488D3425[DC000000]  <1>  lea rsi, [%2]
    33 00001E72 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 00001E7A F3A4                <1>  rep movsb
  2007 00001E7C 48830425[D4000000]-             add qword[desplazAux], 1
  2007 00001E84 01                 
  2008                                          mEstaVacia qword[desplazAux]
    94 00001E85 B800000000          <1>  mov rax, 0
    95 00001E8A 488B3C25[D4000000]  <1>  mov rdi, %1
    96 00001E92 E8A7F0FFFF          <1>  call estaVacia
  2009 00001E97 4883F800                        cmp rax, 0  
  2010 00001E9B 0F8472010000                    je okPuedeMoverse
  2011                                          mHaySoldado qword[desplazAux]
   100 00001EA1 B800000000          <1>  mov rax, 0
   101 00001EA6 488B3C25[D4000000]  <1>  mov rdi, %1
   102 00001EAE E85EF2FFFF          <1>  call haySoldado
  2012 00001EB3 4883F801                        cmp rax, 1
  2013 00001EB7 7419                            je verEspacioAbjIzq
  2014                                          mPuedeCapturar 1, 0 ; sumar 1 a desplazAux 
   106 00001EB9 BF01000000          <1>  mov rdi, %1
   107 00001EBE BE00000000          <1>  mov rsi, %2
   108 00001EC3 E892FAFFFF          <1>  call podiaComerPieza
  2015 00001EC8 4883F800                        cmp rax, 0
  2016 00001ECC 0F8441010000                    je okPuedeMoverse
  2017                                  
  2018                                      ; Casilla abajo-izquierda
  2019                                      verEspacioAbjIzq:
  2020                                          mMov desplazAux, desplazAux2, 1
    31 00001ED2 B901000000          <1>  mov rcx, %3
    32 00001ED7 488D3425[DC000000]  <1>  lea rsi, [%2]
    33 00001EDF 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 00001EE7 F3A4                <1>  rep movsb
  2021 00001EE9 48830425[D4000000]-             add qword[desplazAux], 10
  2021 00001EF1 0A                 
  2022                                          mEstaVacia qword[desplazAux]
    94 00001EF2 B800000000          <1>  mov rax, 0
    95 00001EF7 488B3C25[D4000000]  <1>  mov rdi, %1
    96 00001EFF E83AF0FFFF          <1>  call estaVacia
  2023 00001F04 4883F800                        cmp rax, 0  
  2024 00001F08 0F8405010000                    je okPuedeMoverse
  2025                                          mHaySoldado qword[desplazAux]
   100 00001F0E B800000000          <1>  mov rax, 0
   101 00001F13 488B3C25[D4000000]  <1>  mov rdi, %1
   102 00001F1B E8F1F1FFFF          <1>  call haySoldado
  2026 00001F20 4883F801                        cmp rax, 1
  2027 00001F24 7419                            je verEspacioAbajo
  2028                                          mPuedeCapturar 10, 0 ; sumar 10 a desplazAux 
   106 00001F26 BF0A000000          <1>  mov rdi, %1
   107 00001F2B BE00000000          <1>  mov rsi, %2
   108 00001F30 E825FAFFFF          <1>  call podiaComerPieza
  2029 00001F35 4883F800                        cmp rax, 0
  2030 00001F39 0F84D4000000                    je okPuedeMoverse
  2031                                  
  2032                                      ; Casilla abajo
  2033                                      verEspacioAbajo:
  2034                                          mMov desplazAux, desplazAux2, 1
    31 00001F3F B901000000          <1>  mov rcx, %3
    32 00001F44 488D3425[DC000000]  <1>  lea rsi, [%2]
    33 00001F4C 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 00001F54 F3A4                <1>  rep movsb
  2035 00001F56 48830425[D4000000]-             add qword[desplazAux], 11
  2035 00001F5E 0B                 
  2036                                          mEstaVacia qword[desplazAux]
    94 00001F5F B800000000          <1>  mov rax, 0
    95 00001F64 488B3C25[D4000000]  <1>  mov rdi, %1
    96 00001F6C E8CDEFFFFF          <1>  call estaVacia
  2037 00001F71 4883F800                        cmp rax, 0  
  2038 00001F75 0F8498000000                    je okPuedeMoverse
  2039                                          mHaySoldado qword[desplazAux]
   100 00001F7B B800000000          <1>  mov rax, 0
   101 00001F80 488B3C25[D4000000]  <1>  mov rdi, %1
   102 00001F88 E884F1FFFF          <1>  call haySoldado
  2040 00001F8D 4883F801                        cmp rax, 1
  2041 00001F91 7415                            je verEspacioAbjDer
  2042                                          mPuedeCapturar 11, 0 ; sumar 11 a desplazAux
   106 00001F93 BF0B000000          <1>  mov rdi, %1
   107 00001F98 BE00000000          <1>  mov rsi, %2
   108 00001F9D E8B8F9FFFF          <1>  call podiaComerPieza
  2043 00001FA2 4883F800                        cmp rax, 0
  2044 00001FA6 746B                            je okPuedeMoverse
  2045                                  
  2046                                      ; Casilla abajo-derecha
  2047                                      verEspacioAbjDer:
  2048                                          mMov desplazAux, desplazAux2, 1
    31 00001FA8 B901000000          <1>  mov rcx, %3
    32 00001FAD 488D3425[DC000000]  <1>  lea rsi, [%2]
    33 00001FB5 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 00001FBD F3A4                <1>  rep movsb
  2049 00001FBF 48830425[D4000000]-             add qword[desplazAux], 12
  2049 00001FC7 0C                 
  2050                                          mEstaVacia qword[desplazAux]
    94 00001FC8 B800000000          <1>  mov rax, 0
    95 00001FCD 488B3C25[D4000000]  <1>  mov rdi, %1
    96 00001FD5 E864EFFFFF          <1>  call estaVacia
  2051 00001FDA 4883F800                        cmp rax, 0  
  2052 00001FDE 7433                            je okPuedeMoverse
  2053                                          mHaySoldado qword[desplazAux]
   100 00001FE0 B800000000          <1>  mov rax, 0
   101 00001FE5 488B3C25[D4000000]  <1>  mov rdi, %1
   102 00001FED E81FF1FFFF          <1>  call haySoldado
  2054 00001FF2 4883F801                        cmp rax, 1
  2055 00001FF6 7415                            je noPuedeMoverse
  2056                                          mPuedeCapturar 12, 0 ; sumar 12 a desplazAux
   106 00001FF8 BF0C000000          <1>  mov rdi, %1
   107 00001FFD BE00000000          <1>  mov rsi, %2
   108 00002002 E853F9FFFF          <1>  call podiaComerPieza
  2057 00002007 4883F800                        cmp rax, 0
  2058 0000200B 7406                            je okPuedeMoverse
  2059                                  
  2060                                      ; Si llegamos acá, el oficial está rodeado -> no puede realizar ningún movimiento
  2061                                      noPuedeMoverse:
  2062 0000200D B800000000                      mov rax, 0
  2063 00002012 C3                              ret
  2064                                  
  2065                                      ; Si llegamos acá, el oficial puede moverse
  2066                                      okPuedeMoverse:
  2067 00002013 B801000000                      mov rax, 1
  2068 00002018 C3                              ret
  2069                                  
  2070                                  ofic1Desentendido:
  2071 00002019 48833C25[680B0000]-         cmp qword[casillaOfic1], 0
  2071 00002021 00                 
  2072 00002022 7406                        je el1EstaDesentendido
  2073                                  
  2074 00002024 B801000000                  mov rax, 1
  2075 00002029 C3                          ret
  2076                                  
  2077                                      el1EstaDesentendido:
  2078 0000202A B800000000                      mov rax, 0
  2079 0000202F C3                              ret
  2080                                  
  2081                                  ofic2Desentendido:
  2082 00002030 48833C25[780B0000]-         cmp qword[casillaOfic2], 0
  2082 00002038 00                 
  2083 00002039 7406                        je el2EstaDesentendido
  2084                                  
  2085 0000203B B801000000                  mov rax, 1
  2086 00002040 C3                          ret
  2087                                  
  2088                                      el2EstaDesentendido:
  2089 00002041 B800000000                      mov rax, 0
  2090 00002046 C3                              ret
  2091                                  
  2092                                  ; --------------------------------------------------------------------------------------------
  2093                                  ; RUTINAS PARA TERMINAR EL JUEGO Y MOSTRAR LAS ESTADÍSTICAS
  2094                                  ; --------------------------------------------------------------------------------------------
  2095                                  
  2096                                  finDeJuego:
  2097                                      mCommand cmdBorrarArchivoPartida
    24 00002047 48BF-               <1>  mov rdi, %1
    24 00002049 [BE0B000000000000]  <1>
    25 00002051 4883EC08            <1>  sub rsp, 8
    26 00002055 E8(00000000)        <1>  call system
    27 0000205A 4883C408            <1>  add rsp, 8
  2098                                      mCommand cmdLimpiarPantalla
    24 0000205E 48BF-               <1>  mov rdi, %1
    24 00002060 [9E0B000000000000]  <1>
    25 00002068 4883EC08            <1>  sub rsp, 8
    26 0000206C E8(00000000)        <1>  call system
    27 00002071 4883C408            <1>  add rsp, 8
  2099                                      mPuts msgJuegoTerminado
     2 00002075 48BF-               <1>  mov rdi, %1
     2 00002077 [DD06000000000000]  <1>
     3 0000207F 4883EC08            <1>  sub rsp, 8
     4 00002083 E8(00000000)        <1>  call puts
     5 00002088 4883C408            <1>  add rsp, 8
  2100                                  
  2101 0000208C 813C25[3C070000]73-         cmp dword[varRazonFin], "sOcu"
  2101 00002094 4F6375             
  2102 00002097 7430                        je soldadosFortaleza
  2103                                  
  2104 00002099 813C25[3C070000]6F-         cmp dword[varRazonFin], "oRod"
  2104 000020A1 526F64             
  2105 000020A4 746A                        je soldadosRodeanOficiales
  2106                                  
  2107 000020A6 813C25[3C070000]6F-         cmp dword[varRazonFin], "oInv"
  2107 000020AE 496E76             
  2108 000020B1 0F84A0000000                je oficialesInvalidados
  2109                                  
  2110 000020B7 813C25[3C070000]73-         cmp dword[varRazonFin], "sCap"
  2110 000020BF 436170             
  2111 000020C2 0F84D3000000                je soldadosCapturados
  2112                                  
  2113 000020C8 C3                          ret
  2114                                  
  2115                                      soldadosFortaleza:
  2116                                          mPrint msgGanador, stringSoldados
     9 000020C9 48BF-               <1>  mov rdi, %1
     9 000020CB [F706000000000000]  <1>
    10 000020D3 48BE-               <1>  mov rsi, %2
    10 000020D5 [1D07000000000000]  <1>
    11 000020DD 4883EC08            <1>  sub rsp, 8
    12 000020E1 E8(00000000)        <1>  call printf
    13 000020E6 4883C408            <1>  add rsp, 8
  2117                                          mPrint msgRazonGanador, msgSoldadosFortaleza
     9 000020EA 48BF-               <1>  mov rdi, %1
     9 000020EC [3007000000000000]  <1>
    10 000020F4 48BE-               <1>  mov rsi, %2
    10 000020F6 [5508000000000000]  <1>
    11 000020FE 4883EC08            <1>  sub rsp, 8
    12 00002102 E8(00000000)        <1>  call printf
    13 00002107 4883C408            <1>  add rsp, 8
  2118 0000210B E9CF000000                      jmp mostrarEstadisticas
  2119                                  
  2120                                      soldadosRodeanOficiales:
  2121                                          mPrint msgGanador, stringSoldados
     9 00002110 48BF-               <1>  mov rdi, %1
     9 00002112 [F706000000000000]  <1>
    10 0000211A 48BE-               <1>  mov rsi, %2
    10 0000211C [1D07000000000000]  <1>
    11 00002124 4883EC08            <1>  sub rsp, 8
    12 00002128 E8(00000000)        <1>  call printf
    13 0000212D 4883C408            <1>  add rsp, 8
  2122                                          mPrint msgRazonGanador, msgSoldadosRodean
     9 00002131 48BF-               <1>  mov rdi, %1
     9 00002133 [3007000000000000]  <1>
    10 0000213B 48BE-               <1>  mov rsi, %2
    10 0000213D [9008000000000000]  <1>
    11 00002145 4883EC08            <1>  sub rsp, 8
    12 00002149 E8(00000000)        <1>  call printf
    13 0000214E 4883C408            <1>  add rsp, 8
  2123 00002152 E988000000                      jmp mostrarEstadisticas
  2124                                  
  2125                                      oficialesInvalidados:
  2126                                          mPrint msgGanador, stringSoldados
     9 00002157 48BF-               <1>  mov rdi, %1
     9 00002159 [F706000000000000]  <1>
    10 00002161 48BE-               <1>  mov rsi, %2
    10 00002163 [1D07000000000000]  <1>
    11 0000216B 4883EC08            <1>  sub rsp, 8
    12 0000216F E8(00000000)        <1>  call printf
    13 00002174 4883C408            <1>  add rsp, 8
  2127                                          mPrint msgRazonGanador, msgSoldadosInvalidar
     9 00002178 48BF-               <1>  mov rdi, %1
     9 0000217A [3007000000000000]  <1>
    10 00002182 48BE-               <1>  mov rsi, %2
    10 00002184 [BA08000000000000]  <1>
    11 0000218C 4883EC08            <1>  sub rsp, 8
    12 00002190 E8(00000000)        <1>  call printf
    13 00002195 4883C408            <1>  add rsp, 8
  2128 00002199 EB44                            jmp mostrarEstadisticas
  2129                                  
  2130                                      soldadosCapturados:
  2131                                          mPrint msgGanador, stringOficiales
     9 0000219B 48BF-               <1>  mov rdi, %1
     9 0000219D [F706000000000000]  <1>
    10 000021A5 48BE-               <1>  mov rsi, %2
    10 000021A7 [2607000000000000]  <1>
    11 000021AF 4883EC08            <1>  sub rsp, 8
    12 000021B3 E8(00000000)        <1>  call printf
    13 000021B8 4883C408            <1>  add rsp, 8
  2132                                          mPrint msgRazonGanador, msgOficialesGanan
     9 000021BC 48BF-               <1>  mov rdi, %1
     9 000021BE [3007000000000000]  <1>
    10 000021C6 48BE-               <1>  mov rsi, %2
    10 000021C8 [E008000000000000]  <1>
    11 000021D0 4883EC08            <1>  sub rsp, 8
    12 000021D4 E8(00000000)        <1>  call printf
    13 000021D9 4883C408            <1>  add rsp, 8
  2133 000021DD EB00                            jmp mostrarEstadisticas
  2134                                  
  2135                                  
  2136                                  mostrarEstadisticas:
  2137                                      mPuts msgEstadisticas
     2 000021DF 48BF-               <1>  mov rdi, %1
     2 000021E1 [6D05000000000000]  <1>
     3 000021E9 4883EC08            <1>  sub rsp, 8
     4 000021ED E8(00000000)        <1>  call puts
     5 000021F2 4883C408            <1>  add rsp, 8
  2138                                  
  2139                                      mPrint msgCantTotalCapturas, qword[cantSoldCapturados]
     9 000021F6 48BF-               <1>  mov rdi, %1
     9 000021F8 [8E05000000000000]  <1>
    10 00002200 488B3425[580B0000]  <1>  mov rsi, %2
    11 00002208 4883EC08            <1>  sub rsp, 8
    12 0000220C E8(00000000)        <1>  call printf
    13 00002211 4883C408            <1>  add rsp, 8
  2140                                  
  2141                                      ; Estadísticas del oficial 1
  2142                                      mPuts msgOficial1
     2 00002215 48BF-               <1>  mov rdi, %1
     2 00002217 [AF05000000000000]  <1>
     3 0000221F 4883EC08            <1>  sub rsp, 8
     4 00002223 E8(00000000)        <1>  call puts
     5 00002228 4883C408            <1>  add rsp, 8
  2143                                      mPrint msgCantMovimientos, qword[movimientosOfic1]
     9 0000222C 48BF-               <1>  mov rdi, %1
     9 0000222E [C705000000000000]  <1>
    10 00002236 488B3425[B80A0000]  <1>  mov rsi, %2
    11 0000223E 4883EC08            <1>  sub rsp, 8
    12 00002242 E8(00000000)        <1>  call printf
    13 00002247 4883C408            <1>  add rsp, 8
  2144                                      mPrint msgCantAdelante, qword[movOfic1Adelante]
     9 0000224B 48BF-               <1>  mov rdi, %1
     9 0000224D [E005000000000000]  <1>
    10 00002255 488B3425[C80A0000]  <1>  mov rsi, %2
    11 0000225D 4883EC08            <1>  sub rsp, 8
    12 00002261 E8(00000000)        <1>  call printf
    13 00002266 4883C408            <1>  add rsp, 8
  2145                                      mPrint msgCantDerecha, qword[movOfic1Derecha]
     9 0000226A 48BF-               <1>  mov rdi, %1
     9 0000226C [F605000000000000]  <1>
    10 00002274 488B3425[D00A0000]  <1>  mov rsi, %2
    11 0000227C 4883EC08            <1>  sub rsp, 8
    12 00002280 E8(00000000)        <1>  call printf
    13 00002285 4883C408            <1>  add rsp, 8
  2146                                      mPrint msgCantIzquierda, qword[movOfic1Izquierda]
     9 00002289 48BF-               <1>  mov rdi, %1
     9 0000228B [0E06000000000000]  <1>
    10 00002293 488B3425[D80A0000]  <1>  mov rsi, %2
    11 0000229B 4883EC08            <1>  sub rsp, 8
    12 0000229F E8(00000000)        <1>  call printf
    13 000022A4 4883C408            <1>  add rsp, 8
  2147                                      mPrint msgCantAtras, qword[movOfic1Atras]
     9 000022A8 48BF-               <1>  mov rdi, %1
     9 000022AA [2806000000000000]  <1>
    10 000022B2 488B3425[E00A0000]  <1>  mov rsi, %2
    11 000022BA 4883EC08            <1>  sub rsp, 8
    12 000022BE E8(00000000)        <1>  call printf
    13 000022C3 4883C408            <1>  add rsp, 8
  2148                                      mPrint msgCantDiagonal, qword[movOfic1Diagonal]
     9 000022C7 48BF-               <1>  mov rdi, %1
     9 000022C9 [3C06000000000000]  <1>
    10 000022D1 488B3425[E80A0000]  <1>  mov rsi, %2
    11 000022D9 4883EC08            <1>  sub rsp, 8
    12 000022DD E8(00000000)        <1>  call printf
    13 000022E2 4883C408            <1>  add rsp, 8
  2149                                      mPrint msgCantDiagArribaDer, qword[movOfic1DiagArribaDer]
     9 000022E6 48BF-               <1>  mov rdi, %1
     9 000022E8 [4F06000000000000]  <1>
    10 000022F0 488B3425[F00A0000]  <1>  mov rsi, %2
    11 000022F8 4883EC08            <1>  sub rsp, 8
    12 000022FC E8(00000000)        <1>  call printf
    13 00002301 4883C408            <1>  add rsp, 8
  2150                                      mPrint msgCantDiagArribaIzq, qword[movOfic1DiagArribaIzq]
     9 00002305 48BF-               <1>  mov rdi, %1
     9 00002307 [6906000000000000]  <1>
    10 0000230F 488B3425[F80A0000]  <1>  mov rsi, %2
    11 00002317 4883EC08            <1>  sub rsp, 8
    12 0000231B E8(00000000)        <1>  call printf
    13 00002320 4883C408            <1>  add rsp, 8
  2151                                      mPrint msgCantDiagAbajoDer, qword[movOfic1DiagAbajoDer]
     9 00002324 48BF-               <1>  mov rdi, %1
     9 00002326 [8506000000000000]  <1>
    10 0000232E 488B3425[000B0000]  <1>  mov rsi, %2
    11 00002336 4883EC08            <1>  sub rsp, 8
    12 0000233A E8(00000000)        <1>  call printf
    13 0000233F 4883C408            <1>  add rsp, 8
  2152                                      mPrint msgCantDiagAbajoIzq, qword[movOfic1DiagAbajoIzq]
     9 00002343 48BF-               <1>  mov rdi, %1
     9 00002345 [9D06000000000000]  <1>
    10 0000234D 488B3425[080B0000]  <1>  mov rsi, %2
    11 00002355 4883EC08            <1>  sub rsp, 8
    12 00002359 E8(00000000)        <1>  call printf
    13 0000235E 4883C408            <1>  add rsp, 8
  2153                                      mPrint msgCantSoldadosCapt, qword[cantCapturasOfic1]
     9 00002362 48BF-               <1>  mov rdi, %1
     9 00002364 [B706000000000000]  <1>
    10 0000236C 488B3425[880B0000]  <1>  mov rsi, %2
    11 00002374 4883EC08            <1>  sub rsp, 8
    12 00002378 E8(00000000)        <1>  call printf
    13 0000237D 4883C408            <1>  add rsp, 8
  2154                                  
  2155                                      ; Estadísticas del oficial 2
  2156                                      mPuts msgOficial2
     2 00002381 48BF-               <1>  mov rdi, %1
     2 00002383 [BB05000000000000]  <1>
     3 0000238B 4883EC08            <1>  sub rsp, 8
     4 0000238F E8(00000000)        <1>  call puts
     5 00002394 4883C408            <1>  add rsp, 8
  2157                                      mPrint msgCantMovimientos, qword[movimientosOfic2]
     9 00002398 48BF-               <1>  mov rdi, %1
     9 0000239A [C705000000000000]  <1>
    10 000023A2 488B3425[C00A0000]  <1>  mov rsi, %2
    11 000023AA 4883EC08            <1>  sub rsp, 8
    12 000023AE E8(00000000)        <1>  call printf
    13 000023B3 4883C408            <1>  add rsp, 8
  2158                                      mPrint msgCantAdelante, qword[movOfic2Adelante]
     9 000023B7 48BF-               <1>  mov rdi, %1
     9 000023B9 [E005000000000000]  <1>
    10 000023C1 488B3425[100B0000]  <1>  mov rsi, %2
    11 000023C9 4883EC08            <1>  sub rsp, 8
    12 000023CD E8(00000000)        <1>  call printf
    13 000023D2 4883C408            <1>  add rsp, 8
  2159                                      mPrint msgCantDerecha, qword[movOfic2Derecha]
     9 000023D6 48BF-               <1>  mov rdi, %1
     9 000023D8 [F605000000000000]  <1>
    10 000023E0 488B3425[180B0000]  <1>  mov rsi, %2
    11 000023E8 4883EC08            <1>  sub rsp, 8
    12 000023EC E8(00000000)        <1>  call printf
    13 000023F1 4883C408            <1>  add rsp, 8
  2160                                      mPrint msgCantIzquierda, qword[movOfic2Izquierda]
     9 000023F5 48BF-               <1>  mov rdi, %1
     9 000023F7 [0E06000000000000]  <1>
    10 000023FF 488B3425[200B0000]  <1>  mov rsi, %2
    11 00002407 4883EC08            <1>  sub rsp, 8
    12 0000240B E8(00000000)        <1>  call printf
    13 00002410 4883C408            <1>  add rsp, 8
  2161                                      mPrint msgCantAtras, qword[movOfic2Atras]
     9 00002414 48BF-               <1>  mov rdi, %1
     9 00002416 [2806000000000000]  <1>
    10 0000241E 488B3425[280B0000]  <1>  mov rsi, %2
    11 00002426 4883EC08            <1>  sub rsp, 8
    12 0000242A E8(00000000)        <1>  call printf
    13 0000242F 4883C408            <1>  add rsp, 8
  2162                                      mPrint msgCantDiagonal, qword[movOfic2Diagonal]
     9 00002433 48BF-               <1>  mov rdi, %1
     9 00002435 [3C06000000000000]  <1>
    10 0000243D 488B3425[300B0000]  <1>  mov rsi, %2
    11 00002445 4883EC08            <1>  sub rsp, 8
    12 00002449 E8(00000000)        <1>  call printf
    13 0000244E 4883C408            <1>  add rsp, 8
  2163                                      mPrint msgCantDiagArribaDer, qword[movOfic2DiagArribaDer]
     9 00002452 48BF-               <1>  mov rdi, %1
     9 00002454 [4F06000000000000]  <1>
    10 0000245C 488B3425[380B0000]  <1>  mov rsi, %2
    11 00002464 4883EC08            <1>  sub rsp, 8
    12 00002468 E8(00000000)        <1>  call printf
    13 0000246D 4883C408            <1>  add rsp, 8
  2164                                      mPrint msgCantDiagArribaIzq, qword[movOfic2DiagArribaIzq]
     9 00002471 48BF-               <1>  mov rdi, %1
     9 00002473 [6906000000000000]  <1>
    10 0000247B 488B3425[400B0000]  <1>  mov rsi, %2
    11 00002483 4883EC08            <1>  sub rsp, 8
    12 00002487 E8(00000000)        <1>  call printf
    13 0000248C 4883C408            <1>  add rsp, 8
  2165                                      mPrint msgCantDiagAbajoDer, qword[movOfic2DiagAbajoDer]
     9 00002490 48BF-               <1>  mov rdi, %1
     9 00002492 [8506000000000000]  <1>
    10 0000249A 488B3425[480B0000]  <1>  mov rsi, %2
    11 000024A2 4883EC08            <1>  sub rsp, 8
    12 000024A6 E8(00000000)        <1>  call printf
    13 000024AB 4883C408            <1>  add rsp, 8
  2166                                      mPrint msgCantDiagAbajoIzq, qword[movOfic2DiagAbajoIzq]
     9 000024AF 48BF-               <1>  mov rdi, %1
     9 000024B1 [9D06000000000000]  <1>
    10 000024B9 488B3425[500B0000]  <1>  mov rsi, %2
    11 000024C1 4883EC08            <1>  sub rsp, 8
    12 000024C5 E8(00000000)        <1>  call printf
    13 000024CA 4883C408            <1>  add rsp, 8
  2167                                      mPrint msgCantSoldadosCapt, qword[cantCapturasOfic2]
     9 000024CE 48BF-               <1>  mov rdi, %1
     9 000024D0 [B706000000000000]  <1>
    10 000024D8 488B3425[900B0000]  <1>  mov rsi, %2
    11 000024E0 4883EC08            <1>  sub rsp, 8
    12 000024E4 E8(00000000)        <1>  call printf
    13 000024E9 4883C408            <1>  add rsp, 8
  2168                                  
  2169 000024ED EB00                        jmp salirSinGuardar
  2170                                  
  2171                                  ; --------------------------------------------------------------------------------------------
  2172                                  ; RUTINAS PARA SALIR DEL JUEGO (guardando o no la partida)
  2173                                  ; --------------------------------------------------------------------------------------------
  2174                                  
  2175                                  salirSinGuardar:
  2176 000024EF B800000000                  mov rax, 0
  2177 000024F4 C3                          ret
  2178                                  
  2179                                  salirDelJuego:
  2180                                      mCommand cmdLimpiarPantalla
    24 000024F5 48BF-               <1>  mov rdi, %1
    24 000024F7 [9E0B000000000000]  <1>
    25 000024FF 4883EC08            <1>  sub rsp, 8
    26 00002503 E8(00000000)        <1>  call system
    27 00002508 4883C408            <1>  add rsp, 8
  2181                                  
  2182                                      mPuts msgSalidaPartida
     2 0000250C 48BF-               <1>  mov rdi, %1
     2 0000250E [4107000000000000]  <1>
     3 00002516 4883EC08            <1>  sub rsp, 8
     4 0000251A E8(00000000)        <1>  call puts
     5 0000251F 4883C408            <1>  add rsp, 8
  2183                                      mPuts msgAclaracionSalida
     2 00002523 48BF-               <1>  mov rdi, %1
     2 00002525 [7E07000000000000]  <1>
     3 0000252D 4883EC08            <1>  sub rsp, 8
     4 00002531 E8(00000000)        <1>  call puts
     5 00002536 4883C408            <1>  add rsp, 8
  2184                                  
  2185                                      recibirOpcionGuardado:
  2186                                          mGets guardadoPartida
    17 0000253A 48BF-               <1>  mov rdi, %1
    17 0000253C [1508000000000000]  <1>
    18 00002544 4883EC08            <1>  sub rsp, 8
    19 00002548 E8(00000000)        <1>  call gets
    20 0000254D 4883C408            <1>  add rsp, 8
  2187                                  
  2188 00002551 803C25[16080000]00          cmp byte[guardadoPartida+1], 0
  2189 00002559 7514                        jne guardadoInvalido
  2190                                  
  2191 0000255B 803C25[15080000]73          cmp byte[guardadoPartida], 's'
  2192 00002563 7455                        je guardarPartida
  2193                                  
  2194 00002565 803C25[15080000]6E          cmp byte[guardadoPartida], 'n'
  2195 0000256D 7419                        je removerArchivo
  2196                                  
  2197                                      guardadoInvalido:
  2198                                          mPuts msgOpcionInvalida
     2 0000256F 48BF-               <1>  mov rdi, %1
     2 00002571 [1702000000000000]  <1>
     3 00002579 4883EC08            <1>  sub rsp, 8
     4 0000257D E8(00000000)        <1>  call puts
     5 00002582 4883C408            <1>  add rsp, 8
  2199 00002586 EBB2                            jmp recibirOpcionGuardado
  2200                                  
  2201                                      removerArchivo:
  2202 00002588 803C25[17080000]73              cmp byte[yaHabiaGuardado], 's' ; Si ya había guardado la partida, la borramos
  2203 00002590 0F8559FFFFFF                    jne salirSinGuardar
  2204                                          
  2205                                          mCommand cmdBorrarArchivoPartida
    24 00002596 48BF-               <1>  mov rdi, %1
    24 00002598 [BE0B000000000000]  <1>
    25 000025A0 4883EC08            <1>  sub rsp, 8
    26 000025A4 E8(00000000)        <1>  call system
    27 000025A9 4883C408            <1>  add rsp, 8
  2206 000025AD C60425[17080000]6E              mov byte[yaHabiaGuardado], 'n' ; Para la próxima vez que se quiera salir, no se borra nada
  2207 000025B5 E935FFFFFF                      jmp salirSinGuardar
  2208                                  
  2209                                  
  2210                                  guardarPartida:
  2211 000025BA C60425[17080000]73          mov byte[yaHabiaGuardado], 's'
  2212                                      mOpenFile nombreArchivo, modoEscritura
   112 000025C2 48BF-               <1>  mov rdi, %1
   112 000025C4 [020C000000000000]  <1>
   113 000025CC 48BE-               <1>  mov rsi, %2
   113 000025CE [FC0B000000000000]  <1>
   114 000025D6 4883EC08            <1>  sub rsp, 8
   115 000025DA E8(00000000)        <1>  call fopen
   116 000025DF 4883C408            <1>  add rsp, 8
   117                              <1> 
   118 000025E3 4883F800            <1>  cmp rax, 0
   119 000025E7 48890425[E4000000]  <1>  mov qword[idArchGuardado], rax
  2213 000025EF E82D000000                  call agregarDatosPartida
  2214                                      mCloseFile idArchGuardado
   123 000025F4 488B3C25[E4000000]  <1>  mov rdi, [%1]
   124 000025FC 4883EC08            <1>  sub rsp, 8
   125 00002600 E8(00000000)        <1>  call fclose
   126 00002605 4883C408            <1>  add rsp, 8
  2215                                  
  2216                                      mPuts msgPartidaGuardada
     2 00002609 48BF-               <1>  mov rdi, %1
     2 0000260B [1B08000000000000]  <1>
     3 00002613 4883EC08            <1>  sub rsp, 8
     4 00002617 E8(00000000)        <1>  call puts
     5 0000261C 4883C408            <1>  add rsp, 8
  2217 00002620 C3                          ret    
  2218                                  
  2219                                  agregarDatosPartida:
  2220                                      mWriteLine tableroEnJuego, 116, 1
   140 00002621 48BF-               <1>  mov rdi, %1
   140 00002623 [1000000000000000]  <1>
   141 0000262B BE74000000          <1>  mov rsi, %2
   142 00002630 BA01000000          <1>  mov rdx, %3
   143 00002635 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   144 0000263D 4883EC08            <1>  sub rsp, 8
   145 00002641 E8(00000000)        <1>  call fwrite
   146 00002646 4883C408            <1>  add rsp, 8
  2221                                  
  2222                                      mWriteLine yaHabiaGuardado, 1, 1 ; Guardamos si ya había guardado la partida
   140 0000264A 48BF-               <1>  mov rdi, %1
   140 0000264C [1708000000000000]  <1>
   141 00002654 BE01000000          <1>  mov rsi, %2
   142 00002659 BA01000000          <1>  mov rdx, %3
   143 0000265E 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   144 00002666 4883EC08            <1>  sub rsp, 8
   145 0000266A E8(00000000)        <1>  call fwrite
   146 0000266F 4883C408            <1>  add rsp, 8
  2223                                  
  2224                                      mWriteLine turnoDe, 1, 1 ; Guardamos el turno actual
   140 00002673 48BF-               <1>  mov rdi, %1
   140 00002675 [1908000000000000]  <1>
   141 0000267D BE01000000          <1>  mov rsi, %2
   142 00002682 BA01000000          <1>  mov rdx, %3
   143 00002687 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   144 0000268F 4883EC08            <1>  sub rsp, 8
   145 00002693 E8(00000000)        <1>  call fwrite
   146 00002698 4883C408            <1>  add rsp, 8
  2225                                  
  2226                                      mWriteLine movimientosOfic1, 8, 1
   140 0000269C 48BF-               <1>  mov rdi, %1
   140 0000269E [B80A000000000000]  <1>
   141 000026A6 BE08000000          <1>  mov rsi, %2
   142 000026AB BA01000000          <1>  mov rdx, %3
   143 000026B0 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   144 000026B8 4883EC08            <1>  sub rsp, 8
   145 000026BC E8(00000000)        <1>  call fwrite
   146 000026C1 4883C408            <1>  add rsp, 8
  2227                                      mWriteLine movimientosOfic2, 8, 1
   140 000026C5 48BF-               <1>  mov rdi, %1
   140 000026C7 [C00A000000000000]  <1>
   141 000026CF BE08000000          <1>  mov rsi, %2
   142 000026D4 BA01000000          <1>  mov rdx, %3
   143 000026D9 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   144 000026E1 4883EC08            <1>  sub rsp, 8
   145 000026E5 E8(00000000)        <1>  call fwrite
   146 000026EA 4883C408            <1>  add rsp, 8
  2228                                  
  2229                                      mWriteLine movOfic1Adelante, 8, 1
   140 000026EE 48BF-               <1>  mov rdi, %1
   140 000026F0 [C80A000000000000]  <1>
   141 000026F8 BE08000000          <1>  mov rsi, %2
   142 000026FD BA01000000          <1>  mov rdx, %3
   143 00002702 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   144 0000270A 4883EC08            <1>  sub rsp, 8
   145 0000270E E8(00000000)        <1>  call fwrite
   146 00002713 4883C408            <1>  add rsp, 8
  2230                                      mWriteLine movOfic1Derecha, 8, 1
   140 00002717 48BF-               <1>  mov rdi, %1
   140 00002719 [D00A000000000000]  <1>
   141 00002721 BE08000000          <1>  mov rsi, %2
   142 00002726 BA01000000          <1>  mov rdx, %3
   143 0000272B 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   144 00002733 4883EC08            <1>  sub rsp, 8
   145 00002737 E8(00000000)        <1>  call fwrite
   146 0000273C 4883C408            <1>  add rsp, 8
  2231                                      mWriteLine movOfic1Izquierda, 8, 1
   140 00002740 48BF-               <1>  mov rdi, %1
   140 00002742 [D80A000000000000]  <1>
   141 0000274A BE08000000          <1>  mov rsi, %2
   142 0000274F BA01000000          <1>  mov rdx, %3
   143 00002754 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   144 0000275C 4883EC08            <1>  sub rsp, 8
   145 00002760 E8(00000000)        <1>  call fwrite
   146 00002765 4883C408            <1>  add rsp, 8
  2232                                      mWriteLine movOfic1Atras, 8, 1
   140 00002769 48BF-               <1>  mov rdi, %1
   140 0000276B [E00A000000000000]  <1>
   141 00002773 BE08000000          <1>  mov rsi, %2
   142 00002778 BA01000000          <1>  mov rdx, %3
   143 0000277D 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   144 00002785 4883EC08            <1>  sub rsp, 8
   145 00002789 E8(00000000)        <1>  call fwrite
   146 0000278E 4883C408            <1>  add rsp, 8
  2233                                      mWriteLine movOfic1Diagonal, 8, 1
   140 00002792 48BF-               <1>  mov rdi, %1
   140 00002794 [E80A000000000000]  <1>
   141 0000279C BE08000000          <1>  mov rsi, %2
   142 000027A1 BA01000000          <1>  mov rdx, %3
   143 000027A6 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   144 000027AE 4883EC08            <1>  sub rsp, 8
   145 000027B2 E8(00000000)        <1>  call fwrite
   146 000027B7 4883C408            <1>  add rsp, 8
  2234                                      mWriteLine movOfic1DiagArribaDer, 8, 1
   140 000027BB 48BF-               <1>  mov rdi, %1
   140 000027BD [F00A000000000000]  <1>
   141 000027C5 BE08000000          <1>  mov rsi, %2
   142 000027CA BA01000000          <1>  mov rdx, %3
   143 000027CF 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   144 000027D7 4883EC08            <1>  sub rsp, 8
   145 000027DB E8(00000000)        <1>  call fwrite
   146 000027E0 4883C408            <1>  add rsp, 8
  2235                                      mWriteLine movOfic1DiagArribaIzq, 8, 1
   140 000027E4 48BF-               <1>  mov rdi, %1
   140 000027E6 [F80A000000000000]  <1>
   141 000027EE BE08000000          <1>  mov rsi, %2
   142 000027F3 BA01000000          <1>  mov rdx, %3
   143 000027F8 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   144 00002800 4883EC08            <1>  sub rsp, 8
   145 00002804 E8(00000000)        <1>  call fwrite
   146 00002809 4883C408            <1>  add rsp, 8
  2236                                      mWriteLine movOfic1DiagAbajoDer, 8, 1
   140 0000280D 48BF-               <1>  mov rdi, %1
   140 0000280F [000B000000000000]  <1>
   141 00002817 BE08000000          <1>  mov rsi, %2
   142 0000281C BA01000000          <1>  mov rdx, %3
   143 00002821 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   144 00002829 4883EC08            <1>  sub rsp, 8
   145 0000282D E8(00000000)        <1>  call fwrite
   146 00002832 4883C408            <1>  add rsp, 8
  2237                                      mWriteLine movOfic1DiagAbajoIzq, 8, 1
   140 00002836 48BF-               <1>  mov rdi, %1
   140 00002838 [080B000000000000]  <1>
   141 00002840 BE08000000          <1>  mov rsi, %2
   142 00002845 BA01000000          <1>  mov rdx, %3
   143 0000284A 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   144 00002852 4883EC08            <1>  sub rsp, 8
   145 00002856 E8(00000000)        <1>  call fwrite
   146 0000285B 4883C408            <1>  add rsp, 8
  2238                                  
  2239                                      mWriteLine movOfic2Adelante, 8, 1
   140 0000285F 48BF-               <1>  mov rdi, %1
   140 00002861 [100B000000000000]  <1>
   141 00002869 BE08000000          <1>  mov rsi, %2
   142 0000286E BA01000000          <1>  mov rdx, %3
   143 00002873 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   144 0000287B 4883EC08            <1>  sub rsp, 8
   145 0000287F E8(00000000)        <1>  call fwrite
   146 00002884 4883C408            <1>  add rsp, 8
  2240                                      mWriteLine movOfic2Derecha, 8, 1
   140 00002888 48BF-               <1>  mov rdi, %1
   140 0000288A [180B000000000000]  <1>
   141 00002892 BE08000000          <1>  mov rsi, %2
   142 00002897 BA01000000          <1>  mov rdx, %3
   143 0000289C 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   144 000028A4 4883EC08            <1>  sub rsp, 8
   145 000028A8 E8(00000000)        <1>  call fwrite
   146 000028AD 4883C408            <1>  add rsp, 8
  2241                                      mWriteLine movOfic2Izquierda, 8, 1
   140 000028B1 48BF-               <1>  mov rdi, %1
   140 000028B3 [200B000000000000]  <1>
   141 000028BB BE08000000          <1>  mov rsi, %2
   142 000028C0 BA01000000          <1>  mov rdx, %3
   143 000028C5 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   144 000028CD 4883EC08            <1>  sub rsp, 8
   145 000028D1 E8(00000000)        <1>  call fwrite
   146 000028D6 4883C408            <1>  add rsp, 8
  2242                                      mWriteLine movOfic2Atras, 8, 1
   140 000028DA 48BF-               <1>  mov rdi, %1
   140 000028DC [280B000000000000]  <1>
   141 000028E4 BE08000000          <1>  mov rsi, %2
   142 000028E9 BA01000000          <1>  mov rdx, %3
   143 000028EE 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   144 000028F6 4883EC08            <1>  sub rsp, 8
   145 000028FA E8(00000000)        <1>  call fwrite
   146 000028FF 4883C408            <1>  add rsp, 8
  2243                                      mWriteLine movOfic2Diagonal, 8, 1
   140 00002903 48BF-               <1>  mov rdi, %1
   140 00002905 [300B000000000000]  <1>
   141 0000290D BE08000000          <1>  mov rsi, %2
   142 00002912 BA01000000          <1>  mov rdx, %3
   143 00002917 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   144 0000291F 4883EC08            <1>  sub rsp, 8
   145 00002923 E8(00000000)        <1>  call fwrite
   146 00002928 4883C408            <1>  add rsp, 8
  2244                                      mWriteLine movOfic2DiagArribaDer, 8, 1
   140 0000292C 48BF-               <1>  mov rdi, %1
   140 0000292E [380B000000000000]  <1>
   141 00002936 BE08000000          <1>  mov rsi, %2
   142 0000293B BA01000000          <1>  mov rdx, %3
   143 00002940 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   144 00002948 4883EC08            <1>  sub rsp, 8
   145 0000294C E8(00000000)        <1>  call fwrite
   146 00002951 4883C408            <1>  add rsp, 8
  2245                                      mWriteLine movOfic2DiagArribaIzq, 8, 1
   140 00002955 48BF-               <1>  mov rdi, %1
   140 00002957 [400B000000000000]  <1>
   141 0000295F BE08000000          <1>  mov rsi, %2
   142 00002964 BA01000000          <1>  mov rdx, %3
   143 00002969 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   144 00002971 4883EC08            <1>  sub rsp, 8
   145 00002975 E8(00000000)        <1>  call fwrite
   146 0000297A 4883C408            <1>  add rsp, 8
  2246                                      mWriteLine movOfic2DiagAbajoDer, 8, 1
   140 0000297E 48BF-               <1>  mov rdi, %1
   140 00002980 [480B000000000000]  <1>
   141 00002988 BE08000000          <1>  mov rsi, %2
   142 0000298D BA01000000          <1>  mov rdx, %3
   143 00002992 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   144 0000299A 4883EC08            <1>  sub rsp, 8
   145 0000299E E8(00000000)        <1>  call fwrite
   146 000029A3 4883C408            <1>  add rsp, 8
  2247                                      mWriteLine movOfic2DiagAbajoIzq, 8, 1
   140 000029A7 48BF-               <1>  mov rdi, %1
   140 000029A9 [500B000000000000]  <1>
   141 000029B1 BE08000000          <1>  mov rsi, %2
   142 000029B6 BA01000000          <1>  mov rdx, %3
   143 000029BB 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   144 000029C3 4883EC08            <1>  sub rsp, 8
   145 000029C7 E8(00000000)        <1>  call fwrite
   146 000029CC 4883C408            <1>  add rsp, 8
  2248                                  
  2249                                      mWriteLine cantSoldCapturados, 8, 1
   140 000029D0 48BF-               <1>  mov rdi, %1
   140 000029D2 [580B000000000000]  <1>
   141 000029DA BE08000000          <1>  mov rsi, %2
   142 000029DF BA01000000          <1>  mov rdx, %3
   143 000029E4 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   144 000029EC 4883EC08            <1>  sub rsp, 8
   145 000029F0 E8(00000000)        <1>  call fwrite
   146 000029F5 4883C408            <1>  add rsp, 8
  2250                                      mWriteLine cantOficInvalidados, 8, 1
   140 000029F9 48BF-               <1>  mov rdi, %1
   140 000029FB [600B000000000000]  <1>
   141 00002A03 BE08000000          <1>  mov rsi, %2
   142 00002A08 BA01000000          <1>  mov rdx, %3
   143 00002A0D 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   144 00002A15 4883EC08            <1>  sub rsp, 8
   145 00002A19 E8(00000000)        <1>  call fwrite
   146 00002A1E 4883C408            <1>  add rsp, 8
  2251                                  
  2252                                      mWriteLine casillaOfic1, 8, 1
   140 00002A22 48BF-               <1>  mov rdi, %1
   140 00002A24 [680B000000000000]  <1>
   141 00002A2C BE08000000          <1>  mov rsi, %2
   142 00002A31 BA01000000          <1>  mov rdx, %3
   143 00002A36 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   144 00002A3E 4883EC08            <1>  sub rsp, 8
   145 00002A42 E8(00000000)        <1>  call fwrite
   146 00002A47 4883C408            <1>  add rsp, 8
  2253                                      mWriteLine casillaOfic1+8, 8, 1
   140 00002A4B 48BF-               <1>  mov rdi, %1
   140 00002A4D [700B000000000000]  <1>
   141 00002A55 BE08000000          <1>  mov rsi, %2
   142 00002A5A BA01000000          <1>  mov rdx, %3
   143 00002A5F 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   144 00002A67 4883EC08            <1>  sub rsp, 8
   145 00002A6B E8(00000000)        <1>  call fwrite
   146 00002A70 4883C408            <1>  add rsp, 8
  2254                                  
  2255                                      mWriteLine casillaOfic2, 8, 1
   140 00002A74 48BF-               <1>  mov rdi, %1
   140 00002A76 [780B000000000000]  <1>
   141 00002A7E BE08000000          <1>  mov rsi, %2
   142 00002A83 BA01000000          <1>  mov rdx, %3
   143 00002A88 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   144 00002A90 4883EC08            <1>  sub rsp, 8
   145 00002A94 E8(00000000)        <1>  call fwrite
   146 00002A99 4883C408            <1>  add rsp, 8
  2256                                      mWriteLine casillaOfic2+8, 8, 1
   140 00002A9D 48BF-               <1>  mov rdi, %1
   140 00002A9F [800B000000000000]  <1>
   141 00002AA7 BE08000000          <1>  mov rsi, %2
   142 00002AAC BA01000000          <1>  mov rdx, %3
   143 00002AB1 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   144 00002AB9 4883EC08            <1>  sub rsp, 8
   145 00002ABD E8(00000000)        <1>  call fwrite
   146 00002AC2 4883C408            <1>  add rsp, 8
  2257                                  
  2258                                      mWriteLine cantCapturasOfic1, 8, 1
   140 00002AC6 48BF-               <1>  mov rdi, %1
   140 00002AC8 [880B000000000000]  <1>
   141 00002AD0 BE08000000          <1>  mov rsi, %2
   142 00002AD5 BA01000000          <1>  mov rdx, %3
   143 00002ADA 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   144 00002AE2 4883EC08            <1>  sub rsp, 8
   145 00002AE6 E8(00000000)        <1>  call fwrite
   146 00002AEB 4883C408            <1>  add rsp, 8
  2259                                      mWriteLine cantCapturasOfic2, 8, 1
   140 00002AEF 48BF-               <1>  mov rdi, %1
   140 00002AF1 [900B000000000000]  <1>
   141 00002AF9 BE08000000          <1>  mov rsi, %2
   142 00002AFE BA01000000          <1>  mov rdx, %3
   143 00002B03 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   144 00002B0B 4883EC08            <1>  sub rsp, 8
   145 00002B0F E8(00000000)        <1>  call fwrite
   146 00002B14 4883C408            <1>  add rsp, 8
  2260                                  
  2261 00002B18 C3                          ret
  2262                                  
  2263                                  ; --------------------------------------------------------------------------------------------
  2264                                  ; RUTINA PARA OBTENER LOS DATOS DE UNA PARTIDA GUARDADA
  2265                                  ; --------------------------------------------------------------------------------------------
  2266                                  
  2267                                  abrirPartidaGuardada:
  2268                                      ; Recreamos el tablero guardado
  2269                                      mReadLine tableroEnJuego, 116, 1
   130 00002B19 48BF-               <1>  mov rdi, %1
   130 00002B1B [1000000000000000]  <1>
   131 00002B23 BE74000000          <1>  mov rsi, %2
   132 00002B28 BA01000000          <1>  mov rdx, %3
   133 00002B2D 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   134 00002B35 4883EC08            <1>  sub rsp, 8
   135 00002B39 E8(00000000)        <1>  call fread
   136 00002B3E 4883C408            <1>  add rsp, 8
  2270                                  
  2271                                      mReadLine yaHabiaGuardado, 1, 1
   130 00002B42 48BF-               <1>  mov rdi, %1
   130 00002B44 [1708000000000000]  <1>
   131 00002B4C BE01000000          <1>  mov rsi, %2
   132 00002B51 BA01000000          <1>  mov rdx, %3
   133 00002B56 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   134 00002B5E 4883EC08            <1>  sub rsp, 8
   135 00002B62 E8(00000000)        <1>  call fread
   136 00002B67 4883C408            <1>  add rsp, 8
  2272                                      mReadLine turnoDe, 1, 1
   130 00002B6B 48BF-               <1>  mov rdi, %1
   130 00002B6D [1908000000000000]  <1>
   131 00002B75 BE01000000          <1>  mov rsi, %2
   132 00002B7A BA01000000          <1>  mov rdx, %3
   133 00002B7F 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   134 00002B87 4883EC08            <1>  sub rsp, 8
   135 00002B8B E8(00000000)        <1>  call fread
   136 00002B90 4883C408            <1>  add rsp, 8
  2273                                  
  2274                                      mReadLine movimientosOfic1, 8, 1
   130 00002B94 48BF-               <1>  mov rdi, %1
   130 00002B96 [B80A000000000000]  <1>
   131 00002B9E BE08000000          <1>  mov rsi, %2
   132 00002BA3 BA01000000          <1>  mov rdx, %3
   133 00002BA8 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   134 00002BB0 4883EC08            <1>  sub rsp, 8
   135 00002BB4 E8(00000000)        <1>  call fread
   136 00002BB9 4883C408            <1>  add rsp, 8
  2275                                      mReadLine movimientosOfic2, 8, 1
   130 00002BBD 48BF-               <1>  mov rdi, %1
   130 00002BBF [C00A000000000000]  <1>
   131 00002BC7 BE08000000          <1>  mov rsi, %2
   132 00002BCC BA01000000          <1>  mov rdx, %3
   133 00002BD1 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   134 00002BD9 4883EC08            <1>  sub rsp, 8
   135 00002BDD E8(00000000)        <1>  call fread
   136 00002BE2 4883C408            <1>  add rsp, 8
  2276                                  
  2277                                      mReadLine movOfic1Adelante, 8, 1
   130 00002BE6 48BF-               <1>  mov rdi, %1
   130 00002BE8 [C80A000000000000]  <1>
   131 00002BF0 BE08000000          <1>  mov rsi, %2
   132 00002BF5 BA01000000          <1>  mov rdx, %3
   133 00002BFA 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   134 00002C02 4883EC08            <1>  sub rsp, 8
   135 00002C06 E8(00000000)        <1>  call fread
   136 00002C0B 4883C408            <1>  add rsp, 8
  2278                                      mReadLine movOfic1Derecha, 8, 1
   130 00002C0F 48BF-               <1>  mov rdi, %1
   130 00002C11 [D00A000000000000]  <1>
   131 00002C19 BE08000000          <1>  mov rsi, %2
   132 00002C1E BA01000000          <1>  mov rdx, %3
   133 00002C23 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   134 00002C2B 4883EC08            <1>  sub rsp, 8
   135 00002C2F E8(00000000)        <1>  call fread
   136 00002C34 4883C408            <1>  add rsp, 8
  2279                                      mReadLine movOfic1Izquierda, 8, 1
   130 00002C38 48BF-               <1>  mov rdi, %1
   130 00002C3A [D80A000000000000]  <1>
   131 00002C42 BE08000000          <1>  mov rsi, %2
   132 00002C47 BA01000000          <1>  mov rdx, %3
   133 00002C4C 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   134 00002C54 4883EC08            <1>  sub rsp, 8
   135 00002C58 E8(00000000)        <1>  call fread
   136 00002C5D 4883C408            <1>  add rsp, 8
  2280                                      mReadLine movOfic1Atras, 8, 1
   130 00002C61 48BF-               <1>  mov rdi, %1
   130 00002C63 [E00A000000000000]  <1>
   131 00002C6B BE08000000          <1>  mov rsi, %2
   132 00002C70 BA01000000          <1>  mov rdx, %3
   133 00002C75 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   134 00002C7D 4883EC08            <1>  sub rsp, 8
   135 00002C81 E8(00000000)        <1>  call fread
   136 00002C86 4883C408            <1>  add rsp, 8
  2281                                      mReadLine movOfic1Diagonal, 8, 1
   130 00002C8A 48BF-               <1>  mov rdi, %1
   130 00002C8C [E80A000000000000]  <1>
   131 00002C94 BE08000000          <1>  mov rsi, %2
   132 00002C99 BA01000000          <1>  mov rdx, %3
   133 00002C9E 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   134 00002CA6 4883EC08            <1>  sub rsp, 8
   135 00002CAA E8(00000000)        <1>  call fread
   136 00002CAF 4883C408            <1>  add rsp, 8
  2282                                      mReadLine movOfic1DiagArribaDer, 8, 1
   130 00002CB3 48BF-               <1>  mov rdi, %1
   130 00002CB5 [F00A000000000000]  <1>
   131 00002CBD BE08000000          <1>  mov rsi, %2
   132 00002CC2 BA01000000          <1>  mov rdx, %3
   133 00002CC7 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   134 00002CCF 4883EC08            <1>  sub rsp, 8
   135 00002CD3 E8(00000000)        <1>  call fread
   136 00002CD8 4883C408            <1>  add rsp, 8
  2283                                      mReadLine movOfic1DiagArribaIzq, 8, 1
   130 00002CDC 48BF-               <1>  mov rdi, %1
   130 00002CDE [F80A000000000000]  <1>
   131 00002CE6 BE08000000          <1>  mov rsi, %2
   132 00002CEB BA01000000          <1>  mov rdx, %3
   133 00002CF0 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   134 00002CF8 4883EC08            <1>  sub rsp, 8
   135 00002CFC E8(00000000)        <1>  call fread
   136 00002D01 4883C408            <1>  add rsp, 8
  2284                                      mReadLine movOfic1DiagAbajoDer, 8, 1
   130 00002D05 48BF-               <1>  mov rdi, %1
   130 00002D07 [000B000000000000]  <1>
   131 00002D0F BE08000000          <1>  mov rsi, %2
   132 00002D14 BA01000000          <1>  mov rdx, %3
   133 00002D19 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   134 00002D21 4883EC08            <1>  sub rsp, 8
   135 00002D25 E8(00000000)        <1>  call fread
   136 00002D2A 4883C408            <1>  add rsp, 8
  2285                                      mReadLine movOfic1DiagAbajoIzq, 8, 1
   130 00002D2E 48BF-               <1>  mov rdi, %1
   130 00002D30 [080B000000000000]  <1>
   131 00002D38 BE08000000          <1>  mov rsi, %2
   132 00002D3D BA01000000          <1>  mov rdx, %3
   133 00002D42 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   134 00002D4A 4883EC08            <1>  sub rsp, 8
   135 00002D4E E8(00000000)        <1>  call fread
   136 00002D53 4883C408            <1>  add rsp, 8
  2286                                  
  2287                                      mReadLine movOfic2Adelante, 8, 1
   130 00002D57 48BF-               <1>  mov rdi, %1
   130 00002D59 [100B000000000000]  <1>
   131 00002D61 BE08000000          <1>  mov rsi, %2
   132 00002D66 BA01000000          <1>  mov rdx, %3
   133 00002D6B 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   134 00002D73 4883EC08            <1>  sub rsp, 8
   135 00002D77 E8(00000000)        <1>  call fread
   136 00002D7C 4883C408            <1>  add rsp, 8
  2288                                      mReadLine movOfic2Derecha, 8, 1
   130 00002D80 48BF-               <1>  mov rdi, %1
   130 00002D82 [180B000000000000]  <1>
   131 00002D8A BE08000000          <1>  mov rsi, %2
   132 00002D8F BA01000000          <1>  mov rdx, %3
   133 00002D94 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   134 00002D9C 4883EC08            <1>  sub rsp, 8
   135 00002DA0 E8(00000000)        <1>  call fread
   136 00002DA5 4883C408            <1>  add rsp, 8
  2289                                      mReadLine movOfic2Izquierda, 8, 1
   130 00002DA9 48BF-               <1>  mov rdi, %1
   130 00002DAB [200B000000000000]  <1>
   131 00002DB3 BE08000000          <1>  mov rsi, %2
   132 00002DB8 BA01000000          <1>  mov rdx, %3
   133 00002DBD 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   134 00002DC5 4883EC08            <1>  sub rsp, 8
   135 00002DC9 E8(00000000)        <1>  call fread
   136 00002DCE 4883C408            <1>  add rsp, 8
  2290                                      mReadLine movOfic2Atras, 8, 1
   130 00002DD2 48BF-               <1>  mov rdi, %1
   130 00002DD4 [280B000000000000]  <1>
   131 00002DDC BE08000000          <1>  mov rsi, %2
   132 00002DE1 BA01000000          <1>  mov rdx, %3
   133 00002DE6 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   134 00002DEE 4883EC08            <1>  sub rsp, 8
   135 00002DF2 E8(00000000)        <1>  call fread
   136 00002DF7 4883C408            <1>  add rsp, 8
  2291                                      mReadLine movOfic2Diagonal, 8, 1
   130 00002DFB 48BF-               <1>  mov rdi, %1
   130 00002DFD [300B000000000000]  <1>
   131 00002E05 BE08000000          <1>  mov rsi, %2
   132 00002E0A BA01000000          <1>  mov rdx, %3
   133 00002E0F 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   134 00002E17 4883EC08            <1>  sub rsp, 8
   135 00002E1B E8(00000000)        <1>  call fread
   136 00002E20 4883C408            <1>  add rsp, 8
  2292                                      mReadLine movOfic2DiagArribaDer, 8, 1
   130 00002E24 48BF-               <1>  mov rdi, %1
   130 00002E26 [380B000000000000]  <1>
   131 00002E2E BE08000000          <1>  mov rsi, %2
   132 00002E33 BA01000000          <1>  mov rdx, %3
   133 00002E38 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   134 00002E40 4883EC08            <1>  sub rsp, 8
   135 00002E44 E8(00000000)        <1>  call fread
   136 00002E49 4883C408            <1>  add rsp, 8
  2293                                      mReadLine movOfic2DiagArribaIzq, 8, 1
   130 00002E4D 48BF-               <1>  mov rdi, %1
   130 00002E4F [400B000000000000]  <1>
   131 00002E57 BE08000000          <1>  mov rsi, %2
   132 00002E5C BA01000000          <1>  mov rdx, %3
   133 00002E61 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   134 00002E69 4883EC08            <1>  sub rsp, 8
   135 00002E6D E8(00000000)        <1>  call fread
   136 00002E72 4883C408            <1>  add rsp, 8
  2294                                      mReadLine movOfic2DiagAbajoDer, 8, 1
   130 00002E76 48BF-               <1>  mov rdi, %1
   130 00002E78 [480B000000000000]  <1>
   131 00002E80 BE08000000          <1>  mov rsi, %2
   132 00002E85 BA01000000          <1>  mov rdx, %3
   133 00002E8A 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   134 00002E92 4883EC08            <1>  sub rsp, 8
   135 00002E96 E8(00000000)        <1>  call fread
   136 00002E9B 4883C408            <1>  add rsp, 8
  2295                                      mReadLine movOfic2DiagAbajoIzq, 8, 1
   130 00002E9F 48BF-               <1>  mov rdi, %1
   130 00002EA1 [500B000000000000]  <1>
   131 00002EA9 BE08000000          <1>  mov rsi, %2
   132 00002EAE BA01000000          <1>  mov rdx, %3
   133 00002EB3 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   134 00002EBB 4883EC08            <1>  sub rsp, 8
   135 00002EBF E8(00000000)        <1>  call fread
   136 00002EC4 4883C408            <1>  add rsp, 8
  2296                                  
  2297                                      mReadLine cantSoldCapturados, 8, 1
   130 00002EC8 48BF-               <1>  mov rdi, %1
   130 00002ECA [580B000000000000]  <1>
   131 00002ED2 BE08000000          <1>  mov rsi, %2
   132 00002ED7 BA01000000          <1>  mov rdx, %3
   133 00002EDC 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   134 00002EE4 4883EC08            <1>  sub rsp, 8
   135 00002EE8 E8(00000000)        <1>  call fread
   136 00002EED 4883C408            <1>  add rsp, 8
  2298                                      mReadLine cantOficInvalidados, 8, 1
   130 00002EF1 48BF-               <1>  mov rdi, %1
   130 00002EF3 [600B000000000000]  <1>
   131 00002EFB BE08000000          <1>  mov rsi, %2
   132 00002F00 BA01000000          <1>  mov rdx, %3
   133 00002F05 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   134 00002F0D 4883EC08            <1>  sub rsp, 8
   135 00002F11 E8(00000000)        <1>  call fread
   136 00002F16 4883C408            <1>  add rsp, 8
  2299                                  
  2300                                      mReadLine casillaOfic1, 8, 1
   130 00002F1A 48BF-               <1>  mov rdi, %1
   130 00002F1C [680B000000000000]  <1>
   131 00002F24 BE08000000          <1>  mov rsi, %2
   132 00002F29 BA01000000          <1>  mov rdx, %3
   133 00002F2E 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   134 00002F36 4883EC08            <1>  sub rsp, 8
   135 00002F3A E8(00000000)        <1>  call fread
   136 00002F3F 4883C408            <1>  add rsp, 8
  2301                                      mReadLine casillaOfic1+8, 8, 1
   130 00002F43 48BF-               <1>  mov rdi, %1
   130 00002F45 [700B000000000000]  <1>
   131 00002F4D BE08000000          <1>  mov rsi, %2
   132 00002F52 BA01000000          <1>  mov rdx, %3
   133 00002F57 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   134 00002F5F 4883EC08            <1>  sub rsp, 8
   135 00002F63 E8(00000000)        <1>  call fread
   136 00002F68 4883C408            <1>  add rsp, 8
  2302                                  
  2303                                      mReadLine casillaOfic2, 8, 1
   130 00002F6C 48BF-               <1>  mov rdi, %1
   130 00002F6E [780B000000000000]  <1>
   131 00002F76 BE08000000          <1>  mov rsi, %2
   132 00002F7B BA01000000          <1>  mov rdx, %3
   133 00002F80 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   134 00002F88 4883EC08            <1>  sub rsp, 8
   135 00002F8C E8(00000000)        <1>  call fread
   136 00002F91 4883C408            <1>  add rsp, 8
  2304                                      mReadLine casillaOfic2+8, 8, 1
   130 00002F95 48BF-               <1>  mov rdi, %1
   130 00002F97 [800B000000000000]  <1>
   131 00002F9F BE08000000          <1>  mov rsi, %2
   132 00002FA4 BA01000000          <1>  mov rdx, %3
   133 00002FA9 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   134 00002FB1 4883EC08            <1>  sub rsp, 8
   135 00002FB5 E8(00000000)        <1>  call fread
   136 00002FBA 4883C408            <1>  add rsp, 8
  2305                                  
  2306                                      mReadLine cantCapturasOfic1, 8, 1
   130 00002FBE 48BF-               <1>  mov rdi, %1
   130 00002FC0 [880B000000000000]  <1>
   131 00002FC8 BE08000000          <1>  mov rsi, %2
   132 00002FCD BA01000000          <1>  mov rdx, %3
   133 00002FD2 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   134 00002FDA 4883EC08            <1>  sub rsp, 8
   135 00002FDE E8(00000000)        <1>  call fread
   136 00002FE3 4883C408            <1>  add rsp, 8
  2307                                      mReadLine cantCapturasOfic2, 8, 1
   130 00002FE7 48BF-               <1>  mov rdi, %1
   130 00002FE9 [900B000000000000]  <1>
   131 00002FF1 BE08000000          <1>  mov rsi, %2
   132 00002FF6 BA01000000          <1>  mov rdx, %3
   133 00002FFB 488B0C25[E4000000]  <1>  mov rcx, [idArchGuardado]
   134 00003003 4883EC08            <1>  sub rsp, 8
   135 00003007 E8(00000000)        <1>  call fread
   136 0000300C 4883C408            <1>  add rsp, 8
  2308                                  
  2309 00003010 C3                          ret
