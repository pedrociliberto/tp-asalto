     1                                  %macro mPuts 1 ; Imprime el string %1, hasta encontrar un 0
     2                                      mov rdi, %1
     3                                      sub rsp, 8
     4                                      call puts
     5                                      add rsp, 8
     6                                  %endmacro
     7                                  
     8                                  %macro mPrint 2 ; Imprime el string %2 con formato %1
     9                                      mov rdi, %1
    10                                      mov rsi, %2
    11                                      sub rsp, 8
    12                                      call printf
    13                                      add rsp, 8
    14                                  %endmacro
    15                                  
    16                                  %macro mGets 1 ; Obtiene un string por teclado, guardándolo en %1
    17                                      mov rdi, %1
    18                                      sub rsp, 8
    19                                      call gets
    20                                      add rsp, 8
    21                                  %endmacro
    22                                  
    23                                  %macro mCommand 1 ; Ejecuta el comando %1 de la terminal
    24                                      mov rdi, %1
    25                                      sub rsp, 8
    26                                      call system
    27                                      add rsp, 8
    28                                  %endmacro
    29                                  
    30                                  %macro mMov 3 ; Copia %3 bytes del campo de memoria %2 al campo de memoria %1
    31                                      mov rcx, %3
    32                                      lea rsi, [%2]
    33                                      lea rdi, [%1]
    34                                      rep movsb
    35                                  %endmacro
    36                                  
    37                                  %macro mCmp 3 ; Compara %3 bytes del campo %1 con %2
    38                                      mov rcx, %3
    39                                      lea rsi, %1
    40                                      lea rdi, %2
    41                                      repe cmpsb
    42                                  %endmacro 
    43                                  
    44                                  %macro mErrorJump 2 ; Imprime el mensaje de error %1 y salta a la etiqueta %2
    45                                      mPuts %1
    46                                      jmp %2
    47                                  %endmacro
    48                                  
    49                                  %macro mfGets 2
    50                                      mov rdi, %1
    51                                      mov rsi, %2
    52                                      mov rdx, [stdin]
    53                                      sub rsp, 8
    54                                      call fgets
    55                                      add rsp, 8
    56                                  %endmacro
    57                                  
    58                                  %macro mLeerEntradaEstandar 2
    59                                      mov rax, 0      ; syscall: read
    60                                      mov rdi, 0      ; 0: stdin
    61                                      mov rsi, %1   ; buffer (direccion de guardado de lo leido)
    62                                      mov rdx, %2     ; Cuantos bytes queremos leer
    63                                      syscall
    64                                  
    65                                      mov byte[rsi+rax], 0
    66                                  %endmacro
    67                                  
    68                                  %macro mSscanf 3
    69                                      lea rdi, %1     ; Variable Original string
    70                                      mov rsi, %2     ; Formato
    71                                      mov rdx, %3     ; Variable a guardar el int
    72                                      sub rsp, 8
    73                                      call sscanf
    74                                      add rsp, 8
    75                                  %endmacro
    76                                  
    77                                  %macro mSprintf 3
    78                                      mov rdi, %1     ; Variable donde se guardará el string
    79                                      mov rsi, %2     ; Formato
    80                                      mov rdx, %3     ; Variable a guardar en el string
    81                                      sub rsp, 8
    82                                      call sprintf
    83                                      add rsp, 8
    84                                  %endmacro
    85                                  
    86                                  %macro mCalcDesplaz 3
    87                                      mov rdi, %1
    88                                      mov rsi, %2
    89                                      call calcularDesplazamiento
    90                                      mov %3, rax
    91                                  %endmacro
    92                                  
    93                                  %macro mEstaVacia 1 
    94                                      mov rax, 0
    95                                      mov rdi, %1 ; recibe el desplazamiento
    96                                      call estaVacia
    97                                  %endmacro
    98                                  
    99                                  %macro mHaySoldado 1
   100                                      mov rax, 0
   101                                      mov rdi, %1 ; recibe el desplazamiento
   102                                      call haySoldado
   103                                  %endmacro
   104                                  
   105                                  %macro mPuedeCapturar 2
   106                                      mov rdi, %1 ; diferencia de desplazamiento
   107                                      mov rsi, %2 ; 0 para sumar [rdi] al desplazamiento, 1 para restar
   108                                      call podiaComerPieza
   109                                  %endmacro
   110                                  
   111                                  %macro mOpenFile 2
   112                                      mov rdi, %1 ; nombre del archivo
   113                                      mov rsi, %2 ; modo de apertura
   114                                      sub rsp, 8
   115                                      call fopen
   116                                      add rsp, 8
   117                                      mov qword[idArchGuardado], rax ; Guardamos el ID del archivo
   118                                  %endmacro
   119                                  
   120                                  %macro mCloseFile 1
   121                                      mov rdi, [%1] ; ID del archivo
   122                                      sub rsp, 8
   123                                      call fclose
   124                                      add rsp, 8
   125                                  %endmacro
   126                                  
   127                                  %macro mReadLine 3 
   128                                      mov rdi, %1 ; lugar a dejar lo leido
   129                                      mov rsi, %2 ; cantidad de bytes a leer
   130                                      mov rdx, %3 ; bloques de lectura
   131                                      mov rcx, [idArchGuardado] ; ID del archivo
   132                                      sub rsp, 8
   133                                      call fread
   134                                      add rsp, 8
   135                                  %endmacro
   136                                  
   137                                  %macro mWriteLine 3
   138                                      mov rdi, %1 ; string a escribir
   139                                      mov rsi, %2 ; cantidad de bytes a escribir
   140                                      mov rdx, %3 ; bloques de escritura
   141                                      mov rcx, [idArchGuardado] ; ID del archivo
   142                                      sub rsp, 8
   143                                      call fwrite
   144                                      add rsp, 8
   145                                  %endmacro
   146                                  
   147                                  ; Importación de funciones de la librería C
   148                                  extern puts, printf
   149                                  extern gets
   150                                  extern system, stdin
   151                                  extern sscanf, sprintf
   152                                  extern fopen, fclose, fread, fwrite, fgets
   153                                  
   154                                  section .data
   155                                  
   156                                      ; Tableros y sus posibles estados
   157                                  
   158 00000000 202031323334353637-         tableroOrig         db " "," ","1","2","3","4","5","6","7"," ",10
   158 00000009 200A               
   159 0000000B 2020202D5F5F5F2D20-                             db " "," "," ","-","_","_","_","-"," "," ",10 
   159 00000014 200A               
   160 00000016 3120207C5858587C20-                             db "1"," "," ","|","X","X","X","|"," "," ",10
   160 0000001F 200A               
   161 00000021 322D5F7C5858587C5F-                             db "2","-","_","|","X","X","X","|","_","-",10
   161 0000002A 2D0A               
   162 0000002C 337C58585858585858-                             db "3","|","X","X","X","X","X","X","X","|",10 
   162 00000035 7C0A               
   163 00000037 347C58585858585858-                             db "4","|","X","X","X","X","X","X","X","|",10 
   163 00000040 7C0A               
   164 00000042 357C58582020205858-                             db "5","|","X","X"," "," "," ","X","X","|",10 
   164 0000004B 7C0A               
   165 0000004D 362D2D7C20204F7C2D-                             db "6","-","-","|"," "," ","O","|","-","-",10 
   165 00000056 2D0A               
   166 00000058 3720207C4F20207C20-                             db "7"," "," ","|","O"," "," ","|"," "," ",10 
   166 00000061 200A               
   167 00000063 2020202D2D2D2D2D20-                             db " "," "," ","-","-","-","-","-"," "," ",10,0
   167 0000006C 200A00             
   168                                  
   169                                      ; Mensajes
   170                                  
   171 0000006F C2A14269656E76656E-         msgBienvenida           db "¡Bienvenido al juego El Asalto! ('#' para salir)", 0
   171 00000078 69646F20616C206A75-
   171 00000081 65676F20456C204173-
   171 0000008A 616C746F2120282723-
   171 00000093 272070617261207361-
   171 0000009C 6C69722900         
   172                                  
   173 000000A1 4F706369C3B36E2069-         msgOpcionInvalida       db "Opción inválida. Intente de nuevo.", 0
   173 000000AA 6E76C3A16C6964612E-
   173 000000B3 20496E74656E746520-
   173 000000BC 6465206E7565766F2E-
   173 000000C5 00                 
   174                                      
   175 000000C6 436173696C6C612069-         msgCasillaInvalidaSold  db "Casilla inválida: no hay un soldado en esa casilla. Intente de nuevo.", 0
   175 000000CF 6E76C3A16C6964613A-
   175 000000D8 206E6F206861792075-
   175 000000E1 6E20736F6C6461646F-
   175 000000EA 20656E206573612063-
   175 000000F3 6173696C6C612E2049-
   175 000000FC 6E74656E7465206465-
   175 00000105 206E7565766F2E00   
   176 0000010D 4572726F7220656E20-         msgErrorInputSold       db "Error en el formato de entrada del soldado. Intente de nuevo.", 0
   176 00000116 656C20666F726D6174-
   176 0000011F 6F20646520656E7472-
   176 00000128 6164612064656C2073-
   176 00000131 6F6C6461646F2E2049-
   176 0000013A 6E74656E7465206465-
   176 00000143 206E7565766F2E00   
   177 0000014B 4E6F20736520707565-         msgCasillaInvMovSold    db "No se puede mover el soldado a esa casilla. Intente de nuevo.", 0
   177 00000154 6465206D6F76657220-
   177 0000015D 656C20736F6C646164-
   177 00000166 6F2061206573612063-
   177 0000016F 6173696C6C612E2049-
   177 00000178 6E74656E7465206465-
   177 00000181 206E7565766F2E00   
   178                                  
   179 00000189 436173696C6C612069-         msgCasillaInvalidaOfic  db "Casilla inválida: no hay un oficial en esa casilla. Intente de nuevo.", 0
   179 00000192 6E76C3A16C6964613A-
   179 0000019B 206E6F206861792075-
   179 000001A4 6E206F66696369616C-
   179 000001AD 20656E206573612063-
   179 000001B6 6173696C6C612E2049-
   179 000001BF 6E74656E7465206465-
   179 000001C8 206E7565766F2E00   
   180 000001D0 4572726F7220656E20-         msgErrorInputOfic       db "Error en el formato de entrada del oficial. Intente de nuevo.", 0
   180 000001D9 656C20666F726D6174-
   180 000001E2 6F20646520656E7472-
   180 000001EB 6164612064656C206F-
   180 000001F4 66696369616C2E2049-
   180 000001FD 6E74656E7465206465-
   180 00000206 206E7565766F2E00   
   181 0000020E 4E6F20736520707565-         msgCasillaInvMovOfic    db "No se puede mover el oficial a esa casilla. Intente de nuevo.", 0
   181 00000217 6465206D6F76657220-
   181 00000220 656C206F6669636961-
   181 00000229 6C2061206573612063-
   181 00000232 6173696C6C612E2049-
   181 0000023B 6E74656E7465206465-
   181 00000244 206E7565766F2E00   
   182                                  
   183 0000024C 556E206F6669636961-         msgCapturaSold          db "Un oficial ha capturado a un soldado.", 0
   183 00000255 6C2068612063617074-
   183 0000025E 757261646F20612075-
   183 00000267 6E20736F6C6461646F-
   183 00000270 2E00               
   184 00000272 536520686120726574-         msgOficialRetirado      db "Se ha retirado a un oficial! No ha capturado a un soldado.", 0
   184 0000027B 697261646F20612075-
   184 00000284 6E206F66696369616C-
   184 0000028D 21204E6F2068612063-
   184 00000296 617074757261646F20-
   184 0000029F 6120756E20736F6C64-
   184 000002A8 61646F2E00         
   185                                      
   186 000002AD C2BF517569C3A96E20-         msgQuienInicia          db "¿Quién inicia el juego: oficiales o soldados? (o/s): ", 0
   186 000002B6 696E6963696120656C-
   186 000002BF 206A7565676F3A206F-
   186 000002C8 66696369616C657320-
   186 000002D1 6F20736F6C6461646F-
   186 000002DA 733F20286F2F73293A-
   186 000002E3 2000               
   187                                  
   188 000002E5 4573746164C3AD7374-         msgEstadisticas         db "Estadísticas de los oficiales:", 10, 0
   188 000002EE 69636173206465206C-
   188 000002F7 6F73206F6669636961-
   188 00000300 6C65733A0A00       
   189                                  
   190 00000306 43616E746964616420-         msgCantTotalCapturas    db "Cantidad total de capturas: %d", 10, 10, 0
   190 0000030F 746F74616C20646520-
   190 00000318 63617074757261733A-
   190 00000321 2025640A0A00       
   191                                  
   192 00000327 4F66696369616C2031-         msgOficial1             db "Oficial 1:", 10, 0
   192 00000330 3A0A00             
   193 00000333 4F66696369616C2032-         msgOficial2             db "Oficial 2:", 10, 0
   193 0000033C 3A0A00             
   194                                  
   195 0000033F 4D6F76696D69656E74-         msgCantMovimientos      db "Movimientos totales: %d", 10, 0
   195 00000348 6F7320746F74616C65-
   195 00000351 733A2025640A00     
   196 00000358 2D2048616369612061-         msgCantAdelante         db "- Hacia adelante: %d", 10, 0
   196 00000361 64656C616E74653A20-
   196 0000036A 25640A00           
   197 0000036E 2D204861636961206C-         msgCantDerecha          db "- Hacia la derecha: %d", 10, 0
   197 00000377 612064657265636861-
   197 00000380 3A2025640A00       
   198 00000386 2D204861636961206C-         msgCantIzquierda        db "- Hacia la izquierda: %d", 10, 0
   198 0000038F 6120697A7175696572-
   198 00000398 64613A2025640A00   
   199 000003A0 2D2048616369612061-         msgCantAtras            db "- Hacia atrás: %d", 10, 0
   199 000003A9 7472C3A1733A202564-
   199 000003B2 0A00               
   200 000003B4 2D20456E2064696167-         msgCantDiagonal         db "- En diagonal: %d", 10, 0
   200 000003BD 6F6E616C3A2025640A-
   200 000003C6 00                 
   201 000003C7 2D2D2D204164656C61-         msgCantDiagArribaDer    db "--- Adelante-derecha: %d", 10, 0
   201 000003D0 6E74652D6465726563-
   201 000003D9 68613A2025640A00   
   202 000003E1 2D2D2D204164656C61-         msgCantDiagArribaIzq    db "--- Adelante-izquierda: %d", 10, 0
   202 000003EA 6E74652D697A717569-
   202 000003F3 657264613A2025640A-
   202 000003FC 00                 
   203 000003FD 2D2D2D20417472C3A1-         msgCantDiagAbajoDer     db "--- Atrás-derecha: %d", 10, 0
   203 00000406 732D64657265636861-
   203 0000040F 3A2025640A00       
   204 00000415 2D2D2D20417472C3A1-         msgCantDiagAbajoIzq     db "--- Atrás-izquierda: %d", 10, 0
   204 0000041E 732D697A7175696572-
   204 00000427 64613A2025640A00   
   205                                  
   206 0000042F 43616E746964616420-         msgCantSoldadosCapt     db "Cantidad de soldados capturados: %d", 10, 10, 0
   206 00000438 646520736F6C646164-
   206 00000441 6F7320636170747572-
   206 0000044A 61646F733A2025640A-
   206 00000453 0A00               
   207                                  
   208 00000455 C2A1456C206A756567-         msgJuegoTerminado       db "¡El juego ha terminado!", 10, 0
   208 0000045E 6F206861207465726D-
   208 00000467 696E61646F210A00   
   209 0000046F C2A1456C2067616E61-         msgGanador              db "¡El ganador es el equipo de los %s!", 10, 0
   209 00000478 646F7220657320656C-
   209 00000481 2065717569706F2064-
   209 0000048A 65206C6F7320257321-
   209 00000493 0A00               
   210 00000495 736F6C6461646F7300          stringSoldados          db "soldados", 0
   211 0000049E 6F66696369616C6573-         stringOficiales         db "oficiales", 0
   211 000004A7 00                 
   212                                  
   213 000004A8 52617AC3B36E3A2025-         msgRazonGanador         db "Razón: %s", 10, 0
   213 000004B1 730A00             
   214                                  
   215 000004B4 2D2D2D2D00                  varRazonFin             db '----', 0 ; Razón de fin de juego (a llenar)          
   216                                  
   217                                      ; Se ha decidido salir de la partida
   218 000004B9 536520686120646563-         msgSalidaPartida        db "Se ha decidido salir de la partida. ¿Desea guardarla? (s/n)", 0
   218 000004C2 696469646F2073616C-
   218 000004CB 6972206465206C6120-
   218 000004D4 706172746964612E20-
   218 000004DD C2BF44657365612067-
   218 000004E6 7561726461726C613F-
   218 000004EF 2028732F6E2900     
   219 000004F6 4E4F54413A20536920-         msgAclaracionSalida     db "NOTA: Si decide no guardar la partida, se perderá todo el progreso. En cambio, si decide guardarla y tenía una partida guardada, se sobreescribirá.", 0
   219 000004FF 646563696465206E6F-
   219 00000508 206775617264617220-
   219 00000511 6C6120706172746964-
   219 0000051A 612C20736520706572-
   219 00000523 646572C3A120746F64-
   219 0000052C 6F20656C2070726F67-
   219 00000535 7265736F2E20456E20-
   219 0000053E 63616D62696F2C2073-
   219 00000547 692064656369646520-
   219 00000550 677561726461726C61-
   219 00000559 20792074656EC3AD61-
   219 00000562 20756E612070617274-
   219 0000056B 696461206775617264-
   219 00000574 6164612C2073652073-
   219 0000057D 6F6272656573637269-
   219 00000586 626972C3A12E00     
   220 0000058D 6E00                        guardadoPartida         db 'n', 0 ; guardar (s), no guardar (n)
   221                                  
   222 0000058F 6E00                        yaHabiaGuardado         db 'n', 0 ; ya había guardado (s), no había guardado (n)
   223                                  
   224 00000591 7300                        turnoDe                 db 's', 0 ; soldados (s), oficiales (o)
   225                                  
   226 00000593 C2A150617274696461-         msgPartidaGuardada      db "¡Partida guardada con éxito!", 0
   226 0000059C 206775617264616461-
   226 000005A5 20636F6E20C3A97869-
   226 000005AE 746F2100           
   227                                  
   228 000005B2 4572726F7220616C20-         msgErrorOpenFile        db "Error al abrir el archivo.", 0
   228 000005BB 616272697220656C20-
   228 000005C4 6172636869766F2E00 
   229                                  
   230                                      ; Razones de victoria de soldados
   231 000005CD 6C6F7320736F6C6461-         msgSoldadosFortaleza    db "los soldados han ocupado todos los puntos de la fortaleza.", 0
   231 000005D6 646F732068616E206F-
   231 000005DF 63757061646F20746F-
   231 000005E8 646F73206C6F732070-
   231 000005F1 756E746F7320646520-
   231 000005FA 6C6120666F7274616C-
   231 00000603 657A612E00         
   232 00000608 6C6F7320736F6C6461-         msgSoldadosRodean       db "los soldados han rodeado a los oficiales.", 0
   232 00000611 646F732068616E2072-
   232 0000061A 6F646561646F206120-
   232 00000623 6C6F73206F66696369-
   232 0000062C 616C65732E00       
   233 00000632 616D626F73206F6669-         msgSoldadosInvalidar    db "ambos oficiales han sido invalidados.", 0
   233 0000063B 6369616C6573206861-
   233 00000644 6E207369646F20696E-
   233 0000064D 76616C696461646F73-
   233 00000656 2E00               
   234                                  
   235                                      ; Razones de victoria de oficiales
   236 00000658 6E6F2071756564616E-         msgOficialesGanan       db "no quedan suficientes soldados para ocupar la fortaleza.", 0
   236 00000661 20737566696369656E-
   236 0000066A 74657320736F6C6461-
   236 00000673 646F73207061726120-
   236 0000067C 6F6375706172206C61-
   236 00000685 20666F7274616C657A-
   236 0000068E 612E00             
   237                                  
   238                                      ; Turnos
   239 00000691 4573207475726E6F20-         msgTurnoSoldados        db "Es turno de los soldados. Decida a qué soldado desea mover: (<numFila>-<numColumna>)", 0
   239 0000069A 6465206C6F7320736F-
   239 000006A3 6C6461646F732E2044-
   239 000006AC 656369646120612071-
   239 000006B5 75C3A920736F6C6461-
   239 000006BE 646F20646573656120-
   239 000006C7 6D6F7665723A20283C-
   239 000006D0 6E756D46696C613E2D-
   239 000006D9 3C6E756D436F6C756D-
   239 000006E2 6E613E2900         
   240 000006E7 4573207475726E6F20-         msgTurnoOficiales       db "Es turno de los oficiales. Decida a qué oficial desea mover: (<numFila>-<numColumna>)", 0
   240 000006F0 6465206C6F73206F66-
   240 000006F9 696369616C65732E20-
   240 00000702 446563696461206120-
   240 0000070B 7175C3A9206F666963-
   240 00000714 69616C206465736561-
   240 0000071D 206D6F7665723A2028-
   240 00000726 3C6E756D46696C613E-
   240 0000072F 2D3C6E756D436F6C75-
   240 00000738 6D6E613E2900       
   241 0000073E C2BF41207175C3A920-         msgTurnoMovSold         db "¿A qué casilla desea mover el soldado? (<numFila>-<numColumna>)", 0
   241 00000747 636173696C6C612064-
   241 00000750 65736561206D6F7665-
   241 00000759 7220656C20736F6C64-
   241 00000762 61646F3F20283C6E75-
   241 0000076B 6D46696C613E2D3C6E-
   241 00000774 756D436F6C756D6E61-
   241 0000077D 3E2900             
   242 00000780 C2BF41207175C3A920-         msgTurnoMovOfic         db "¿A qué casilla desea mover el oficial? (<numFila>-<numColumna>)", 0
   242 00000789 636173696C6C612064-
   242 00000792 65736561206D6F7665-
   242 0000079B 7220656C206F666963-
   242 000007A4 69616C3F20283C6E75-
   242 000007AD 6D46696C613E2D3C6E-
   242 000007B6 756D436F6C756D6E61-
   242 000007BF 3E2900             
   243                                      
   244                                      ; Contadores
   245                                  
   246 000007C2 0000000000000000            movimientosOfic1        dq 0
   247 000007CA 0000000000000000            movimientosOfic2        dq 0
   248                                      
   249 000007D2 0000000000000000            movOfic1Adelante        dq 0
   250 000007DA 0000000000000000            movOfic1Derecha         dq 0
   251 000007E2 0000000000000000            movOfic1Izquierda       dq 0
   252 000007EA 0000000000000000            movOfic1Atras           dq 0
   253 000007F2 0000000000000000            movOfic1Diagonal        dq 0
   254 000007FA 0000000000000000            movOfic1DiagArribaDer   dq 0
   255 00000802 0000000000000000            movOfic1DiagArribaIzq   dq 0
   256 0000080A 0000000000000000            movOfic1DiagAbajoDer    dq 0
   257 00000812 0000000000000000            movOfic1DiagAbajoIzq    dq 0
   258                                  
   259 0000081A 0000000000000000            movOfic2Adelante        dq 0
   260 00000822 0000000000000000            movOfic2Derecha         dq 0
   261 0000082A 0000000000000000            movOfic2Izquierda       dq 0
   262 00000832 0000000000000000            movOfic2Atras           dq 0
   263 0000083A 0000000000000000            movOfic2Diagonal        dq 0
   264 00000842 0000000000000000            movOfic2DiagArribaDer   dq 0
   265 0000084A 0000000000000000            movOfic2DiagArribaIzq   dq 0
   266 00000852 0000000000000000            movOfic2DiagAbajoDer    dq 0
   267 0000085A 0000000000000000            movOfic2DiagAbajoIzq    dq 0
   268                                  
   269 00000862 0000000000000000            cantSoldCapturados      dq 0 ; Cuando haya 16 soldados capturados, los oficiales ganan
   270 0000086A 0000000000000000            cantOficInvalidados     dq 0 ; Cuando haya 2 oficiales invalidados, los soldados ganan
   271                                  
   272 00000872 070000000000000003-         casillaOfic1            dq 7,3
   272 0000087B 00000000000000     
   273 00000882 060000000000000005-         casillaOfic2            dq 6,5
   273 0000088B 00000000000000     
   274                                  
   275 00000892 0000000000000000            cantCapturasOfic1       dq 0
   276 0000089A 0000000000000000            cantCapturasOfic2       dq 0
   277                                  
   278 000008A2 4F00                        simboloOficiales        db 'O', 0
   279 000008A4 5800                        simboloSoldados         db 'X', 0
   280                                      
   281 000008A6 04                          orientacionTablero      db  4       ; 4 -> no rotar (default) 
   282 000008A7 73                          piezaDeInicio           db 's'      ; soldados (s), oficiales (o)
   283                                  
   284                                      ; Comandos 
   285 000008A8 636C65617200                cmdLimpiarPantalla          db "clear", 0
   286 000008AE 746F75636820706172-         cmdCrearArchivoPartida      db "touch partidaGuardada.dat", 0
   286 000008B7 746964614775617264-
   286 000008C0 6164612E64617400   
   287 000008C8 726D20706172746964-         cmdBorrarArchivoPartida     db "rm partidaGuardada.dat", 0
   287 000008D1 614775617264616461-
   287 000008DA 2E64617400         
   288 000008DF 6563686F202D6E203E-         cmdLimpiarArchivo           db "echo -n > partidaGuardada.dat", 0
   288 000008E8 207061727469646147-
   288 000008F1 756172646164612E64-
   288 000008FA 617400             
   289                                  
   290                                      ; Formatos
   291 000008FD 257500                      formatoAtoi             db "%u", 0
   292 00000900 257300                      formatoItoa             db "%s", 0
   293                                  
   294                                      ; Modos de apertura de archivos
   295 00000903 726200                      modoLectura             db "rb", 0
   296 00000906 776200                      modoEscritura           db "wb", 0
   297 00000909 616200                      modoAppend              db "ab", 0
   298                                  
   299 0000090C 706172746964614775-         nombreArchivo           db "partidaGuardada.dat", 0
   299 00000915 6172646164612E6461-
   299 0000091E 7400               
   300                                  
   301                                  section .bss
   302                                  
   303 00000000 ????????                    piezaIniElegida     resd 1  ; Variable pivote para la pieza que inicia
   304                                  
   305 00000004 <res 74h>                   tableroEnJuego      resb 116 ; Tablero en juego
   306                                  
   307 00000078 ????????                    soldadoElegido      resb 4  ; Fila y columna del soldado a mover
   308 0000007C ????????                    casillaMovSold      resb 4  ; Fila y columna de la casilla de destino del soldado
   309                                  
   310 00000080 ????????                    oficialElegido      resb 4  ; Fila y columna del oficial a mover
   311 00000084 ????????                    casillaMovOfic      resb 4  ; Fila y columna de la casilla de destino del oficial
   312                                  
   313 00000088 ????????????????            fila                resq 1
   314 00000090 ????????????????            columna             resq 1   
   315 00000098 ????????????????            desplazCasOrig      resq 1
   316                                  
   317 000000A0 ????????????????            filaAMover          resq 1
   318 000000A8 ????????????????            columnaAMover       resq 1
   319 000000B0 ????????????????            desplazCasAMover    resq 1
   320                                  
   321 000000B8 ????????????????            filaAux             resq 1
   322 000000C0 ????????????????            columnaAux          resq 1
   323 000000C8 ????????????????            desplazAux          resq 1
   324 000000D0 ????????????????            desplazAux2         resq 1
   325                                  
   326 000000D8 ????????????????            idArchGuardado      resq 1 ; ID del archivo de la partida guardada
   327                                      
   328 000000E0 <res 47h>                   msgErrorEspecificoSold  resb 71 ; Máximo largo de mensaje de error para soldados
   329 00000127 <res 47h>                   msgErrorEspecificoOfic  resb 71 ; Máximo largo de mensaje de error para oficiales
   330                                  
   331 0000016E <res 47h>                   msgErrorEspecificoSoldMov   resb 71 ; Máximo largo de mensaje de error para movimientos de soldados
   332 000001B5 <res 47h>                   msgErrorEspecificoOficMov   resb 71 ; Máximo largo de mensaje de error para movimientos de oficiales
   333                                  
   334 000001FC <res 26h>                   msgCapturaSoldado       resb 38 ; Si se capturó un soldado
   335 00000222 <res 3Bh>                   msgOficialRet           resb 59 ; Si se retiró un oficial
   336                                  
   337                                  section .text
   338                                      global main
   339                                  
   340                                  main:
   341                                      ; Vemos si hay una partida guardada
   342                                      mOpenFile nombreArchivo, modoLectura
   112 00000000 48BF-               <1>  mov rdi, %1
   112 00000002 [0C09000000000000]  <1>
   113 0000000A 48BE-               <1>  mov rsi, %2
   113 0000000C [0309000000000000]  <1>
   114 00000014 4883EC08            <1>  sub rsp, 8
   115 00000018 E8(00000000)        <1>  call fopen
   116 0000001D 4883C408            <1>  add rsp, 8
   117 00000021 48890425[D8000000]  <1>  mov qword[idArchGuardado], rax
   343 00000029 4883F800                    cmp rax, 0
   344 0000002D 7F02                        jg partidaGuardada
   345 0000002F EB18                        jmp bienvenida
   346                                  
   347                                      partidaGuardada:
   348 00000031 E86D290000                      call abrirPartidaGuardada
   349 00000036 803C25[91050000]73              cmp byte[turnoDe], 's'
   350 0000003E 0F84D8000000                    je loopMovimientos
   351 00000044 E94D020000                      jmp turnoOficiales
   352                                  
   353                                      bienvenida:
   354                                          mPuts msgBienvenida
     2 00000049 48BF-               <1>  mov rdi, %1
     2 0000004B [6F00000000000000]  <1>
     3 00000053 4883EC08            <1>  sub rsp, 8
     4 00000057 E8(00000000)        <1>  call puts
     5 0000005C 4883C408            <1>  add rsp, 8
   355                                          
   356                                      ; Se debe elegir quién inicia la partida
   357                                      personalizarQuienInicia:
   358 00000060 C70425[00000000]00-             mov dword[piezaIniElegida], ''    ; vaciar variable
   358 00000068 000000             
   359                                          mPuts msgQuienInicia
     2 0000006B 48BF-               <1>  mov rdi, %1
     2 0000006D [AD02000000000000]  <1>
     3 00000075 4883EC08            <1>  sub rsp, 8
     4 00000079 E8(00000000)        <1>  call puts
     5 0000007E 4883C408            <1>  add rsp, 8
   360                                          mGets piezaIniElegida
    17 00000082 48BF-               <1>  mov rdi, %1
    17 00000084 [0000000000000000]  <1>
    18 0000008C 4883EC08            <1>  sub rsp, 8
    19 00000090 E8(00000000)        <1>  call gets
    20 00000095 4883C408            <1>  add rsp, 8
   361                                  
   362 00000099 833C25[00000000]23              cmp dword[piezaIniElegida], '#'
   363 000000A1 0F84D6220000                    je salirSinGuardar
   364                                  
   365 000000A7 833C25[00000000]6F              cmp dword[piezaIniElegida], 'o' 
   366 000000AF 7423                            je setearPiezaInicio
   367 000000B1 833C25[00000000]73              cmp dword[piezaIniElegida], 's'
   368 000000B9 7419                            je setearPiezaInicio
   369                                  
   370                                          mErrorJump msgOpcionInvalida, personalizarQuienInicia
    45                              <1>  mPuts %1
     2 000000BB 48BF-               <2>  mov rdi, %1
     2 000000BD [A100000000000000]  <2>
     3 000000C5 4883EC08            <2>  sub rsp, 8
     4 000000C9 E8(00000000)        <2>  call puts
     5 000000CE 4883C408            <2>  add rsp, 8
    46 000000D2 EB8C                <1>  jmp %2
   371                                  
   372                                          setearPiezaInicio:
   373                                              mMov piezaDeInicio, piezaIniElegida, 1
    31 000000D4 B901000000          <1>  mov rcx, %3
    32 000000D9 488D3425[00000000]  <1>  lea rsi, [%2]
    33 000000E1 488D3C25[A7080000]  <1>  lea rdi, [%1]
    34 000000E9 F3A4                <1>  rep movsb
   374 000000EB EB00                                jmp comenzarPorInicio
   375                                  
   376                                  ; --------------------------------------------------------------------------------------------
   377                                  ; RUTINA PARA COMENZAR EL JUEGO -> Se comienza desde el jugador elegido (o el default)
   378                                  ; --------------------------------------------------------------------------------------------
   379                                  
   380                                  comenzarPorInicio:
   381                                      mMov tableroEnJuego, tableroOrig, 116
    31 000000ED B974000000          <1>  mov rcx, %3
    32 000000F2 488D3425[00000000]  <1>  lea rsi, [%2]
    33 000000FA 488D3C25[04000000]  <1>  lea rdi, [%1]
    34 00000102 F3A4                <1>  rep movsb
   382                                  
   383 00000104 803C25[A7080000]73          cmp byte[piezaDeInicio], 's'
   384 0000010C 740E                        je loopMovimientos
   385 0000010E 803C25[A7080000]6F          cmp byte[piezaDeInicio], 'o'
   386 00000116 0F847A010000                je turnoOficiales
   387                                  
   388                                  
   389                                  ; COMIENZA EL JUEGO
   390                                  loopMovimientos:; mostrarTablero, mostrarTurno, realizarMovimiento, verificarFinJuego
   391                                      ; Limpiamos los mensajes de error
   392 0000011C C60425[E0000000]00          mov byte[msgErrorEspecificoSold], 0
   393 00000124 C60425[6E010000]00          mov byte[msgErrorEspecificoSoldMov], 0
   394 0000012C C60425[27010000]00          mov byte[msgErrorEspecificoOfic], 0
   395 00000134 C60425[B5010000]00          mov byte[msgErrorEspecificoOficMov], 0
   396 0000013C C60425[FC010000]00          mov byte[msgCapturaSoldado], 0
   397 00000144 C60425[22020000]00          mov byte[msgOficialRet], 0
   398                                  
   399                                      turnoSoldados:
   400 0000014C C60425[91050000]73              mov byte[turnoDe], 's'
   401 00000154 C60425[78000000]30              mov byte [soldadoElegido], '0'
   402                                      
   403                                          mCommand cmdLimpiarPantalla ; Limpia la pantalla para mostrar el tablero
    24 0000015C 48BF-               <1>  mov rdi, %1
    24 0000015E [A808000000000000]  <1>
    25 00000166 4883EC08            <1>  sub rsp, 8
    26 0000016A E8(00000000)        <1>  call system
    27 0000016F 4883C408            <1>  add rsp, 8
   404                                  
   405                                          mPuts tableroEnJuego ; Muestro el tablero
     2 00000173 48BF-               <1>  mov rdi, %1
     2 00000175 [0400000000000000]  <1>
     3 0000017D 4883EC08            <1>  sub rsp, 8
     4 00000181 E8(00000000)        <1>  call puts
     5 00000186 4883C408            <1>  add rsp, 8
   406                                  
   407 0000018A 803C25[E0000000]00              cmp byte[msgErrorEspecificoSold], 0
   408 00000192 0F8579030000                    jne imprimirErrorSold
   409                                  
   410 00000198 803C25[6E010000]00              cmp byte[msgErrorEspecificoSoldMov], 0
   411 000001A0 0F853C070000                    jne imprimirErrorSoldMov
   412                                  
   413 000001A6 803C25[B5010000]00              cmp byte[msgErrorEspecificoOficMov], 0
   414 000001AE 0F85C20B0000                    jne imprimirOficInvalidado
   415                                  
   416 000001B4 803C25[22020000]00              cmp byte[msgOficialRet], 0
   417 000001BC 0F85D00B0000                    jne imprimirOficRetirado
   418                                  
   419 000001C2 803C25[FC010000]00              cmp byte[msgCapturaSoldado], 0
   420 000001CA 0F8569100000                    jne imprimirCapturaSoldado
   421                                  
   422                                          todoOkSold:
   423                                              ; Limpiamos los mensajes de error
   424 000001D0 C60425[E0000000]00                  mov byte[msgErrorEspecificoSold], 0
   425 000001D8 C60425[6E010000]00                  mov byte[msgErrorEspecificoSoldMov], 0
   426 000001E0 C60425[B5010000]00                  mov byte[msgErrorEspecificoOficMov], 0
   427 000001E8 C60425[FC010000]00                  mov byte[msgCapturaSoldado], 0
   428 000001F0 C60425[22020000]00                  mov byte[msgOficialRet], 0
   429                                  
   430                                              mPuts msgTurnoSoldados      ; Muestra el mensaje de seleccionar ficha a mover
     2 000001F8 48BF-               <1>  mov rdi, %1
     2 000001FA [9106000000000000]  <1>
     3 00000202 4883EC08            <1>  sub rsp, 8
     4 00000206 E8(00000000)        <1>  call puts
     5 0000020B 4883C408            <1>  add rsp, 8
   431                                              mGets soldadoElegido        ; Obtiene la ficha a mover
    17 0000020F 48BF-               <1>  mov rdi, %1
    17 00000211 [7800000000000000]  <1>
    18 00000219 4883EC08            <1>  sub rsp, 8
    19 0000021D E8(00000000)        <1>  call gets
    20 00000222 4883C408            <1>  add rsp, 8
   432                                  
   433 00000226 803C25[78000000]23                  cmp byte[soldadoElegido], '#'
   434 0000022E 0F844F210000                        je salirDelJuego
   435                                              
   436 00000234 E97C010000                          jmp verificarFichaSold ; Verifica si la ficha elegida es valida
   437                                  
   438                                              casillaAMoverseSold:
   439                                                  
   440                                                  mPuts msgTurnoMovSold   ; Muestra el mensaje de seleccionar casilla a mover
     2 00000239 48BF-               <1>  mov rdi, %1
     2 0000023B [3E07000000000000]  <1>
     3 00000243 4883EC08            <1>  sub rsp, 8
     4 00000247 E8(00000000)        <1>  call puts
     5 0000024C 4883C408            <1>  add rsp, 8
   441                                                  mGets casillaMovSold    ; Obtiene la casilla a mover
    17 00000250 48BF-               <1>  mov rdi, %1
    17 00000252 [7C00000000000000]  <1>
    18 0000025A 4883EC08            <1>  sub rsp, 8
    19 0000025E E8(00000000)        <1>  call gets
    20 00000263 4883C408            <1>  add rsp, 8
   442                                  
   443 00000267 803C25[7C000000]23                      cmp byte[casillaMovSold], '#'
   444 0000026F 0F840E210000                            je salirDelJuego
   445                                  
   446 00000275 E931040000                              jmp verificarMovimientoSold ; Verifica si el movimiento es valido
   447                                  
   448                                                  moverSoldado:
   449 0000027A E8930A0000                                  call realizarMovimientoSold ; Realiza el movimiento
   450                                                      
   451 0000027F E8D8160000                                  call verificarFinJuegoSoldados ; Verificar fin de juego por algún movimiento de soldado
   452 00000284 4883F800                                    cmp rax, 0
   453 00000288 0F84301C0000                                je finDeJuego
   454                                  
   455 0000028E C60425[27010000]00          mov byte[msgErrorEspecificoOfic], 0
   456                                      turnoOficiales:
   457 00000296 C60425[91050000]6F              mov byte[turnoDe], 'o'
   458 0000029E C60425[80000000]30              mov byte[oficialElegido], '0'
   459                                          
   460                                          mCommand cmdLimpiarPantalla ; Limpia la pantalla para mostrar el tablero
    24 000002A6 48BF-               <1>  mov rdi, %1
    24 000002A8 [A808000000000000]  <1>
    25 000002B0 4883EC08            <1>  sub rsp, 8
    26 000002B4 E8(00000000)        <1>  call system
    27 000002B9 4883C408            <1>  add rsp, 8
   461                                  
   462                                          mPuts tableroEnJuego ; Muestra el tablero
     2 000002BD 48BF-               <1>  mov rdi, %1
     2 000002BF [0400000000000000]  <1>
     3 000002C7 4883EC08            <1>  sub rsp, 8
     4 000002CB E8(00000000)        <1>  call puts
     5 000002D0 4883C408            <1>  add rsp, 8
   463                                  
   464 000002D4 803C25[27010000]00              cmp byte[msgErrorEspecificoOfic], 0
   465 000002DC 0F85AD030000                    jne imprimirErrorOfic
   466                                  
   467 000002E2 803C25[B5010000]00              cmp byte[msgErrorEspecificoOficMov], 0
   468 000002EA 0F85860A0000                    jne imprimirOficInvalidado
   469                                  
   470                                          todoOkOfic:
   471                                              ; Limpiamos los mensajes de error
   472 000002F0 C60425[27010000]00                  mov byte[msgErrorEspecificoOfic], 0
   473 000002F8 C60425[B5010000]00                  mov byte[msgErrorEspecificoOficMov], 0
   474                                  
   475                                              mPuts msgTurnoOficiales ; Muestra el mensaje de seleccionar ficha a mover
     2 00000300 48BF-               <1>  mov rdi, %1
     2 00000302 [E706000000000000]  <1>
     3 0000030A 4883EC08            <1>  sub rsp, 8
     4 0000030E E8(00000000)        <1>  call puts
     5 00000313 4883C408            <1>  add rsp, 8
   476                                              mGets oficialElegido    ; Obtiene la ficha a mover
    17 00000317 48BF-               <1>  mov rdi, %1
    17 00000319 [8000000000000000]  <1>
    18 00000321 4883EC08            <1>  sub rsp, 8
    19 00000325 E8(00000000)        <1>  call gets
    20 0000032A 4883C408            <1>  add rsp, 8
   477                                  
   478 0000032E 803C25[80000000]23                  cmp byte[oficialElegido], '#'
   479 00000336 0F8447200000                        je salirDelJuego
   480                                  
   481 0000033C E9EC010000                          jmp verificarFichaOfic ; Verifica si la ficha elegida es valida
   482                                  
   483                                              casillaAMoverseOfic:
   484                                  
   485                                                  mPuts msgTurnoMovOfic   ; Muestra el mensaje de seleccionar casilla a mover
     2 00000341 48BF-               <1>  mov rdi, %1
     2 00000343 [8007000000000000]  <1>
     3 0000034B 4883EC08            <1>  sub rsp, 8
     4 0000034F E8(00000000)        <1>  call puts
     5 00000354 4883C408            <1>  add rsp, 8
   486                                                  mGets casillaMovOfic    ; Obtiene la casilla a mover
    17 00000358 48BF-               <1>  mov rdi, %1
    17 0000035A [8400000000000000]  <1>
    18 00000362 4883EC08            <1>  sub rsp, 8
    19 00000366 E8(00000000)        <1>  call gets
    20 0000036B 4883C408            <1>  add rsp, 8
   487                                  
   488 0000036F 803C25[84000000]23                      cmp byte[casillaMovOfic], '#'
   489 00000377 0F8406200000                            je salirDelJuego
   490                                                  
   491 0000037D E9C3060000                              jmp verificarMovimientoOfic ; Verifica si el movimiento es valido
   492                                  
   493                                                  moverOficial:
   494 00000382 E8B9090000                                  call realizarMovimientoOfic ; Realiza el movimiento
   495                                                      ; Verificar fin de juego por algún movimiento de oficial
   496 00000387 E896150000                                  call verificarFinJuegoOficiales
   497 0000038C 4883F800                                    cmp rax, 0
   498 00000390 0F84281B0000                                je finDeJuego
   499                                                      
   500 00000396 E9B1FDFFFF                                  jmp turnoSoldados
   501                                                  
   502                                                  capturar:
   503 0000039B E8290E0000                                  call capturarSoldado ; Captura soldado
   504                                                      ; Verificar fin de juego por captura de soldado
   505 000003A0 E87D150000                                  call verificarFinJuegoOficiales
   506 000003A5 4883F800                                    cmp rax, 0
   507 000003A9 0F840F1B0000                                je finDeJuego
   508                                                      
   509                                                  ; Repetir en loop
   510 000003AF E998FDFFFF                              jmp turnoSoldados
   511                                  
   512 000003B4 C3                          ret
   513                                  
   514                                  ;; --------------------------------------------------------------------------------------------
   515                                  ; VERIFICACIONES DE PIEZAS ORIGINALES A MOVER PARA SOLDADOS Y OFICIALES
   516                                  ; --------------------------------------------------------------------------------------------
   517                                  
   518                                  verificarFichaSold:
   519 000003B5 8A0425[78000000]            mov al, byte[soldadoElegido] ; Numero de fila
   520                                      
   521                                      ; Compromabos que el caracter ingresado sea un número entre 1 y 7
   522 000003BC 3C31                        cmp al, '1'
   523 000003BE 0F8C05010000                jl errorInputSold
   524 000003C4 3C37                        cmp al, '7'
   525 000003C6 0F8FFD000000                jg errorInputSold
   526                                  
   527                                      ; Parseamos el número de fila de string a int
   528 000003CC 48C70425[88000000]-         mov qword[fila], 0
   528 000003D4 00000000           
   529                                      mSscanf byte[soldadoElegido], formatoAtoi, fila
    69 000003D8 488D3C25[78000000]  <1>  lea rdi, %1
    70 000003E0 48BE-               <1>  mov rsi, %2
    70 000003E2 [FD08000000000000]  <1>
    71 000003EA 48BA-               <1>  mov rdx, %3
    71 000003EC [8800000000000000]  <1>
    72 000003F4 4883EC08            <1>  sub rsp, 8
    73 000003F8 E8(00000000)        <1>  call sscanf
    74 000003FD 4883C408            <1>  add rsp, 8
   530 00000401 4883F801                    cmp rax, 1
   531 00000405 0F8CBE000000                jl errorInputSold
   532                                  
   533                                      ; Comprobamos que el caracter siguiente sea un guión para que cumpla con el formato establecido
   534 0000040B 8A0425[79000000]            mov al, byte[soldadoElegido+1] ; Caracter '-'
   535 00000412 3C2D                        cmp al, '-'
   536 00000414 0F85AF000000                jne errorInputSold
   537                                      
   538                                      ; Comprobamos que el número de columna sea un número entre 1 y 7
   539 0000041A 8A0425[7A000000]            mov al, byte[soldadoElegido+2] ; Numero de columna
   540 00000421 3C31                        cmp al, '1'
   541 00000423 0F8CA0000000                jl errorInputSold
   542 00000429 3C37                        cmp al, '7'
   543 0000042B 0F8F98000000                jg errorInputSold
   544                                  
   545                                      ; Parseamos el número de columna de string a int
   546 00000431 48C70425[90000000]-         mov qword[columna], 0
   546 00000439 00000000           
   547                                      mSscanf byte[soldadoElegido+2], formatoAtoi, columna
    69 0000043D 488D3C25[7A000000]  <1>  lea rdi, %1
    70 00000445 48BE-               <1>  mov rsi, %2
    70 00000447 [FD08000000000000]  <1>
    71 0000044F 48BA-               <1>  mov rdx, %3
    71 00000451 [9000000000000000]  <1>
    72 00000459 4883EC08            <1>  sub rsp, 8
    73 0000045D E8(00000000)        <1>  call sscanf
    74 00000462 4883C408            <1>  add rsp, 8
   548 00000466 4883F801                    cmp rax, 1
   549 0000046A 7C5D                        jl errorInputSold
   550                                  
   551                                      ; El ultimo caracter del string ingresado debe ser un caracter nulo
   552 0000046C 8A0425[7B000000]            mov al, byte[soldadoElegido+3] ; Caracter nulo
   553 00000473 3C00                        cmp al, 0
   554 00000475 7552                        jne errorInputSold
   555                                  
   556                                      ; Calculamos desplazamiento en el tablero
   557                                      ;  mCalcDesplaz calcula el desplazamiento en el tablero en base a la fila y columna y lo almacena en desplazCasOrig usando una formula
   558                                      mCalcDesplaz [fila], [columna], qword[desplazCasOrig]
    87 00000477 488B3C25[88000000]  <1>  mov rdi, %1
    88 0000047F 488B3425[90000000]  <1>  mov rsi, %2
    89 00000487 E870080000          <1>  call calcularDesplazamiento
    90 0000048C 48890425[98000000]  <1>  mov %3, rax
   559 00000494 488B1C25[98000000]          mov rbx, qword[desplazCasOrig]
   560                                      
   561                                      ; Limpio los registros
   562 0000049C B800000000                  mov rax,0
   563 000004A1 BA00000000                  mov rdx, 0
   564                                  
   565                                      ; Cargo en dl el caracter de la casilla en el tablero y en al el simbolo de los soldados
   566 000004A6 8A93[04000000]              mov dl, byte[tableroEnJuego+rbx]
   567 000004AC 8A0425[A4080000]            mov al, [simboloSoldados]
   568                                  
   569                                      ; Comparo los caracteres, deben ser iguales para que el movimiento no sea invalido
   570 000004B3 38C2                        cmp dl, al
   571 000004B5 7536                        jne errorCasillaInvalidaSold
   572                                      
   573                                      ; Si no hubo errores, limpio el mensaje de error y sigo con la ejecucion
   574 000004B7 B800000000                  mov rax, 0
   575 000004BC 48890425[E0000000]          mov [msgErrorEspecificoSold], rax
   576 000004C4 E970FDFFFF                  jmp casillaAMoverseSold
   577                                  
   578                                      ; Errores
   579                                      errorInputSold:
   580 000004C9 488B0425[0D010000]              mov rax, [msgErrorInputSold]
   581                                          mMov msgErrorEspecificoSold, msgErrorInputSold, 62
    31 000004D1 B93E000000          <1>  mov rcx, %3
    32 000004D6 488D3425[0D010000]  <1>  lea rsi, [%2]
    33 000004DE 488D3C25[E0000000]  <1>  lea rdi, [%1]
    34 000004E6 F3A4                <1>  rep movsb
   582 000004E8 E95FFCFFFF                      jmp turnoSoldados
   583                                  
   584                                      errorCasillaInvalidaSold:
   585 000004ED 488B0425[C6000000]              mov rax, [msgCasillaInvalidaSold]
   586                                          mMov msgErrorEspecificoSold, msgCasillaInvalidaSold, 71
    31 000004F5 B947000000          <1>  mov rcx, %3
    32 000004FA 488D3425[C6000000]  <1>  lea rsi, [%2]
    33 00000502 488D3C25[E0000000]  <1>  lea rdi, [%1]
    34 0000050A F3A4                <1>  rep movsb
   587 0000050C E93BFCFFFF                      jmp turnoSoldados
   588                                  
   589                                      imprimirErrorSold:
   590                                          mPuts msgErrorEspecificoSold
     2 00000511 48BF-               <1>  mov rdi, %1
     2 00000513 [E000000000000000]  <1>
     3 0000051B 4883EC08            <1>  sub rsp, 8
     4 0000051F E8(00000000)        <1>  call puts
     5 00000524 4883C408            <1>  add rsp, 8
   591 00000528 E9A3FCFFFF                      jmp todoOkSold
   592                                      
   593                                  
   594                                  verificarFichaOfic:
   595 0000052D 8A0C25[80000000]            mov cl, byte[oficialElegido] ; Numero de fila
   596                                      
   597                                      ; Compromabos que el caracter ingresado para la fila sea un número entre 1 y 7
   598 00000534 80F931                      cmp cl, '1'
   599 00000537 0F8C0A010000                jl errorInputOfic
   600 0000053D 80F937                      cmp cl, '7'
   601 00000540 0F8F01010000                jg errorInputOfic
   602                                      
   603                                      ; Parseamos el número de fila de string a int
   604 00000546 48C70425[88000000]-         mov qword[fila], 0
   604 0000054E 00000000           
   605                                      mSscanf byte[oficialElegido], formatoAtoi, fila
    69 00000552 488D3C25[80000000]  <1>  lea rdi, %1
    70 0000055A 48BE-               <1>  mov rsi, %2
    70 0000055C [FD08000000000000]  <1>
    71 00000564 48BA-               <1>  mov rdx, %3
    71 00000566 [8800000000000000]  <1>
    72 0000056E 4883EC08            <1>  sub rsp, 8
    73 00000572 E8(00000000)        <1>  call sscanf
    74 00000577 4883C408            <1>  add rsp, 8
   606 0000057B 4883F801                    cmp rax, 1
   607 0000057F 0F8CC2000000                jl errorInputOfic
   608                                  
   609                                      ; Comprobamos que el caracter siguiente sea un guión para que cumpla con el formato establecido
   610 00000585 8A0C25[81000000]            mov cl, byte[oficialElegido+1] ; Caracter '-'
   611 0000058C 80F92D                      cmp cl, '-'
   612 0000058F 0F85B2000000                jne errorInputOfic
   613                                      
   614                                      ; Comprobamos que el número de columna sea un número entre 1 y 7
   615 00000595 8A0C25[82000000]            mov cl, byte[oficialElegido+2] ; Numero de columna
   616 0000059C 80F931                      cmp cl, '1'
   617 0000059F 0F8CA2000000                jl errorInputOfic
   618 000005A5 80F937                      cmp cl, '7'
   619 000005A8 0F8F99000000                jg errorInputOfic
   620                                  
   621                                      ; Parseamos el número de columna de string a int
   622 000005AE 48C70425[90000000]-         mov qword[columna], 0
   622 000005B6 00000000           
   623                                      mSscanf byte[oficialElegido+2], formatoAtoi, columna
    69 000005BA 488D3C25[82000000]  <1>  lea rdi, %1
    70 000005C2 48BE-               <1>  mov rsi, %2
    70 000005C4 [FD08000000000000]  <1>
    71 000005CC 48BA-               <1>  mov rdx, %3
    71 000005CE [9000000000000000]  <1>
    72 000005D6 4883EC08            <1>  sub rsp, 8
    73 000005DA E8(00000000)        <1>  call sscanf
    74 000005DF 4883C408            <1>  add rsp, 8
   624 000005E3 4883F801                    cmp rax, 1
   625 000005E7 7C5E                        jl errorInputOfic
   626                                  
   627                                      ; El ultimo caracter del string ingresado debe ser un caracter nulo
   628 000005E9 8A0C25[83000000]            mov cl, byte[oficialElegido+3] ; Caracter nulo
   629 000005F0 80F900                      cmp cl, 0
   630 000005F3 7552                        jne errorInputOfic
   631                                  
   632                                      ; Calculamos desplazamiento en tablero
   633                                      ; mCalcDesplaz calcula el desplazamiento en el tablero en base a la fila y columna y lo almacena en desplazCasOrig usando una formula
   634                                      mCalcDesplaz [fila], [columna], qword[desplazCasOrig]
    87 000005F5 488B3C25[88000000]  <1>  mov rdi, %1
    88 000005FD 488B3425[90000000]  <1>  mov rsi, %2
    89 00000605 E8F2060000          <1>  call calcularDesplazamiento
    90 0000060A 48890425[98000000]  <1>  mov %3, rax
   635 00000612 488B1C25[98000000]          mov rbx, qword[desplazCasOrig]
   636                                      
   637                                      ; Limpio los registros
   638 0000061A B800000000                  mov rax, 0
   639 0000061F BA00000000                  mov rdx, 0
   640                                  
   641                                      ; Cargo en dl el caracter de la casilla en el tablero y en cl el simbolo de los oficiales
   642 00000624 8A93[04000000]              mov dl, byte[tableroEnJuego+rbx]
   643 0000062A 8A0C25[A2080000]            mov cl, [simboloOficiales]
   644                                  
   645                                      ; Comparo los caracteres, deben ser iguales para que el movimiento no sea invalido
   646 00000631 38CA                        cmp dl, cl
   647 00000633 7536                        jne errorCasillaInvalidaOfic
   648                                  
   649                                      ; Si no hubo errores, limpio el mensaje de error y sigo con la ejecucion
   650 00000635 B800000000                  mov rax, 0
   651 0000063A 48890425[27010000]          mov [msgErrorEspecificoOfic], rax
   652 00000642 E9FAFCFFFF                  jmp casillaAMoverseOfic
   653                                  
   654                                      ; Errores
   655                                      errorInputOfic:
   656 00000647 488B0425[D0010000]              mov rax, [msgErrorInputOfic]
   657                                          mMov msgErrorEspecificoOfic, msgErrorInputOfic, 62
    31 0000064F B93E000000          <1>  mov rcx, %3
    32 00000654 488D3425[D0010000]  <1>  lea rsi, [%2]
    33 0000065C 488D3C25[27010000]  <1>  lea rdi, [%1]
    34 00000664 F3A4                <1>  rep movsb
   658 00000666 E92BFCFFFF                      jmp turnoOficiales
   659                                  
   660                                      errorCasillaInvalidaOfic:
   661 0000066B 488B0425[89010000]              mov rax, [msgCasillaInvalidaOfic]
   662                                          mMov msgErrorEspecificoOfic, msgCasillaInvalidaOfic, 71
    31 00000673 B947000000          <1>  mov rcx, %3
    32 00000678 488D3425[89010000]  <1>  lea rsi, [%2]
    33 00000680 488D3C25[27010000]  <1>  lea rdi, [%1]
    34 00000688 F3A4                <1>  rep movsb
   663 0000068A E907FCFFFF                      jmp turnoOficiales
   664                                  
   665                                      imprimirErrorOfic:
   666                                          mPuts msgErrorEspecificoOfic
     2 0000068F 48BF-               <1>  mov rdi, %1
     2 00000691 [2701000000000000]  <1>
     3 00000699 4883EC08            <1>  sub rsp, 8
     4 0000069D E8(00000000)        <1>  call puts
     5 000006A2 4883C408            <1>  add rsp, 8
   667 000006A6 E945FCFFFF                      jmp todoOkOfic
   668                                  
   669                                  ; --------------------------------------------------------------------------------------------
   670                                  ; VERFICIACIONES DE CASILLAS DESTINO PARA SOLDADOS Y OFICIALES
   671                                  ; --------------------------------------------------------------------------------------------
   672                                  
   673                                  verificarMovimientoSold:
   674 000006AB 8A0425[7C000000]            mov al, byte[casillaMovSold] ; Numero de fila
   675                                      
   676                                      ; Compromabos que el caracter ingresado sea un número entre 1 y 7
   677 000006B2 3C31                        cmp al, '1'
   678 000006B4 0F8CE0010000                jl errorInputSoldMov
   679 000006BA 3C37                        cmp al, '7'
   680 000006BC 0F8FD8010000                jg errorInputSoldMov
   681                                  
   682                                      ; Parseamos el número de fila de string a int
   683 000006C2 48C70425[A0000000]-         mov qword[filaAMover], 0
   683 000006CA 00000000           
   684                                      mSscanf byte[casillaMovSold], formatoAtoi, filaAMover
    69 000006CE 488D3C25[7C000000]  <1>  lea rdi, %1
    70 000006D6 48BE-               <1>  mov rsi, %2
    70 000006D8 [FD08000000000000]  <1>
    71 000006E0 48BA-               <1>  mov rdx, %3
    71 000006E2 [A000000000000000]  <1>
    72 000006EA 4883EC08            <1>  sub rsp, 8
    73 000006EE E8(00000000)        <1>  call sscanf
    74 000006F3 4883C408            <1>  add rsp, 8
   685 000006F7 4883F801                    cmp rax, 1
   686 000006FB 0F8C99010000                jl errorInputSoldMov
   687                                  
   688                                      ; Comprobamos que el caracter siguiente sea un guión para que cumpla con el formato establecido
   689 00000701 8A0425[7D000000]            mov al, byte[casillaMovSold+1] ; Caracter '-'
   690 00000708 3C2D                        cmp al, '-'
   691 0000070A 0F858A010000                jne errorInputSoldMov
   692                                      
   693                                      ; Comprobamos que el número de columna sea un número entre 1 y 7
   694 00000710 8A0425[7E000000]            mov al, byte[casillaMovSold+2] ; Numero de columna
   695 00000717 3C31                        cmp al, '1'
   696 00000719 0F8C7B010000                jl errorInputSoldMov
   697 0000071F 3C37                        cmp al, '7'
   698 00000721 0F8F73010000                jg errorInputSoldMov
   699                                      
   700                                      ; Parseamos el número de columna de string a int
   701 00000727 48C70425[A8000000]-         mov qword[columnaAMover], 0
   701 0000072F 00000000           
   702                                      mSscanf byte[casillaMovSold+2], formatoAtoi, columnaAMover
    69 00000733 488D3C25[7E000000]  <1>  lea rdi, %1
    70 0000073B 48BE-               <1>  mov rsi, %2
    70 0000073D [FD08000000000000]  <1>
    71 00000745 48BA-               <1>  mov rdx, %3
    71 00000747 [A800000000000000]  <1>
    72 0000074F 4883EC08            <1>  sub rsp, 8
    73 00000753 E8(00000000)        <1>  call sscanf
    74 00000758 4883C408            <1>  add rsp, 8
   703 0000075C 4883F801                    cmp rax, 1
   704 00000760 0F8C34010000                jl errorInputSoldMov
   705                                  
   706                                      ; El ultimo caracter del string ingresado debe ser un caracter nulo
   707 00000766 8A0425[7F000000]            mov al, byte[casillaMovSold+3] ; Caracter nulo
   708 0000076D 3C00                        cmp al, 0
   709 0000076F 0F8525010000                jne errorInputSoldMov
   710                                  
   711                                      ; Primero chequeamos si el soldado original está en alguna de las posiciones especiales
   712 00000775 E87B070000                  call chequearSoldPosEspeciales
   713 0000077A 4883F800                    cmp rax, 0
   714 0000077E 7423                        je lugaresComunesSold ; Si recibimos 1, la casilla original es un lugar común: intentamos hacer el movimiento normal
   715                                      
   716 00000780 4883F801                    cmp rax, 1 ; Si recibimos 1, la casilla original es un lugar especial: solo podemos movernos a la derecha
   717 00000784 0F8474010000                je soloDerechaSold
   718 0000078A 4883F802                    cmp rax, 2 ; Si recibimos 2, la casilla original es un lugar especial: solo podemos movernos a la izquierda
   719 0000078E 0F840D020000                je soloIzquierdaSold
   720                                      
   721                                      casillaEspecialAMover:
   722 00000794 4983F800                        cmp r8, 0
   723 00000798 0F8520010000                    jne errorCasillaInvalidaSoldMov
   724 0000079E E9D7FAFFFF                      jmp moverSoldado
   725                                  
   726                                      lugaresComunesSold:
   727                                          ; Comparamos la fila a mover con la fila actual, la fila a mover debe ser igual a la fila actual + 1
   728                                          mMov filaAux, fila, 1
    31 000007A3 B901000000          <1>  mov rcx, %3
    32 000007A8 488D3425[88000000]  <1>  lea rsi, [%2]
    33 000007B0 488D3C25[B8000000]  <1>  lea rdi, [%1]
    34 000007B8 F3A4                <1>  rep movsb
   729 000007BA 48FF0425[B8000000]              inc qword[filaAux]
   730                                          mCmp [filaAux], [filaAMover], 1
    38 000007C2 B901000000          <1>  mov rcx, %3
    39 000007C7 488D3425[B8000000]  <1>  lea rsi, %1
    40 000007CF 488D3C25[A0000000]  <1>  lea rdi, %2
    41 000007D7 F3A6                <1>  repe cmpsb
   731 000007D9 0F85DF000000                    jne errorCasillaInvalidaSoldMov
   732                                  
   733                                          ; Comparamos la columna a mover con la columna actual
   734 000007DF 48C70425[C0000000]-             mov qword[columnaAux], 0 ; Reiniciamos la columna auxiliar
   734 000007E7 00000000           
   735                                          mMov columnaAux, columna, 1
    31 000007EB B901000000          <1>  mov rcx, %3
    32 000007F0 488D3425[90000000]  <1>  lea rsi, [%2]
    33 000007F8 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 00000800 F3A4                <1>  rep movsb
   736                                  
   737                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento hacia adelante
    38 00000802 B901000000          <1>  mov rcx, %3
    39 00000807 488D3425[C0000000]  <1>  lea rsi, %1
    40 0000080F 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00000817 F3A6                <1>  repe cmpsb
   738 00000819 7445                            je columnaSoldAMoverValida
   739                                  
   740 0000081B 48FF0425[C0000000]              inc qword[columnaAux]
   741                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la izquierda
    38 00000823 B901000000          <1>  mov rcx, %3
    39 00000828 488D3425[C0000000]  <1>  lea rsi, %1
    40 00000830 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00000838 F3A6                <1>  repe cmpsb
   742 0000083A 7424                            je columnaSoldAMoverValida
   743                                  
   744 0000083C 48832C25[C0000000]-             sub qword[columnaAux], 2
   744 00000844 02                 
   745                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la derecha
    38 00000845 B901000000          <1>  mov rcx, %3
    39 0000084A 488D3425[C0000000]  <1>  lea rsi, %1
    40 00000852 488D3C25[A8000000]  <1>  lea rdi, %2
    41 0000085A F3A6                <1>  repe cmpsb
   746 0000085C 7402                            je columnaSoldAMoverValida
   747                                  
   748 0000085E EB5E                            jmp errorCasillaInvalidaSoldMov
   749                                  
   750                                      columnaSoldAMoverValida: ; Queda ver si en esa casilla está vacía o no
   751                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    87 00000860 488B3C25[A0000000]  <1>  mov rdi, %1
    88 00000868 488B3425[A8000000]  <1>  mov rsi, %2
    89 00000870 E887040000          <1>  call calcularDesplazamiento
    90 00000875 48890425[B0000000]  <1>  mov %3, rax
   752                                          mEstaVacia qword[desplazCasAMover]
    94 0000087D B800000000          <1>  mov rax, 0
    95 00000882 488B3C25[B0000000]  <1>  mov rdi, %1
    96 0000088A E858040000          <1>  call estaVacia
   753 0000088F 4883F801                        cmp rax, 1
   754 00000893 7429                            je errorCasillaInvalidaSoldMov ; Si recibimos 1, la casilla está ocupada (o está fuera del tablero)
   755                                          
   756 00000895 E9E0F9FFFF                      jmp moverSoldado 
   757                                  
   758                                      ; Errores
   759                                      errorInputSoldMov:
   760 0000089A 488B0425[0D010000]              mov rax, [msgErrorInputSold]
   761                                          mMov msgErrorEspecificoSoldMov, msgErrorInputSold, 62
    31 000008A2 B93E000000          <1>  mov rcx, %3
    32 000008A7 488D3425[0D010000]  <1>  lea rsi, [%2]
    33 000008AF 488D3C25[6E010000]  <1>  lea rdi, [%1]
    34 000008B7 F3A4                <1>  rep movsb
   762 000008B9 E98EF8FFFF                      jmp turnoSoldados
   763                                  
   764                                      errorCasillaInvalidaSoldMov:
   765 000008BE 488B0425[4B010000]              mov rax, [msgCasillaInvMovSold]
   766                                          mMov msgErrorEspecificoSoldMov, msgCasillaInvMovSold, 62
    31 000008C6 B93E000000          <1>  mov rcx, %3
    32 000008CB 488D3425[4B010000]  <1>  lea rsi, [%2]
    33 000008D3 488D3C25[6E010000]  <1>  lea rdi, [%1]
    34 000008DB F3A4                <1>  rep movsb
   767 000008DD E96AF8FFFF                      jmp turnoSoldados
   768                                  
   769                                      imprimirErrorSoldMov:
   770                                          mPuts msgErrorEspecificoSoldMov
     2 000008E2 48BF-               <1>  mov rdi, %1
     2 000008E4 [6E01000000000000]  <1>
     3 000008EC 4883EC08            <1>  sub rsp, 8
     4 000008F0 E8(00000000)        <1>  call puts
     5 000008F5 4883C408            <1>  add rsp, 8
   771 000008F9 E9D2F8FFFF                      jmp todoOkSold
   772                                  
   773                                      ; Si la casilla original es una casilla especial, solo podemos movernos a la derecha o a la izquierda
   774                                      soloDerechaSold:
   775 000008FE 41B801000000                    mov r8, 1 ; Suponemos que el movimiento es inválido
   776                                  
   777                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover] ; Calculamos el desplazamiento de la casilla a mover
    87 00000904 488B3C25[A0000000]  <1>  mov rdi, %1
    88 0000090C 488B3425[A8000000]  <1>  mov rsi, %2
    89 00000914 E8E3030000          <1>  call calcularDesplazamiento
    90 00000919 48890425[B0000000]  <1>  mov %3, rax
   778                                          mEstaVacia qword[desplazCasAMover] ; Verificamos si la casilla a mover está vacía
    94 00000921 B800000000          <1>  mov rax, 0
    95 00000926 488B3C25[B0000000]  <1>  mov rdi, %1
    96 0000092E E8B4030000          <1>  call estaVacia
   779 00000933 4883F801                        cmp rax, 1 ; Si recibimos 1, la casilla a mover está ocupada (o está fuera del tablero)
   780 00000937 0F8457FEFFFF                    je casillaEspecialAMover
   781                                          
   782                                          mCmp [fila], [filaAMover], 1 ; Las filas deben ser iguales (el movimiento especial es para el costado)
    38 0000093D B901000000          <1>  mov rcx, %3
    39 00000942 488D3425[88000000]  <1>  lea rsi, %1
    40 0000094A 488D3C25[A0000000]  <1>  lea rdi, %2
    41 00000952 F3A6                <1>  repe cmpsb
   783 00000954 0F853AFEFFFF                    jne casillaEspecialAMover
   784                                  
   785                                          mMov columnaAux, columna, 1
    31 0000095A B901000000          <1>  mov rcx, %3
    32 0000095F 488D3425[90000000]  <1>  lea rsi, [%2]
    33 00000967 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 0000096F F3A4                <1>  rep movsb
   786 00000971 48FF0425[C0000000]              inc qword[columnaAux]
   787                                          mCmp [columnaAux], [columnaAMover], 1
    38 00000979 B901000000          <1>  mov rcx, %3
    39 0000097E 488D3425[C0000000]  <1>  lea rsi, %1
    40 00000986 488D3C25[A8000000]  <1>  lea rdi, %2
    41 0000098E F3A6                <1>  repe cmpsb
   788 00000990 0F85FEFDFFFF                    jne casillaEspecialAMover
   789                                          
   790 00000996 41B800000000                    mov r8, 0 ; Si llegamos acá, el movimiento es válido
   791 0000099C E9F3FDFFFF                      jmp casillaEspecialAMover
   792                                      
   793                                      soloIzquierdaSold:
   794 000009A1 41B801000000                    mov r8, 1 ; Suponemos que el movimiento es inválido
   795                                  
   796                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    87 000009A7 488B3C25[A0000000]  <1>  mov rdi, %1
    88 000009AF 488B3425[A8000000]  <1>  mov rsi, %2
    89 000009B7 E840030000          <1>  call calcularDesplazamiento
    90 000009BC 48890425[B0000000]  <1>  mov %3, rax
   797                                          mEstaVacia qword[desplazCasAMover]
    94 000009C4 B800000000          <1>  mov rax, 0
    95 000009C9 488B3C25[B0000000]  <1>  mov rdi, %1
    96 000009D1 E811030000          <1>  call estaVacia
   798 000009D6 4883F801                        cmp rax, 1 
   799 000009DA 0F84B4FDFFFF                    je casillaEspecialAMover
   800                                  
   801                                          mCmp [fila], [filaAMover], 1 ; Las filas deben ser iguales (el movimiento especial es para el costado)
    38 000009E0 B901000000          <1>  mov rcx, %3
    39 000009E5 488D3425[88000000]  <1>  lea rsi, %1
    40 000009ED 488D3C25[A0000000]  <1>  lea rdi, %2
    41 000009F5 F3A6                <1>  repe cmpsb
   802 000009F7 0F8597FDFFFF                    jne casillaEspecialAMover
   803                                  
   804                                          mMov columnaAux, columna, 1
    31 000009FD B901000000          <1>  mov rcx, %3
    32 00000A02 488D3425[90000000]  <1>  lea rsi, [%2]
    33 00000A0A 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 00000A12 F3A4                <1>  rep movsb
   805 00000A14 48FF0C25[C0000000]              dec qword[columnaAux]
   806                                          mCmp [columnaAux], [columnaAMover], 1
    38 00000A1C B901000000          <1>  mov rcx, %3
    39 00000A21 488D3425[C0000000]  <1>  lea rsi, %1
    40 00000A29 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00000A31 F3A6                <1>  repe cmpsb
   807 00000A33 0F855BFDFFFF                    jne casillaEspecialAMover
   808                                  
   809 00000A39 41B800000000                    mov r8, 0 ; Si llegamos acá, el movimiento es válido
   810 00000A3F E950FDFFFF                      jmp casillaEspecialAMover
   811                                      
   812 00000A44 C3                          ret
   813                                  
   814                                  verificarMovimientoOfic:
   815 00000A45 8A0425[84000000]            mov al, byte[casillaMovOfic] ; Numero de fila
   816                                      
   817 00000A4C 3C31                        cmp al, '1'
   818 00000A4E 0F8C2F020000                jl errorInputOficMov
   819 00000A54 3C37                        cmp al, '7'
   820 00000A56 0F8F27020000                jg errorInputOficMov
   821                                  
   822 00000A5C 48C70425[A0000000]-         mov qword[filaAMover], 0
   822 00000A64 00000000           
   823                                      mSscanf byte[casillaMovOfic], formatoAtoi, filaAMover
    69 00000A68 488D3C25[84000000]  <1>  lea rdi, %1
    70 00000A70 48BE-               <1>  mov rsi, %2
    70 00000A72 [FD08000000000000]  <1>
    71 00000A7A 48BA-               <1>  mov rdx, %3
    71 00000A7C [A000000000000000]  <1>
    72 00000A84 4883EC08            <1>  sub rsp, 8
    73 00000A88 E8(00000000)        <1>  call sscanf
    74 00000A8D 4883C408            <1>  add rsp, 8
   824                                  
   825 00000A91 4883F801                    cmp rax, 1
   826 00000A95 0F8CE8010000                jl errorInputOficMov
   827                                  
   828 00000A9B 8A0425[85000000]            mov al, byte[casillaMovOfic+1] ; Caracter '-'
   829 00000AA2 3C2D                        cmp al, '-'
   830 00000AA4 0F85D9010000                jne errorInputOficMov
   831                                      
   832 00000AAA 8A0425[86000000]            mov al, byte[casillaMovOfic+2] ; Numero de columna
   833 00000AB1 3C31                        cmp al, '1'
   834 00000AB3 0F8CCA010000                jl errorInputOficMov
   835 00000AB9 3C37                        cmp al, '7'
   836 00000ABB 0F8FC2010000                jg errorInputOficMov
   837                                  
   838 00000AC1 48C70425[A8000000]-         mov qword[columnaAMover], 0
   838 00000AC9 00000000           
   839                                      mSscanf byte[casillaMovOfic+2], formatoAtoi, columnaAMover
    69 00000ACD 488D3C25[86000000]  <1>  lea rdi, %1
    70 00000AD5 48BE-               <1>  mov rsi, %2
    70 00000AD7 [FD08000000000000]  <1>
    71 00000ADF 48BA-               <1>  mov rdx, %3
    71 00000AE1 [A800000000000000]  <1>
    72 00000AE9 4883EC08            <1>  sub rsp, 8
    73 00000AED E8(00000000)        <1>  call sscanf
    74 00000AF2 4883C408            <1>  add rsp, 8
   840                                  
   841 00000AF6 4883F801                    cmp rax, 1
   842 00000AFA 0F8C83010000                jl errorInputOficMov
   843                                  
   844 00000B00 8A0425[87000000]            mov al, byte[casillaMovOfic+3] ; Caracter nulo
   845 00000B07 3C00                        cmp al, 0
   846 00000B09 0F8574010000                jne errorInputOficMov
   847                                  
   848                                      ; Comparamos la fila a mover con la fila actual
   849                                      mMov filaAux, fila, 1
    31 00000B0F B901000000          <1>  mov rcx, %3
    32 00000B14 488D3425[88000000]  <1>  lea rsi, [%2]
    33 00000B1C 488D3C25[B8000000]  <1>  lea rdi, [%1]
    34 00000B24 F3A4                <1>  rep movsb
   850                                  
   851                                      mCmp [filaAux], [filaAMover], 1
    38 00000B26 B901000000          <1>  mov rcx, %3
    39 00000B2B 488D3425[B8000000]  <1>  lea rsi, %1
    40 00000B33 488D3C25[A0000000]  <1>  lea rdi, %2
    41 00000B3B F3A6                <1>  repe cmpsb
   852 00000B3D 7448                        je filaOficAMoverValida ; Filas iguales -> válido
   853 00000B3F 48FF0425[B8000000]          inc qword[filaAux]
   854                                      mCmp [filaAux], [filaAMover], 1
    38 00000B47 B901000000          <1>  mov rcx, %3
    39 00000B4C 488D3425[B8000000]  <1>  lea rsi, %1
    40 00000B54 488D3C25[A0000000]  <1>  lea rdi, %2
    41 00000B5C F3A6                <1>  repe cmpsb
   855 00000B5E 7427                        je filaOficAMoverValida
   856 00000B60 48832C25[B8000000]-         sub qword[filaAux], 2
   856 00000B68 02                 
   857                                      mCmp [filaAux], [filaAMover], 1
    38 00000B69 B901000000          <1>  mov rcx, %3
    39 00000B6E 488D3425[B8000000]  <1>  lea rsi, %1
    40 00000B76 488D3C25[A0000000]  <1>  lea rdi, %2
    41 00000B7E F3A6                <1>  repe cmpsb
   858 00000B80 7405                        je filaOficAMoverValida
   859                                  
   860 00000B82 E920010000                  jmp errorCasillaInvalidaOficMov
   861                                  
   862                                      filaOficAMoverValida:
   863                                          ; Comparamos la columna a mover con la columna actual
   864 00000B87 48C70425[C0000000]-             mov qword[columnaAux], 0 ; Reiniciamos la columna auxiliar
   864 00000B8F 00000000           
   865                                          mMov columnaAux, columna, 1
    31 00000B93 B901000000          <1>  mov rcx, %3
    32 00000B98 488D3425[90000000]  <1>  lea rsi, [%2]
    33 00000BA0 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 00000BA8 F3A4                <1>  rep movsb
   866                                  
   867                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento hacia adelante
    38 00000BAA B901000000          <1>  mov rcx, %3
    39 00000BAF 488D3425[C0000000]  <1>  lea rsi, %1
    40 00000BB7 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00000BBF F3A6                <1>  repe cmpsb
   868 00000BC1 7448                            je columnaOficAMoverValida
   869                                  
   870 00000BC3 48FF0425[C0000000]              inc qword[columnaAux]
   871                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la izquierda
    38 00000BCB B901000000          <1>  mov rcx, %3
    39 00000BD0 488D3425[C0000000]  <1>  lea rsi, %1
    40 00000BD8 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00000BE0 F3A6                <1>  repe cmpsb
   872 00000BE2 7427                            je columnaOficAMoverValida
   873                                  
   874 00000BE4 48832C25[C0000000]-             sub qword[columnaAux], 2
   874 00000BEC 02                 
   875                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la derecha
    38 00000BED B901000000          <1>  mov rcx, %3
    39 00000BF2 488D3425[C0000000]  <1>  lea rsi, %1
    40 00000BFA 488D3C25[A8000000]  <1>  lea rdi, %2
    41 00000C02 F3A6                <1>  repe cmpsb
   876 00000C04 7405                            je columnaOficAMoverValida
   877                                  
   878 00000C06 E99C000000                      jmp errorCasillaInvalidaOficMov
   879                                  
   880                                      columnaOficAMoverValida: ; Podríamos hacer un movimiento normal (casilla vacía) o capturar un soldado...
   881                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    87 00000C0B 488B3C25[A0000000]  <1>  mov rdi, %1
    88 00000C13 488B3425[A8000000]  <1>  mov rsi, %2
    89 00000C1B E8DC000000          <1>  call calcularDesplazamiento
    90 00000C20 48890425[B0000000]  <1>  mov %3, rax
   882                                          mEstaVacia qword[desplazCasAMover]
    94 00000C28 B800000000          <1>  mov rax, 0
    95 00000C2D 488B3C25[B0000000]  <1>  mov rdi, %1
    96 00000C35 E8AD000000          <1>  call estaVacia
   883 00000C3A 4883F800                        cmp rax, 0
   884 00000C3E 0F843EF7FFFF                    je moverOficial ; Si llegamos acá, la casilla a mover está vacía -> movimiento normal
   885                                          
   886                                          ; Si llegamos acá, la casilla no está vacía: ver si hay un soldado para capturar
   887                                          mHaySoldado qword[desplazCasAMover]
   100 00000C44 B800000000          <1>  mov rax, 0
   101 00000C49 488B3C25[B0000000]  <1>  mov rdi, %1
   102 00000C51 E8E8020000          <1>  call haySoldado
   888 00000C56 4883F801                        cmp rax, 1
   889 00000C5A 744B                            je errorCasillaInvalidaOficMov ; Si recibimos 1, la casilla a ocupar no tiene un soldado -> movimiento inválido
   890                                  
   891                                          ; Si llegamos acá, la casilla a ocupar tiene un soldado: debemos ver si el oficial puede saltar sobre él...
   892 00000C5C E801030000                      call sePuedeSaltarSoldado
   893 00000C61 4883F801                        cmp rax, 1
   894 00000C65 7440                            je errorCasillaInvalidaOficMov ; Si recibimos 1, el oficial no puede saltar sobre el soldado -> movimiento inválido
   895                                  
   896                                          mMov msgCapturaSoldado, msgCapturaSold, 38
    31 00000C67 B926000000          <1>  mov rcx, %3
    32 00000C6C 488D3425[4C020000]  <1>  lea rsi, [%2]
    33 00000C74 488D3C25[FC010000]  <1>  lea rdi, [%1]
    34 00000C7C F3A4                <1>  rep movsb
   897 00000C7E E918F7FFFF                      jmp capturar
   898                                  
   899                                      errorInputOficMov:
   900 00000C83 488B0425[D0010000]              mov rax, [msgErrorInputOfic]
   901                                          mMov msgErrorEspecificoOficMov, msgErrorInputOfic, 62
    31 00000C8B B93E000000          <1>  mov rcx, %3
    32 00000C90 488D3425[D0010000]  <1>  lea rsi, [%2]
    33 00000C98 488D3C25[B5010000]  <1>  lea rdi, [%1]
    34 00000CA0 F3A4                <1>  rep movsb
   902 00000CA2 E9EFF5FFFF                      jmp turnoOficiales
   903                                  
   904                                      errorCasillaInvalidaOficMov:
   905 00000CA7 488B0425[0E020000]              mov rax, [msgCasillaInvMovOfic]
   906                                          mMov msgErrorEspecificoOficMov, msgCasillaInvMovOfic, 62
    31 00000CAF B93E000000          <1>  mov rcx, %3
    32 00000CB4 488D3425[0E020000]  <1>  lea rsi, [%2]
    33 00000CBC 488D3C25[B5010000]  <1>  lea rdi, [%1]
    34 00000CC4 F3A4                <1>  rep movsb
   907 00000CC6 E9CBF5FFFF                      jmp turnoOficiales
   908                                  
   909                                      imprimirErrorOficMov:
   910                                          mPuts msgErrorEspecificoOficMov
     2 00000CCB 48BF-               <1>  mov rdi, %1
     2 00000CCD [B501000000000000]  <1>
     3 00000CD5 4883EC08            <1>  sub rsp, 8
     4 00000CD9 E8(00000000)        <1>  call puts
     5 00000CDE 4883C408            <1>  add rsp, 8
   911 00000CE2 E909F6FFFF                      jmp todoOkOfic
   912                                  
   913                                  ; --------------------------------------------------------------------------------------------
   914                                  ; RUTINA PARA VERIFICAR SI UNA CASILLA ESTÁ VACÍA
   915                                  ; --------------------------------------------------------------------------------------------
   916                                  
   917                                  estaVacia:
   918 00000CE7 80BF[04000000]20            cmp byte[tableroEnJuego+rdi], ' '
   919 00000CEE 7406                        je okVacia
   920                                  
   921 00000CF0 B801000000                  mov rax, 1
   922 00000CF5 C3                          ret
   923                                  
   924                                      okVacia:
   925 00000CF6 B800000000                      mov rax, 0
   926 00000CFB C3                              ret
   927                                  
   928                                  ; --------------------------------------------------------------------------------------------
   929                                  ; RUTINA PARA CALCULAR EL DESPLAZAMIENTO DE UNA CASILLA EN EL TABLERO
   930                                  ; --------------------------------------------------------------------------------------------
   931                                  
   932                                  calcularDesplazamiento:
   933 00000CFC B800000000                  mov rax, 0
   934 00000D01 4889F8                      mov rax, rdi
   935 00000D04 48FFC0                      inc rax
   936 00000D07 666BC00B                    imul ax, 11
   937 00000D0B 4801F0                      add rax, rsi
   938 00000D0E 48FFC0                      inc rax
   939                                  
   940 00000D11 C3                          ret
   941                                  
   942                                  ; --------------------------------------------------------------------------------------------
   943                                  ; RUTINAS PARA REALIZAR MOVIMIENTOS SIMPLES DE SOLDADOS Y OFICIALES (los que no requieren capturas)
   944                                  ; --------------------------------------------------------------------------------------------
   945                                  
   946                                  realizarMovimientoSold:
   947 00000D12 488B0425[98000000]          mov rax, qword[desplazCasOrig]
   948 00000D1A 488B1C25[B0000000]          mov rbx, qword[desplazCasAMover]
   949                                  
   950 00000D22 C680[04000000]20            mov byte[tableroEnJuego+rax], ' '
   951                                      mMov tableroEnJuego+rbx, simboloSoldados, 1
    31 00000D29 B901000000          <1>  mov rcx, %3
    32 00000D2E 488D3425[A4080000]  <1>  lea rsi, [%2]
    33 00000D36 488DBB[04000000]    <1>  lea rdi, [%1]
    34 00000D3D F3A4                <1>  rep movsb
   952                                  
   953 00000D3F C3                          ret
   954                                  
   955                                  realizarMovimientoOfic:
   956                                      ; Vemos si el oficial podía capturar un soldado y no lo hizo
   957                                      mMov desplazAux2, desplazCasOrig, 1
    31 00000D40 B901000000          <1>  mov rcx, %3
    32 00000D45 488D3425[98000000]  <1>  lea rsi, [%2]
    33 00000D4D 488D3C25[D0000000]  <1>  lea rdi, [%1]
    34 00000D55 F3A4                <1>  rep movsb
   958 00000D57 E8E9070000                  call podiaCapturarSoldado 
   959 00000D5C 4883F800                    cmp rax, 0 ; Si fue así, significa que el oficial se desentendió de su deber
   960 00000D60 744C                        je quitarOficial
   961                                  
   962                                      ; Necesitamos chequear si el otro oficial podría haber capturado al soldado
   963 00000D62 E8FF0A0000                  call podiaCapturarSoldadoOtroOficial
   964 00000D67 4883F800                    cmp rax, 0 ; Si fue así, significa que el otro oficial se desentendió de su deber
   965 00000D6B 0F84BC000000                je quitarOtroOficial
   966                                  
   967 00000D71 E9D4000000                  jmp noPodianCapturar
   968                                  
   969                                      imprimirOficInvalidado:
   970                                          mPuts msgErrorEspecificoOficMov
     2 00000D76 48BF-               <1>  mov rdi, %1
     2 00000D78 [B501000000000000]  <1>
     3 00000D80 4883EC08            <1>  sub rsp, 8
     4 00000D84 E8(00000000)        <1>  call puts
     5 00000D89 4883C408            <1>  add rsp, 8
   971 00000D8D E95EF5FFFF                      jmp todoOkOfic
   972                                  
   973                                      imprimirOficRetirado:
   974                                          mPuts msgOficialRet
     2 00000D92 48BF-               <1>  mov rdi, %1
     2 00000D94 [2202000000000000]  <1>
     3 00000D9C 4883EC08            <1>  sub rsp, 8
     4 00000DA0 E8(00000000)        <1>  call puts
     5 00000DA5 4883C408            <1>  add rsp, 8
   975 00000DA9 E922F4FFFF                      jmp todoOkSold
   976                                  
   977                                      quitarOficial:
   978 00000DAE E8CC040000                      call verQueOficialEs
   979 00000DB3 4883F801                        cmp rax, 1 ; Si recibimos 1, el oficial 1 es el que se mueve
   980 00000DB7 743A                            je quitarOfic1
   981                                  
   982                                          mCalcDesplaz [casillaOfic2], [casillaOfic2+8], qword[desplazAux]
    87 00000DB9 488B3C25[82080000]  <1>  mov rdi, %1
    88 00000DC1 488B3425[8A080000]  <1>  mov rsi, %2
    89 00000DC9 E82EFFFFFF          <1>  call calcularDesplazamiento
    90 00000DCE 48890425[C8000000]  <1>  mov %3, rax
   983 00000DD6 E8320A0000                      call desentenderOficial
   984                                          mMov msgOficialRet, msgOficialRetirado, 59
    31 00000DDB B93B000000          <1>  mov rcx, %3
    32 00000DE0 488D3425[72020000]  <1>  lea rsi, [%2]
    33 00000DE8 488D3C25[22020000]  <1>  lea rdi, [%1]
    34 00000DF0 F3A4                <1>  rep movsb
   985 00000DF2 C3                              ret
   986                                  
   987                                      quitarOfic1:
   988                                          mCalcDesplaz [casillaOfic1], [casillaOfic1+8], qword[desplazAux]
    87 00000DF3 488B3C25[72080000]  <1>  mov rdi, %1
    88 00000DFB 488B3425[7A080000]  <1>  mov rsi, %2
    89 00000E03 E8F4FEFFFF          <1>  call calcularDesplazamiento
    90 00000E08 48890425[C8000000]  <1>  mov %3, rax
   989 00000E10 E8F8090000                      call desentenderOficial
   990                                          mMov msgOficialRet, msgOficialRetirado, 59
    31 00000E15 B93B000000          <1>  mov rcx, %3
    32 00000E1A 488D3425[72020000]  <1>  lea rsi, [%2]
    33 00000E22 488D3C25[22020000]  <1>  lea rdi, [%1]
    34 00000E2A F3A4                <1>  rep movsb
   991 00000E2C C3                              ret
   992                                      
   993                                      quitarOtroOficial:
   994 00000E2D E89F0A0000                      call desentenderOtroOficial
   995                                          mMov msgOficialRet, msgOficialRetirado, 59
    31 00000E32 B93B000000          <1>  mov rcx, %3
    32 00000E37 488D3425[72020000]  <1>  lea rsi, [%2]
    33 00000E3F 488D3C25[22020000]  <1>  lea rdi, [%1]
    34 00000E47 F3A4                <1>  rep movsb
   996 00000E49 C3                              ret
   997                                  
   998                                      ; Si llegamos acá, el oficial no podía capturar un soldado -> OK!
   999                                      noPodianCapturar:
  1000 00000E4A 488B0425[98000000]              mov rax, qword[desplazCasOrig]
  1001 00000E52 488B1C25[B0000000]              mov rbx, qword[desplazCasAMover]
  1002                                  
  1003 00000E5A C680[04000000]20                mov byte[tableroEnJuego+rax], ' '
  1004                                          mMov tableroEnJuego+rbx, simboloOficiales, 1
    31 00000E61 B901000000          <1>  mov rcx, %3
    32 00000E66 488D3425[A2080000]  <1>  lea rsi, [%2]
    33 00000E6E 488DBB[04000000]    <1>  lea rdi, [%1]
    34 00000E75 F3A4                <1>  rep movsb
  1005                                  
  1006 00000E77 E803040000                      call verQueOficialEs ; Verificamos qué oficial es el que se quiere mover
  1007                                  
  1008                                          ; Incrementamos la cantidad de movimientos del oficial correspondiente
  1009 00000E7C 4883F801                        cmp rax, 1 ; Si recibimos 1, el oficial 1 es el que se mueve
  1010 00000E80 740B                            je movOfic1
  1011                                          
  1012                                          ; Si llegamos acá, el oficial 2 es el que se mueve
  1013 00000E82 E8E7040000                      call actualizarContadoresOfic2
  1014 00000E87 E8C2050000                      call refrescarCasActOfic2
  1015 00000E8C C3                              ret
  1016                                      
  1017                                      movOfic1: ; Si llegamos acá, el oficial 1 es el que se mueve
  1018 00000E8D E82B040000                      call actualizarContadoresOfic1
  1019 00000E92 E888050000                      call refrescarCasActOfic1
  1020                                  
  1021 00000E97 C3                          ret
  1022                                      
  1023                                  ; --------------------------------------------------------------------------------------------
  1024                                  ; RUTINAS PARA CAMBIAR EL TABLERO CON LOS SIMBOLOS PERSONALIZADOS
  1025                                  ; --------------------------------------------------------------------------------------------
  1026                                  
  1027                                  cambiarTableroSoldNuevo:
  1028 00000E98 BB1A000000                  mov rbx, 26 ; Desplazamiento de la primera casilla en donde puede haber piezas
  1029                                  
  1030                                      cicloCambiarSoldados:
  1031 00000E9D 80BB[04000000]58                cmp byte[tableroEnJuego+rbx], 'X'
  1032 00000EA4 7516                            jne noCambiarSoldado
  1033                                          mMov tableroEnJuego+rbx, simboloSoldados, 1 ; Cambio el simbolo de los soldados
    31 00000EA6 B901000000          <1>  mov rcx, %3
    32 00000EAB 488D3425[A4080000]  <1>  lea rsi, [%2]
    33 00000EB3 488DBB[04000000]    <1>  lea rdi, [%1]
    34 00000EBA F3A4                <1>  rep movsb
  1034                                  
  1035                                          noCambiarSoldado:
  1036 00000EBC 48FFC3                              inc rbx
  1037 00000EBF 4883FB4B                            cmp rbx, 75 ; Desplazamiento de la última casilla en donde puede haber piezas
  1038 00000EC3 7CD8                                jl cicloCambiarSoldados
  1039                                  
  1040 00000EC5 C3                          ret
  1041                                  
  1042                                  cambiarTableroOficNuevo:
  1043                                      mMov tableroEnJuego+83, simboloOficiales, 1 ; Primer oficial (desplazamiento)
    31 00000EC6 B901000000          <1>  mov rcx, %3
    32 00000ECB 488D3425[A2080000]  <1>  lea rsi, [%2]
    33 00000ED3 488D3C25[57000000]  <1>  lea rdi, [%1]
    34 00000EDB F3A4                <1>  rep movsb
  1044                                      mMov tableroEnJuego+92, simboloOficiales, 1 ; Segundo oficial (desplazamiento)
    31 00000EDD B901000000          <1>  mov rcx, %3
    32 00000EE2 488D3425[A2080000]  <1>  lea rsi, [%2]
    33 00000EEA 488D3C25[60000000]  <1>  lea rdi, [%1]
    34 00000EF2 F3A4                <1>  rep movsb
  1045 00000EF4 C3                          ret
  1046                                  
  1047                                  ; --------------------------------------------------------------------------------------------
  1048                                  ; RUTINA PARA CHEQUEAR SI LA CASILLA DE ORIGEN DE UN SOLDADO ES UNA POSICIÓN ESPECIAL
  1049                                  ; --------------------------------------------------------------------------------------------
  1050                                  
  1051                                  chequearSoldPosEspeciales:
  1052 00000EF5 B800000000                  mov rax, 0
  1053                                  
  1054 00000EFA 48833C25[88000000]-         cmp qword[fila], 5
  1054 00000F02 05                 
  1055 00000F03 752C                        jne noEsLugarEspecial ; Si la fila no es 5, no estamos en una posición especial
  1056                                  
  1057                                      ; Si la columna es 1 o 2 (fila 5), estamos en una posición especial: solo podemos movernos a la derecha
  1058 00000F05 48833C25[90000000]-         cmp qword[columna], 1
  1058 00000F0D 01                 
  1059 00000F0E 7428                        je esLugarEspecialADer 
  1060 00000F10 48833C25[90000000]-         cmp qword[columna], 2
  1060 00000F18 02                 
  1061 00000F19 741D                        je esLugarEspecialADer 
  1062                                  
  1063                                      ; Si la columna es 6 o 7 (fila 5), estamos en una posición especial: solo podemos movernos a la izquierda
  1064 00000F1B 48833C25[90000000]-         cmp qword[columna], 6
  1064 00000F23 06                 
  1065 00000F24 740C                        je esLugarEspecialAIzq 
  1066 00000F26 48833C25[90000000]-         cmp qword[columna], 7
  1066 00000F2E 07                 
  1067 00000F2F 7401                        je esLugarEspecialAIzq
  1068                                  
  1069                                      noEsLugarEspecial:
  1070 00000F31 C3                              ret
  1071                                  
  1072                                      esLugarEspecialAIzq:
  1073 00000F32 B802000000                      mov rax, 2
  1074 00000F37 C3                              ret
  1075                                      
  1076                                      esLugarEspecialADer:
  1077 00000F38 B801000000                      mov rax, 1
  1078 00000F3D C3                              ret
  1079                                  
  1080                                  ; --------------------------------------------------------------------------------------------
  1081                                  ; RUTINA PARA VERIFICAR SI HAY UN SOLDADO EN LA CASILLA DESTINO
  1082                                  ; --------------------------------------------------------------------------------------------
  1083                                  
  1084                                  haySoldado:
  1085                                      ; Calculamos desplazamiento en tablero
  1086                                      mCmp byte[tableroEnJuego+rdi], [simboloSoldados], 1
    38 00000F3E B901000000          <1>  mov rcx, %3
    39 00000F43 488DB7[04000000]    <1>  lea rsi, %1
    40 00000F4A 488D3C25[A4080000]  <1>  lea rdi, %2
    41 00000F52 F3A6                <1>  repe cmpsb
  1087 00000F54 7406                        je okSoldado
  1088                                  
  1089 00000F56 B801000000                  mov rax, 1
  1090 00000F5B C3                          ret
  1091                                  
  1092                                      okSoldado:
  1093 00000F5C B800000000                      mov rax, 0
  1094 00000F61 C3                              ret
  1095                                  
  1096                                  ; --------------------------------------------------------------------------------------------
  1097                                  ; RUTINA PARA VERIFICAR SI UN OFICIAL PUEDE SALTAR SOBRE UN SOLDADO
  1098                                  ; --------------------------------------------------------------------------------------------
  1099                                  
  1100                                  sePuedeSaltarSoldado:
  1101 00000F62 488B0425[88000000]          mov rax, qword[fila]
  1102 00000F6A 488B1C25[A0000000]          mov rbx, qword[filaAMover]
  1103 00000F72 4829D8                      sub rax, rbx
  1104 00000F75 0F8F07010000                jg saltoHaciaArriba ; Si la fila original es mayor que la fila destino, el salto es hacia arriba
  1105 00000F7B 0F8CA3010000                jl saltoHaciaAbajo ; Si la fila original es menor que la fila destino, el salto es hacia abajo
  1106                                  
  1107                                      ; Si estamos acá, el salto es en la misma fila
  1108 00000F81 488B0425[90000000]          mov rax, qword[columna]
  1109 00000F89 488B1C25[A8000000]          mov rbx, qword[columnaAMover]
  1110                                  
  1111 00000F91 4829D8                      sub rax, rbx
  1112 00000F94 7F02                        jg saltoHaciaIzq ; Si la columna original es mayor que la columna destino, el salto es hacia la izquierda
  1113 00000F96 7C75                        jl saltoHaciaDer ; Si la columna original es menor que la columna destino, el salto es hacia la derecha
  1114                                  
  1115                                      saltoHaciaIzq:
  1116                                          mMov filaAux, filaAMover, 1
    31 00000F98 B901000000          <1>  mov rcx, %3
    32 00000F9D 488D3425[A0000000]  <1>  lea rsi, [%2]
    33 00000FA5 488D3C25[B8000000]  <1>  lea rdi, [%1]
    34 00000FAD F3A4                <1>  rep movsb
  1117                                          mMov columnaAux, columnaAMover, 1
    31 00000FAF B901000000          <1>  mov rcx, %3
    32 00000FB4 488D3425[A8000000]  <1>  lea rsi, [%2]
    33 00000FBC 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 00000FC4 F3A4                <1>  rep movsb
  1118 00000FC6 48FF0C25[C0000000]              dec qword[columnaAux]
  1119                                  
  1120                                          mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    87 00000FCE 488B3C25[B8000000]  <1>  mov rdi, %1
    88 00000FD6 488B3425[C0000000]  <1>  mov rsi, %2
    89 00000FDE E819FDFFFF          <1>  call calcularDesplazamiento
    90 00000FE3 48890425[C8000000]  <1>  mov %3, rax
  1121                                          mEstaVacia qword[desplazAux]
    94 00000FEB B800000000          <1>  mov rax, 0
    95 00000FF0 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00000FF8 E8EAFCFFFF          <1>  call estaVacia
  1122 00000FFD 4883F801                        cmp rax, 1
  1123 00001001 0F84BB010000                    je saltoInvalido
  1124                                  
  1125 00001007 B800000000                      mov rax, 0
  1126 0000100C C3                              ret
  1127                                  
  1128                                      saltoHaciaDer:
  1129                                          mMov filaAux, filaAMover, 1
    31 0000100D B901000000          <1>  mov rcx, %3
    32 00001012 488D3425[A0000000]  <1>  lea rsi, [%2]
    33 0000101A 488D3C25[B8000000]  <1>  lea rdi, [%1]
    34 00001022 F3A4                <1>  rep movsb
  1130                                          mMov columnaAux, columnaAMover, 1
    31 00001024 B901000000          <1>  mov rcx, %3
    32 00001029 488D3425[A8000000]  <1>  lea rsi, [%2]
    33 00001031 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 00001039 F3A4                <1>  rep movsb
  1131 0000103B 48FF0425[C0000000]              inc qword[columnaAux]
  1132                                  
  1133                                          mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    87 00001043 488B3C25[B8000000]  <1>  mov rdi, %1
    88 0000104B 488B3425[C0000000]  <1>  mov rsi, %2
    89 00001053 E8A4FCFFFF          <1>  call calcularDesplazamiento
    90 00001058 48890425[C8000000]  <1>  mov %3, rax
  1134                                          mEstaVacia qword[desplazAux]
    94 00001060 B800000000          <1>  mov rax, 0
    95 00001065 488B3C25[C8000000]  <1>  mov rdi, %1
    96 0000106D E875FCFFFF          <1>  call estaVacia
  1135 00001072 4883F801                        cmp rax, 1
  1136 00001076 0F8446010000                    je saltoInvalido
  1137                                  
  1138 0000107C B800000000                      mov rax, 0
  1139 00001081 C3                              ret
  1140                                  
  1141                                      saltoHaciaArriba:
  1142                                          mMov filaAux, filaAMover, 1
    31 00001082 B901000000          <1>  mov rcx, %3
    32 00001087 488D3425[A0000000]  <1>  lea rsi, [%2]
    33 0000108F 488D3C25[B8000000]  <1>  lea rdi, [%1]
    34 00001097 F3A4                <1>  rep movsb
  1143                                          mMov columnaAux, columnaAMover, 1
    31 00001099 B901000000          <1>  mov rcx, %3
    32 0000109E 488D3425[A8000000]  <1>  lea rsi, [%2]
    33 000010A6 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 000010AE F3A4                <1>  rep movsb
  1144 000010B0 48FF0C25[B8000000]              dec qword[filaAux]
  1145                                          
  1146                                          mCmp [columna], [columnaAMover], 1
    38 000010B8 B901000000          <1>  mov rcx, %3
    39 000010BD 488D3425[90000000]  <1>  lea rsi, %1
    40 000010C5 488D3C25[A8000000]  <1>  lea rdi, %2
    41 000010CD F3A6                <1>  repe cmpsb
  1147 000010CF 7414                            je seguirSaltoArriba ; Si las columnas son iguales, el salto es hacia arriba y en línea recta
  1148 000010D1 7F0A                            jg haciaArribaIzq ; Si la columna original es mayor que la columna destino, el salto es hacia la izquierda
  1149                                  
  1150                                          ; Salto hacia arriba y a la derecha
  1151 000010D3 48FF0425[C0000000]              inc qword[columnaAux] 
  1152 000010DB EB08                            jmp seguirSaltoArriba
  1153                                  
  1154                                          ; Salto hacia arriba y a la izquierda
  1155                                          haciaArribaIzq:
  1156 000010DD 48FF0C25[C0000000]                  dec qword[columnaAux] 
  1157                                  
  1158                                          seguirSaltoArriba:
  1159                                              mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    87 000010E5 488B3C25[B8000000]  <1>  mov rdi, %1
    88 000010ED 488B3425[C0000000]  <1>  mov rsi, %2
    89 000010F5 E802FCFFFF          <1>  call calcularDesplazamiento
    90 000010FA 48890425[C8000000]  <1>  mov %3, rax
  1160                                              mEstaVacia qword[desplazAux]
    94 00001102 B800000000          <1>  mov rax, 0
    95 00001107 488B3C25[C8000000]  <1>  mov rdi, %1
    96 0000110F E8D3FBFFFF          <1>  call estaVacia
  1161 00001114 4883F801                            cmp rax, 1
  1162 00001118 0F84A4000000                        je saltoInvalido
  1163                                  
  1164 0000111E B800000000                          mov rax, 0
  1165 00001123 C3                                  ret
  1166                                  
  1167                                      saltoHaciaAbajo:
  1168                                          mMov filaAux, filaAMover, 1
    31 00001124 B901000000          <1>  mov rcx, %3
    32 00001129 488D3425[A0000000]  <1>  lea rsi, [%2]
    33 00001131 488D3C25[B8000000]  <1>  lea rdi, [%1]
    34 00001139 F3A4                <1>  rep movsb
  1169                                          mMov columnaAux, columnaAMover, 1
    31 0000113B B901000000          <1>  mov rcx, %3
    32 00001140 488D3425[A8000000]  <1>  lea rsi, [%2]
    33 00001148 488D3C25[C0000000]  <1>  lea rdi, [%1]
    34 00001150 F3A4                <1>  rep movsb
  1170 00001152 48FF0425[B8000000]              inc qword[filaAux]
  1171                                          
  1172                                          mCmp [columna], [columnaAMover], 1
    38 0000115A B901000000          <1>  mov rcx, %3
    39 0000115F 488D3425[90000000]  <1>  lea rsi, %1
    40 00001167 488D3C25[A8000000]  <1>  lea rdi, %2
    41 0000116F F3A6                <1>  repe cmpsb
  1173 00001171 7414                            je seguirSaltoAbajo ; Si las columnas son iguales, el salto es hacia abajo y en línea recta
  1174 00001173 7F0A                            jg haciaAbajoIzq ; Si la columna original es mayor que la columna destino, el salto es hacia la izquierda
  1175                                  
  1176                                          ; Salto hacia abajo y a la derecha
  1177 00001175 48FF0425[C0000000]              inc qword[columnaAux] 
  1178 0000117D EB08                            jmp seguirSaltoAbajo
  1179                                  
  1180                                          ; Salto hacia abajo y a la izquierda
  1181                                          haciaAbajoIzq:
  1182 0000117F 48FF0C25[C0000000]                  dec qword[columnaAux] 
  1183                                  
  1184                                          seguirSaltoAbajo:
  1185                                              mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    87 00001187 488B3C25[B8000000]  <1>  mov rdi, %1
    88 0000118F 488B3425[C0000000]  <1>  mov rsi, %2
    89 00001197 E860FBFFFF          <1>  call calcularDesplazamiento
    90 0000119C 48890425[C8000000]  <1>  mov %3, rax
  1186                                              mEstaVacia qword[desplazAux]
    94 000011A4 B800000000          <1>  mov rax, 0
    95 000011A9 488B3C25[C8000000]  <1>  mov rdi, %1
    96 000011B1 E831FBFFFF          <1>  call estaVacia
  1187 000011B6 4883F801                            cmp rax, 1
  1188 000011BA 7406                                je saltoInvalido
  1189                                  
  1190 000011BC B800000000                          mov rax, 0
  1191 000011C1 C3                                  ret
  1192                                  
  1193                                      saltoInvalido:
  1194 000011C2 B801000000                      mov rax, 1
  1195 000011C7 C3                              ret
  1196                                  
  1197 000011C8 C3                          ret
  1198                                  
  1199                                  ; --------------------------------------------------------------------------------------------
  1200                                  ; RUTINA PARA CAPTURAR UN SOLDADO
  1201                                  ; --------------------------------------------------------------------------------------------
  1202                                  
  1203                                  capturarSoldado:
  1204 000011C9 488B0425[98000000]          mov rax, qword[desplazCasOrig] ; Oficial a mover
  1205 000011D1 488B1C25[B0000000]          mov rbx, qword[desplazCasAMover] ; Soldado a capturar
  1206 000011D9 488B0C25[C8000000]          mov rcx, qword[desplazAux] ; Casilla destino del oficial (donde va a quedar)
  1207                                  
  1208 000011E1 C680[04000000]20            mov byte[tableroEnJuego+rax], ' '
  1209 000011E8 C683[04000000]20            mov byte[tableroEnJuego+rbx], ' '
  1210                                      
  1211 000011EF 8A1425[A2080000]            mov dl, byte[simboloOficiales]
  1212 000011F6 8891[04000000]              mov byte[tableroEnJuego+rcx], dl
  1213                                  
  1214 000011FC 48FF0425[62080000]          inc qword[cantSoldCapturados] ; Aumentamos el contador de capturas
  1215                                  
  1216 00001204 E876000000                  call verQueOficialEs ; Verificamos qué oficial es el que se quiere mover
  1217                                  
  1218 00001209 4883F801                    cmp rax, 1
  1219 0000120D 7446                        je movOfic1Captura
  1220                                  
  1221 0000120F 48FF0425[9A080000]          inc qword[cantCapturasOfic2]
  1222 00001217 E852010000                  call actualizarContadoresOfic2
  1223 0000121C E85C020000                  call refrescarCasActOficLuegoCaptura
  1224                                      mMov msgCapturaSoldado, msgCapturaSold, 38
    31 00001221 B926000000          <1>  mov rcx, %3
    32 00001226 488D3425[4C020000]  <1>  lea rsi, [%2]
    33 0000122E 488D3C25[FC010000]  <1>  lea rdi, [%1]
    34 00001236 F3A4                <1>  rep movsb
  1225 00001238 C3                          ret
  1226                                  
  1227                                      imprimirCapturaSoldado:
  1228                                          mPuts msgCapturaSoldado 
     2 00001239 48BF-               <1>  mov rdi, %1
     2 0000123B [FC01000000000000]  <1>
     3 00001243 4883EC08            <1>  sub rsp, 8
     4 00001247 E8(00000000)        <1>  call puts
     5 0000124C 4883C408            <1>  add rsp, 8
  1229 00001250 E97BEFFFFF                      jmp todoOkSold
  1230                                  
  1231                                      movOfic1Captura:
  1232 00001255 48FF0425[92080000]              inc qword[cantCapturasOfic1]
  1233 0000125D E85B000000                      call actualizarContadoresOfic1
  1234 00001262 E816020000                      call refrescarCasActOficLuegoCaptura
  1235                                          mMov msgCapturaSoldado, msgCapturaSold, 38
    31 00001267 B926000000          <1>  mov rcx, %3
    32 0000126C 488D3425[4C020000]  <1>  lea rsi, [%2]
    33 00001274 488D3C25[FC010000]  <1>  lea rdi, [%1]
    34 0000127C F3A4                <1>  rep movsb
  1236                                  
  1237 0000127E C3                          ret
  1238                                  
  1239                                  ; --------------------------------------------------------------------------------------------
  1240                                  ; RUTINA PARA VERIFICAR CUÁL OFICIAL SE ESTÁ MOVIENDO
  1241                                  ; --------------------------------------------------------------------------------------------
  1242                                  
  1243                                  verQueOficialEs:
  1244                                      ; Comenzamos verificando si el oficial 1 es el que se está moviendo
  1245                                      mCmp qword[fila], qword[casillaOfic1], 1 ; Fila de la casilla de origen vs. Fila del oficial 1
    38 0000127F B901000000          <1>  mov rcx, %3
    39 00001284 488D3425[88000000]  <1>  lea rsi, %1
    40 0000128C 488D3C25[72080000]  <1>  lea rdi, %2
    41 00001294 F3A6                <1>  repe cmpsb
  1246 00001296 751F                        jne esOfic2 ; Si las filas no son iguales, el oficial 1 no es el que se está moviendo
  1247                                      mCmp qword[columna], qword[casillaOfic1+8], 1 ; Columna de la casilla de origen vs. Columna del oficial 1
    38 00001298 B901000000          <1>  mov rcx, %3
    39 0000129D 488D3425[90000000]  <1>  lea rsi, %1
    40 000012A5 488D3C25[7A080000]  <1>  lea rdi, %2
    41 000012AD F3A6                <1>  repe cmpsb
  1248 000012AF 7506                        jne esOfic2 ; Si las columnas no son iguales, el oficial 1 no es el que se está moviendo
  1249                                  
  1250 000012B1 B801000000                  mov rax, 1 ; es el oficial 1
  1251 000012B6 C3                          ret
  1252                                  
  1253                                      esOfic2:
  1254 000012B7 B802000000                      mov rax, 2 ; es el oficial 2
  1255                                  
  1256 000012BC C3                          ret
  1257                                  
  1258                                  
  1259                                  ; --------------------------------------------------------------------------------------------
  1260                                  ; RUTINA PARA ACTUALIZAR LOS CONTADORES DE MOVIMIENTOS DE LOS OFICIALES
  1261                                  ; --------------------------------------------------------------------------------------------
  1262                                  
  1263                                  actualizarContadoresOfic1:
  1264 000012BD 48FF0425[C2070000]          inc qword[movimientosOfic1]
  1265 000012C5 488B0425[98000000]          mov rax, qword[desplazCasOrig]
  1266 000012CD 482B0425[B0000000]          sub rax, qword[desplazCasAMover] ; rax = desplazOrigen - desplazDestino
  1267 000012D5 4883F801                    cmp rax, 1
  1268 000012D9 742B                        je movOfic1Izq
  1269 000012DB 4883F8FF                    cmp rax, -1
  1270 000012DF 742E                        je movOfic1Der
  1271 000012E1 4883F80B                    cmp rax, 11
  1272 000012E5 7431                        je movOfic1Arriba
  1273 000012E7 4883F8F5                    cmp rax, -11
  1274 000012EB 7434                        je movOfic1Abajo
  1275 000012ED 4883F80A                    cmp rax, 10
  1276 000012F1 7437                        je movOfic1ArrDer
  1277 000012F3 4883F8F6                    cmp rax, -10
  1278 000012F7 7453                        je movOfic1AbjIzq
  1279 000012F9 4883F80C                    cmp rax, 12
  1280 000012FD 745E                        je movOfic1ArrIzq
  1281 000012FF 4883F8F4                    cmp rax, -12
  1282 00001303 7436                        je movOfic1AbjDer
  1283                                  
  1284 00001305 C3                          ret
  1285                                  
  1286                                      movOfic1Izq:
  1287 00001306 48FF0425[E2070000]              inc qword[movOfic1Izquierda]
  1288 0000130E C3                              ret
  1289                                      movOfic1Der:
  1290 0000130F 48FF0425[DA070000]              inc qword[movOfic1Derecha]
  1291 00001317 C3                              ret
  1292                                      movOfic1Arriba:
  1293 00001318 48FF0425[D2070000]              inc qword[movOfic1Adelante]
  1294 00001320 C3                              ret
  1295                                      movOfic1Abajo:
  1296 00001321 48FF0425[EA070000]              inc qword[movOfic1Atras]
  1297 00001329 C3                              ret
  1298                                      movOfic1ArrDer:
  1299 0000132A 48FF0425[F2070000]              inc qword[movOfic1Diagonal]
  1300 00001332 48FF0425[FA070000]              inc qword[movOfic1DiagArribaDer]
  1301 0000133A C3                              ret
  1302                                      movOfic1AbjDer:
  1303 0000133B 48FF0425[F2070000]              inc qword[movOfic1Diagonal]
  1304 00001343 48FF0425[0A080000]              inc qword[movOfic1DiagAbajoDer]
  1305 0000134B C3                              ret
  1306                                      movOfic1AbjIzq:
  1307 0000134C 48FF0425[F2070000]              inc qword[movOfic1Diagonal]
  1308 00001354 48FF0425[12080000]              inc qword[movOfic1DiagAbajoIzq]
  1309 0000135C C3                              ret
  1310                                      movOfic1ArrIzq:
  1311 0000135D 48FF0425[F2070000]              inc qword[movOfic1Diagonal]
  1312 00001365 48FF0425[02080000]              inc qword[movOfic1DiagArribaIzq]
  1313 0000136D C3                              ret
  1314                                  
  1315                                  actualizarContadoresOfic2:
  1316 0000136E 48FF0425[CA070000]          inc qword[movimientosOfic2]
  1317 00001376 488B0425[98000000]          mov rax, qword[desplazCasOrig]
  1318 0000137E 482B0425[B0000000]          sub rax, qword[desplazCasAMover] ; rax = desplazOrigen - desplazDestino
  1319 00001386 4883F801                    cmp rax, 1
  1320 0000138A 742B                        je movOfic2Izq
  1321 0000138C 4883F8FF                    cmp rax, -1
  1322 00001390 742E                        je movOfic2Der
  1323 00001392 4883F80B                    cmp rax, 11
  1324 00001396 7431                        je movOfic2Arriba
  1325 00001398 4883F8F5                    cmp rax, -11
  1326 0000139C 7434                        je movOfic2Abajo
  1327 0000139E 4883F80A                    cmp rax, 10
  1328 000013A2 7437                        je movOfic2ArrDer
  1329 000013A4 4883F8F6                    cmp rax, -10
  1330 000013A8 7453                        je movOfic2AbjIzq
  1331 000013AA 4883F80C                    cmp rax, 12
  1332 000013AE 745E                        je movOfic2ArrIzq
  1333 000013B0 4883F8F4                    cmp rax, -12
  1334 000013B4 7436                        je movOfic2AbjDer
  1335                                  
  1336 000013B6 C3                          ret
  1337                                  
  1338                                      movOfic2Izq:
  1339 000013B7 48FF0425[2A080000]              inc qword[movOfic2Izquierda]
  1340 000013BF C3                              ret
  1341                                      movOfic2Der:
  1342 000013C0 48FF0425[22080000]              inc qword[movOfic2Derecha]
  1343 000013C8 C3                              ret
  1344                                      movOfic2Arriba:
  1345 000013C9 48FF0425[1A080000]              inc qword[movOfic2Adelante]
  1346 000013D1 C3                              ret
  1347                                      movOfic2Abajo:
  1348 000013D2 48FF0425[32080000]              inc qword[movOfic2Atras]
  1349 000013DA C3                              ret
  1350                                      movOfic2ArrDer:
  1351 000013DB 48FF0425[3A080000]              inc qword[movOfic2Diagonal]
  1352 000013E3 48FF0425[42080000]              inc qword[movOfic2DiagArribaDer]
  1353 000013EB C3                              ret
  1354                                      movOfic2AbjDer:
  1355 000013EC 48FF0425[3A080000]              inc qword[movOfic2Diagonal]
  1356 000013F4 48FF0425[52080000]              inc qword[movOfic2DiagAbajoDer]
  1357 000013FC C3                              ret
  1358                                      movOfic2AbjIzq:
  1359 000013FD 48FF0425[3A080000]              inc qword[movOfic2Diagonal]
  1360 00001405 48FF0425[5A080000]              inc qword[movOfic2DiagAbajoIzq]
  1361 0000140D C3                              ret
  1362                                      movOfic2ArrIzq:
  1363 0000140E 48FF0425[3A080000]              inc qword[movOfic2Diagonal]
  1364 00001416 48FF0425[4A080000]              inc qword[movOfic2DiagArribaIzq]
  1365 0000141E C3                              ret
  1366                                  
  1367                                  ; --------------------------------------------------------------------------------------------
  1368                                  ; RUTINA PARA REFRESCAR LA CASILLA ACTUAL DE LOS OFICIALES
  1369                                  ; --------------------------------------------------------------------------------------------
  1370                                  
  1371                                  refrescarCasActOfic1:
  1372                                      mMov casillaOfic1, filaAMover, 1
    31 0000141F B901000000          <1>  mov rcx, %3
    32 00001424 488D3425[A0000000]  <1>  lea rsi, [%2]
    33 0000142C 488D3C25[72080000]  <1>  lea rdi, [%1]
    34 00001434 F3A4                <1>  rep movsb
  1373                                      mMov casillaOfic1+8, columnaAMover, 1
    31 00001436 B901000000          <1>  mov rcx, %3
    32 0000143B 488D3425[A8000000]  <1>  lea rsi, [%2]
    33 00001443 488D3C25[7A080000]  <1>  lea rdi, [%1]
    34 0000144B F3A4                <1>  rep movsb
  1374 0000144D C3                          ret
  1375                                  
  1376                                  refrescarCasActOfic2:
  1377                                      mMov casillaOfic2, filaAMover, 1
    31 0000144E B901000000          <1>  mov rcx, %3
    32 00001453 488D3425[A0000000]  <1>  lea rsi, [%2]
    33 0000145B 488D3C25[82080000]  <1>  lea rdi, [%1]
    34 00001463 F3A4                <1>  rep movsb
  1378                                      mMov casillaOfic2+8, columnaAMover, 1
    31 00001465 B901000000          <1>  mov rcx, %3
    32 0000146A 488D3425[A8000000]  <1>  lea rsi, [%2]
    33 00001472 488D3C25[8A080000]  <1>  lea rdi, [%1]
    34 0000147A F3A4                <1>  rep movsb
  1379 0000147C C3                          ret    
  1380                                  
  1381                                  refrescarCasActOficLuegoCaptura:
  1382 0000147D 488B0425[B0000000]          mov rax, qword[desplazCasAMover]
  1383 00001485 488B1C25[C8000000]          mov rbx, qword[desplazAux]
  1384 0000148D 4829D8                      sub rax, rbx ; rax = desplazCasAMover - desplazAux
  1385                                  
  1386 00001490 4883F801                    cmp rax, 1
  1387 00001494 742A                        je saltoIzq
  1388 00001496 4883F8FF                    cmp rax, -1
  1389 0000149A 742E                        je saltoDer
  1390 0000149C 4883F80B                    cmp rax, 11
  1391 000014A0 7432                        je saltoArriba
  1392 000014A2 4883F8F5                    cmp rax, -11
  1393 000014A6 7436                        je saltoAbajo
  1394 000014A8 4883F80A                    cmp rax, 10
  1395 000014AC 743A                        je saltoArrDer
  1396 000014AE 4883F8F6                    cmp rax, -10
  1397 000014B2 7446                        je saltoAbjIzq
  1398 000014B4 4883F80C                    cmp rax, 12
  1399 000014B8 7452                        je saltoArrIzq
  1400 000014BA 4883F8F4                    cmp rax, -12
  1401 000014BE 745E                        je saltoAbjDer
  1402                                  
  1403                                      saltoIzq:
  1404 000014C0 48FF0C25[A8000000]              dec qword[columnaAMover]
  1405 000014C8 EB64                            jmp finRefrescarCasActOfic
  1406                                      saltoDer:
  1407 000014CA 48FF0425[A8000000]              inc qword[columnaAMover]
  1408 000014D2 EB5A                            jmp finRefrescarCasActOfic
  1409                                      saltoArriba:
  1410 000014D4 48FF0C25[A0000000]              dec qword[filaAMover]
  1411 000014DC EB50                            jmp finRefrescarCasActOfic
  1412                                      saltoAbajo:
  1413 000014DE 48FF0425[A0000000]              inc qword[filaAMover]
  1414 000014E6 EB46                            jmp finRefrescarCasActOfic
  1415                                      saltoArrDer:
  1416 000014E8 48FF0C25[A0000000]              dec qword[filaAMover]
  1417 000014F0 48FF0425[A8000000]              inc qword[columnaAMover]
  1418 000014F8 EB34                            jmp finRefrescarCasActOfic
  1419                                      saltoAbjIzq:
  1420 000014FA 48FF0425[A0000000]              inc qword[filaAMover]
  1421 00001502 48FF0C25[A8000000]              dec qword[columnaAMover]
  1422 0000150A EB22                            jmp finRefrescarCasActOfic
  1423                                      saltoArrIzq:
  1424 0000150C 48FF0C25[A0000000]              dec qword[filaAMover]
  1425 00001514 48FF0C25[A8000000]              dec qword[columnaAMover]
  1426 0000151C EB10                            jmp finRefrescarCasActOfic
  1427                                      saltoAbjDer:
  1428 0000151E 48FF0425[A0000000]              inc qword[filaAMover]
  1429 00001526 48FF0425[A8000000]              inc qword[columnaAMover]
  1430                                  
  1431                                      finRefrescarCasActOfic:
  1432 0000152E E84CFDFFFF                      call verQueOficialEs
  1433                                  
  1434 00001533 4883F801                        cmp rax, 1
  1435 00001537 7406                            je actualizarOfic1
  1436                                  
  1437 00001539 E810FFFFFF                      call refrescarCasActOfic2
  1438 0000153E C3                              ret
  1439                                  
  1440                                          actualizarOfic1:
  1441 0000153F E8DBFEFFFF                          call refrescarCasActOfic1
  1442                                  
  1443 00001544 C3                          ret
  1444                                  
  1445                                  
  1446                                  
  1447                                  ; --------------------------------------------------------------------------------------------
  1448                                  ; RUTINA PARA VERIFICAR SI UN OFICIAL PODÍA CAPTURAR UN SOLDADO Y NO LO HIZO
  1449                                  ; --------------------------------------------------------------------------------------------
  1450                                  
  1451                                  podiaCapturarSoldado:
  1452                                      mMov desplazAux, desplazAux2, 1
    31 00001545 B901000000          <1>  mov rcx, %3
    32 0000154A 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001552 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 0000155A F3A4                <1>  rep movsb
  1453                                  
  1454                                      ; Casilla arriba-izquierda
  1455 0000155C 48832C25[C8000000]-         sub qword[desplazAux], 12
  1455 00001564 0C                 
  1456                                      mHaySoldado qword[desplazAux]
   100 00001565 B800000000          <1>  mov rax, 0
   101 0000156A 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001572 E8C7F9FFFF          <1>  call haySoldado
  1457 00001577 4883F800                    cmp rax, 0
  1458 0000157B 7519                        jne verCasArriba
  1459                                  
  1460                                      mPuedeCapturar 12, 1 ; restar 12 a desplazAux
   106 0000157D BF0C000000          <1>  mov rdi, %1
   107 00001582 BE01000000          <1>  mov rsi, %2
   108 00001587 E845020000          <1>  call podiaComerPieza
  1461 0000158C 4883F800                    cmp rax, 0
  1462 00001590 0F8435020000                je podiaCapturar
  1463                                  
  1464                                      ; Casilla arriba
  1465                                      verCasArriba:
  1466                                          mMov desplazAux, desplazAux2, 1
    31 00001596 B901000000          <1>  mov rcx, %3
    32 0000159B 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 000015A3 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 000015AB F3A4                <1>  rep movsb
  1467 000015AD 48832C25[C8000000]-             sub qword[desplazAux], 11
  1467 000015B5 0B                 
  1468                                          mHaySoldado qword[desplazAux]
   100 000015B6 B800000000          <1>  mov rax, 0
   101 000015BB 488B3C25[C8000000]  <1>  mov rdi, %1
   102 000015C3 E876F9FFFF          <1>  call haySoldado
  1469 000015C8 4883F800                        cmp rax, 0
  1470 000015CC 7519                            jne verCasArribaDer
  1471                                  
  1472                                          mPuedeCapturar 11, 1 ; restar 11 a desplazAux
   106 000015CE BF0B000000          <1>  mov rdi, %1
   107 000015D3 BE01000000          <1>  mov rsi, %2
   108 000015D8 E8F4010000          <1>  call podiaComerPieza
  1473 000015DD 4883F800                        cmp rax, 0
  1474 000015E1 0F84E4010000                    je podiaCapturar
  1475                                  
  1476                                      ; Casilla arriba-derecha
  1477                                      verCasArribaDer:
  1478                                          mMov desplazAux, desplazAux2, 1
    31 000015E7 B901000000          <1>  mov rcx, %3
    32 000015EC 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 000015F4 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 000015FC F3A4                <1>  rep movsb
  1479 000015FE 48832C25[C8000000]-             sub qword[desplazAux], 10
  1479 00001606 0A                 
  1480                                          mHaySoldado qword[desplazAux]
   100 00001607 B800000000          <1>  mov rax, 0
   101 0000160C 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001614 E825F9FFFF          <1>  call haySoldado
  1481 00001619 4883F800                        cmp rax, 0
  1482 0000161D 7519                            jne verCasIzq
  1483                                          
  1484                                          mPuedeCapturar 10, 1 ; restar 10 a desplazAux
   106 0000161F BF0A000000          <1>  mov rdi, %1
   107 00001624 BE01000000          <1>  mov rsi, %2
   108 00001629 E8A3010000          <1>  call podiaComerPieza
  1485 0000162E 4883F800                        cmp rax, 0
  1486 00001632 0F8493010000                    je podiaCapturar
  1487                                  
  1488                                      ; Casilla izquierda
  1489                                      verCasIzq:
  1490                                          mMov desplazAux, desplazAux2, 1
    31 00001638 B901000000          <1>  mov rcx, %3
    32 0000163D 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001645 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 0000164D F3A4                <1>  rep movsb
  1491 0000164F 48832C25[C8000000]-             sub qword[desplazAux], 1
  1491 00001657 01                 
  1492                                          mHaySoldado qword[desplazAux]
   100 00001658 B800000000          <1>  mov rax, 0
   101 0000165D 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001665 E8D4F8FFFF          <1>  call haySoldado
  1493 0000166A 4883F800                        cmp rax, 0
  1494 0000166E 7519                            jne verCasDer
  1495                                          
  1496                                          mPuedeCapturar 1, 1 ; restar 1 a desplazAux
   106 00001670 BF01000000          <1>  mov rdi, %1
   107 00001675 BE01000000          <1>  mov rsi, %2
   108 0000167A E852010000          <1>  call podiaComerPieza
  1497 0000167F 4883F800                        cmp rax, 0
  1498 00001683 0F8442010000                    je podiaCapturar
  1499                                  
  1500                                      ; Casilla derecha
  1501                                      verCasDer:
  1502                                          mMov desplazAux, desplazAux2, 1
    31 00001689 B901000000          <1>  mov rcx, %3
    32 0000168E 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001696 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 0000169E F3A4                <1>  rep movsb
  1503 000016A0 48830425[C8000000]-             add qword[desplazAux], 1
  1503 000016A8 01                 
  1504                                          mHaySoldado qword[desplazAux]
   100 000016A9 B800000000          <1>  mov rax, 0
   101 000016AE 488B3C25[C8000000]  <1>  mov rdi, %1
   102 000016B6 E883F8FFFF          <1>  call haySoldado
  1505 000016BB 4883F800                        cmp rax, 0
  1506 000016BF 7519                            jne verCasAbajoIzq
  1507                                          
  1508                                          mPuedeCapturar 1, 0 ; sumar 1 a desplazAux
   106 000016C1 BF01000000          <1>  mov rdi, %1
   107 000016C6 BE00000000          <1>  mov rsi, %2
   108 000016CB E801010000          <1>  call podiaComerPieza
  1509 000016D0 4883F800                        cmp rax, 0
  1510 000016D4 0F84F1000000                    je podiaCapturar
  1511                                  
  1512                                      ; Casilla abajo-izquierda
  1513                                      verCasAbajoIzq:
  1514                                          mMov desplazAux, desplazAux2, 1
    31 000016DA B901000000          <1>  mov rcx, %3
    32 000016DF 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 000016E7 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 000016EF F3A4                <1>  rep movsb
  1515 000016F1 48830425[C8000000]-             add qword[desplazAux], 10
  1515 000016F9 0A                 
  1516                                          mHaySoldado qword[desplazAux]
   100 000016FA B800000000          <1>  mov rax, 0
   101 000016FF 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001707 E832F8FFFF          <1>  call haySoldado
  1517 0000170C 4883F800                        cmp rax, 0
  1518 00001710 7519                            jne verCasAbajo
  1519                                          
  1520                                          mPuedeCapturar 10, 0 ; sumar 10 a desplazAux
   106 00001712 BF0A000000          <1>  mov rdi, %1
   107 00001717 BE00000000          <1>  mov rsi, %2
   108 0000171C E8B0000000          <1>  call podiaComerPieza
  1521 00001721 4883F800                        cmp rax, 0
  1522 00001725 0F84A0000000                    je podiaCapturar
  1523                                  
  1524                                      ; Casilla abajo
  1525                                      verCasAbajo:
  1526                                          mMov desplazAux, desplazAux2, 1
    31 0000172B B901000000          <1>  mov rcx, %3
    32 00001730 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001738 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001740 F3A4                <1>  rep movsb
  1527 00001742 48830425[C8000000]-             add qword[desplazAux], 11
  1527 0000174A 0B                 
  1528                                          mHaySoldado qword[desplazAux]
   100 0000174B B800000000          <1>  mov rax, 0
   101 00001750 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001758 E8E1F7FFFF          <1>  call haySoldado
  1529 0000175D 4883F800                        cmp rax, 0
  1530 00001761 7515                            jne verCasAbajoDer
  1531                                          
  1532                                          mPuedeCapturar 11, 0 ; sumar 11 a desplazAux
   106 00001763 BF0B000000          <1>  mov rdi, %1
   107 00001768 BE00000000          <1>  mov rsi, %2
   108 0000176D E85F000000          <1>  call podiaComerPieza
  1533 00001772 4883F800                        cmp rax, 0
  1534 00001776 7453                            je podiaCapturar
  1535                                  
  1536                                      ; Casilla abajo-derecha
  1537                                      verCasAbajoDer:
  1538                                          mMov desplazAux, desplazAux2, 1
    31 00001778 B901000000          <1>  mov rcx, %3
    32 0000177D 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001785 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 0000178D F3A4                <1>  rep movsb
  1539 0000178F 48830425[C8000000]-             add qword[desplazAux], 12
  1539 00001797 0C                 
  1540                                          mHaySoldado qword[desplazAux]
   100 00001798 B800000000          <1>  mov rax, 0
   101 0000179D 488B3C25[C8000000]  <1>  mov rdi, %1
   102 000017A5 E894F7FFFF          <1>  call haySoldado
  1541 000017AA 4883F800                        cmp rax, 0
  1542 000017AE 7515                            jne okNoPodiaCapturar
  1543                                          
  1544                                          mPuedeCapturar 12, 0 ; sumar 12 a desplazAux
   106 000017B0 BF0C000000          <1>  mov rdi, %1
   107 000017B5 BE00000000          <1>  mov rsi, %2
   108 000017BA E812000000          <1>  call podiaComerPieza
  1545 000017BF 4883F800                        cmp rax, 0
  1546 000017C3 7406                            je podiaCapturar
  1547                                      
  1548                                      okNoPodiaCapturar:
  1549 000017C5 B801000000                      mov rax, 1
  1550 000017CA C3                              ret
  1551                                      
  1552                                      podiaCapturar:
  1553 000017CB B800000000                      mov rax, 0
  1554                                  
  1555 000017D0 C3                          ret
  1556                                  
  1557                                  podiaComerPieza:
  1558 000017D1 4883FE00                    cmp rsi, 0 ; 0 para sumar, 1 para restar
  1559 000017D5 740A                        je sumarDesplaz 
  1560                                  
  1561                                      ; Si llegamos acá, debemos restar
  1562 000017D7 48293C25[C8000000]          sub qword[desplazAux], rdi
  1563 000017DF EB08                        jmp verSiEspacioEstaLibre
  1564                                  
  1565                                      sumarDesplaz:
  1566 000017E1 48013C25[C8000000]              add qword[desplazAux], rdi
  1567                                  
  1568                                      verSiEspacioEstaLibre:
  1569                                          mEstaVacia qword[desplazAux]
    94 000017E9 B800000000          <1>  mov rax, 0
    95 000017EE 488B3C25[C8000000]  <1>  mov rdi, %1
    96 000017F6 E8ECF4FFFF          <1>  call estaVacia
  1570 000017FB 4883F800                        cmp rax, 0
  1571 000017FF 7406                            je okComerPieza
  1572                                  
  1573 00001801 B801000000                      mov rax, 1
  1574 00001806 C3                              ret
  1575                                  
  1576                                      okComerPieza:
  1577 00001807 B800000000                      mov rax, 0
  1578 0000180C C3                              ret
  1579                                  
  1580                                  ; --------------------------------------------------------------------------------------------
  1581                                  ; RUTINA PARA QUITAR AL OFICIAL QUE SE DESPREOCUPÓ DE CAPTURAR SOLDADOS
  1582                                  ; --------------------------------------------------------------------------------------------
  1583                                  
  1584                                  desentenderOficial:
  1585 0000180D 488B1C25[C8000000]          mov rbx, qword[desplazAux]
  1586 00001815 BA20000000                  mov rdx, ' '
  1587 0000181A 8893[04000000]              mov byte[tableroEnJuego+rbx], dl
  1588                                  
  1589 00001820 E85AFAFFFF                  call verQueOficialEs ; Verificamos qué oficial es el que se quiere mover
  1590                                  
  1591 00001825 4883F801                    cmp rax, 1
  1592 00001829 741A                        je desentenderOfic1
  1593                                  
  1594                                      desentenderOfic2:
  1595 0000182B 48C70425[82080000]-             mov qword[casillaOfic2], 0
  1595 00001833 00000000           
  1596 00001837 48C70425[8A080000]-             mov qword[casillaOfic2+8], 0
  1596 0000183F 00000000           
  1597 00001843 EB18                            jmp agregarOficDesentendido
  1598                                  
  1599                                      desentenderOfic1:
  1600 00001845 48C70425[72080000]-             mov qword[casillaOfic1], 0
  1600 0000184D 00000000           
  1601 00001851 48C70425[7A080000]-             mov qword[casillaOfic1+8], 0
  1601 00001859 00000000           
  1602                                  
  1603                                      agregarOficDesentendido:
  1604 0000185D 48FF0425[6A080000]              inc qword[cantOficInvalidados]
  1605                                      
  1606 00001865 C3                          ret
  1607                                      
  1608                                  ; --------------------------------------------------------------------------------------------
  1609                                  ; RUTINA PARA VERIFICAR SI EL OTRO OFICIAL PODÍA CAPTURAR UN SOLDADO Y NO LO HIZO
  1610                                  ; --------------------------------------------------------------------------------------------
  1611                                  
  1612                                  podiaCapturarSoldadoOtroOficial:
  1613 00001866 E814FAFFFF                  call verQueOficialEs ; Verificamos qué oficial es el que se quiere mover
  1614 0000186B 4883F801                    cmp rax, 1
  1615 0000186F 742A                        je verificarOfic2
  1616                                  
  1617                                      verificarOfic1:
  1618                                          mCalcDesplaz qword[casillaOfic1], qword[casillaOfic1+8], qword[desplazAux2]
    87 00001871 488B3C25[72080000]  <1>  mov rdi, %1
    88 00001879 488B3425[7A080000]  <1>  mov rsi, %2
    89 00001881 E876F4FFFF          <1>  call calcularDesplazamiento
    90 00001886 48890425[D0000000]  <1>  mov %3, rax
  1619 0000188E E8B2FCFFFF                      call podiaCapturarSoldado
  1620 00001893 4883F800                        cmp rax, 0
  1621 00001897 742C                            je okPodiaComerElOtro
  1622 00001899 EB30                            jmp noPodiaComerElOtro
  1623                                      
  1624                                      verificarOfic2:
  1625                                          mCalcDesplaz qword[casillaOfic2], qword[casillaOfic2+8], qword[desplazAux2]
    87 0000189B 488B3C25[82080000]  <1>  mov rdi, %1
    88 000018A3 488B3425[8A080000]  <1>  mov rsi, %2
    89 000018AB E84CF4FFFF          <1>  call calcularDesplazamiento
    90 000018B0 48890425[D0000000]  <1>  mov %3, rax
  1626 000018B8 E888FCFFFF                      call podiaCapturarSoldado
  1627 000018BD 4883F800                        cmp rax, 0
  1628 000018C1 7402                            je okPodiaComerElOtro
  1629 000018C3 EB06                            jmp noPodiaComerElOtro
  1630                                  
  1631                                      okPodiaComerElOtro:
  1632 000018C5 B800000000                      mov rax, 0
  1633 000018CA C3                              ret
  1634                                  
  1635                                      noPodiaComerElOtro:
  1636 000018CB B801000000                      mov rax, 1
  1637                                  
  1638 000018D0 C3                          ret
  1639                                  
  1640                                  ; --------------------------------------------------------------------------------------------
  1641                                  ; RUTINA PARA INVALIDAR AL OTRO OFICIAL QUE NO SE MOVIÓ (el cual podía capturar un soldado)
  1642                                  ; --------------------------------------------------------------------------------------------
  1643                                  
  1644                                  desentenderOtroOficial:
  1645 000018D1 E8A9F9FFFF                  call verQueOficialEs ; Verificamos qué oficial es el que se quiere mover
  1646                                  
  1647 000018D6 4883F801                    cmp rax, 1
  1648 000018DA 7423                        je otroEsOfic2
  1649                                  
  1650                                      otroEsOfic1:
  1651                                          mCalcDesplaz qword[casillaOfic1], qword[casillaOfic1+8], qword[desplazAux]
    87 000018DC 488B3C25[72080000]  <1>  mov rdi, %1
    88 000018E4 488B3425[7A080000]  <1>  mov rsi, %2
    89 000018EC E80BF4FFFF          <1>  call calcularDesplazamiento
    90 000018F1 48890425[C8000000]  <1>  mov %3, rax
  1652 000018F9 E80FFFFFFF                      call desentenderOficial
  1653 000018FE C3                              ret
  1654                                  
  1655                                      otroEsOfic2:
  1656                                          mCalcDesplaz qword[casillaOfic2], qword[casillaOfic2+8], qword[desplazAux]
    87 000018FF 488B3C25[82080000]  <1>  mov rdi, %1
    88 00001907 488B3425[8A080000]  <1>  mov rsi, %2
    89 0000190F E8E8F3FFFF          <1>  call calcularDesplazamiento
    90 00001914 48890425[C8000000]  <1>  mov %3, rax
  1657 0000191C E8ECFEFFFF                      call desentenderOficial
  1658                                      
  1659 00001921 C3                          ret
  1660                                  
  1661                                  ; --------------------------------------------------------------------------------------------
  1662                                  ; RUTINA PARA VER SI EL MOVIMIENTO DE UN OFICIAL RESULTA EN EL FIN DEL JUEGO
  1663                                  ; --------------------------------------------------------------------------------------------
  1664                                  
  1665                                  verificarFinJuegoOficiales:
  1666                                      ; Verificamos si ambos oficiales han sido invalidados
  1667 00001922 48833C25[6A080000]-         cmp qword[cantOficInvalidados], 2
  1667 0000192A 02                 
  1668 0000192B 7411                        je finInvalidados
  1669                                  
  1670                                      ; Verificamos que los oficiales hayan capturado necesarios soldados para ganar
  1671 0000192D 48833C25[62080000]-         cmp qword[cantSoldCapturados], 16
  1671 00001935 10                 
  1672 00001936 7413                        je finSoldCapturados
  1673                                  
  1674 00001938 B801000000                  mov rax, 1
  1675 0000193D C3                          ret
  1676                                  
  1677                                      finInvalidados:
  1678 0000193E C70425[B4040000]6F-             mov dword[varRazonFin], "oInv"
  1678 00001946 496E76             
  1679 00001949 EB0B                            jmp hayFinJuegoOfic
  1680                                  
  1681                                      finSoldCapturados:
  1682 0000194B C70425[B4040000]73-             mov dword[varRazonFin], "sCap"
  1682 00001953 436170             
  1683                                  
  1684                                      hayFinJuegoOfic:
  1685 00001956 B800000000                      mov rax, 0
  1686 0000195B C3                              ret
  1687                                  
  1688                                  ; --------------------------------------------------------------------------------------------
  1689                                  ; RUTINA PARA VERIFICAR SI EL MOVIMIENTO DE UN SOLDADO RESULTA EN EL FIN DEL JUEGO
  1690                                  ; --------------------------------------------------------------------------------------------
  1691                                  
  1692                                  verificarFinJuegoSoldados:
  1693 0000195C E835000000                  call soldadosOcupanFortaleza
  1694 00001961 4883F800                    cmp rax, 0
  1695 00001965 7411                        je finOcupFortaleza
  1696                                  
  1697 00001967 E827010000                  call oficialesRodeados
  1698 0000196C 4883F800                    cmp rax, 0
  1699 00001970 7413                        je finOficRodeados
  1700                                  
  1701 00001972 B801000000                  mov rax, 1
  1702 00001977 C3                          ret
  1703                                  
  1704                                      finOcupFortaleza:
  1705 00001978 C70425[B4040000]73-             mov dword[varRazonFin], "sOcu"
  1705 00001980 4F6375             
  1706 00001983 EB0B                            jmp hayFinJuegoSold
  1707                                  
  1708                                      finOficRodeados:
  1709 00001985 C70425[B4040000]6F-             mov dword[varRazonFin], "oRod"
  1709 0000198D 526F64             
  1710                                  
  1711                                      hayFinJuegoSold:
  1712 00001990 B800000000                      mov rax, 0
  1713 00001995 C3                              ret
  1714                                  
  1715                                  ; --------------------------------------------------------------------------------------------
  1716                                  ; RUTINA PARA VERIFICAR SI LOS SOLDADOS OCUPAN LA FORTALEZA
  1717                                  ; --------------------------------------------------------------------------------------------
  1718                                  
  1719                                  soldadosOcupanFortaleza:
  1720                                      mCmp byte[tableroEnJuego+70], [simboloSoldados], 1 ; Fortaleza 1-1
    38 00001996 B901000000          <1>  mov rcx, %3
    39 0000199B 488D3425[4A000000]  <1>  lea rsi, %1
    40 000019A3 488D3C25[A4080000]  <1>  lea rdi, %2
    41 000019AB F3A6                <1>  repe cmpsb
  1721 000019AD 0F85DA000000                jne noOcupaFortaleza
  1722                                      mCmp byte[tableroEnJuego+71], [simboloSoldados], 1 ; Fortaleza 1-2
    38 000019B3 B901000000          <1>  mov rcx, %3
    39 000019B8 488D3425[4B000000]  <1>  lea rsi, %1
    40 000019C0 488D3C25[A4080000]  <1>  lea rdi, %2
    41 000019C8 F3A6                <1>  repe cmpsb
  1723 000019CA 0F85BD000000                jne noOcupaFortaleza
  1724                                      mCmp byte[tableroEnJuego+72], [simboloSoldados], 1 ; Fortaleza 1-3
    38 000019D0 B901000000          <1>  mov rcx, %3
    39 000019D5 488D3425[4C000000]  <1>  lea rsi, %1
    40 000019DD 488D3C25[A4080000]  <1>  lea rdi, %2
    41 000019E5 F3A6                <1>  repe cmpsb
  1725 000019E7 0F85A0000000                jne noOcupaFortaleza
  1726                                      mCmp byte[tableroEnJuego+81], [simboloSoldados], 1 ; Fortaleza 2-1
    38 000019ED B901000000          <1>  mov rcx, %3
    39 000019F2 488D3425[55000000]  <1>  lea rsi, %1
    40 000019FA 488D3C25[A4080000]  <1>  lea rdi, %2
    41 00001A02 F3A6                <1>  repe cmpsb
  1727 00001A04 0F8583000000                jne noOcupaFortaleza
  1728                                      mCmp byte[tableroEnJuego+82], [simboloSoldados], 1 ; Fortaleza 2-2
    38 00001A0A B901000000          <1>  mov rcx, %3
    39 00001A0F 488D3425[56000000]  <1>  lea rsi, %1
    40 00001A17 488D3C25[A4080000]  <1>  lea rdi, %2
    41 00001A1F F3A6                <1>  repe cmpsb
  1729 00001A21 756A                        jne noOcupaFortaleza
  1730                                      mCmp byte[tableroEnJuego+83], [simboloSoldados], 1 ; Fortaleza 2-3
    38 00001A23 B901000000          <1>  mov rcx, %3
    39 00001A28 488D3425[57000000]  <1>  lea rsi, %1
    40 00001A30 488D3C25[A4080000]  <1>  lea rdi, %2
    41 00001A38 F3A6                <1>  repe cmpsb
  1731 00001A3A 7551                        jne noOcupaFortaleza
  1732                                      mCmp byte[tableroEnJuego+92], [simboloSoldados], 1 ; Fortaleza 3-1
    38 00001A3C B901000000          <1>  mov rcx, %3
    39 00001A41 488D3425[60000000]  <1>  lea rsi, %1
    40 00001A49 488D3C25[A4080000]  <1>  lea rdi, %2
    41 00001A51 F3A6                <1>  repe cmpsb
  1733 00001A53 7538                        jne noOcupaFortaleza
  1734                                      mCmp byte[tableroEnJuego+93], [simboloSoldados], 1 ; Fortaleza 3-2
    38 00001A55 B901000000          <1>  mov rcx, %3
    39 00001A5A 488D3425[61000000]  <1>  lea rsi, %1
    40 00001A62 488D3C25[A4080000]  <1>  lea rdi, %2
    41 00001A6A F3A6                <1>  repe cmpsb
  1735 00001A6C 751F                        jne noOcupaFortaleza
  1736                                      mCmp byte[tableroEnJuego+94], [simboloSoldados], 1 ; Fortaleza 3-3
    38 00001A6E B901000000          <1>  mov rcx, %3
    39 00001A73 488D3425[62000000]  <1>  lea rsi, %1
    40 00001A7B 488D3C25[A4080000]  <1>  lea rdi, %2
    41 00001A83 F3A6                <1>  repe cmpsb
  1737 00001A85 7506                        jne noOcupaFortaleza
  1738                                  
  1739 00001A87 B800000000                  mov rax, 0
  1740 00001A8C C3                          ret
  1741                                  
  1742                                      noOcupaFortaleza:
  1743 00001A8D B801000000                      mov rax, 1
  1744                                  
  1745 00001A92 C3                          ret
  1746                                  
  1747                                  ; --------------------------------------------------------------------------------------------
  1748                                  ; RUTINA PARA VERIFICAR SI LOS OFICIALES ESTÁN RODEADOS POR SOLDADOS
  1749                                  ; --------------------------------------------------------------------------------------------
  1750                                  
  1751                                  oficialesRodeados:
  1752 00001A93 E8F8030000                  call ofic1Desentendido
  1753 00001A98 4883F800                    cmp rax, 0
  1754 00001A9C 740B                        je rodeanAOfic2
  1755 00001A9E E828000000                  call verSiOfic1Rodeado
  1756 00001AA3 4883F800                    cmp rax, 0
  1757 00001AA7 751C                        jne tienenSalida
  1758                                  
  1759                                      rodeanAOfic2:
  1760 00001AA9 E8F9030000                      call ofic2Desentendido
  1761 00001AAE 4883F800                        cmp rax, 0
  1762 00001AB2 740B                            je noHaySalida
  1763 00001AB4 E84C000000                      call verSiOfic2Rodeado
  1764 00001AB9 4883F800                        cmp rax, 0
  1765 00001ABD 7506                            jne tienenSalida
  1766                                  
  1767                                      noHaySalida:
  1768 00001ABF B800000000                      mov rax, 0
  1769 00001AC4 C3                              ret
  1770                                  
  1771                                      tienenSalida:
  1772 00001AC5 B801000000                      mov rax, 1
  1773                                  
  1774 00001ACA C3                          ret
  1775                                  
  1776                                  verSiOfic1Rodeado:
  1777                                      mCalcDesplaz qword[casillaOfic1], qword[casillaOfic1+8], qword[desplazAux]
    87 00001ACB 488B3C25[72080000]  <1>  mov rdi, %1
    88 00001AD3 488B3425[7A080000]  <1>  mov rsi, %2
    89 00001ADB E81CF2FFFF          <1>  call calcularDesplazamiento
    90 00001AE0 48890425[C8000000]  <1>  mov %3, rax
  1778                                      mMov desplazAux2, desplazAux, 1
    31 00001AE8 B901000000          <1>  mov rcx, %3
    32 00001AED 488D3425[C8000000]  <1>  lea rsi, [%2]
    33 00001AF5 488D3C25[D0000000]  <1>  lea rdi, [%1]
    34 00001AFD F3A4                <1>  rep movsb
  1779 00001AFF E83B000000                  call verSiOficialRodeado
  1780 00001B04 C3                          ret
  1781                                  
  1782                                  verSiOfic2Rodeado:
  1783                                      mCalcDesplaz qword[casillaOfic2], qword[casillaOfic2+8], qword[desplazAux]
    87 00001B05 488B3C25[82080000]  <1>  mov rdi, %1
    88 00001B0D 488B3425[8A080000]  <1>  mov rsi, %2
    89 00001B15 E8E2F1FFFF          <1>  call calcularDesplazamiento
    90 00001B1A 48890425[C8000000]  <1>  mov %3, rax
  1784                                      mMov desplazAux2, desplazAux, 1
    31 00001B22 B901000000          <1>  mov rcx, %3
    32 00001B27 488D3425[C8000000]  <1>  lea rsi, [%2]
    33 00001B2F 488D3C25[D0000000]  <1>  lea rdi, [%1]
    34 00001B37 F3A4                <1>  rep movsb
  1785 00001B39 E801000000                  call verSiOficialRodeado
  1786 00001B3E C3                          ret
  1787                                  
  1788                                  verSiOficialRodeado:
  1789                                      ; Casilla arriba-izquierda
  1790 00001B3F 48832C25[C8000000]-         sub qword[desplazAux], 12
  1790 00001B47 0C                 
  1791                                      mEstaVacia qword[desplazAux]
    94 00001B48 B800000000          <1>  mov rax, 0
    95 00001B4D 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001B55 E88DF1FFFF          <1>  call estaVacia
  1792 00001B5A 4883F800                    cmp rax, 0 ; Si el oficial tiene una casilla vacía, puede moverse -> no está rodeado 
  1793 00001B5E 0F8426030000                je okPuedeMoverse
  1794                                      mHaySoldado qword[desplazAux]
   100 00001B64 B800000000          <1>  mov rax, 0
   101 00001B69 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001B71 E8C8F3FFFF          <1>  call haySoldado
  1795 00001B76 4883F801                    cmp rax, 1 ; Si no hay soldado, significa que es un límite del tablero -> me fijo en otra casilla
  1796 00001B7A 7419                        je verEspacioArr
  1797                                      mPuedeCapturar 12, 1 ; restar 12 a desplazAux
   106 00001B7C BF0C000000          <1>  mov rdi, %1
   107 00001B81 BE01000000          <1>  mov rsi, %2
   108 00001B86 E846FCFFFF          <1>  call podiaComerPieza
  1798 00001B8B 4883F800                    cmp rax, 0 ; Si el oficial puede capturar un soldado, no está rodeado
  1799 00001B8F 0F84F5020000                je okPuedeMoverse
  1800                                  
  1801                                      ; Casilla arriba
  1802                                      verEspacioArr: 
  1803                                          mMov desplazAux, desplazAux2, 1
    31 00001B95 B901000000          <1>  mov rcx, %3
    32 00001B9A 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001BA2 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001BAA F3A4                <1>  rep movsb
  1804 00001BAC 48832C25[C8000000]-             sub qword[desplazAux], 11
  1804 00001BB4 0B                 
  1805                                          mEstaVacia qword[desplazAux]
    94 00001BB5 B800000000          <1>  mov rax, 0
    95 00001BBA 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001BC2 E820F1FFFF          <1>  call estaVacia
  1806 00001BC7 4883F800                        cmp rax, 0  
  1807 00001BCB 0F84B9020000                    je okPuedeMoverse
  1808                                          mHaySoldado qword[desplazAux]
   100 00001BD1 B800000000          <1>  mov rax, 0
   101 00001BD6 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001BDE E85BF3FFFF          <1>  call haySoldado
  1809 00001BE3 4883F801                        cmp rax, 1
  1810 00001BE7 7419                            je verEspacioArrDer
  1811                                          mPuedeCapturar 11, 1 ; restar 11 a desplazAux
   106 00001BE9 BF0B000000          <1>  mov rdi, %1
   107 00001BEE BE01000000          <1>  mov rsi, %2
   108 00001BF3 E8D9FBFFFF          <1>  call podiaComerPieza
  1812 00001BF8 4883F800                        cmp rax, 0
  1813 00001BFC 0F8488020000                    je okPuedeMoverse
  1814                                  
  1815                                      ; Casilla arriba-derecha
  1816                                      verEspacioArrDer:
  1817                                          mMov desplazAux, desplazAux2, 1
    31 00001C02 B901000000          <1>  mov rcx, %3
    32 00001C07 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001C0F 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001C17 F3A4                <1>  rep movsb
  1818 00001C19 48832C25[C8000000]-             sub qword[desplazAux], 10
  1818 00001C21 0A                 
  1819                                          mEstaVacia qword[desplazAux]
    94 00001C22 B800000000          <1>  mov rax, 0
    95 00001C27 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001C2F E8B3F0FFFF          <1>  call estaVacia
  1820 00001C34 4883F800                        cmp rax, 0  
  1821 00001C38 0F844C020000                    je okPuedeMoverse
  1822                                          mHaySoldado qword[desplazAux]
   100 00001C3E B800000000          <1>  mov rax, 0
   101 00001C43 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001C4B E8EEF2FFFF          <1>  call haySoldado
  1823 00001C50 4883F801                        cmp rax, 1
  1824 00001C54 7419                            je verEspacioIzq
  1825                                          mPuedeCapturar 10, 1 ; restar 10 a desplazAux
   106 00001C56 BF0A000000          <1>  mov rdi, %1
   107 00001C5B BE01000000          <1>  mov rsi, %2
   108 00001C60 E86CFBFFFF          <1>  call podiaComerPieza
  1826 00001C65 4883F800                        cmp rax, 0
  1827 00001C69 0F841B020000                    je okPuedeMoverse
  1828                                  
  1829                                      ; Casilla izquierda
  1830                                      verEspacioIzq:
  1831                                          mMov desplazAux, desplazAux2, 1
    31 00001C6F B901000000          <1>  mov rcx, %3
    32 00001C74 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001C7C 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001C84 F3A4                <1>  rep movsb
  1832 00001C86 48832C25[C8000000]-             sub qword[desplazAux], 1
  1832 00001C8E 01                 
  1833                                          mEstaVacia qword[desplazAux]
    94 00001C8F B800000000          <1>  mov rax, 0
    95 00001C94 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001C9C E846F0FFFF          <1>  call estaVacia
  1834 00001CA1 4883F800                        cmp rax, 0  
  1835 00001CA5 0F84DF010000                    je okPuedeMoverse
  1836                                          mHaySoldado qword[desplazAux]
   100 00001CAB B800000000          <1>  mov rax, 0
   101 00001CB0 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001CB8 E881F2FFFF          <1>  call haySoldado
  1837 00001CBD 4883F801                        cmp rax, 1
  1838 00001CC1 7419                            je verEspacioDer
  1839                                          mPuedeCapturar 1, 1 ; restar 1 a desplazAux 
   106 00001CC3 BF01000000          <1>  mov rdi, %1
   107 00001CC8 BE01000000          <1>  mov rsi, %2
   108 00001CCD E8FFFAFFFF          <1>  call podiaComerPieza
  1840 00001CD2 4883F800                        cmp rax, 0
  1841 00001CD6 0F84AE010000                    je okPuedeMoverse
  1842                                  
  1843                                      ; Casilla derecha
  1844                                      verEspacioDer:
  1845                                          mMov desplazAux, desplazAux2, 1
    31 00001CDC B901000000          <1>  mov rcx, %3
    32 00001CE1 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001CE9 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001CF1 F3A4                <1>  rep movsb
  1846 00001CF3 48830425[C8000000]-             add qword[desplazAux], 1
  1846 00001CFB 01                 
  1847                                          mEstaVacia qword[desplazAux]
    94 00001CFC B800000000          <1>  mov rax, 0
    95 00001D01 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001D09 E8D9EFFFFF          <1>  call estaVacia
  1848 00001D0E 4883F800                        cmp rax, 0  
  1849 00001D12 0F8472010000                    je okPuedeMoverse
  1850                                          mHaySoldado qword[desplazAux]
   100 00001D18 B800000000          <1>  mov rax, 0
   101 00001D1D 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001D25 E814F2FFFF          <1>  call haySoldado
  1851 00001D2A 4883F801                        cmp rax, 1
  1852 00001D2E 7419                            je verEspacioAbjIzq
  1853                                          mPuedeCapturar 1, 0 ; sumar 1 a desplazAux 
   106 00001D30 BF01000000          <1>  mov rdi, %1
   107 00001D35 BE00000000          <1>  mov rsi, %2
   108 00001D3A E892FAFFFF          <1>  call podiaComerPieza
  1854 00001D3F 4883F800                        cmp rax, 0
  1855 00001D43 0F8441010000                    je okPuedeMoverse
  1856                                  
  1857                                      ; Casilla abajo-izquierda
  1858                                      verEspacioAbjIzq:
  1859                                          mMov desplazAux, desplazAux2, 1
    31 00001D49 B901000000          <1>  mov rcx, %3
    32 00001D4E 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001D56 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001D5E F3A4                <1>  rep movsb
  1860 00001D60 48830425[C8000000]-             add qword[desplazAux], 10
  1860 00001D68 0A                 
  1861                                          mEstaVacia qword[desplazAux]
    94 00001D69 B800000000          <1>  mov rax, 0
    95 00001D6E 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001D76 E86CEFFFFF          <1>  call estaVacia
  1862 00001D7B 4883F800                        cmp rax, 0  
  1863 00001D7F 0F8405010000                    je okPuedeMoverse
  1864                                          mHaySoldado qword[desplazAux]
   100 00001D85 B800000000          <1>  mov rax, 0
   101 00001D8A 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001D92 E8A7F1FFFF          <1>  call haySoldado
  1865 00001D97 4883F801                        cmp rax, 1
  1866 00001D9B 7419                            je verEspacioAbajo
  1867                                          mPuedeCapturar 10, 0 ; sumar 10 a desplazAux 
   106 00001D9D BF0A000000          <1>  mov rdi, %1
   107 00001DA2 BE00000000          <1>  mov rsi, %2
   108 00001DA7 E825FAFFFF          <1>  call podiaComerPieza
  1868 00001DAC 4883F800                        cmp rax, 0
  1869 00001DB0 0F84D4000000                    je okPuedeMoverse
  1870                                  
  1871                                      ; Casilla abajo
  1872                                      verEspacioAbajo:
  1873                                          mMov desplazAux, desplazAux2, 1
    31 00001DB6 B901000000          <1>  mov rcx, %3
    32 00001DBB 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001DC3 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001DCB F3A4                <1>  rep movsb
  1874 00001DCD 48830425[C8000000]-             add qword[desplazAux], 11
  1874 00001DD5 0B                 
  1875                                          mEstaVacia qword[desplazAux]
    94 00001DD6 B800000000          <1>  mov rax, 0
    95 00001DDB 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001DE3 E8FFEEFFFF          <1>  call estaVacia
  1876 00001DE8 4883F800                        cmp rax, 0  
  1877 00001DEC 0F8498000000                    je okPuedeMoverse
  1878                                          mHaySoldado qword[desplazAux]
   100 00001DF2 B800000000          <1>  mov rax, 0
   101 00001DF7 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001DFF E83AF1FFFF          <1>  call haySoldado
  1879 00001E04 4883F801                        cmp rax, 1
  1880 00001E08 7415                            je verEspacioAbjDer
  1881                                          mPuedeCapturar 11, 0 ; sumar 11 a desplazAux
   106 00001E0A BF0B000000          <1>  mov rdi, %1
   107 00001E0F BE00000000          <1>  mov rsi, %2
   108 00001E14 E8B8F9FFFF          <1>  call podiaComerPieza
  1882 00001E19 4883F800                        cmp rax, 0
  1883 00001E1D 746B                            je okPuedeMoverse
  1884                                  
  1885                                      ; Casilla abajo-derecha
  1886                                      verEspacioAbjDer:
  1887                                          mMov desplazAux, desplazAux2, 1
    31 00001E1F B901000000          <1>  mov rcx, %3
    32 00001E24 488D3425[D0000000]  <1>  lea rsi, [%2]
    33 00001E2C 488D3C25[C8000000]  <1>  lea rdi, [%1]
    34 00001E34 F3A4                <1>  rep movsb
  1888 00001E36 48830425[C8000000]-             add qword[desplazAux], 12
  1888 00001E3E 0C                 
  1889                                          mEstaVacia qword[desplazAux]
    94 00001E3F B800000000          <1>  mov rax, 0
    95 00001E44 488B3C25[C8000000]  <1>  mov rdi, %1
    96 00001E4C E896EEFFFF          <1>  call estaVacia
  1890 00001E51 4883F800                        cmp rax, 0  
  1891 00001E55 7433                            je okPuedeMoverse
  1892                                          mHaySoldado qword[desplazAux]
   100 00001E57 B800000000          <1>  mov rax, 0
   101 00001E5C 488B3C25[C8000000]  <1>  mov rdi, %1
   102 00001E64 E8D5F0FFFF          <1>  call haySoldado
  1893 00001E69 4883F801                        cmp rax, 1
  1894 00001E6D 7415                            je noPuedeMoverse
  1895                                          mPuedeCapturar 12, 0 ; sumar 12 a desplazAux
   106 00001E6F BF0C000000          <1>  mov rdi, %1
   107 00001E74 BE00000000          <1>  mov rsi, %2
   108 00001E79 E853F9FFFF          <1>  call podiaComerPieza
  1896 00001E7E 4883F800                        cmp rax, 0
  1897 00001E82 7406                            je okPuedeMoverse
  1898                                  
  1899                                      ; Si llegamos acá, el oficial está rodeado -> no puede realizar ningún movimiento
  1900                                      noPuedeMoverse:
  1901 00001E84 B800000000                      mov rax, 0
  1902 00001E89 C3                              ret
  1903                                  
  1904                                      ; Si llegamos acá, el oficial puede moverse
  1905                                      okPuedeMoverse:
  1906 00001E8A B801000000                      mov rax, 1
  1907 00001E8F C3                              ret
  1908                                  
  1909                                  ofic1Desentendido:
  1910 00001E90 48833C25[72080000]-         cmp qword[casillaOfic1], 0
  1910 00001E98 00                 
  1911 00001E99 7406                        je el1EstaDesentendido
  1912                                  
  1913 00001E9B B801000000                  mov rax, 1
  1914 00001EA0 C3                          ret
  1915                                  
  1916                                      el1EstaDesentendido:
  1917 00001EA1 B800000000                      mov rax, 0
  1918 00001EA6 C3                              ret
  1919                                  
  1920                                  ofic2Desentendido:
  1921 00001EA7 48833C25[82080000]-         cmp qword[casillaOfic2], 0
  1921 00001EAF 00                 
  1922 00001EB0 7406                        je el2EstaDesentendido
  1923                                  
  1924 00001EB2 B801000000                  mov rax, 1
  1925 00001EB7 C3                          ret
  1926                                  
  1927                                      el2EstaDesentendido:
  1928 00001EB8 B800000000                      mov rax, 0
  1929 00001EBD C3                              ret
  1930                                  
  1931                                  ; --------------------------------------------------------------------------------------------
  1932                                  ; RUTINAS PARA TERMINAR EL JUEGO Y MOSTRAR LAS ESTADÍSTICAS
  1933                                  ; --------------------------------------------------------------------------------------------
  1934                                  
  1935                                  finDeJuego:
  1936                                      mCommand cmdBorrarArchivoPartida
    24 00001EBE 48BF-               <1>  mov rdi, %1
    24 00001EC0 [C808000000000000]  <1>
    25 00001EC8 4883EC08            <1>  sub rsp, 8
    26 00001ECC E8(00000000)        <1>  call system
    27 00001ED1 4883C408            <1>  add rsp, 8
  1937                                      mCommand cmdLimpiarPantalla
    24 00001ED5 48BF-               <1>  mov rdi, %1
    24 00001ED7 [A808000000000000]  <1>
    25 00001EDF 4883EC08            <1>  sub rsp, 8
    26 00001EE3 E8(00000000)        <1>  call system
    27 00001EE8 4883C408            <1>  add rsp, 8
  1938                                      mPuts msgJuegoTerminado
     2 00001EEC 48BF-               <1>  mov rdi, %1
     2 00001EEE [5504000000000000]  <1>
     3 00001EF6 4883EC08            <1>  sub rsp, 8
     4 00001EFA E8(00000000)        <1>  call puts
     5 00001EFF 4883C408            <1>  add rsp, 8
  1939                                  
  1940 00001F03 813C25[B4040000]73-         cmp dword[varRazonFin], "sOcu"
  1940 00001F0B 4F6375             
  1941 00001F0E 7430                        je soldadosFortaleza
  1942                                  
  1943 00001F10 813C25[B4040000]6F-         cmp dword[varRazonFin], "oRod"
  1943 00001F18 526F64             
  1944 00001F1B 746A                        je soldadosRodeanOficiales
  1945                                  
  1946 00001F1D 813C25[B4040000]6F-         cmp dword[varRazonFin], "oInv"
  1946 00001F25 496E76             
  1947 00001F28 0F84A0000000                je oficialesInvalidados
  1948                                  
  1949 00001F2E 813C25[B4040000]73-         cmp dword[varRazonFin], "sCap"
  1949 00001F36 436170             
  1950 00001F39 0F84D3000000                je soldadosCapturados
  1951                                  
  1952 00001F3F C3                          ret
  1953                                  
  1954                                      soldadosFortaleza:
  1955                                          mPrint msgGanador, stringSoldados
     9 00001F40 48BF-               <1>  mov rdi, %1
     9 00001F42 [6F04000000000000]  <1>
    10 00001F4A 48BE-               <1>  mov rsi, %2
    10 00001F4C [9504000000000000]  <1>
    11 00001F54 4883EC08            <1>  sub rsp, 8
    12 00001F58 E8(00000000)        <1>  call printf
    13 00001F5D 4883C408            <1>  add rsp, 8
  1956                                          mPrint msgRazonGanador, msgSoldadosFortaleza
     9 00001F61 48BF-               <1>  mov rdi, %1
     9 00001F63 [A804000000000000]  <1>
    10 00001F6B 48BE-               <1>  mov rsi, %2
    10 00001F6D [CD05000000000000]  <1>
    11 00001F75 4883EC08            <1>  sub rsp, 8
    12 00001F79 E8(00000000)        <1>  call printf
    13 00001F7E 4883C408            <1>  add rsp, 8
  1957 00001F82 E9CF000000                      jmp mostrarEstadisticas
  1958                                  
  1959                                      soldadosRodeanOficiales:
  1960                                          mPrint msgGanador, stringSoldados
     9 00001F87 48BF-               <1>  mov rdi, %1
     9 00001F89 [6F04000000000000]  <1>
    10 00001F91 48BE-               <1>  mov rsi, %2
    10 00001F93 [9504000000000000]  <1>
    11 00001F9B 4883EC08            <1>  sub rsp, 8
    12 00001F9F E8(00000000)        <1>  call printf
    13 00001FA4 4883C408            <1>  add rsp, 8
  1961                                          mPrint msgRazonGanador, msgSoldadosRodean
     9 00001FA8 48BF-               <1>  mov rdi, %1
     9 00001FAA [A804000000000000]  <1>
    10 00001FB2 48BE-               <1>  mov rsi, %2
    10 00001FB4 [0806000000000000]  <1>
    11 00001FBC 4883EC08            <1>  sub rsp, 8
    12 00001FC0 E8(00000000)        <1>  call printf
    13 00001FC5 4883C408            <1>  add rsp, 8
  1962 00001FC9 E988000000                      jmp mostrarEstadisticas
  1963                                  
  1964                                      oficialesInvalidados:
  1965                                          mPrint msgGanador, stringSoldados
     9 00001FCE 48BF-               <1>  mov rdi, %1
     9 00001FD0 [6F04000000000000]  <1>
    10 00001FD8 48BE-               <1>  mov rsi, %2
    10 00001FDA [9504000000000000]  <1>
    11 00001FE2 4883EC08            <1>  sub rsp, 8
    12 00001FE6 E8(00000000)        <1>  call printf
    13 00001FEB 4883C408            <1>  add rsp, 8
  1966                                          mPrint msgRazonGanador, msgSoldadosInvalidar
     9 00001FEF 48BF-               <1>  mov rdi, %1
     9 00001FF1 [A804000000000000]  <1>
    10 00001FF9 48BE-               <1>  mov rsi, %2
    10 00001FFB [3206000000000000]  <1>
    11 00002003 4883EC08            <1>  sub rsp, 8
    12 00002007 E8(00000000)        <1>  call printf
    13 0000200C 4883C408            <1>  add rsp, 8
  1967 00002010 EB44                            jmp mostrarEstadisticas
  1968                                  
  1969                                      soldadosCapturados:
  1970                                          mPrint msgGanador, stringOficiales
     9 00002012 48BF-               <1>  mov rdi, %1
     9 00002014 [6F04000000000000]  <1>
    10 0000201C 48BE-               <1>  mov rsi, %2
    10 0000201E [9E04000000000000]  <1>
    11 00002026 4883EC08            <1>  sub rsp, 8
    12 0000202A E8(00000000)        <1>  call printf
    13 0000202F 4883C408            <1>  add rsp, 8
  1971                                          mPrint msgRazonGanador, msgOficialesGanan
     9 00002033 48BF-               <1>  mov rdi, %1
     9 00002035 [A804000000000000]  <1>
    10 0000203D 48BE-               <1>  mov rsi, %2
    10 0000203F [5806000000000000]  <1>
    11 00002047 4883EC08            <1>  sub rsp, 8
    12 0000204B E8(00000000)        <1>  call printf
    13 00002050 4883C408            <1>  add rsp, 8
  1972 00002054 EB00                            jmp mostrarEstadisticas
  1973                                  
  1974                                  
  1975                                  mostrarEstadisticas:
  1976                                      mCommand cmdLimpiarPantalla
    24 00002056 48BF-               <1>  mov rdi, %1
    24 00002058 [A808000000000000]  <1>
    25 00002060 4883EC08            <1>  sub rsp, 8
    26 00002064 E8(00000000)        <1>  call system
    27 00002069 4883C408            <1>  add rsp, 8
  1977                                      mPuts msgEstadisticas
     2 0000206D 48BF-               <1>  mov rdi, %1
     2 0000206F [E502000000000000]  <1>
     3 00002077 4883EC08            <1>  sub rsp, 8
     4 0000207B E8(00000000)        <1>  call puts
     5 00002080 4883C408            <1>  add rsp, 8
  1978                                  
  1979                                      mPrint msgCantTotalCapturas, qword[cantSoldCapturados]
     9 00002084 48BF-               <1>  mov rdi, %1
     9 00002086 [0603000000000000]  <1>
    10 0000208E 488B3425[62080000]  <1>  mov rsi, %2
    11 00002096 4883EC08            <1>  sub rsp, 8
    12 0000209A E8(00000000)        <1>  call printf
    13 0000209F 4883C408            <1>  add rsp, 8
  1980                                  
  1981                                      ; Estadísticas del oficial 1
  1982                                      mPuts msgOficial1
     2 000020A3 48BF-               <1>  mov rdi, %1
     2 000020A5 [2703000000000000]  <1>
     3 000020AD 4883EC08            <1>  sub rsp, 8
     4 000020B1 E8(00000000)        <1>  call puts
     5 000020B6 4883C408            <1>  add rsp, 8
  1983                                      mPrint msgCantMovimientos, qword[movimientosOfic1]
     9 000020BA 48BF-               <1>  mov rdi, %1
     9 000020BC [3F03000000000000]  <1>
    10 000020C4 488B3425[C2070000]  <1>  mov rsi, %2
    11 000020CC 4883EC08            <1>  sub rsp, 8
    12 000020D0 E8(00000000)        <1>  call printf
    13 000020D5 4883C408            <1>  add rsp, 8
  1984                                      mPrint msgCantAdelante, qword[movOfic1Adelante]
     9 000020D9 48BF-               <1>  mov rdi, %1
     9 000020DB [5803000000000000]  <1>
    10 000020E3 488B3425[D2070000]  <1>  mov rsi, %2
    11 000020EB 4883EC08            <1>  sub rsp, 8
    12 000020EF E8(00000000)        <1>  call printf
    13 000020F4 4883C408            <1>  add rsp, 8
  1985                                      mPrint msgCantDerecha, qword[movOfic1Derecha]
     9 000020F8 48BF-               <1>  mov rdi, %1
     9 000020FA [6E03000000000000]  <1>
    10 00002102 488B3425[DA070000]  <1>  mov rsi, %2
    11 0000210A 4883EC08            <1>  sub rsp, 8
    12 0000210E E8(00000000)        <1>  call printf
    13 00002113 4883C408            <1>  add rsp, 8
  1986                                      mPrint msgCantIzquierda, qword[movOfic1Izquierda]
     9 00002117 48BF-               <1>  mov rdi, %1
     9 00002119 [8603000000000000]  <1>
    10 00002121 488B3425[E2070000]  <1>  mov rsi, %2
    11 00002129 4883EC08            <1>  sub rsp, 8
    12 0000212D E8(00000000)        <1>  call printf
    13 00002132 4883C408            <1>  add rsp, 8
  1987                                      mPrint msgCantAtras, qword[movOfic1Atras]
     9 00002136 48BF-               <1>  mov rdi, %1
     9 00002138 [A003000000000000]  <1>
    10 00002140 488B3425[EA070000]  <1>  mov rsi, %2
    11 00002148 4883EC08            <1>  sub rsp, 8
    12 0000214C E8(00000000)        <1>  call printf
    13 00002151 4883C408            <1>  add rsp, 8
  1988                                      mPrint msgCantDiagonal, qword[movOfic1Diagonal]
     9 00002155 48BF-               <1>  mov rdi, %1
     9 00002157 [B403000000000000]  <1>
    10 0000215F 488B3425[F2070000]  <1>  mov rsi, %2
    11 00002167 4883EC08            <1>  sub rsp, 8
    12 0000216B E8(00000000)        <1>  call printf
    13 00002170 4883C408            <1>  add rsp, 8
  1989                                      mPrint msgCantDiagArribaDer, qword[movOfic1DiagArribaDer]
     9 00002174 48BF-               <1>  mov rdi, %1
     9 00002176 [C703000000000000]  <1>
    10 0000217E 488B3425[FA070000]  <1>  mov rsi, %2
    11 00002186 4883EC08            <1>  sub rsp, 8
    12 0000218A E8(00000000)        <1>  call printf
    13 0000218F 4883C408            <1>  add rsp, 8
  1990                                      mPrint msgCantDiagArribaIzq, qword[movOfic1DiagArribaIzq]
     9 00002193 48BF-               <1>  mov rdi, %1
     9 00002195 [E103000000000000]  <1>
    10 0000219D 488B3425[02080000]  <1>  mov rsi, %2
    11 000021A5 4883EC08            <1>  sub rsp, 8
    12 000021A9 E8(00000000)        <1>  call printf
    13 000021AE 4883C408            <1>  add rsp, 8
  1991                                      mPrint msgCantDiagAbajoDer, qword[movOfic1DiagAbajoDer]
     9 000021B2 48BF-               <1>  mov rdi, %1
     9 000021B4 [FD03000000000000]  <1>
    10 000021BC 488B3425[0A080000]  <1>  mov rsi, %2
    11 000021C4 4883EC08            <1>  sub rsp, 8
    12 000021C8 E8(00000000)        <1>  call printf
    13 000021CD 4883C408            <1>  add rsp, 8
  1992                                      mPrint msgCantDiagAbajoIzq, qword[movOfic1DiagAbajoIzq]
     9 000021D1 48BF-               <1>  mov rdi, %1
     9 000021D3 [1504000000000000]  <1>
    10 000021DB 488B3425[12080000]  <1>  mov rsi, %2
    11 000021E3 4883EC08            <1>  sub rsp, 8
    12 000021E7 E8(00000000)        <1>  call printf
    13 000021EC 4883C408            <1>  add rsp, 8
  1993                                      mPrint msgCantSoldadosCapt, qword[cantCapturasOfic1]
     9 000021F0 48BF-               <1>  mov rdi, %1
     9 000021F2 [2F04000000000000]  <1>
    10 000021FA 488B3425[92080000]  <1>  mov rsi, %2
    11 00002202 4883EC08            <1>  sub rsp, 8
    12 00002206 E8(00000000)        <1>  call printf
    13 0000220B 4883C408            <1>  add rsp, 8
  1994                                  
  1995                                      ; Estadísticas del oficial 2
  1996                                      mPuts msgOficial2
     2 0000220F 48BF-               <1>  mov rdi, %1
     2 00002211 [3303000000000000]  <1>
     3 00002219 4883EC08            <1>  sub rsp, 8
     4 0000221D E8(00000000)        <1>  call puts
     5 00002222 4883C408            <1>  add rsp, 8
  1997                                      mPrint msgCantMovimientos, qword[movimientosOfic2]
     9 00002226 48BF-               <1>  mov rdi, %1
     9 00002228 [3F03000000000000]  <1>
    10 00002230 488B3425[CA070000]  <1>  mov rsi, %2
    11 00002238 4883EC08            <1>  sub rsp, 8
    12 0000223C E8(00000000)        <1>  call printf
    13 00002241 4883C408            <1>  add rsp, 8
  1998                                      mPrint msgCantAdelante, qword[movOfic2Adelante]
     9 00002245 48BF-               <1>  mov rdi, %1
     9 00002247 [5803000000000000]  <1>
    10 0000224F 488B3425[1A080000]  <1>  mov rsi, %2
    11 00002257 4883EC08            <1>  sub rsp, 8
    12 0000225B E8(00000000)        <1>  call printf
    13 00002260 4883C408            <1>  add rsp, 8
  1999                                      mPrint msgCantDerecha, qword[movOfic2Derecha]
     9 00002264 48BF-               <1>  mov rdi, %1
     9 00002266 [6E03000000000000]  <1>
    10 0000226E 488B3425[22080000]  <1>  mov rsi, %2
    11 00002276 4883EC08            <1>  sub rsp, 8
    12 0000227A E8(00000000)        <1>  call printf
    13 0000227F 4883C408            <1>  add rsp, 8
  2000                                      mPrint msgCantIzquierda, qword[movOfic2Izquierda]
     9 00002283 48BF-               <1>  mov rdi, %1
     9 00002285 [8603000000000000]  <1>
    10 0000228D 488B3425[2A080000]  <1>  mov rsi, %2
    11 00002295 4883EC08            <1>  sub rsp, 8
    12 00002299 E8(00000000)        <1>  call printf
    13 0000229E 4883C408            <1>  add rsp, 8
  2001                                      mPrint msgCantAtras, qword[movOfic2Atras]
     9 000022A2 48BF-               <1>  mov rdi, %1
     9 000022A4 [A003000000000000]  <1>
    10 000022AC 488B3425[32080000]  <1>  mov rsi, %2
    11 000022B4 4883EC08            <1>  sub rsp, 8
    12 000022B8 E8(00000000)        <1>  call printf
    13 000022BD 4883C408            <1>  add rsp, 8
  2002                                      mPrint msgCantDiagonal, qword[movOfic2Diagonal]
     9 000022C1 48BF-               <1>  mov rdi, %1
     9 000022C3 [B403000000000000]  <1>
    10 000022CB 488B3425[3A080000]  <1>  mov rsi, %2
    11 000022D3 4883EC08            <1>  sub rsp, 8
    12 000022D7 E8(00000000)        <1>  call printf
    13 000022DC 4883C408            <1>  add rsp, 8
  2003                                      mPrint msgCantDiagArribaDer, qword[movOfic2DiagArribaDer]
     9 000022E0 48BF-               <1>  mov rdi, %1
     9 000022E2 [C703000000000000]  <1>
    10 000022EA 488B3425[42080000]  <1>  mov rsi, %2
    11 000022F2 4883EC08            <1>  sub rsp, 8
    12 000022F6 E8(00000000)        <1>  call printf
    13 000022FB 4883C408            <1>  add rsp, 8
  2004                                      mPrint msgCantDiagArribaIzq, qword[movOfic2DiagArribaIzq]
     9 000022FF 48BF-               <1>  mov rdi, %1
     9 00002301 [E103000000000000]  <1>
    10 00002309 488B3425[4A080000]  <1>  mov rsi, %2
    11 00002311 4883EC08            <1>  sub rsp, 8
    12 00002315 E8(00000000)        <1>  call printf
    13 0000231A 4883C408            <1>  add rsp, 8
  2005                                      mPrint msgCantDiagAbajoDer, qword[movOfic2DiagAbajoDer]
     9 0000231E 48BF-               <1>  mov rdi, %1
     9 00002320 [FD03000000000000]  <1>
    10 00002328 488B3425[52080000]  <1>  mov rsi, %2
    11 00002330 4883EC08            <1>  sub rsp, 8
    12 00002334 E8(00000000)        <1>  call printf
    13 00002339 4883C408            <1>  add rsp, 8
  2006                                      mPrint msgCantDiagAbajoIzq, qword[movOfic2DiagAbajoIzq]
     9 0000233D 48BF-               <1>  mov rdi, %1
     9 0000233F [1504000000000000]  <1>
    10 00002347 488B3425[5A080000]  <1>  mov rsi, %2
    11 0000234F 4883EC08            <1>  sub rsp, 8
    12 00002353 E8(00000000)        <1>  call printf
    13 00002358 4883C408            <1>  add rsp, 8
  2007                                      mPrint msgCantSoldadosCapt, qword[cantCapturasOfic2]
     9 0000235C 48BF-               <1>  mov rdi, %1
     9 0000235E [2F04000000000000]  <1>
    10 00002366 488B3425[9A080000]  <1>  mov rsi, %2
    11 0000236E 4883EC08            <1>  sub rsp, 8
    12 00002372 E8(00000000)        <1>  call printf
    13 00002377 4883C408            <1>  add rsp, 8
  2008                                  
  2009 0000237B EB00                        jmp salirSinGuardar
  2010                                  
  2011                                  ; --------------------------------------------------------------------------------------------
  2012                                  ; RUTINAS PARA SALIR DEL JUEGO (guardando o no la partida)
  2013                                  ; --------------------------------------------------------------------------------------------
  2014                                  
  2015                                  salirSinGuardar:
  2016 0000237D B800000000                  mov rax, 0
  2017 00002382 C3                          ret
  2018                                  
  2019                                  salirDelJuego:
  2020                                      mCommand cmdLimpiarPantalla
    24 00002383 48BF-               <1>  mov rdi, %1
    24 00002385 [A808000000000000]  <1>
    25 0000238D 4883EC08            <1>  sub rsp, 8
    26 00002391 E8(00000000)        <1>  call system
    27 00002396 4883C408            <1>  add rsp, 8
  2021                                  
  2022                                      mPuts msgSalidaPartida
     2 0000239A 48BF-               <1>  mov rdi, %1
     2 0000239C [B904000000000000]  <1>
     3 000023A4 4883EC08            <1>  sub rsp, 8
     4 000023A8 E8(00000000)        <1>  call puts
     5 000023AD 4883C408            <1>  add rsp, 8
  2023                                      mPuts msgAclaracionSalida
     2 000023B1 48BF-               <1>  mov rdi, %1
     2 000023B3 [F604000000000000]  <1>
     3 000023BB 4883EC08            <1>  sub rsp, 8
     4 000023BF E8(00000000)        <1>  call puts
     5 000023C4 4883C408            <1>  add rsp, 8
  2024                                  
  2025                                      recibirOpcionGuardado:
  2026                                          mGets guardadoPartida
    17 000023C8 48BF-               <1>  mov rdi, %1
    17 000023CA [8D05000000000000]  <1>
    18 000023D2 4883EC08            <1>  sub rsp, 8
    19 000023D6 E8(00000000)        <1>  call gets
    20 000023DB 4883C408            <1>  add rsp, 8
  2027                                  
  2028 000023DF 803C25[8E050000]00          cmp byte[guardadoPartida+1], 0
  2029 000023E7 7514                        jne guardadoInvalido
  2030                                  
  2031 000023E9 803C25[8D050000]73          cmp byte[guardadoPartida], 's'
  2032 000023F1 7455                        je guardarPartida
  2033                                  
  2034 000023F3 803C25[8D050000]6E          cmp byte[guardadoPartida], 'n'
  2035 000023FB 7419                        je removerArchivo
  2036                                  
  2037                                      guardadoInvalido:
  2038                                          mPuts msgOpcionInvalida
     2 000023FD 48BF-               <1>  mov rdi, %1
     2 000023FF [A100000000000000]  <1>
     3 00002407 4883EC08            <1>  sub rsp, 8
     4 0000240B E8(00000000)        <1>  call puts
     5 00002410 4883C408            <1>  add rsp, 8
  2039 00002414 EBB2                            jmp recibirOpcionGuardado
  2040                                  
  2041                                      removerArchivo:
  2042 00002416 803C25[8F050000]73              cmp byte[yaHabiaGuardado], 's' ; Si ya había guardado la partida, la borramos
  2043 0000241E 0F8532FCFFFF                    jne mostrarEstadisticas
  2044                                          
  2045                                          mCommand cmdBorrarArchivoPartida
    24 00002424 48BF-               <1>  mov rdi, %1
    24 00002426 [C808000000000000]  <1>
    25 0000242E 4883EC08            <1>  sub rsp, 8
    26 00002432 E8(00000000)        <1>  call system
    27 00002437 4883C408            <1>  add rsp, 8
  2046 0000243B C60425[8F050000]6E              mov byte[yaHabiaGuardado], 'n' ; Para la próxima vez que se quiera salir, no se borra nada
  2047 00002443 E90EFCFFFF                      jmp mostrarEstadisticas
  2048                                  
  2049                                  
  2050                                  guardarPartida:
  2051 00002448 C60425[8F050000]73          mov byte[yaHabiaGuardado], 's'
  2052                                      mOpenFile nombreArchivo, modoEscritura
   112 00002450 48BF-               <1>  mov rdi, %1
   112 00002452 [0C09000000000000]  <1>
   113 0000245A 48BE-               <1>  mov rsi, %2
   113 0000245C [0609000000000000]  <1>
   114 00002464 4883EC08            <1>  sub rsp, 8
   115 00002468 E8(00000000)        <1>  call fopen
   116 0000246D 4883C408            <1>  add rsp, 8
   117 00002471 48890425[D8000000]  <1>  mov qword[idArchGuardado], rax
  2053 00002479 E82D000000                  call agregarDatosPartida
  2054                                      mCloseFile idArchGuardado
   121 0000247E 488B3C25[D8000000]  <1>  mov rdi, [%1]
   122 00002486 4883EC08            <1>  sub rsp, 8
   123 0000248A E8(00000000)        <1>  call fclose
   124 0000248F 4883C408            <1>  add rsp, 8
  2055                                  
  2056                                      mPuts msgPartidaGuardada
     2 00002493 48BF-               <1>  mov rdi, %1
     2 00002495 [9305000000000000]  <1>
     3 0000249D 4883EC08            <1>  sub rsp, 8
     4 000024A1 E8(00000000)        <1>  call puts
     5 000024A6 4883C408            <1>  add rsp, 8
  2057 000024AA C3                          ret    
  2058                                  
  2059                                  agregarDatosPartida:
  2060                                      mWriteLine tableroEnJuego, 116, 1
   138 000024AB 48BF-               <1>  mov rdi, %1
   138 000024AD [0400000000000000]  <1>
   139 000024B5 BE74000000          <1>  mov rsi, %2
   140 000024BA BA01000000          <1>  mov rdx, %3
   141 000024BF 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 000024C7 4883EC08            <1>  sub rsp, 8
   143 000024CB E8(00000000)        <1>  call fwrite
   144 000024D0 4883C408            <1>  add rsp, 8
  2061                                  
  2062                                      mWriteLine yaHabiaGuardado, 1, 1 ; Guardamos si ya había guardado la partida
   138 000024D4 48BF-               <1>  mov rdi, %1
   138 000024D6 [8F05000000000000]  <1>
   139 000024DE BE01000000          <1>  mov rsi, %2
   140 000024E3 BA01000000          <1>  mov rdx, %3
   141 000024E8 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 000024F0 4883EC08            <1>  sub rsp, 8
   143 000024F4 E8(00000000)        <1>  call fwrite
   144 000024F9 4883C408            <1>  add rsp, 8
  2063                                  
  2064                                      mWriteLine turnoDe, 1, 1 ; Guardamos el turno actual
   138 000024FD 48BF-               <1>  mov rdi, %1
   138 000024FF [9105000000000000]  <1>
   139 00002507 BE01000000          <1>  mov rsi, %2
   140 0000250C BA01000000          <1>  mov rdx, %3
   141 00002511 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 00002519 4883EC08            <1>  sub rsp, 8
   143 0000251D E8(00000000)        <1>  call fwrite
   144 00002522 4883C408            <1>  add rsp, 8
  2065                                  
  2066                                      mWriteLine movimientosOfic1, 8, 1
   138 00002526 48BF-               <1>  mov rdi, %1
   138 00002528 [C207000000000000]  <1>
   139 00002530 BE08000000          <1>  mov rsi, %2
   140 00002535 BA01000000          <1>  mov rdx, %3
   141 0000253A 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 00002542 4883EC08            <1>  sub rsp, 8
   143 00002546 E8(00000000)        <1>  call fwrite
   144 0000254B 4883C408            <1>  add rsp, 8
  2067                                      mWriteLine movimientosOfic2, 8, 1
   138 0000254F 48BF-               <1>  mov rdi, %1
   138 00002551 [CA07000000000000]  <1>
   139 00002559 BE08000000          <1>  mov rsi, %2
   140 0000255E BA01000000          <1>  mov rdx, %3
   141 00002563 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 0000256B 4883EC08            <1>  sub rsp, 8
   143 0000256F E8(00000000)        <1>  call fwrite
   144 00002574 4883C408            <1>  add rsp, 8
  2068                                  
  2069                                      mWriteLine movOfic1Adelante, 8, 1
   138 00002578 48BF-               <1>  mov rdi, %1
   138 0000257A [D207000000000000]  <1>
   139 00002582 BE08000000          <1>  mov rsi, %2
   140 00002587 BA01000000          <1>  mov rdx, %3
   141 0000258C 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 00002594 4883EC08            <1>  sub rsp, 8
   143 00002598 E8(00000000)        <1>  call fwrite
   144 0000259D 4883C408            <1>  add rsp, 8
  2070                                      mWriteLine movOfic1Derecha, 8, 1
   138 000025A1 48BF-               <1>  mov rdi, %1
   138 000025A3 [DA07000000000000]  <1>
   139 000025AB BE08000000          <1>  mov rsi, %2
   140 000025B0 BA01000000          <1>  mov rdx, %3
   141 000025B5 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 000025BD 4883EC08            <1>  sub rsp, 8
   143 000025C1 E8(00000000)        <1>  call fwrite
   144 000025C6 4883C408            <1>  add rsp, 8
  2071                                      mWriteLine movOfic1Izquierda, 8, 1
   138 000025CA 48BF-               <1>  mov rdi, %1
   138 000025CC [E207000000000000]  <1>
   139 000025D4 BE08000000          <1>  mov rsi, %2
   140 000025D9 BA01000000          <1>  mov rdx, %3
   141 000025DE 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 000025E6 4883EC08            <1>  sub rsp, 8
   143 000025EA E8(00000000)        <1>  call fwrite
   144 000025EF 4883C408            <1>  add rsp, 8
  2072                                      mWriteLine movOfic1Atras, 8, 1
   138 000025F3 48BF-               <1>  mov rdi, %1
   138 000025F5 [EA07000000000000]  <1>
   139 000025FD BE08000000          <1>  mov rsi, %2
   140 00002602 BA01000000          <1>  mov rdx, %3
   141 00002607 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 0000260F 4883EC08            <1>  sub rsp, 8
   143 00002613 E8(00000000)        <1>  call fwrite
   144 00002618 4883C408            <1>  add rsp, 8
  2073                                      mWriteLine movOfic1Diagonal, 8, 1
   138 0000261C 48BF-               <1>  mov rdi, %1
   138 0000261E [F207000000000000]  <1>
   139 00002626 BE08000000          <1>  mov rsi, %2
   140 0000262B BA01000000          <1>  mov rdx, %3
   141 00002630 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 00002638 4883EC08            <1>  sub rsp, 8
   143 0000263C E8(00000000)        <1>  call fwrite
   144 00002641 4883C408            <1>  add rsp, 8
  2074                                      mWriteLine movOfic1DiagArribaDer, 8, 1
   138 00002645 48BF-               <1>  mov rdi, %1
   138 00002647 [FA07000000000000]  <1>
   139 0000264F BE08000000          <1>  mov rsi, %2
   140 00002654 BA01000000          <1>  mov rdx, %3
   141 00002659 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 00002661 4883EC08            <1>  sub rsp, 8
   143 00002665 E8(00000000)        <1>  call fwrite
   144 0000266A 4883C408            <1>  add rsp, 8
  2075                                      mWriteLine movOfic1DiagArribaIzq, 8, 1
   138 0000266E 48BF-               <1>  mov rdi, %1
   138 00002670 [0208000000000000]  <1>
   139 00002678 BE08000000          <1>  mov rsi, %2
   140 0000267D BA01000000          <1>  mov rdx, %3
   141 00002682 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 0000268A 4883EC08            <1>  sub rsp, 8
   143 0000268E E8(00000000)        <1>  call fwrite
   144 00002693 4883C408            <1>  add rsp, 8
  2076                                      mWriteLine movOfic1DiagAbajoDer, 8, 1
   138 00002697 48BF-               <1>  mov rdi, %1
   138 00002699 [0A08000000000000]  <1>
   139 000026A1 BE08000000          <1>  mov rsi, %2
   140 000026A6 BA01000000          <1>  mov rdx, %3
   141 000026AB 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 000026B3 4883EC08            <1>  sub rsp, 8
   143 000026B7 E8(00000000)        <1>  call fwrite
   144 000026BC 4883C408            <1>  add rsp, 8
  2077                                      mWriteLine movOfic1DiagAbajoIzq, 8, 1
   138 000026C0 48BF-               <1>  mov rdi, %1
   138 000026C2 [1208000000000000]  <1>
   139 000026CA BE08000000          <1>  mov rsi, %2
   140 000026CF BA01000000          <1>  mov rdx, %3
   141 000026D4 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 000026DC 4883EC08            <1>  sub rsp, 8
   143 000026E0 E8(00000000)        <1>  call fwrite
   144 000026E5 4883C408            <1>  add rsp, 8
  2078                                  
  2079                                      mWriteLine movOfic2Adelante, 8, 1
   138 000026E9 48BF-               <1>  mov rdi, %1
   138 000026EB [1A08000000000000]  <1>
   139 000026F3 BE08000000          <1>  mov rsi, %2
   140 000026F8 BA01000000          <1>  mov rdx, %3
   141 000026FD 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 00002705 4883EC08            <1>  sub rsp, 8
   143 00002709 E8(00000000)        <1>  call fwrite
   144 0000270E 4883C408            <1>  add rsp, 8
  2080                                      mWriteLine movOfic2Derecha, 8, 1
   138 00002712 48BF-               <1>  mov rdi, %1
   138 00002714 [2208000000000000]  <1>
   139 0000271C BE08000000          <1>  mov rsi, %2
   140 00002721 BA01000000          <1>  mov rdx, %3
   141 00002726 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 0000272E 4883EC08            <1>  sub rsp, 8
   143 00002732 E8(00000000)        <1>  call fwrite
   144 00002737 4883C408            <1>  add rsp, 8
  2081                                      mWriteLine movOfic2Izquierda, 8, 1
   138 0000273B 48BF-               <1>  mov rdi, %1
   138 0000273D [2A08000000000000]  <1>
   139 00002745 BE08000000          <1>  mov rsi, %2
   140 0000274A BA01000000          <1>  mov rdx, %3
   141 0000274F 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 00002757 4883EC08            <1>  sub rsp, 8
   143 0000275B E8(00000000)        <1>  call fwrite
   144 00002760 4883C408            <1>  add rsp, 8
  2082                                      mWriteLine movOfic2Atras, 8, 1
   138 00002764 48BF-               <1>  mov rdi, %1
   138 00002766 [3208000000000000]  <1>
   139 0000276E BE08000000          <1>  mov rsi, %2
   140 00002773 BA01000000          <1>  mov rdx, %3
   141 00002778 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 00002780 4883EC08            <1>  sub rsp, 8
   143 00002784 E8(00000000)        <1>  call fwrite
   144 00002789 4883C408            <1>  add rsp, 8
  2083                                      mWriteLine movOfic2Diagonal, 8, 1
   138 0000278D 48BF-               <1>  mov rdi, %1
   138 0000278F [3A08000000000000]  <1>
   139 00002797 BE08000000          <1>  mov rsi, %2
   140 0000279C BA01000000          <1>  mov rdx, %3
   141 000027A1 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 000027A9 4883EC08            <1>  sub rsp, 8
   143 000027AD E8(00000000)        <1>  call fwrite
   144 000027B2 4883C408            <1>  add rsp, 8
  2084                                      mWriteLine movOfic2DiagArribaDer, 8, 1
   138 000027B6 48BF-               <1>  mov rdi, %1
   138 000027B8 [4208000000000000]  <1>
   139 000027C0 BE08000000          <1>  mov rsi, %2
   140 000027C5 BA01000000          <1>  mov rdx, %3
   141 000027CA 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 000027D2 4883EC08            <1>  sub rsp, 8
   143 000027D6 E8(00000000)        <1>  call fwrite
   144 000027DB 4883C408            <1>  add rsp, 8
  2085                                      mWriteLine movOfic2DiagArribaIzq, 8, 1
   138 000027DF 48BF-               <1>  mov rdi, %1
   138 000027E1 [4A08000000000000]  <1>
   139 000027E9 BE08000000          <1>  mov rsi, %2
   140 000027EE BA01000000          <1>  mov rdx, %3
   141 000027F3 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 000027FB 4883EC08            <1>  sub rsp, 8
   143 000027FF E8(00000000)        <1>  call fwrite
   144 00002804 4883C408            <1>  add rsp, 8
  2086                                      mWriteLine movOfic2DiagAbajoDer, 8, 1
   138 00002808 48BF-               <1>  mov rdi, %1
   138 0000280A [5208000000000000]  <1>
   139 00002812 BE08000000          <1>  mov rsi, %2
   140 00002817 BA01000000          <1>  mov rdx, %3
   141 0000281C 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 00002824 4883EC08            <1>  sub rsp, 8
   143 00002828 E8(00000000)        <1>  call fwrite
   144 0000282D 4883C408            <1>  add rsp, 8
  2087                                      mWriteLine movOfic2DiagAbajoIzq, 8, 1
   138 00002831 48BF-               <1>  mov rdi, %1
   138 00002833 [5A08000000000000]  <1>
   139 0000283B BE08000000          <1>  mov rsi, %2
   140 00002840 BA01000000          <1>  mov rdx, %3
   141 00002845 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 0000284D 4883EC08            <1>  sub rsp, 8
   143 00002851 E8(00000000)        <1>  call fwrite
   144 00002856 4883C408            <1>  add rsp, 8
  2088                                  
  2089                                      mWriteLine cantSoldCapturados, 8, 1
   138 0000285A 48BF-               <1>  mov rdi, %1
   138 0000285C [6208000000000000]  <1>
   139 00002864 BE08000000          <1>  mov rsi, %2
   140 00002869 BA01000000          <1>  mov rdx, %3
   141 0000286E 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 00002876 4883EC08            <1>  sub rsp, 8
   143 0000287A E8(00000000)        <1>  call fwrite
   144 0000287F 4883C408            <1>  add rsp, 8
  2090                                      mWriteLine cantOficInvalidados, 8, 1
   138 00002883 48BF-               <1>  mov rdi, %1
   138 00002885 [6A08000000000000]  <1>
   139 0000288D BE08000000          <1>  mov rsi, %2
   140 00002892 BA01000000          <1>  mov rdx, %3
   141 00002897 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 0000289F 4883EC08            <1>  sub rsp, 8
   143 000028A3 E8(00000000)        <1>  call fwrite
   144 000028A8 4883C408            <1>  add rsp, 8
  2091                                  
  2092                                      mWriteLine casillaOfic1, 8, 1
   138 000028AC 48BF-               <1>  mov rdi, %1
   138 000028AE [7208000000000000]  <1>
   139 000028B6 BE08000000          <1>  mov rsi, %2
   140 000028BB BA01000000          <1>  mov rdx, %3
   141 000028C0 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 000028C8 4883EC08            <1>  sub rsp, 8
   143 000028CC E8(00000000)        <1>  call fwrite
   144 000028D1 4883C408            <1>  add rsp, 8
  2093                                      mWriteLine casillaOfic1+8, 8, 1
   138 000028D5 48BF-               <1>  mov rdi, %1
   138 000028D7 [7A08000000000000]  <1>
   139 000028DF BE08000000          <1>  mov rsi, %2
   140 000028E4 BA01000000          <1>  mov rdx, %3
   141 000028E9 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 000028F1 4883EC08            <1>  sub rsp, 8
   143 000028F5 E8(00000000)        <1>  call fwrite
   144 000028FA 4883C408            <1>  add rsp, 8
  2094                                  
  2095                                      mWriteLine casillaOfic2, 8, 1
   138 000028FE 48BF-               <1>  mov rdi, %1
   138 00002900 [8208000000000000]  <1>
   139 00002908 BE08000000          <1>  mov rsi, %2
   140 0000290D BA01000000          <1>  mov rdx, %3
   141 00002912 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 0000291A 4883EC08            <1>  sub rsp, 8
   143 0000291E E8(00000000)        <1>  call fwrite
   144 00002923 4883C408            <1>  add rsp, 8
  2096                                      mWriteLine casillaOfic2+8, 8, 1
   138 00002927 48BF-               <1>  mov rdi, %1
   138 00002929 [8A08000000000000]  <1>
   139 00002931 BE08000000          <1>  mov rsi, %2
   140 00002936 BA01000000          <1>  mov rdx, %3
   141 0000293B 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 00002943 4883EC08            <1>  sub rsp, 8
   143 00002947 E8(00000000)        <1>  call fwrite
   144 0000294C 4883C408            <1>  add rsp, 8
  2097                                  
  2098                                      mWriteLine cantCapturasOfic1, 8, 1
   138 00002950 48BF-               <1>  mov rdi, %1
   138 00002952 [9208000000000000]  <1>
   139 0000295A BE08000000          <1>  mov rsi, %2
   140 0000295F BA01000000          <1>  mov rdx, %3
   141 00002964 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 0000296C 4883EC08            <1>  sub rsp, 8
   143 00002970 E8(00000000)        <1>  call fwrite
   144 00002975 4883C408            <1>  add rsp, 8
  2099                                      mWriteLine cantCapturasOfic2, 8, 1
   138 00002979 48BF-               <1>  mov rdi, %1
   138 0000297B [9A08000000000000]  <1>
   139 00002983 BE08000000          <1>  mov rsi, %2
   140 00002988 BA01000000          <1>  mov rdx, %3
   141 0000298D 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   142 00002995 4883EC08            <1>  sub rsp, 8
   143 00002999 E8(00000000)        <1>  call fwrite
   144 0000299E 4883C408            <1>  add rsp, 8
  2100                                  
  2101 000029A2 C3                          ret
  2102                                  
  2103                                  ; --------------------------------------------------------------------------------------------
  2104                                  ; RUTINA PARA OBTENER LOS DATOS DE UNA PARTIDA GUARDADA
  2105                                  ; --------------------------------------------------------------------------------------------
  2106                                  
  2107                                  abrirPartidaGuardada:
  2108                                      ; Recreamos el tablero guardado
  2109                                      mReadLine tableroEnJuego, 116, 1
   128 000029A3 48BF-               <1>  mov rdi, %1
   128 000029A5 [0400000000000000]  <1>
   129 000029AD BE74000000          <1>  mov rsi, %2
   130 000029B2 BA01000000          <1>  mov rdx, %3
   131 000029B7 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 000029BF 4883EC08            <1>  sub rsp, 8
   133 000029C3 E8(00000000)        <1>  call fread
   134 000029C8 4883C408            <1>  add rsp, 8
  2110                                  
  2111                                      mReadLine yaHabiaGuardado, 1, 1
   128 000029CC 48BF-               <1>  mov rdi, %1
   128 000029CE [8F05000000000000]  <1>
   129 000029D6 BE01000000          <1>  mov rsi, %2
   130 000029DB BA01000000          <1>  mov rdx, %3
   131 000029E0 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 000029E8 4883EC08            <1>  sub rsp, 8
   133 000029EC E8(00000000)        <1>  call fread
   134 000029F1 4883C408            <1>  add rsp, 8
  2112                                      mReadLine turnoDe, 1, 1
   128 000029F5 48BF-               <1>  mov rdi, %1
   128 000029F7 [9105000000000000]  <1>
   129 000029FF BE01000000          <1>  mov rsi, %2
   130 00002A04 BA01000000          <1>  mov rdx, %3
   131 00002A09 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002A11 4883EC08            <1>  sub rsp, 8
   133 00002A15 E8(00000000)        <1>  call fread
   134 00002A1A 4883C408            <1>  add rsp, 8
  2113                                  
  2114                                      mReadLine movimientosOfic1, 8, 1
   128 00002A1E 48BF-               <1>  mov rdi, %1
   128 00002A20 [C207000000000000]  <1>
   129 00002A28 BE08000000          <1>  mov rsi, %2
   130 00002A2D BA01000000          <1>  mov rdx, %3
   131 00002A32 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002A3A 4883EC08            <1>  sub rsp, 8
   133 00002A3E E8(00000000)        <1>  call fread
   134 00002A43 4883C408            <1>  add rsp, 8
  2115                                      mReadLine movimientosOfic2, 8, 1
   128 00002A47 48BF-               <1>  mov rdi, %1
   128 00002A49 [CA07000000000000]  <1>
   129 00002A51 BE08000000          <1>  mov rsi, %2
   130 00002A56 BA01000000          <1>  mov rdx, %3
   131 00002A5B 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002A63 4883EC08            <1>  sub rsp, 8
   133 00002A67 E8(00000000)        <1>  call fread
   134 00002A6C 4883C408            <1>  add rsp, 8
  2116                                  
  2117                                      mReadLine movOfic1Adelante, 8, 1
   128 00002A70 48BF-               <1>  mov rdi, %1
   128 00002A72 [D207000000000000]  <1>
   129 00002A7A BE08000000          <1>  mov rsi, %2
   130 00002A7F BA01000000          <1>  mov rdx, %3
   131 00002A84 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002A8C 4883EC08            <1>  sub rsp, 8
   133 00002A90 E8(00000000)        <1>  call fread
   134 00002A95 4883C408            <1>  add rsp, 8
  2118                                      mReadLine movOfic1Derecha, 8, 1
   128 00002A99 48BF-               <1>  mov rdi, %1
   128 00002A9B [DA07000000000000]  <1>
   129 00002AA3 BE08000000          <1>  mov rsi, %2
   130 00002AA8 BA01000000          <1>  mov rdx, %3
   131 00002AAD 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002AB5 4883EC08            <1>  sub rsp, 8
   133 00002AB9 E8(00000000)        <1>  call fread
   134 00002ABE 4883C408            <1>  add rsp, 8
  2119                                      mReadLine movOfic1Izquierda, 8, 1
   128 00002AC2 48BF-               <1>  mov rdi, %1
   128 00002AC4 [E207000000000000]  <1>
   129 00002ACC BE08000000          <1>  mov rsi, %2
   130 00002AD1 BA01000000          <1>  mov rdx, %3
   131 00002AD6 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002ADE 4883EC08            <1>  sub rsp, 8
   133 00002AE2 E8(00000000)        <1>  call fread
   134 00002AE7 4883C408            <1>  add rsp, 8
  2120                                      mReadLine movOfic1Atras, 8, 1
   128 00002AEB 48BF-               <1>  mov rdi, %1
   128 00002AED [EA07000000000000]  <1>
   129 00002AF5 BE08000000          <1>  mov rsi, %2
   130 00002AFA BA01000000          <1>  mov rdx, %3
   131 00002AFF 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002B07 4883EC08            <1>  sub rsp, 8
   133 00002B0B E8(00000000)        <1>  call fread
   134 00002B10 4883C408            <1>  add rsp, 8
  2121                                      mReadLine movOfic1Diagonal, 8, 1
   128 00002B14 48BF-               <1>  mov rdi, %1
   128 00002B16 [F207000000000000]  <1>
   129 00002B1E BE08000000          <1>  mov rsi, %2
   130 00002B23 BA01000000          <1>  mov rdx, %3
   131 00002B28 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002B30 4883EC08            <1>  sub rsp, 8
   133 00002B34 E8(00000000)        <1>  call fread
   134 00002B39 4883C408            <1>  add rsp, 8
  2122                                      mReadLine movOfic1DiagArribaDer, 8, 1
   128 00002B3D 48BF-               <1>  mov rdi, %1
   128 00002B3F [FA07000000000000]  <1>
   129 00002B47 BE08000000          <1>  mov rsi, %2
   130 00002B4C BA01000000          <1>  mov rdx, %3
   131 00002B51 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002B59 4883EC08            <1>  sub rsp, 8
   133 00002B5D E8(00000000)        <1>  call fread
   134 00002B62 4883C408            <1>  add rsp, 8
  2123                                      mReadLine movOfic1DiagArribaIzq, 8, 1
   128 00002B66 48BF-               <1>  mov rdi, %1
   128 00002B68 [0208000000000000]  <1>
   129 00002B70 BE08000000          <1>  mov rsi, %2
   130 00002B75 BA01000000          <1>  mov rdx, %3
   131 00002B7A 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002B82 4883EC08            <1>  sub rsp, 8
   133 00002B86 E8(00000000)        <1>  call fread
   134 00002B8B 4883C408            <1>  add rsp, 8
  2124                                      mReadLine movOfic1DiagAbajoDer, 8, 1
   128 00002B8F 48BF-               <1>  mov rdi, %1
   128 00002B91 [0A08000000000000]  <1>
   129 00002B99 BE08000000          <1>  mov rsi, %2
   130 00002B9E BA01000000          <1>  mov rdx, %3
   131 00002BA3 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002BAB 4883EC08            <1>  sub rsp, 8
   133 00002BAF E8(00000000)        <1>  call fread
   134 00002BB4 4883C408            <1>  add rsp, 8
  2125                                      mReadLine movOfic1DiagAbajoIzq, 8, 1
   128 00002BB8 48BF-               <1>  mov rdi, %1
   128 00002BBA [1208000000000000]  <1>
   129 00002BC2 BE08000000          <1>  mov rsi, %2
   130 00002BC7 BA01000000          <1>  mov rdx, %3
   131 00002BCC 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002BD4 4883EC08            <1>  sub rsp, 8
   133 00002BD8 E8(00000000)        <1>  call fread
   134 00002BDD 4883C408            <1>  add rsp, 8
  2126                                  
  2127                                      mReadLine movOfic2Adelante, 8, 1
   128 00002BE1 48BF-               <1>  mov rdi, %1
   128 00002BE3 [1A08000000000000]  <1>
   129 00002BEB BE08000000          <1>  mov rsi, %2
   130 00002BF0 BA01000000          <1>  mov rdx, %3
   131 00002BF5 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002BFD 4883EC08            <1>  sub rsp, 8
   133 00002C01 E8(00000000)        <1>  call fread
   134 00002C06 4883C408            <1>  add rsp, 8
  2128                                      mReadLine movOfic2Derecha, 8, 1
   128 00002C0A 48BF-               <1>  mov rdi, %1
   128 00002C0C [2208000000000000]  <1>
   129 00002C14 BE08000000          <1>  mov rsi, %2
   130 00002C19 BA01000000          <1>  mov rdx, %3
   131 00002C1E 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002C26 4883EC08            <1>  sub rsp, 8
   133 00002C2A E8(00000000)        <1>  call fread
   134 00002C2F 4883C408            <1>  add rsp, 8
  2129                                      mReadLine movOfic2Izquierda, 8, 1
   128 00002C33 48BF-               <1>  mov rdi, %1
   128 00002C35 [2A08000000000000]  <1>
   129 00002C3D BE08000000          <1>  mov rsi, %2
   130 00002C42 BA01000000          <1>  mov rdx, %3
   131 00002C47 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002C4F 4883EC08            <1>  sub rsp, 8
   133 00002C53 E8(00000000)        <1>  call fread
   134 00002C58 4883C408            <1>  add rsp, 8
  2130                                      mReadLine movOfic2Atras, 8, 1
   128 00002C5C 48BF-               <1>  mov rdi, %1
   128 00002C5E [3208000000000000]  <1>
   129 00002C66 BE08000000          <1>  mov rsi, %2
   130 00002C6B BA01000000          <1>  mov rdx, %3
   131 00002C70 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002C78 4883EC08            <1>  sub rsp, 8
   133 00002C7C E8(00000000)        <1>  call fread
   134 00002C81 4883C408            <1>  add rsp, 8
  2131                                      mReadLine movOfic2Diagonal, 8, 1
   128 00002C85 48BF-               <1>  mov rdi, %1
   128 00002C87 [3A08000000000000]  <1>
   129 00002C8F BE08000000          <1>  mov rsi, %2
   130 00002C94 BA01000000          <1>  mov rdx, %3
   131 00002C99 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002CA1 4883EC08            <1>  sub rsp, 8
   133 00002CA5 E8(00000000)        <1>  call fread
   134 00002CAA 4883C408            <1>  add rsp, 8
  2132                                      mReadLine movOfic2DiagArribaDer, 8, 1
   128 00002CAE 48BF-               <1>  mov rdi, %1
   128 00002CB0 [4208000000000000]  <1>
   129 00002CB8 BE08000000          <1>  mov rsi, %2
   130 00002CBD BA01000000          <1>  mov rdx, %3
   131 00002CC2 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002CCA 4883EC08            <1>  sub rsp, 8
   133 00002CCE E8(00000000)        <1>  call fread
   134 00002CD3 4883C408            <1>  add rsp, 8
  2133                                      mReadLine movOfic2DiagArribaIzq, 8, 1
   128 00002CD7 48BF-               <1>  mov rdi, %1
   128 00002CD9 [4A08000000000000]  <1>
   129 00002CE1 BE08000000          <1>  mov rsi, %2
   130 00002CE6 BA01000000          <1>  mov rdx, %3
   131 00002CEB 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002CF3 4883EC08            <1>  sub rsp, 8
   133 00002CF7 E8(00000000)        <1>  call fread
   134 00002CFC 4883C408            <1>  add rsp, 8
  2134                                      mReadLine movOfic2DiagAbajoDer, 8, 1
   128 00002D00 48BF-               <1>  mov rdi, %1
   128 00002D02 [5208000000000000]  <1>
   129 00002D0A BE08000000          <1>  mov rsi, %2
   130 00002D0F BA01000000          <1>  mov rdx, %3
   131 00002D14 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002D1C 4883EC08            <1>  sub rsp, 8
   133 00002D20 E8(00000000)        <1>  call fread
   134 00002D25 4883C408            <1>  add rsp, 8
  2135                                      mReadLine movOfic2DiagAbajoIzq, 8, 1
   128 00002D29 48BF-               <1>  mov rdi, %1
   128 00002D2B [5A08000000000000]  <1>
   129 00002D33 BE08000000          <1>  mov rsi, %2
   130 00002D38 BA01000000          <1>  mov rdx, %3
   131 00002D3D 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002D45 4883EC08            <1>  sub rsp, 8
   133 00002D49 E8(00000000)        <1>  call fread
   134 00002D4E 4883C408            <1>  add rsp, 8
  2136                                  
  2137                                      mReadLine cantSoldCapturados, 8, 1
   128 00002D52 48BF-               <1>  mov rdi, %1
   128 00002D54 [6208000000000000]  <1>
   129 00002D5C BE08000000          <1>  mov rsi, %2
   130 00002D61 BA01000000          <1>  mov rdx, %3
   131 00002D66 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002D6E 4883EC08            <1>  sub rsp, 8
   133 00002D72 E8(00000000)        <1>  call fread
   134 00002D77 4883C408            <1>  add rsp, 8
  2138                                      mReadLine cantOficInvalidados, 8, 1
   128 00002D7B 48BF-               <1>  mov rdi, %1
   128 00002D7D [6A08000000000000]  <1>
   129 00002D85 BE08000000          <1>  mov rsi, %2
   130 00002D8A BA01000000          <1>  mov rdx, %3
   131 00002D8F 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002D97 4883EC08            <1>  sub rsp, 8
   133 00002D9B E8(00000000)        <1>  call fread
   134 00002DA0 4883C408            <1>  add rsp, 8
  2139                                  
  2140                                      mReadLine casillaOfic1, 8, 1
   128 00002DA4 48BF-               <1>  mov rdi, %1
   128 00002DA6 [7208000000000000]  <1>
   129 00002DAE BE08000000          <1>  mov rsi, %2
   130 00002DB3 BA01000000          <1>  mov rdx, %3
   131 00002DB8 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002DC0 4883EC08            <1>  sub rsp, 8
   133 00002DC4 E8(00000000)        <1>  call fread
   134 00002DC9 4883C408            <1>  add rsp, 8
  2141                                      mReadLine casillaOfic1+8, 8, 1
   128 00002DCD 48BF-               <1>  mov rdi, %1
   128 00002DCF [7A08000000000000]  <1>
   129 00002DD7 BE08000000          <1>  mov rsi, %2
   130 00002DDC BA01000000          <1>  mov rdx, %3
   131 00002DE1 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002DE9 4883EC08            <1>  sub rsp, 8
   133 00002DED E8(00000000)        <1>  call fread
   134 00002DF2 4883C408            <1>  add rsp, 8
  2142                                  
  2143                                      mReadLine casillaOfic2, 8, 1
   128 00002DF6 48BF-               <1>  mov rdi, %1
   128 00002DF8 [8208000000000000]  <1>
   129 00002E00 BE08000000          <1>  mov rsi, %2
   130 00002E05 BA01000000          <1>  mov rdx, %3
   131 00002E0A 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002E12 4883EC08            <1>  sub rsp, 8
   133 00002E16 E8(00000000)        <1>  call fread
   134 00002E1B 4883C408            <1>  add rsp, 8
  2144                                      mReadLine casillaOfic2+8, 8, 1
   128 00002E1F 48BF-               <1>  mov rdi, %1
   128 00002E21 [8A08000000000000]  <1>
   129 00002E29 BE08000000          <1>  mov rsi, %2
   130 00002E2E BA01000000          <1>  mov rdx, %3
   131 00002E33 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002E3B 4883EC08            <1>  sub rsp, 8
   133 00002E3F E8(00000000)        <1>  call fread
   134 00002E44 4883C408            <1>  add rsp, 8
  2145                                  
  2146                                      mReadLine cantCapturasOfic1, 8, 1
   128 00002E48 48BF-               <1>  mov rdi, %1
   128 00002E4A [9208000000000000]  <1>
   129 00002E52 BE08000000          <1>  mov rsi, %2
   130 00002E57 BA01000000          <1>  mov rdx, %3
   131 00002E5C 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002E64 4883EC08            <1>  sub rsp, 8
   133 00002E68 E8(00000000)        <1>  call fread
   134 00002E6D 4883C408            <1>  add rsp, 8
  2147                                      mReadLine cantCapturasOfic2, 8, 1
   128 00002E71 48BF-               <1>  mov rdi, %1
   128 00002E73 [9A08000000000000]  <1>
   129 00002E7B BE08000000          <1>  mov rsi, %2
   130 00002E80 BA01000000          <1>  mov rdx, %3
   131 00002E85 488B0C25[D8000000]  <1>  mov rcx, [idArchGuardado]
   132 00002E8D 4883EC08            <1>  sub rsp, 8
   133 00002E91 E8(00000000)        <1>  call fread
   134 00002E96 4883C408            <1>  add rsp, 8
  2148                                  
  2149 00002E9A C3                          ret
