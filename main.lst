     1                                  %macro mPuts 1 ; Imprime el string %1, hasta encontrar un 0
     2                                      mov rdi, %1
     3                                      sub rsp, 8
     4                                      call puts
     5                                      add rsp, 8
     6                                  %endmacro
     7                                  
     8                                  %macro mPrint 2 ; Imprime el string %2 con formato %1
     9                                      mov rdi, %1
    10                                      mov rsi, %2
    11                                      sub rsp, 8
    12                                      call printf
    13                                      add rsp, 8
    14                                  %endmacro
    15                                  
    16                                  %macro mGets 1 ; Obtiene un string por teclado, guard√°ndolo en %1
    17                                      mov rdi, %1
    18                                      sub rsp, 8
    19                                      call gets
    20                                      add rsp, 8
    21                                  %endmacro
    22                                  
    23                                  %macro mCommand 1 ; Ejecuta el comando %1 de la terminal
    24                                      mov rdi, %1
    25                                      sub rsp, 8
    26                                      call system
    27                                      add rsp, 8
    28                                  %endmacro
    29                                  
    30                                  %macro mMov 3 ; Copia %3 bytes del campo de memoria %2 al campo de memoria %1
    31                                      mov rcx, %3
    32                                      lea rsi, [%2]
    33                                      lea rdi, [%1]
    34                                      rep movsb
    35                                  %endmacro
    36                                  
    37                                  %macro mCmp 3 ; Compara %3 bytes del campo %1 con %2
    38                                      mov rcx, %3
    39                                      lea rsi, %1
    40                                      lea rdi, %2
    41                                      repe cmpsb
    42                                  %endmacro 
    43                                  
    44                                  %macro mErrorJump 2 ; Imprime el mensaje de error %1 y salta a la etiqueta %2
    45                                      mPuts %1
    46                                      jmp %2
    47                                  %endmacro
    48                                  
    49                                  %macro mfGets 2
    50                                      mov rdi, %1
    51                                      mov rsi, %2
    52                                      mov rdx, [stdin]
    53                                      sub rsp, 8
    54                                      call fgets
    55                                      add rsp, 8
    56                                  %endmacro
    57                                  
    58                                  %macro mLeerEntradaEstandar 2
    59                                      mov rax, 0      ; syscall: read
    60                                      mov rdi, 0      ; 0: stdin
    61                                      mov rsi, %1   ; buffer (direccion de guardado de lo leido)
    62                                      mov rdx, %2     ; Cuantos bytes queremos leer
    63                                      syscall
    64                                  
    65                                      mov byte[rsi+rax], 0
    66                                  %endmacro
    67                                  
    68                                  %macro mSscanf 3
    69                                      lea rdi, %1     ; Variable Original string
    70                                      mov rsi, %2     ; Formato
    71                                      mov rdx, %3     ; Variable a guardar el int
    72                                      sub rsp, 8
    73                                      call sscanf
    74                                      add rsp, 8
    75                                  %endmacro
    76                                  
    77                                  %macro mAtoi 2
    78                                      lea rdi, %1
    79                                      sub rsp, 8
    80                                      call atoi
    81                                      add rsp, 8
    82                                      mov [%2], eax
    83                                  %endmacro
    84                                  
    85                                  %macro mCalcDesplaz 3
    86                                      mov rdi, %1
    87                                      mov rsi, %2
    88                                      call calcularDesplazamiento
    89                                      mov %3, rax
    90                                  %endmacro
    91                                  
    92                                  %macro mEstaVacia 1 
    93                                      mov rax, 0
    94                                      mov rdi, %1 ; recibe el desplazamiento
    95                                      call estaVacia
    96                                  %endmacro
    97                                  
    98                                  %macro mHaySoldado 1
    99                                      mov rax, 0
   100                                      mov rdi, %1 ; recibe el desplazamiento
   101                                      call haySoldado
   102                                  %endmacro
   103                                  
   104                                  %macro mPuedeCapturar 2
   105                                      mov rdi, %1 ; diferencia de desplazamiento
   106                                      mov rsi, %2 ; 0 para sumar [rdi] al desplazamiento, 1 para restar
   107                                      call podiaComerPieza
   108                                  %endmacro
   109                                  
   110                                  extern puts, printf
   111                                  extern gets
   112                                  extern system, stdin
   113                                  extern fgets
   114                                  extern atoi
   115                                  extern sscanf
   116                                  
   117                                  section .data
   118                                  
   119                                      ; Tableros y sus posibles estados
   120                                  
   121 00000000 202031323334353637-         tableroOrig         db " "," ","1","2","3","4","5","6","7"," ",10
   121 00000009 200A               
   122 0000000B 2020202D5F5F5F2D20-                             db " "," "," ","-","_","_","_","-"," "," ",10 
   122 00000014 200A               
   123 00000016 3120207C5858587C20-                             db "1"," "," ","|","X","X","X","|"," "," ",10
   123 0000001F 200A               
   124 00000021 322D5F7C5858587C5F-                             db "2","-","_","|","X","X","X","|","_","-",10
   124 0000002A 2D0A               
   125 0000002C 337C58585858585858-                             db "3","|","X","X","X","X","X","X","X","|",10 
   125 00000035 7C0A               
   126 00000037 347C58585858585858-                             db "4","|","X","X","X","X","X","X","X","|",10 
   126 00000040 7C0A               
   127 00000042 357C58582020205858-                             db "5","|","X","X"," "," "," ","X","X","|",10 
   127 0000004B 7C0A               
   128 0000004D 362D2D7C20204F7C2D-                             db "6","-","-","|"," "," ","O","|","-","-",10 
   128 00000056 2D0A               
   129 00000058 3720207C4F20207C20-                             db "7"," "," ","|","O"," "," ","|"," "," ",10 
   129 00000061 200A               
   130 00000063 2020202D2D2D2D2D20-                             db " "," "," ","-","-","-","-","-"," "," ",10,0
   130 0000006C 200A00             
   131                                  
   132 0000006F 202031323334353637-         tableroInv          db " "," ","1","2","3","4","5","6","7"," ",10
   132 00000078 200A               
   133 0000007A 202020205F5F5F2020-                             db " "," "," "," ","_","_","_"," "," "," ",10 
   133 00000083 200A               
   134 00000085 3120207C4F20207C20-                             db "1"," "," ","|","O"," "," ","|"," "," ",10
   134 0000008E 200A               
   135 00000090 32205F7C20204F7C5F-                             db "2"," ","_","|"," "," ","O","|","_"," ",10
   135 00000099 200A               
   136 0000009B 337C58582020205858-                             db "3","|","X","X"," "," "," ","X","X","|",10 
   136 000000A4 7C0A               
   137 000000A6 347C58585858585858-                             db "4","|","X","X","X","X","X","X","X","|",10 
   137 000000AF 7C0A               
   138 000000B1 357C58585858585858-                             db "5","|","X","X","X","X","X","X","X","|",10 
   138 000000BA 7C0A               
   139 000000BC 36202D7C5858587C2D-                             db "6"," ","-","|","X","X","X","|","-"," ",10 
   139 000000C5 200A               
   140 000000C7 3720207C5858587C20-                             db "7"," "," ","|","X","X","X","|"," "," ",10 
   140 000000D0 200A               
   141 000000D2 202020202D2D2D2020-                             db " "," "," "," ","-","-","-"," "," "," ",10,0
   141 000000DB 200A00             
   142                                  
   143 000000DE 202031323334353637-         tableroDer          db " "," ","1","2","3","4","5","6","7"," ",10
   143 000000E7 200A               
   144 000000E9 202020205F5F5F2020-                             db " "," "," "," ","_","_","_"," "," "," ",10 
   144 000000F2 200A               
   145 000000F4 3120207C5858587C20-                             db "1"," "," ","|","X","X","X","|"," "," ",10
   145 000000FD 200A               
   146 000000FF 32205F7C5858587C5F-                             db "2"," ","_","|","X","X","X","|","_"," ",10
   146 00000108 200A               
   147 0000010A 337C5858585820204F-                             db "3","|","X","X","X","X"," "," ","O","|",10 
   147 00000113 7C0A               
   148 00000115 347C58585858202020-                             db "4","|","X","X","X","X"," "," "," ","|",10 
   148 0000011E 7C0A               
   149 00000120 357C58585858204F20-                             db "5","|","X","X","X","X"," ","O"," ","|",10 
   149 00000129 7C0A               
   150 0000012B 36202D7C5858587C2D-                             db "6"," ","-","|","X","X","X","|","-"," ",10 
   150 00000134 200A               
   151 00000136 3720207C5858587C20-                             db "7"," "," ","|","X","X","X","|"," "," ",10 
   151 0000013F 200A               
   152 00000141 202020202D2D2D2020-                             db " "," "," "," ","-","-","-"," "," "," ",10,0
   152 0000014A 200A00             
   153                                  
   154 0000014D 202031323334353637-         tableroIzq          db " "," ","1","2","3","4","5","6","7"," ",10
   154 00000156 200A               
   155 00000158 202020205F5F5F2020-                             db " "," "," "," ","_","_","_"," "," "," ",10 
   155 00000161 200A               
   156 00000163 3120207C5858587C20-                             db "1"," "," ","|","X","X","X","|"," "," ",10
   156 0000016C 200A               
   157 0000016E 32205F7C5858587C5F-                             db "2"," ","_","|","X","X","X","|","_"," ",10
   157 00000177 200A               
   158 00000179 337C4F202058585858-                             db "3","|","O"," "," ","X","X","X","X","|",10 
   158 00000182 7C0A               
   159 00000184 347C20202058585858-                             db "4","|"," "," "," ","X","X","X","X","|",10 
   159 0000018D 7C0A               
   160 0000018F 357C204F2058585858-                             db "5","|"," ","O"," ","X","X","X","X","|",10 
   160 00000198 7C0A               
   161 0000019A 36202D7C5858587C2D-                             db "6"," ","-","|","X","X","X","|","-"," ",10 
   161 000001A3 200A               
   162 000001A5 3720207C5858587C20-                             db "7"," "," ","|","X","X","X","|"," "," ",10 
   162 000001AE 200A               
   163 000001B0 202020202D2D2D2020-                             db " "," "," "," ","-","-","-"," "," "," ",10,0
   163 000001B9 200A00             
   164                                  
   165                                      ; Mensajes
   166                                  
   167 000001BC C2A14269656E76656E-         msgBienvenida           db "¬°Bienvenido al juego El Asalto!", 0
   167 000001C5 69646F20616C206A75-
   167 000001CE 65676F20456C204173-
   167 000001D7 616C746F2100       
   168                                  
   169 000001DD C2BF44657365612070-         msgPersonalizarTablero  db "¬øDesea personalizar el tablero? (s/n): ", 0 
   169 000001E6 6572736F6E616C697A-
   169 000001EF 617220656C20746162-
   169 000001F8 6C65726F3F2028732F-
   169 00000201 6E293A2000         
   170                                  
   171 00000206 4F706369C3B36E2069-         msgOpcionInvalida       db "Opci√≥n inv√°lida. Intente de nuevo.", 0
   171 0000020F 6E76C3A16C6964612E-
   171 00000218 20496E74656E746520-
   171 00000221 6465206E7565766F2E-
   171 0000022A 00                 
   172                                      
   173 0000022B 436173696C6C612069-         msgCasillaInvalidaSold  db "Casilla inv√°lida: no hay un soldado en esa casilla. Intente de nuevo.", 0
   173 00000234 6E76C3A16C6964613A-
   173 0000023D 206E6F206861792075-
   173 00000246 6E20736F6C6461646F-
   173 0000024F 20656E206573612063-
   173 00000258 6173696C6C612E2049-
   173 00000261 6E74656E7465206465-
   173 0000026A 206E7565766F2E00   
   174 00000272 4572726F7220656E20-         msgErrorInputSold       db "Error en el formato de entrada del soldado. Intente de nuevo.", 0
   174 0000027B 656C20666F726D6174-
   174 00000284 6F20646520656E7472-
   174 0000028D 6164612064656C2073-
   174 00000296 6F6C6461646F2E2049-
   174 0000029F 6E74656E7465206465-
   174 000002A8 206E7565766F2E00   
   175 000002B0 4E6F20736520707565-         msgCasillaInvMovSold    db "No se puede mover el soldado a esa casilla. Intente de nuevo.", 0
   175 000002B9 6465206D6F76657220-
   175 000002C2 656C20736F6C646164-
   175 000002CB 6F2061206573612063-
   175 000002D4 6173696C6C612E2049-
   175 000002DD 6E74656E7465206465-
   175 000002E6 206E7565766F2E00   
   176                                  
   177 000002EE 436173696C6C612069-         msgCasillaInvalidaOfic  db "Casilla inv√°lida: no hay un oficial en esa casilla. Intente de nuevo.", 0
   177 000002F7 6E76C3A16C6964613A-
   177 00000300 206E6F206861792075-
   177 00000309 6E206F66696369616C-
   177 00000312 20656E206573612063-
   177 0000031B 6173696C6C612E2049-
   177 00000324 6E74656E7465206465-
   177 0000032D 206E7565766F2E00   
   178 00000335 4572726F7220656E20-         msgErrorInputOfic       db "Error en el formato de entrada del oficial. Intente de nuevo.", 0
   178 0000033E 656C20666F726D6174-
   178 00000347 6F20646520656E7472-
   178 00000350 6164612064656C206F-
   178 00000359 66696369616C2E2049-
   178 00000362 6E74656E7465206465-
   178 0000036B 206E7565766F2E00   
   179 00000373 4E6F20736520707565-         msgCasillaInvMovOfic    db "No se puede mover el oficial a esa casilla. Intente de nuevo.", 0
   179 0000037C 6465206D6F76657220-
   179 00000385 656C206F6669636961-
   179 0000038E 6C2061206573612063-
   179 00000397 6173696C6C612E2049-
   179 000003A0 6E74656E7465206465-
   179 000003A9 206E7565766F2E00   
   180                                  
   181 000003B1 C2A153652070756564-         msgPregRotacion         db "¬°Se puede rotar el tablero! Elija una de las opciones (1-4):", 0
   181 000003BA 6520726F7461722065-
   181 000003C3 6C207461626C65726F-
   181 000003CC 2120456C696A612075-
   181 000003D5 6E61206465206C6173-
   181 000003DE 206F7063696F6E6573-
   181 000003E7 2028312D34293A00   
   182 000003EF 312E20526F74617220-         msgRotacionesPosibles   db "1. Rotar a la izquierda", 10
   182 000003F8 61206C6120697A7175-
   182 00000401 69657264610A       
   183 00000407 322E20526F74617220-                                 db "2. Rotar a la derecha", 10
   183 00000410 61206C612064657265-
   183 00000419 6368610A           
   184 0000041D 332E20496E76657274-                                 db "3. Invertir el tablero", 10
   184 00000426 697220656C20746162-
   184 0000042F 6C65726F0A         
   185 00000434 342E204E6F20726F74-                                 db "4. No rotar", 0
   185 0000043D 617200             
   186                                      
   187 00000440 C2A1456C696A616D6F-         msgPersonalizarSimb     db "¬°Elijamos los s√≠mbolos para cada personaje! Escriba UN (1) solo caracter para cada uno.", 0
   187 00000449 73206C6F732073C3AD-
   187 00000452 6D626F6C6F73207061-
   187 0000045B 726120636164612070-
   187 00000464 6572736F6E616A6521-
   187 0000046D 204573637269626120-
   187 00000476 554E2028312920736F-
   187 0000047F 6C6F20636172616374-
   187 00000488 657220706172612063-
   187 00000491 61646120756E6F2E00 
   188 0000049A 53C3AD6D626F6C6F20-         msgSimboloOficiales     db "S√≠mbolo para los oficiales:", 0
   188 000004A3 70617261206C6F7320-
   188 000004AC 6F66696369616C6573-
   188 000004B5 3A00               
   189 000004B7 53C3AD6D626F6C6F20-         msgSimboloSoldados      db "S√≠mbolo para los soldados:", 0
   189 000004C0 70617261206C6F7320-
   189 000004C9 736F6C6461646F733A-
   189 000004D2 00                 
   190                                  
   191 000004D3 C2BF517569C3A96E20-         msgQuienInicia          db "¬øQui√©n inicia el juego: oficiales o soldados? (o/s): ", 0
   191 000004DC 696E6963696120656C-
   191 000004E5 206A7565676F3A206F-
   191 000004EE 66696369616C657320-
   191 000004F7 6F20736F6C6461646F-
   191 00000500 733F20286F2F73293A-
   191 00000509 2000               
   192                                  
   193 0000050B C2A1556E206F666963-         msgOficialRetirado      db "¬°Un oficial ha sido retirado del juego! Se ha olvidado de atrapar a un soldado.", 0
   193 00000514 69616C206861207369-
   193 0000051D 646F20726574697261-
   193 00000526 646F2064656C206A75-
   193 0000052F 65676F212053652068-
   193 00000538 61206F6C7669646164-
   193 00000541 6F2064652061747261-
   193 0000054A 706172206120756E20-
   193 00000553 736F6C6461646F2E00 
   194                                  
   195 0000055C 4573746164C3AD7374-         msgEstadisticas         db "Estad√≠sticas de los oficiales:", 10, 0
   195 00000565 69636173206465206C-
   195 0000056E 6F73206F6669636961-
   195 00000577 6C65733A0A00       
   196                                  
   197 0000057D 43616E746964616420-         msgCantTotalCapturas    db "Cantidad total de capturas: %d", 10, 10, 0
   197 00000586 746F74616C20646520-
   197 0000058F 63617074757261733A-
   197 00000598 2025640A0A00       
   198                                  
   199 0000059E 4F66696369616C2031-         msgOficial1             db "Oficial 1:", 10, 0
   199 000005A7 3A0A00             
   200 000005AA 4F66696369616C2032-         msgOficial2             db "Oficial 2:", 10, 0
   200 000005B3 3A0A00             
   201                                  
   202 000005B6 4D6F76696D69656E74-         msgCantMovimientos      db "Movimientos totales: %d", 10, 0
   202 000005BF 6F7320746F74616C65-
   202 000005C8 733A2025640A00     
   203 000005CF 2D2048616369612061-         msgCantAdelante         db "- Hacia adelante: %d", 10, 0
   203 000005D8 64656C616E74653A20-
   203 000005E1 25640A00           
   204 000005E5 2D204861636961206C-         msgCantDerecha          db "- Hacia la derecha: %d", 10, 0
   204 000005EE 612064657265636861-
   204 000005F7 3A2025640A00       
   205 000005FD 2D204861636961206C-         msgCantIzquierda        db "- Hacia la izquierda: %d", 10, 0
   205 00000606 6120697A7175696572-
   205 0000060F 64613A2025640A00   
   206 00000617 2D2048616369612061-         msgCantAtras            db "- Hacia atr√°s: %d", 10, 0
   206 00000620 7472C3A1733A202564-
   206 00000629 0A00               
   207 0000062B 2D20456E2064696167-         msgCantDiagonal         db "- En diagonal: %d", 10, 0
   207 00000634 6F6E616C3A2025640A-
   207 0000063D 00                 
   208 0000063E 2D2D2D204164656C61-         msgCantDiagArribaDer    db "--- Adelante-derecha: %d", 10, 0
   208 00000647 6E74652D6465726563-
   208 00000650 68613A2025640A00   
   209 00000658 2D2D2D204164656C61-         msgCantDiagArribaIzq    db "--- Adelante-izquierda: %d", 10, 0
   209 00000661 6E74652D697A717569-
   209 0000066A 657264613A2025640A-
   209 00000673 00                 
   210 00000674 2D2D2D20417472C3A1-         msgCantDiagAbajoDer     db "--- Atr√°s-derecha: %d", 10, 0
   210 0000067D 732D64657265636861-
   210 00000686 3A2025640A00       
   211 0000068C 2D2D2D20417472C3A1-         msgCantDiagAbajoIzq     db "--- Atr√°s-izquierda: %d", 10, 0
   211 00000695 732D697A7175696572-
   211 0000069E 64613A2025640A00   
   212                                  
   213 000006A6 43616E746964616420-         msgCantSoldadosCapt     db "Cantidad de soldados capturados: %d", 10, 10, 0
   213 000006AF 646520736F6C646164-
   213 000006B8 6F7320636170747572-
   213 000006C1 61646F733A2025640A-
   213 000006CA 0A00               
   214                                  
   215 000006CC C2A1456C206A756567-         msgJuegoTerminado       db "¬°El juego ha terminado!", 10, 0
   215 000006D5 6F206861207465726D-
   215 000006DE 696E61646F210A00   
   216 000006E6 C2A1456C2067616E61-         msgGanador              db "¬°El ganador es el equipo de los %s!", 10, 0
   216 000006EF 646F7220657320656C-
   216 000006F8 2065717569706F2064-
   216 00000701 65206C6F7320257321-
   216 0000070A 0A00               
   217 0000070C 736F6C6461646F7300          stringSoldados          db "soldados", 0
   218 00000715 6F66696369616C6573-         stringOficiales         db "oficiales", 0
   218 0000071E 00                 
   219                                  
   220 0000071F 52617AC3B36E3A2025-         msgRazonGanador         db "Raz√≥n: %s", 10, 0
   220 00000728 730A00             
   221                                  
   222 0000072B 2D2D2D2D00                  varRazonFin             db '----', 0 ; Raz√≥n de fin de juego (a llenar)          
   223                                  
   224                                      ; Se ha decidido salir de la partida
   225 00000730 536520686120646563-         msgSalidaPartida        db "Se ha decidido salir de la partida. ¬øDesea guardarla? (y/n)", 0
   225 00000739 696469646F2073616C-
   225 00000742 6972206465206C6120-
   225 0000074B 706172746964612E20-
   225 00000754 C2BF44657365612067-
   225 0000075D 7561726461726C613F-
   225 00000766 2028792F6E2900     
   226 0000076D 6E                          guardadoPartida         db 'n' ; guardar (y), no guardar (n)
   227                                  
   228                                      ; Razones de victoria de soldados
   229 0000076E 6C6F7320736F6C6461-         msgSoldadosFortaleza    db "los soldados han ocupado todos los puntos de la fortaleza.", 0
   229 00000777 646F732068616E206F-
   229 00000780 63757061646F20746F-
   229 00000789 646F73206C6F732070-
   229 00000792 756E746F7320646520-
   229 0000079B 6C6120666F7274616C-
   229 000007A4 657A612E00         
   230 000007A9 6C6F7320736F6C6461-         msgSoldadosRodean       db "los soldados han rodeado a los oficiales.", 0
   230 000007B2 646F732068616E2072-
   230 000007BB 6F646561646F206120-
   230 000007C4 6C6F73206F66696369-
   230 000007CD 616C65732E00       
   231 000007D3 616D626F73206F6669-         msgSoldadosInvalidar    db "ambos oficiales han sido invalidados.", 0
   231 000007DC 6369616C6573206861-
   231 000007E5 6E207369646F20696E-
   231 000007EE 76616C696461646F73-
   231 000007F7 2E00               
   232                                  
   233                                      ; Razones de victoria de oficiales
   234 000007F9 6E6F2071756564616E-         msgOficialesGanan       db "no quedan suficientes soldados para ocupar la fortaleza.", 0
   234 00000802 20737566696369656E-
   234 0000080B 74657320736F6C6461-
   234 00000814 646F73207061726120-
   234 0000081D 6F6375706172206C61-
   234 00000826 20666F7274616C657A-
   234 0000082F 612E00             
   235                                  
   236                                      ; Turnos
   237 00000832 4573207475726E6F20-         msgTurnoSoldados        db "Es turno de los soldados. Decida a qu√© soldado desea mover: (<numFila>-<numColumna>)", 0
   237 0000083B 6465206C6F7320736F-
   237 00000844 6C6461646F732E2044-
   237 0000084D 656369646120612071-
   237 00000856 75C3A920736F6C6461-
   237 0000085F 646F20646573656120-
   237 00000868 6D6F7665723A20283C-
   237 00000871 6E756D46696C613E2D-
   237 0000087A 3C6E756D436F6C756D-
   237 00000883 6E613E2900         
   238 00000888 4573207475726E6F20-         msgTurnoOficiales       db "Es turno de los oficiales. Decida a qu√© oficial desea mover: (<numFila>-<numColumna>)", 0
   238 00000891 6465206C6F73206F66-
   238 0000089A 696369616C65732E20-
   238 000008A3 446563696461206120-
   238 000008AC 7175C3A9206F666963-
   238 000008B5 69616C206465736561-
   238 000008BE 206D6F7665723A2028-
   238 000008C7 3C6E756D46696C613E-
   238 000008D0 2D3C6E756D436F6C75-
   238 000008D9 6D6E613E2900       
   239 000008DF C2BF41207175C3A920-         msgTurnoMovSold         db "¬øA qu√© casilla desea mover el soldado? (<numFila>-<numColumna>)", 0
   239 000008E8 636173696C6C612064-
   239 000008F1 65736561206D6F7665-
   239 000008FA 7220656C20736F6C64-
   239 00000903 61646F3F20283C6E75-
   239 0000090C 6D46696C613E2D3C6E-
   239 00000915 756D436F6C756D6E61-
   239 0000091E 3E2900             
   240 00000921 C2BF41207175C3A920-         msgTurnoMovOfic         db "¬øA qu√© casilla desea mover el oficial? (<numFila>-<numColumna>)", 0
   240 0000092A 636173696C6C612064-
   240 00000933 65736561206D6F7665-
   240 0000093C 7220656C206F666963-
   240 00000945 69616C3F20283C6E75-
   240 0000094E 6D46696C613E2D3C6E-
   240 00000957 756D436F6C756D6E61-
   240 00000960 3E2900             
   241                                  
   242 00000963 556E206F6669636961-         msgCapturaSold          db "Un oficial ha capturado a un soldado.", 0
   242 0000096C 6C2068612063617074-
   242 00000975 757261646F20612075-
   242 0000097E 6E20736F6C6461646F-
   242 00000987 2E00               
   243 00000989 C2A1556E206F666963-         msgInvalidOfic          db "¬°Un oficial ha sido invalidado! No ha capturado a un soldado regalado.", 0
   243 00000992 69616C206861207369-
   243 0000099B 646F20696E76616C69-
   243 000009A4 6461646F21204E6F20-
   243 000009AD 686120636170747572-
   243 000009B6 61646F206120756E20-
   243 000009BF 736F6C6461646F2072-
   243 000009C8 6567616C61646F2E00 
   244                                      
   245                                      ; Contadores
   246                                  
   247 000009D1 0000000000000000            movimientosOfic1        dq 0
   248 000009D9 0000000000000000            movimientosOfic2        dq 0
   249                                      
   250 000009E1 0000000000000000            movOfic1Adelante        dq 0
   251 000009E9 0000000000000000            movOfic1Derecha         dq 0
   252 000009F1 0000000000000000            movOfic1Izquierda       dq 0
   253 000009F9 0000000000000000            movOfic1Atras           dq 0
   254 00000A01 0000000000000000            movOfic1Diagonal        dq 0
   255 00000A09 0000000000000000            movOfic1DiagArribaDer   dq 0
   256 00000A11 0000000000000000            movOfic1DiagArribaIzq   dq 0
   257 00000A19 0000000000000000            movOfic1DiagAbajoDer    dq 0
   258 00000A21 0000000000000000            movOfic1DiagAbajoIzq    dq 0
   259                                  
   260 00000A29 0000000000000000            movOfic2Adelante        dq 0
   261 00000A31 0000000000000000            movOfic2Derecha         dq 0
   262 00000A39 0000000000000000            movOfic2Izquierda       dq 0
   263 00000A41 0000000000000000            movOfic2Atras           dq 0
   264 00000A49 0000000000000000            movOfic2Diagonal        dq 0
   265 00000A51 0000000000000000            movOfic2DiagArribaDer   dq 0
   266 00000A59 0000000000000000            movOfic2DiagArribaIzq   dq 0
   267 00000A61 0000000000000000            movOfic2DiagAbajoDer    dq 0
   268 00000A69 0000000000000000            movOfic2DiagAbajoIzq    dq 0
   269                                  
   270 00000A71 0000000000000000            cantSoldCapturados      dq 0 ; Cuando haya 16 soldados capturados, los oficiales ganan
   271 00000A79 00                          cantOficInvalidados     db 0 ; Cuando haya 2 oficiales invalidados, los soldados ganan
   272                                  
   273 00000A7A 070000000000000003-         casillaOfic1            dq 7,3
   273 00000A83 00000000000000     
   274 00000A8A 060000000000000005-         casillaOfic2            dq 6,5
   274 00000A93 00000000000000     
   275                                  
   276 00000A9A 0000000000000000            cantCapturasOfic1       dq 0
   277 00000AA2 0000000000000000            cantCapturasOfic2       dq 0
   278                                  
   279 00000AAA 4F00                        simboloOficiales        db 'O', 0
   280 00000AAC 5800                        simboloSoldados         db 'X', 0
   281                                      
   282 00000AAE 04                          orientacionTablero      db  4       ; 4 -> no rotar (default) 
   283 00000AAF 73                          piezaDeInicio           db 's'      ; soldados (s), oficiales (o)
   284                                  
   285                                      ; Comandos 
   286 00000AB0 636C65617200                cmdLimpiarPantalla      db "clear", 0
   287                                  
   288                                      ; Formatos
   289 00000AB6 257500                      formatoAtoi             db "%u", 0
   290                                  
   291                                  section .bss
   292                                  
   293 00000000 ????????                    eleccionRotar       resd 1  ; Variable pivote para la elecci√≥n de rotar el tablero
   294 00000004 ????????                    rotacionElegida     resd 1  ; Variable pivote para la rotaci√≥n del tablero
   295                                  
   296 00000008 ????                        simbOficElegido     resb 2  ; Variable pivote para el s√≠mbolo de los oficiales
   297 0000000A ????                        simbSoldElegido     resb 2  ; Variable pivote para el s√≠mbolo de los soldados
   298                                  
   299 0000000C ????????                    piezaIniElegida     resd 1  ; Variable pivote para la pieza que inicia
   300                                  
   301 00000010 <res 74h>                   tableroEnJuego      resb 116 ; Tablero en juego
   302                                  
   303 00000084 ????????                    soldadoElegido      resb 4  ; Fila y columna del soldado a mover
   304 00000088 ????????                    casillaMovSold      resb 4  ; Fila y columna de la casilla de destino del soldado
   305                                  
   306 0000008C ????????                    oficialElegido      resb 4  ; Fila y columna del oficial a mover
   307 00000090 ????????                    casillaMovOfic      resb 4  ; Fila y columna de la casilla de destino del oficial
   308                                  
   309 00000094 ????????????????            fila                resq 1
   310 0000009C ????????????????            columna             resq 1   
   311 000000A4 ????????????????            desplazCasOrig      resq 1
   312                                  
   313 000000AC ????????????????            filaAMover          resq 1
   314 000000B4 ????????????????            columnaAMover       resq 1
   315 000000BC ????????????????            desplazCasAMover    resq 1
   316                                  
   317 000000C4 ????????????????            filaAux             resq 1
   318 000000CC ????????????????            columnaAux          resq 1
   319 000000D4 ????????????????            desplazAux          resq 1
   320                                      
   321 000000DC <res 47h>                   msgErrorEspecificoSold  resb 71 ; M√°ximo largo de mensaje de error para soldados
   322 00000123 <res 47h>                   msgErrorEspecificoOfic  resb 71 ; M√°ximo largo de mensaje de error para oficiales
   323                                  
   324 0000016A <res 47h>                   msgErrorEspecificoSoldMov   resb 71 ; M√°ximo largo de mensaje de error para movimientos de soldados
   325 000001B1 <res 47h>                   msgErrorEspecificoOficMov   resb 71 ; M√°ximo largo de mensaje de error para movimientos de oficiales
   326                                  
   327                                  section .text
   328                                      global main
   329                                  
   330                                  main:
   331                                  
   332                                      mPuts msgBienvenida
     2 00000000 48BF-               <1>  mov rdi, %1
     2 00000002 [BC01000000000000]  <1>
     3 0000000A 4883EC08            <1>  sub rsp, 8
     4 0000000E E8(00000000)        <1>  call puts
     5 00000013 4883C408            <1>  add rsp, 8
   333                                  
   334                                      ; Espacio de personalizaci√≥n del tablero
   335                                      personalizar:
   336 00000017 C70425[00000000]00-             mov dword[eleccionRotar], ''    ; vaciar variable
   336 0000001F 000000             
   337                                          mPuts msgPersonalizarTablero
     2 00000022 48BF-               <1>  mov rdi, %1
     2 00000024 [DD01000000000000]  <1>
     3 0000002C 4883EC08            <1>  sub rsp, 8
     4 00000030 E8(00000000)        <1>  call puts
     5 00000035 4883C408            <1>  add rsp, 8
   338                                          mGets eleccionRotar
    17 00000039 48BF-               <1>  mov rdi, %1
    17 0000003B [0000000000000000]  <1>
    18 00000043 4883EC08            <1>  sub rsp, 8
    19 00000047 E8(00000000)        <1>  call gets
    20 0000004C 4883C408            <1>  add rsp, 8
   339                                  
   340 00000050 833C25[00000000]6E              cmp dword[eleccionRotar], 'n' 
   341 00000058 0F8408020000                    je dejarTableroOrig
   342 0000005E 833C25[00000000]73              cmp dword[eleccionRotar], 's'
   343 00000066 7419                            je personalizarRotacion
   344                                  
   345                                          mErrorJump msgOpcionInvalida, personalizar
    45                              <1>  mPuts %1
     2 00000068 48BF-               <2>  mov rdi, %1
     2 0000006A [0602000000000000]  <2>
     3 00000072 4883EC08            <2>  sub rsp, 8
     4 00000076 E8(00000000)        <2>  call puts
     5 0000007B 4883C408            <2>  add rsp, 8
    46 0000007F EB96                <1>  jmp %2
   346                                  
   347                                      ; En caso de querer personalizar, se debe elegir la rotaci√≥n
   348                                      personalizarRotacion:
   349                                          mPuts msgPregRotacion
     2 00000081 48BF-               <1>  mov rdi, %1
     2 00000083 [B103000000000000]  <1>
     3 0000008B 4883EC08            <1>  sub rsp, 8
     4 0000008F E8(00000000)        <1>  call puts
     5 00000094 4883C408            <1>  add rsp, 8
   350                                          mPuts msgRotacionesPosibles
     2 00000098 48BF-               <1>  mov rdi, %1
     2 0000009A [EF03000000000000]  <1>
     3 000000A2 4883EC08            <1>  sub rsp, 8
     4 000000A6 E8(00000000)        <1>  call puts
     5 000000AB 4883C408            <1>  add rsp, 8
   351                                  
   352 000000AF C70425[04000000]00-             mov dword[rotacionElegida], '' ; limpiar variable
   352 000000B7 000000             
   353                                          mGets rotacionElegida
    17 000000BA 48BF-               <1>  mov rdi, %1
    17 000000BC [0400000000000000]  <1>
    18 000000C4 4883EC08            <1>  sub rsp, 8
    19 000000C8 E8(00000000)        <1>  call gets
    20 000000CD 4883C408            <1>  add rsp, 8
   354                                  
   355                                          mMov orientacionTablero, rotacionElegida, 1
    31 000000D1 B901000000          <1>  mov rcx, %3
    32 000000D6 488D3425[04000000]  <1>  lea rsi, [%2]
    33 000000DE 488D3C25[AE0A0000]  <1>  lea rdi, [%1]
    34 000000E6 F3A4                <1>  rep movsb
   356                                          
   357 000000E8 833C25[04000000]31              cmp dword[rotacionElegida], '1'
   358 000000F0 7C0F                            jl invalidaRotacion
   359 000000F2 833C25[04000000]34              cmp dword[rotacionElegida], '4'
   360 000000FA 7F05                            jg invalidaRotacion
   361                                  
   362 000000FC E9BF000000                      jmp rotarTablero
   363                                  
   364                                      invalidaRotacion:
   365                                          mErrorJump msgOpcionInvalida, personalizarRotacion
    45                              <1>  mPuts %1
     2 00000101 48BF-               <2>  mov rdi, %1
     2 00000103 [0602000000000000]  <2>
     3 0000010B 4883EC08            <2>  sub rsp, 8
     4 0000010F E8(00000000)        <2>  call puts
     5 00000114 4883C408            <2>  add rsp, 8
    46 00000118 E964FFFFFF          <1>  jmp %2
   366                                  
   367                                      ; Luego de elegir la rotaci√≥n, se debe personalizar los s√≠mbolos
   368                                      personalizarSimbolos:
   369                                          mPuts msgPersonalizarSimb
     2 0000011D 48BF-               <1>  mov rdi, %1
     2 0000011F [4004000000000000]  <1>
     3 00000127 4883EC08            <1>  sub rsp, 8
     4 0000012B E8(00000000)        <1>  call puts
     5 00000130 4883C408            <1>  add rsp, 8
   370                                  
   371 00000134 E8E0020000                      call setearSimbSoldados
   372 00000139 E869030000                      call setearSimbOficiales
   373                                          
   374                                      ; Luego de personalizar los s√≠mbolos, se debe elegir qui√©n inicia la partida
   375                                      personalizarQuienInicia:
   376 0000013E C70425[0C000000]00-             mov dword[piezaIniElegida], ''    ; vaciar variable
   376 00000146 000000             
   377                                          mPuts msgQuienInicia
     2 00000149 48BF-               <1>  mov rdi, %1
     2 0000014B [D304000000000000]  <1>
     3 00000153 4883EC08            <1>  sub rsp, 8
     4 00000157 E8(00000000)        <1>  call puts
     5 0000015C 4883C408            <1>  add rsp, 8
   378                                          mGets piezaIniElegida
    17 00000160 48BF-               <1>  mov rdi, %1
    17 00000162 [0C00000000000000]  <1>
    18 0000016A 4883EC08            <1>  sub rsp, 8
    19 0000016E E8(00000000)        <1>  call gets
    20 00000173 4883C408            <1>  add rsp, 8
   379                                  
   380 00000177 833C25[0C000000]6F              cmp dword[piezaIniElegida], 'o' 
   381 0000017F 7423                            je setearPiezaInicio
   382 00000181 833C25[0C000000]73              cmp dword[piezaIniElegida], 's'
   383 00000189 7419                            je setearPiezaInicio
   384                                  
   385                                          mErrorJump msgOpcionInvalida, personalizarQuienInicia
    45                              <1>  mPuts %1
     2 0000018B 48BF-               <2>  mov rdi, %1
     2 0000018D [0602000000000000]  <2>
     3 00000195 4883EC08            <2>  sub rsp, 8
     4 00000199 E8(00000000)        <2>  call puts
     5 0000019E 4883C408            <2>  add rsp, 8
    46 000001A2 EB9A                <1>  jmp %2
   386                                  
   387                                          setearPiezaInicio:
   388                                              mMov piezaDeInicio, piezaIniElegida, 1
    31 000001A4 B901000000          <1>  mov rcx, %3
    32 000001A9 488D3425[0C000000]  <1>  lea rsi, [%2]
    33 000001B1 488D3C25[AF0A0000]  <1>  lea rdi, [%1]
    34 000001B9 F3A4                <1>  rep movsb
   389 000001BB E98E000000                          jmp comenzarPorInicio
   390                                  
   391                                  ; --------------------------------------------------------------------------------------------
   392                                  ; RUTINA PARA ROTAR EL TABLERO EN BASE A LA ELECCI√ìN DEL USUARIO
   393                                  ; --------------------------------------------------------------------------------------------
   394                                  
   395                                  rotarTablero:
   396                                      ; Se debe mostrar el tablero (en la orientacion indicada y con los simbolos indicados), 
   397                                      ; y se debe mostrar el mensaje de turno en base a lo que haya personalizado el usuario.
   398 000001C0 803C25[AE0A0000]31              cmp byte[orientacionTablero], '1'
   399 000001C8 7430                            je rotarIzquierda
   400 000001CA 803C25[AE0A0000]32              cmp byte[orientacionTablero], '2'
   401 000001D2 7442                            je rotarDerecha
   402 000001D4 803C25[AE0A0000]33              cmp byte[orientacionTablero], '3'
   403 000001DC 7454                            je rotarInvertir
   404                                  
   405                                          mMov tableroEnJuego, tableroOrig, 116
    31 000001DE B974000000          <1>  mov rcx, %3
    32 000001E3 488D3425[00000000]  <1>  lea rsi, [%2]
    33 000001EB 488D3C25[10000000]  <1>  lea rdi, [%1]
    34 000001F3 F3A4                <1>  rep movsb
   406 000001F5 E923FFFFFF                      jmp personalizarSimbolos
   407                                  
   408                                      rotarIzquierda:
   409                                          mMov tableroEnJuego, tableroIzq, 116
    31 000001FA B974000000          <1>  mov rcx, %3
    32 000001FF 488D3425[4D010000]  <1>  lea rsi, [%2]
    33 00000207 488D3C25[10000000]  <1>  lea rdi, [%1]
    34 0000020F F3A4                <1>  rep movsb
   410 00000211 E907FFFFFF                      jmp personalizarSimbolos
   411                                      
   412                                      rotarDerecha:
   413                                          mMov tableroEnJuego, tableroDer, 116
    31 00000216 B974000000          <1>  mov rcx, %3
    32 0000021B 488D3425[DE000000]  <1>  lea rsi, [%2]
    33 00000223 488D3C25[10000000]  <1>  lea rdi, [%1]
    34 0000022B F3A4                <1>  rep movsb
   414 0000022D E9EBFEFFFF                      jmp personalizarSimbolos
   415                                  
   416                                      rotarInvertir:
   417                                          mMov tableroEnJuego, tableroInv, 116
    31 00000232 B974000000          <1>  mov rcx, %3
    32 00000237 488D3425[6F000000]  <1>  lea rsi, [%2]
    33 0000023F 488D3C25[10000000]  <1>  lea rdi, [%1]
    34 00000247 F3A4                <1>  rep movsb
   418 00000249 E9CFFEFFFF                      jmp personalizarSimbolos
   419                                  
   420                                  ; --------------------------------------------------------------------------------------------
   421                                  ; RUTINA PARA COMENZAR EL JUEGO -> Se comienza desde el jugador elegido (o el default)
   422                                  ; --------------------------------------------------------------------------------------------
   423                                  
   424                                  comenzarPorInicio:
   425 0000024E 803C25[AF0A0000]73          cmp byte[piezaDeInicio], 's'
   426 00000256 7425                        je loopMovimientos
   427 00000258 803C25[AF0A0000]6F          cmp byte[piezaDeInicio], 'o'
   428 00000260 0F84D6000000                je turnoOficiales
   429                                  
   430                                  
   431                                  ; En caso de no haber personalizado el tablero, se debe dejar el tablero original
   432                                  dejarTableroOrig:
   433                                      mMov tableroEnJuego, tableroOrig, 116
    31 00000266 B974000000          <1>  mov rcx, %3
    32 0000026B 488D3425[00000000]  <1>  lea rsi, [%2]
    33 00000273 488D3C25[10000000]  <1>  lea rdi, [%1]
    34 0000027B F3A4                <1>  rep movsb
   434                                  
   435                                  ; COMIENZA EL JUEGO
   436                                  loopMovimientos:; mostrarTablero, mostrarTurno, realizarMovimiento, verificarFinJuego
   437 0000027D C60425[DC000000]00          mov byte[msgErrorEspecificoSold], 0
   438                                      turnoSoldados:
   439 00000285 C60425[84000000]30              mov byte [soldadoElegido], '0'
   440                                      
   441                                          mCommand cmdLimpiarPantalla ; Limpia la pantalla para mostrar el tablero
    24 0000028D 48BF-               <1>  mov rdi, %1
    24 0000028F [B00A000000000000]  <1>
    25 00000297 4883EC08            <1>  sub rsp, 8
    26 0000029B E8(00000000)        <1>  call system
    27 000002A0 4883C408            <1>  add rsp, 8
   442                                  
   443                                          mPuts tableroEnJuego ; Muestro el tablero
     2 000002A4 48BF-               <1>  mov rdi, %1
     2 000002A6 [1000000000000000]  <1>
     3 000002AE 4883EC08            <1>  sub rsp, 8
     4 000002B2 E8(00000000)        <1>  call puts
     5 000002B7 4883C408            <1>  add rsp, 8
   444                                  
   445 000002BB 803C25[DC000000]00              cmp byte[msgErrorEspecificoSold], 0
   446 000002C3 0F85CB030000                    jne imprimirErrorSold
   447                                  
   448                                          todoOkSold:
   449                                  
   450                                              mPuts msgTurnoSoldados      ; Muestra el mensaje de seleccionar ficha a mover
     2 000002C9 48BF-               <1>  mov rdi, %1
     2 000002CB [3208000000000000]  <1>
     3 000002D3 4883EC08            <1>  sub rsp, 8
     4 000002D7 E8(00000000)        <1>  call puts
     5 000002DC 4883C408            <1>  add rsp, 8
   451                                              mGets soldadoElegido        ; Obtiene la ficha a mover
    17 000002E0 48BF-               <1>  mov rdi, %1
    17 000002E2 [8400000000000000]  <1>
    18 000002EA 4883EC08            <1>  sub rsp, 8
    19 000002EE E8(00000000)        <1>  call gets
    20 000002F3 4883C408            <1>  add rsp, 8
   452                                              
   453 000002F7 E93C020000                          jmp verificarFichaSold ; Verifica si la ficha elegida es valida
   454                                  
   455                                              casillaAMoverseSold:
   456                                                  
   457                                                  mPuts msgTurnoMovSold   ; Muestra el mensaje de seleccionar casilla a mover
     2 000002FC 48BF-               <1>  mov rdi, %1
     2 000002FE [DF08000000000000]  <1>
     3 00000306 4883EC08            <1>  sub rsp, 8
     4 0000030A E8(00000000)        <1>  call puts
     5 0000030F 4883C408            <1>  add rsp, 8
   458                                                  mGets casillaMovSold    ; Obtiene la casilla a mover
    17 00000313 48BF-               <1>  mov rdi, %1
    17 00000315 [8800000000000000]  <1>
    18 0000031D 4883EC08            <1>  sub rsp, 8
    19 00000321 E8(00000000)        <1>  call gets
    20 00000326 4883C408            <1>  add rsp, 8
   459                                  
   460 0000032A E9FF040000                              jmp verificarMovimientoSold ; Verifica si el movimiento es valido
   461                                  
   462                                                  moverSoldado:
   463 0000032F E84A0B0000                                  call realizarMovimientoSold ; Realiza el movimiento
   464                                  
   465 00000334 C60425[23010000]00          mov byte[msgErrorEspecificoOfic], 0
   466                                      turnoOficiales:
   467 0000033C C60425[8C000000]30              mov byte[oficialElegido], '0'
   468                                          
   469                                          mCommand cmdLimpiarPantalla ; Limpia la pantalla para mostrar el tablero
    24 00000344 48BF-               <1>  mov rdi, %1
    24 00000346 [B00A000000000000]  <1>
    25 0000034E 4883EC08            <1>  sub rsp, 8
    26 00000352 E8(00000000)        <1>  call system
    27 00000357 4883C408            <1>  add rsp, 8
   470                                  
   471                                          mPuts tableroEnJuego ; Muestra el tablero
     2 0000035B 48BF-               <1>  mov rdi, %1
     2 0000035D [1000000000000000]  <1>
     3 00000365 4883EC08            <1>  sub rsp, 8
     4 00000369 E8(00000000)        <1>  call puts
     5 0000036E 4883C408            <1>  add rsp, 8
   472                                  
   473 00000372 803C25[23010000]00              cmp byte[msgErrorEspecificoOfic], 0
   474 0000037A 0F8592040000                    jne imprimirErrorOfic
   475                                  
   476                                          todoOkOfic:
   477                                  
   478                                              mPuts msgTurnoOficiales ; Muestra el mensaje de seleccionar ficha a mover
     2 00000380 48BF-               <1>  mov rdi, %1
     2 00000382 [8808000000000000]  <1>
     3 0000038A 4883EC08            <1>  sub rsp, 8
     4 0000038E E8(00000000)        <1>  call puts
     5 00000393 4883C408            <1>  add rsp, 8
   479                                              mGets oficialElegido    ; Obtiene la ficha a mover
    17 00000397 48BF-               <1>  mov rdi, %1
    17 00000399 [8C00000000000000]  <1>
    18 000003A1 4883EC08            <1>  sub rsp, 8
    19 000003A5 E8(00000000)        <1>  call gets
    20 000003AA 4883C408            <1>  add rsp, 8
   480                                  
   481 000003AE E9FD020000                          jmp verificarFichaOfic ; Verifica si la ficha elegida es valida
   482                                  
   483                                              casillaAMoverseOfic:
   484                                  
   485                                                  mPuts msgTurnoMovOfic   ; Muestra el mensaje de seleccionar casilla a mover
     2 000003B3 48BF-               <1>  mov rdi, %1
     2 000003B5 [2109000000000000]  <1>
     3 000003BD 4883EC08            <1>  sub rsp, 8
     4 000003C1 E8(00000000)        <1>  call puts
     5 000003C6 4883C408            <1>  add rsp, 8
   486                                                  mGets casillaMovOfic    ; Obtiene la casilla a mover
    17 000003CA 48BF-               <1>  mov rdi, %1
    17 000003CC [9000000000000000]  <1>
    18 000003D4 4883EC08            <1>  sub rsp, 8
    19 000003D8 E8(00000000)        <1>  call gets
    20 000003DD 4883C408            <1>  add rsp, 8
   487                                                  
   488 000003E1 E9E2070000                              jmp verificarMovimientoOfic ; Verifica si el movimiento es valido
   489                                  
   490                                                  moverOficial:
   491 000003E6 E8C10A0000                                  call realizarMovimientoOfic ; Realiza el movimiento
   492                                                      ; Verificar fin de juego por alg√∫n movimiento de oficial
   493 000003EB E81F150000                                  call verificarFinJuegoOficiales
   494 000003F0 4883F800                                    cmp rax, 0
   495 000003F4 0F844F150000                                je finDeJuego
   496                                                      
   497 000003FA E97EFEFFFF                                  jmp loopMovimientos
   498                                                  
   499                                                  capturar:
   500 000003FF E84B0E0000                                  call capturarSoldado ; Captura soldado
   501                                                      ; Verificar fin de juego por captura de soldado
   502 00000404 E806150000                                  call verificarFinJuegoOficiales
   503 00000409 4883F800                                    cmp rax, 0
   504 0000040D 0F8436150000                                je finDeJuego
   505                                                      
   506                                                  ; Repetir en loop
   507 00000413 E965FEFFFF                              jmp loopMovimientos
   508                                  
   509 00000418 C3                          ret
   510                                      ; Aqu√≠ termina el main !!!
   511                                  
   512                                  
   513                                  ; --------------------------------------------------------------------------------------------
   514                                  ; RUTINAS PARA SETEAR LOS S√çMBOLOS PERSONALIZADOS DE SOLDADOS Y OFICIALES
   515                                  ; --------------------------------------------------------------------------------------------
   516                                  
   517                                  setearSimbSoldados:
   518                                      mPuts msgSimboloSoldados
     2 00000419 48BF-               <1>  mov rdi, %1
     2 0000041B [B704000000000000]  <1>
     3 00000423 4883EC08            <1>  sub rsp, 8
     4 00000427 E8(00000000)        <1>  call puts
     5 0000042C 4883C408            <1>  add rsp, 8
   519 00000430 C60425[0A000000]00          mov byte[simbSoldElegido], ''
   520                                      mGets simbSoldElegido
    17 00000438 48BF-               <1>  mov rdi, %1
    17 0000043A [0A00000000000000]  <1>
    18 00000442 4883EC08            <1>  sub rsp, 8
    19 00000446 E8(00000000)        <1>  call gets
    20 0000044B 4883C408            <1>  add rsp, 8
   521                                  
   522 0000044F 803C25[0A000000]20          cmp byte[simbSoldElegido], ' '
   523 00000457 7432                        je errSeteoSoldado
   524 00000459 803C25[0A000000]00          cmp byte[simbSoldElegido], ''
   525 00000461 7428                        je errSeteoSoldado
   526                                  
   527 00000463 8A0425[0B000000]            mov al, byte[simbSoldElegido+1]
   528 0000046A 3C00                        cmp al, 0
   529 0000046C 751D                        jne errSeteoSoldado
   530                                  
   531                                      mMov simboloSoldados, simbSoldElegido, 1
    31 0000046E B901000000          <1>  mov rcx, %3
    32 00000473 488D3425[0A000000]  <1>  lea rsi, [%2]
    33 0000047B 488D3C25[AC0A0000]  <1>  lea rdi, [%1]
    34 00000483 F3A4                <1>  rep movsb
   532                                  
   533 00000485 E8940A0000                  call cambiarTableroSoldNuevo
   534                                  
   535 0000048A C3                          ret
   536                                  
   537                                      errSeteoSoldado:
   538                                          mErrorJump msgOpcionInvalida, setearSimbSoldados
    45                              <1>  mPuts %1
     2 0000048B 48BF-               <2>  mov rdi, %1
     2 0000048D [0602000000000000]  <2>
     3 00000495 4883EC08            <2>  sub rsp, 8
     4 00000499 E8(00000000)        <2>  call puts
     5 0000049E 4883C408            <2>  add rsp, 8
    46 000004A2 E972FFFFFF          <1>  jmp %2
   539                                  
   540                                  setearSimbOficiales:
   541                                      mPuts msgSimboloOficiales
     2 000004A7 48BF-               <1>  mov rdi, %1
     2 000004A9 [9A04000000000000]  <1>
     3 000004B1 4883EC08            <1>  sub rsp, 8
     4 000004B5 E8(00000000)        <1>  call puts
     5 000004BA 4883C408            <1>  add rsp, 8
   542 000004BE C70425[08000000]00-         mov dword[simbOficElegido], ''
   542 000004C6 000000             
   543                                      mGets simbOficElegido
    17 000004C9 48BF-               <1>  mov rdi, %1
    17 000004CB [0800000000000000]  <1>
    18 000004D3 4883EC08            <1>  sub rsp, 8
    19 000004D7 E8(00000000)        <1>  call gets
    20 000004DC 4883C408            <1>  add rsp, 8
   544                                  
   545 000004E0 803C25[08000000]20          cmp byte[simbOficElegido], ' '
   546 000004E8 7432                        je errSeteoOficial
   547 000004EA 803C25[08000000]00          cmp byte[simbOficElegido], ''
   548 000004F2 7428                        je errSeteoOficial
   549                                  
   550 000004F4 8A0425[09000000]            mov al, byte[simbOficElegido+1]
   551 000004FB 3C00                        cmp al, 0
   552 000004FD 751D                        jne errSeteoOficial
   553                                  
   554                                      mMov simboloOficiales, simbOficElegido, 1
    31 000004FF B901000000          <1>  mov rcx, %3
    32 00000504 488D3425[08000000]  <1>  lea rsi, [%2]
    33 0000050C 488D3C25[AA0A0000]  <1>  lea rdi, [%1]
    34 00000514 F3A4                <1>  rep movsb
   555                                  
   556 00000516 E8310A0000                  call cambiarTableroOficNuevo
   557                                  
   558 0000051B C3                          ret
   559                                  
   560                                      errSeteoOficial:
   561                                          mPuts msgOpcionInvalida
     2 0000051C 48BF-               <1>  mov rdi, %1
     2 0000051E [0602000000000000]  <1>
     3 00000526 4883EC08            <1>  sub rsp, 8
     4 0000052A E8(00000000)        <1>  call puts
     5 0000052F 4883C408            <1>  add rsp, 8
   562 00000533 E96FFFFFFF                      jmp setearSimbOficiales
   563                                  
   564                                  ; --------------------------------------------------------------------------------------------
   565                                  ; VERIFICACIONES DE PIEZAS ORIGINALES A MOVER PARA SOLDADOS Y OFICIALES
   566                                  ; --------------------------------------------------------------------------------------------
   567                                  
   568                                  verificarFichaSold:
   569 00000538 8A0425[84000000]            mov al, byte[soldadoElegido] ; Numero de fila
   570                                      
   571 0000053F 3C31                        cmp al, '1'
   572 00000541 0F8C05010000                jl errorInputSold
   573 00000547 3C37                        cmp al, '7'
   574 00000549 0F8FFD000000                jg errorInputSold
   575                                  
   576 0000054F 48C70425[94000000]-         mov qword[fila], 0
   576 00000557 00000000           
   577                                      mSscanf byte[soldadoElegido], formatoAtoi, fila
    69 0000055B 488D3C25[84000000]  <1>  lea rdi, %1
    70 00000563 48BE-               <1>  mov rsi, %2
    70 00000565 [B60A000000000000]  <1>
    71 0000056D 48BA-               <1>  mov rdx, %3
    71 0000056F [9400000000000000]  <1>
    72 00000577 4883EC08            <1>  sub rsp, 8
    73 0000057B E8(00000000)        <1>  call sscanf
    74 00000580 4883C408            <1>  add rsp, 8
   578                                  
   579 00000584 4883F801                    cmp rax, 1
   580 00000588 0F8CBE000000                jl errorInputSold
   581                                  
   582 0000058E 8A0425[85000000]            mov al, byte[soldadoElegido+1] ; Caracter '-'
   583 00000595 3C2D                        cmp al, '-'
   584 00000597 0F85AF000000                jne errorInputSold
   585                                      
   586 0000059D 8A0425[86000000]            mov al, byte[soldadoElegido+2] ; Numero de columna
   587 000005A4 3C31                        cmp al, '1'
   588 000005A6 0F8CA0000000                jl errorInputSold
   589 000005AC 3C37                        cmp al, '7'
   590 000005AE 0F8F98000000                jg errorInputSold
   591                                  
   592 000005B4 48C70425[9C000000]-         mov qword[columna], 0
   592 000005BC 00000000           
   593                                      mSscanf byte[soldadoElegido+2], formatoAtoi, columna
    69 000005C0 488D3C25[86000000]  <1>  lea rdi, %1
    70 000005C8 48BE-               <1>  mov rsi, %2
    70 000005CA [B60A000000000000]  <1>
    71 000005D2 48BA-               <1>  mov rdx, %3
    71 000005D4 [9C00000000000000]  <1>
    72 000005DC 4883EC08            <1>  sub rsp, 8
    73 000005E0 E8(00000000)        <1>  call sscanf
    74 000005E5 4883C408            <1>  add rsp, 8
   594                                  
   595 000005E9 4883F801                    cmp rax, 1
   596 000005ED 7C5D                        jl errorInputSold
   597                                  
   598 000005EF 8A0425[87000000]            mov al, byte[soldadoElegido+3] ; Caracter nulo
   599 000005F6 3C00                        cmp al, 0
   600 000005F8 7552                        jne errorInputSold
   601                                  
   602                                      ; Calculamos desplazamiento en tablero
   603                                      mCalcDesplaz [fila], [columna], qword[desplazCasOrig]
    86 000005FA 488B3C25[94000000]  <1>  mov rdi, %1
    87 00000602 488B3425[9C000000]  <1>  mov rsi, %2
    88 0000060A E859080000          <1>  call calcularDesplazamiento
    89 0000060F 48890425[A4000000]  <1>  mov %3, rax
   604 00000617 488B1C25[A4000000]          mov rbx, qword[desplazCasOrig]
   605                                      
   606 0000061F B800000000                  mov rax,0
   607 00000624 BA00000000                  mov rdx, 0
   608                                  
   609 00000629 8A93[10000000]              mov dl, byte[tableroEnJuego+rbx]
   610 0000062F 8A0425[AC0A0000]            mov al, [simboloSoldados]
   611                                  
   612 00000636 38C2                        cmp dl, al
   613 00000638 7536                        jne errorCasillaInvalidaSold
   614                                      
   615 0000063A B800000000                  mov rax, 0
   616 0000063F 48890425[DC000000]          mov [msgErrorEspecificoSold], rax
   617 00000647 E9B0FCFFFF                  jmp casillaAMoverseSold
   618                                  
   619                                      errorInputSold:
   620 0000064C 488B0425[72020000]              mov rax, [msgErrorInputSold]
   621                                          mMov msgErrorEspecificoSold, msgErrorInputSold, 61
    31 00000654 B93D000000          <1>  mov rcx, %3
    32 00000659 488D3425[72020000]  <1>  lea rsi, [%2]
    33 00000661 488D3C25[DC000000]  <1>  lea rdi, [%1]
    34 00000669 F3A4                <1>  rep movsb
   622 0000066B E915FCFFFF                      jmp turnoSoldados
   623                                  
   624                                      errorCasillaInvalidaSold:
   625 00000670 488B0425[2B020000]              mov rax, [msgCasillaInvalidaSold]
   626                                          mMov msgErrorEspecificoSold, msgCasillaInvalidaSold, 71
    31 00000678 B947000000          <1>  mov rcx, %3
    32 0000067D 488D3425[2B020000]  <1>  lea rsi, [%2]
    33 00000685 488D3C25[DC000000]  <1>  lea rdi, [%1]
    34 0000068D F3A4                <1>  rep movsb
   627 0000068F E9F1FBFFFF                      jmp turnoSoldados
   628                                  
   629                                      imprimirErrorSold:
   630                                          mPuts msgErrorEspecificoSold
     2 00000694 48BF-               <1>  mov rdi, %1
     2 00000696 [DC00000000000000]  <1>
     3 0000069E 4883EC08            <1>  sub rsp, 8
     4 000006A2 E8(00000000)        <1>  call puts
     5 000006A7 4883C408            <1>  add rsp, 8
   631 000006AB E919FCFFFF                      jmp todoOkSold
   632                                      
   633                                  
   634                                  verificarFichaOfic:
   635 000006B0 8A0C25[8C000000]            mov cl, byte[oficialElegido] ; Numero de fila
   636                                      
   637 000006B7 80F931                      cmp cl, '1'
   638 000006BA 0F8C0A010000                jl errorInputOfic
   639 000006C0 80F937                      cmp cl, '7'
   640 000006C3 0F8F01010000                jg errorInputOfic
   641                                      
   642 000006C9 48C70425[94000000]-         mov qword[fila], 0
   642 000006D1 00000000           
   643                                      mSscanf byte[oficialElegido], formatoAtoi, fila
    69 000006D5 488D3C25[8C000000]  <1>  lea rdi, %1
    70 000006DD 48BE-               <1>  mov rsi, %2
    70 000006DF [B60A000000000000]  <1>
    71 000006E7 48BA-               <1>  mov rdx, %3
    71 000006E9 [9400000000000000]  <1>
    72 000006F1 4883EC08            <1>  sub rsp, 8
    73 000006F5 E8(00000000)        <1>  call sscanf
    74 000006FA 4883C408            <1>  add rsp, 8
   644                                  
   645 000006FE 4883F801                    cmp rax, 1
   646 00000702 0F8CC2000000                jl errorInputOfic
   647                                  
   648 00000708 8A0C25[8D000000]            mov cl, byte[oficialElegido+1] ; Caracter '-'
   649 0000070F 80F92D                      cmp cl, '-'
   650 00000712 0F85B2000000                jne errorInputOfic
   651                                      
   652 00000718 8A0C25[8E000000]            mov cl, byte[oficialElegido+2] ; Numero de columna
   653 0000071F 80F931                      cmp cl, '1'
   654 00000722 0F8CA2000000                jl errorInputOfic
   655 00000728 80F937                      cmp cl, '7'
   656 0000072B 0F8F99000000                jg errorInputOfic
   657                                  
   658 00000731 48C70425[9C000000]-         mov qword[columna], 0
   658 00000739 00000000           
   659                                      mSscanf byte[oficialElegido+2], formatoAtoi, columna
    69 0000073D 488D3C25[8E000000]  <1>  lea rdi, %1
    70 00000745 48BE-               <1>  mov rsi, %2
    70 00000747 [B60A000000000000]  <1>
    71 0000074F 48BA-               <1>  mov rdx, %3
    71 00000751 [9C00000000000000]  <1>
    72 00000759 4883EC08            <1>  sub rsp, 8
    73 0000075D E8(00000000)        <1>  call sscanf
    74 00000762 4883C408            <1>  add rsp, 8
   660                                  
   661 00000766 4883F801                    cmp rax, 1
   662 0000076A 7C5E                        jl errorInputOfic
   663                                  
   664 0000076C 8A0C25[8F000000]            mov cl, byte[oficialElegido+3] ; Caracter nulo
   665 00000773 80F900                      cmp cl, 0
   666 00000776 7552                        jne errorInputOfic
   667                                  
   668                                      ; Calculamos desplazamiento en tablero
   669                                      mCalcDesplaz [fila], [columna], qword[desplazCasOrig]
    86 00000778 488B3C25[94000000]  <1>  mov rdi, %1
    87 00000780 488B3425[9C000000]  <1>  mov rsi, %2
    88 00000788 E8DB060000          <1>  call calcularDesplazamiento
    89 0000078D 48890425[A4000000]  <1>  mov %3, rax
   670 00000795 488B1C25[A4000000]          mov rbx, qword[desplazCasOrig]
   671                                      
   672 0000079D B800000000                  mov rax, 0
   673 000007A2 BA00000000                  mov rdx, 0
   674                                  
   675 000007A7 8A93[10000000]              mov dl, byte[tableroEnJuego+rbx]
   676 000007AD 8A0C25[AA0A0000]            mov cl, [simboloOficiales]
   677                                  
   678 000007B4 38CA                        cmp dl, cl
   679 000007B6 7536                        jne errorCasillaInvalidaOfic
   680                                      
   681 000007B8 B800000000                  mov rax, 0
   682 000007BD 48890425[23010000]          mov [msgErrorEspecificoOfic], rax
   683 000007C5 E9E9FBFFFF                  jmp casillaAMoverseOfic
   684                                  
   685                                      errorInputOfic:
   686 000007CA 488B0425[35030000]              mov rax, [msgErrorInputOfic]
   687                                          mMov msgErrorEspecificoOfic, msgErrorInputOfic, 61
    31 000007D2 B93D000000          <1>  mov rcx, %3
    32 000007D7 488D3425[35030000]  <1>  lea rsi, [%2]
    33 000007DF 488D3C25[23010000]  <1>  lea rdi, [%1]
    34 000007E7 F3A4                <1>  rep movsb
   688 000007E9 E94EFBFFFF                      jmp turnoOficiales
   689                                  
   690                                      errorCasillaInvalidaOfic:
   691 000007EE 488B0425[35030000]              mov rax, [msgErrorInputOfic]
   692                                          mMov msgErrorEspecificoOfic, msgCasillaInvalidaOfic, 71
    31 000007F6 B947000000          <1>  mov rcx, %3
    32 000007FB 488D3425[EE020000]  <1>  lea rsi, [%2]
    33 00000803 488D3C25[23010000]  <1>  lea rdi, [%1]
    34 0000080B F3A4                <1>  rep movsb
   693 0000080D E92AFBFFFF                      jmp turnoOficiales
   694                                  
   695                                      imprimirErrorOfic:
   696                                          mPuts msgErrorEspecificoOfic
     2 00000812 48BF-               <1>  mov rdi, %1
     2 00000814 [2301000000000000]  <1>
     3 0000081C 4883EC08            <1>  sub rsp, 8
     4 00000820 E8(00000000)        <1>  call puts
     5 00000825 4883C408            <1>  add rsp, 8
   697 00000829 E952FBFFFF                      jmp todoOkOfic
   698                                  
   699                                  ; --------------------------------------------------------------------------------------------
   700                                  ; VERFICIACIONES DE CASILLAS DESTINO PARA SOLDADOS Y OFICIALES
   701                                  ; --------------------------------------------------------------------------------------------
   702                                  
   703                                  verificarMovimientoSold:
   704 0000082E 8A0425[88000000]            mov al, byte[casillaMovSold] ; Numero de fila
   705                                      
   706 00000835 3C31                        cmp al, '1'
   707 00000837 0F8CE0010000                jl errorInputSoldMov
   708 0000083D 3C37                        cmp al, '7'
   709 0000083F 0F8FD8010000                jg errorInputSoldMov
   710                                  
   711 00000845 48C70425[AC000000]-         mov qword[filaAMover], 0
   711 0000084D 00000000           
   712                                      mSscanf byte[casillaMovSold], formatoAtoi, filaAMover
    69 00000851 488D3C25[88000000]  <1>  lea rdi, %1
    70 00000859 48BE-               <1>  mov rsi, %2
    70 0000085B [B60A000000000000]  <1>
    71 00000863 48BA-               <1>  mov rdx, %3
    71 00000865 [AC00000000000000]  <1>
    72 0000086D 4883EC08            <1>  sub rsp, 8
    73 00000871 E8(00000000)        <1>  call sscanf
    74 00000876 4883C408            <1>  add rsp, 8
   713                                  
   714 0000087A 4883F801                    cmp rax, 1
   715 0000087E 0F8C99010000                jl errorInputSoldMov
   716                                  
   717 00000884 8A0425[89000000]            mov al, byte[casillaMovSold+1] ; Caracter '-'
   718 0000088B 3C2D                        cmp al, '-'
   719 0000088D 0F858A010000                jne errorInputSoldMov
   720                                      
   721 00000893 8A0425[8A000000]            mov al, byte[casillaMovSold+2] ; Numero de columna
   722 0000089A 3C31                        cmp al, '1'
   723 0000089C 0F8C7B010000                jl errorInputSoldMov
   724 000008A2 3C37                        cmp al, '7'
   725 000008A4 0F8F73010000                jg errorInputSoldMov
   726                                  
   727 000008AA 48C70425[B4000000]-         mov qword[columnaAMover], 0
   727 000008B2 00000000           
   728                                      mSscanf byte[casillaMovSold+2], formatoAtoi, columnaAMover
    69 000008B6 488D3C25[8A000000]  <1>  lea rdi, %1
    70 000008BE 48BE-               <1>  mov rsi, %2
    70 000008C0 [B60A000000000000]  <1>
    71 000008C8 48BA-               <1>  mov rdx, %3
    71 000008CA [B400000000000000]  <1>
    72 000008D2 4883EC08            <1>  sub rsp, 8
    73 000008D6 E8(00000000)        <1>  call sscanf
    74 000008DB 4883C408            <1>  add rsp, 8
   729                                  
   730 000008DF 4883F801                    cmp rax, 1
   731 000008E3 0F8C34010000                jl errorInputSoldMov
   732                                  
   733 000008E9 8A0425[8B000000]            mov al, byte[casillaMovSold+3] ; Caracter nulo
   734 000008F0 3C00                        cmp al, 0
   735 000008F2 0F8525010000                jne errorInputSoldMov
   736                                  
   737                                      ; Primero chequeamos si el soldado original est√° en alguna de las posiciones especiales
   738 000008F8 E87E060000                  call chequearSoldPosEspeciales
   739 000008FD 4883F800                    cmp rax, 0
   740 00000901 7423                        je lugaresComunesSold ; Si recibimos 1, la casilla original es un lugar com√∫n: intentamos hacer el movimiento normal
   741                                      
   742 00000903 4883F801                    cmp rax, 1 ; Si recibimos 1, la casilla original es un lugar especial: solo podemos movernos a la derecha
   743 00000907 0F8474010000                je soloDerechaSold
   744 0000090D 4883F802                    cmp rax, 2 ; Si recibimos 2, la casilla original es un lugar especial: solo podemos movernos a la izquierda
   745 00000911 0F840D020000                je soloIzquierdaSold
   746                                      
   747                                      casillaEspecialAMover:
   748 00000917 4983F800                        cmp r8, 0
   749 0000091B 0F8520010000                    jne errorCasillaInvalidaSoldMov
   750 00000921 E909FAFFFF                      jmp moverSoldado
   751                                  
   752                                      lugaresComunesSold:
   753                                          ; Comparamos la fila a mover con la fila actual
   754                                          mMov filaAux, fila, 1
    31 00000926 B901000000          <1>  mov rcx, %3
    32 0000092B 488D3425[94000000]  <1>  lea rsi, [%2]
    33 00000933 488D3C25[C4000000]  <1>  lea rdi, [%1]
    34 0000093B F3A4                <1>  rep movsb
   755 0000093D 48FF0425[C4000000]              inc qword[filaAux]
   756                                          mCmp [filaAux], [filaAMover], 1
    38 00000945 B901000000          <1>  mov rcx, %3
    39 0000094A 488D3425[C4000000]  <1>  lea rsi, %1
    40 00000952 488D3C25[AC000000]  <1>  lea rdi, %2
    41 0000095A F3A6                <1>  repe cmpsb
   757 0000095C 0F85DF000000                    jne errorCasillaInvalidaSoldMov
   758                                  
   759                                          ; Comparamos la columna a mover con la columna actual
   760 00000962 48C70425[CC000000]-             mov qword[columnaAux], 0 ; Reiniciamos la columna auxiliar
   760 0000096A 00000000           
   761                                          mMov columnaAux, columna, 1
    31 0000096E B901000000          <1>  mov rcx, %3
    32 00000973 488D3425[9C000000]  <1>  lea rsi, [%2]
    33 0000097B 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 00000983 F3A4                <1>  rep movsb
   762                                  
   763                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento hacia adelante
    38 00000985 B901000000          <1>  mov rcx, %3
    39 0000098A 488D3425[CC000000]  <1>  lea rsi, %1
    40 00000992 488D3C25[B4000000]  <1>  lea rdi, %2
    41 0000099A F3A6                <1>  repe cmpsb
   764 0000099C 7445                            je columnaSoldAMoverValida
   765                                  
   766 0000099E 48FF0425[CC000000]              inc qword[columnaAux]
   767                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la izquierda
    38 000009A6 B901000000          <1>  mov rcx, %3
    39 000009AB 488D3425[CC000000]  <1>  lea rsi, %1
    40 000009B3 488D3C25[B4000000]  <1>  lea rdi, %2
    41 000009BB F3A6                <1>  repe cmpsb
   768 000009BD 7424                            je columnaSoldAMoverValida
   769                                  
   770 000009BF 48832C25[CC000000]-             sub qword[columnaAux], 2
   770 000009C7 02                 
   771                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la derecha
    38 000009C8 B901000000          <1>  mov rcx, %3
    39 000009CD 488D3425[CC000000]  <1>  lea rsi, %1
    40 000009D5 488D3C25[B4000000]  <1>  lea rdi, %2
    41 000009DD F3A6                <1>  repe cmpsb
   772 000009DF 7402                            je columnaSoldAMoverValida
   773                                  
   774 000009E1 EB5E                            jmp errorCasillaInvalidaSoldMov
   775                                  
   776                                      columnaSoldAMoverValida: ; Queda ver si en esa casilla est√° vac√≠a o no
   777                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    86 000009E3 488B3C25[AC000000]  <1>  mov rdi, %1
    87 000009EB 488B3425[B4000000]  <1>  mov rsi, %2
    88 000009F3 E870040000          <1>  call calcularDesplazamiento
    89 000009F8 48890425[BC000000]  <1>  mov %3, rax
   778                                          mEstaVacia qword[desplazCasAMover]
    93 00000A00 B800000000          <1>  mov rax, 0
    94 00000A05 488B3C25[BC000000]  <1>  mov rdi, %1
    95 00000A0D E841040000          <1>  call estaVacia
   779 00000A12 4883F801                        cmp rax, 1
   780 00000A16 7429                            je errorCasillaInvalidaSoldMov ; Si recibimos 1, la casilla est√° ocupada (o est√° fuera del tablero)
   781                                          
   782 00000A18 E912F9FFFF                      jmp moverSoldado 
   783                                  
   784                                  
   785                                      errorInputSoldMov:
   786 00000A1D 488B0425[72020000]              mov rax, [msgErrorInputSold]
   787                                          mMov msgErrorEspecificoSold, msgErrorInputSold, 61
    31 00000A25 B93D000000          <1>  mov rcx, %3
    32 00000A2A 488D3425[72020000]  <1>  lea rsi, [%2]
    33 00000A32 488D3C25[DC000000]  <1>  lea rdi, [%1]
    34 00000A3A F3A4                <1>  rep movsb
   788 00000A3C E944F8FFFF                      jmp turnoSoldados
   789                                  
   790                                      errorCasillaInvalidaSoldMov:
   791 00000A41 488B0425[B0020000]              mov rax, [msgCasillaInvMovSold]
   792                                          mMov msgErrorEspecificoSold, msgCasillaInvMovSold, 61
    31 00000A49 B93D000000          <1>  mov rcx, %3
    32 00000A4E 488D3425[B0020000]  <1>  lea rsi, [%2]
    33 00000A56 488D3C25[DC000000]  <1>  lea rdi, [%1]
    34 00000A5E F3A4                <1>  rep movsb
   793 00000A60 E920F8FFFF                      jmp turnoSoldados
   794                                  
   795                                      imprimirErrorSoldMov:
   796                                          mPuts msgErrorEspecificoSold
     2 00000A65 48BF-               <1>  mov rdi, %1
     2 00000A67 [DC00000000000000]  <1>
     3 00000A6F 4883EC08            <1>  sub rsp, 8
     4 00000A73 E8(00000000)        <1>  call puts
     5 00000A78 4883C408            <1>  add rsp, 8
   797 00000A7C E904F8FFFF                      jmp turnoSoldados
   798                                  
   799                                      soloDerechaSold:
   800 00000A81 41B801000000                    mov r8, 1 ; Suponemos que el movimiento es inv√°lido
   801                                  
   802                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    86 00000A87 488B3C25[AC000000]  <1>  mov rdi, %1
    87 00000A8F 488B3425[B4000000]  <1>  mov rsi, %2
    88 00000A97 E8CC030000          <1>  call calcularDesplazamiento
    89 00000A9C 48890425[BC000000]  <1>  mov %3, rax
   803                                          mEstaVacia qword[desplazCasAMover]
    93 00000AA4 B800000000          <1>  mov rax, 0
    94 00000AA9 488B3C25[BC000000]  <1>  mov rdi, %1
    95 00000AB1 E89D030000          <1>  call estaVacia
   804 00000AB6 4883F801                        cmp rax, 1 
   805 00000ABA 0F8457FEFFFF                    je casillaEspecialAMover
   806                                  
   807                                          mCmp [fila], [filaAMover], 1 ; Las filas deben ser iguales (el movimiento especial es para el costado)
    38 00000AC0 B901000000          <1>  mov rcx, %3
    39 00000AC5 488D3425[94000000]  <1>  lea rsi, %1
    40 00000ACD 488D3C25[AC000000]  <1>  lea rdi, %2
    41 00000AD5 F3A6                <1>  repe cmpsb
   808 00000AD7 0F853AFEFFFF                    jne casillaEspecialAMover
   809                                  
   810                                          mMov columnaAux, columna, 1
    31 00000ADD B901000000          <1>  mov rcx, %3
    32 00000AE2 488D3425[9C000000]  <1>  lea rsi, [%2]
    33 00000AEA 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 00000AF2 F3A4                <1>  rep movsb
   811 00000AF4 48FF0425[CC000000]              inc qword[columnaAux]
   812                                          mCmp [columnaAux], [columnaAMover], 1
    38 00000AFC B901000000          <1>  mov rcx, %3
    39 00000B01 488D3425[CC000000]  <1>  lea rsi, %1
    40 00000B09 488D3C25[B4000000]  <1>  lea rdi, %2
    41 00000B11 F3A6                <1>  repe cmpsb
   813 00000B13 0F85FEFDFFFF                    jne casillaEspecialAMover
   814                                          
   815 00000B19 41B800000000                    mov r8, 0 ; Si llegamos ac√°, el movimiento es v√°lido
   816 00000B1F E9F3FDFFFF                      jmp casillaEspecialAMover
   817                                      
   818                                      soloIzquierdaSold:
   819 00000B24 41B801000000                    mov r8, 1 ; Suponemos que el movimiento es inv√°lido
   820                                  
   821                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    86 00000B2A 488B3C25[AC000000]  <1>  mov rdi, %1
    87 00000B32 488B3425[B4000000]  <1>  mov rsi, %2
    88 00000B3A E829030000          <1>  call calcularDesplazamiento
    89 00000B3F 48890425[BC000000]  <1>  mov %3, rax
   822                                          mEstaVacia qword[desplazCasAMover]
    93 00000B47 B800000000          <1>  mov rax, 0
    94 00000B4C 488B3C25[BC000000]  <1>  mov rdi, %1
    95 00000B54 E8FA020000          <1>  call estaVacia
   823 00000B59 4883F801                        cmp rax, 1 
   824 00000B5D 0F84B4FDFFFF                    je casillaEspecialAMover
   825                                  
   826                                          mCmp [fila], [filaAMover], 1 ; Las filas deben ser iguales (el movimiento especial es para el costado)
    38 00000B63 B901000000          <1>  mov rcx, %3
    39 00000B68 488D3425[94000000]  <1>  lea rsi, %1
    40 00000B70 488D3C25[AC000000]  <1>  lea rdi, %2
    41 00000B78 F3A6                <1>  repe cmpsb
   827 00000B7A 0F8597FDFFFF                    jne casillaEspecialAMover
   828                                  
   829                                          mMov columnaAux, columna, 1
    31 00000B80 B901000000          <1>  mov rcx, %3
    32 00000B85 488D3425[9C000000]  <1>  lea rsi, [%2]
    33 00000B8D 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 00000B95 F3A4                <1>  rep movsb
   830 00000B97 48FF0C25[CC000000]              dec qword[columnaAux]
   831                                          mCmp [columnaAux], [columnaAMover], 1
    38 00000B9F B901000000          <1>  mov rcx, %3
    39 00000BA4 488D3425[CC000000]  <1>  lea rsi, %1
    40 00000BAC 488D3C25[B4000000]  <1>  lea rdi, %2
    41 00000BB4 F3A6                <1>  repe cmpsb
   832 00000BB6 0F855BFDFFFF                    jne casillaEspecialAMover
   833                                  
   834 00000BBC 41B800000000                    mov r8, 0 ; Si llegamos ac√°, el movimiento es v√°lido
   835 00000BC2 E950FDFFFF                      jmp casillaEspecialAMover
   836                                      
   837 00000BC7 C3                          ret
   838                                  
   839                                  verificarMovimientoOfic:
   840 00000BC8 8A0425[90000000]            mov al, byte[casillaMovOfic] ; Numero de fila
   841                                      
   842 00000BCF 3C31                        cmp al, '1'
   843 00000BD1 0F8C18020000                jl errorInputOficMov
   844 00000BD7 3C37                        cmp al, '7'
   845 00000BD9 0F8F10020000                jg errorInputOficMov
   846                                  
   847 00000BDF 48C70425[AC000000]-         mov qword[filaAMover], 0
   847 00000BE7 00000000           
   848                                      mSscanf byte[casillaMovOfic], formatoAtoi, filaAMover
    69 00000BEB 488D3C25[90000000]  <1>  lea rdi, %1
    70 00000BF3 48BE-               <1>  mov rsi, %2
    70 00000BF5 [B60A000000000000]  <1>
    71 00000BFD 48BA-               <1>  mov rdx, %3
    71 00000BFF [AC00000000000000]  <1>
    72 00000C07 4883EC08            <1>  sub rsp, 8
    73 00000C0B E8(00000000)        <1>  call sscanf
    74 00000C10 4883C408            <1>  add rsp, 8
   849                                  
   850 00000C14 4883F801                    cmp rax, 1
   851 00000C18 0F8CD1010000                jl errorInputOficMov
   852                                  
   853 00000C1E 8A0425[91000000]            mov al, byte[casillaMovOfic+1] ; Caracter '-'
   854 00000C25 3C2D                        cmp al, '-'
   855 00000C27 0F85C2010000                jne errorInputOficMov
   856                                      
   857 00000C2D 8A0425[92000000]            mov al, byte[casillaMovOfic+2] ; Numero de columna
   858 00000C34 3C31                        cmp al, '1'
   859 00000C36 0F8CB3010000                jl errorInputOficMov
   860 00000C3C 3C37                        cmp al, '7'
   861 00000C3E 0F8FAB010000                jg errorInputOficMov
   862                                  
   863 00000C44 48C70425[B4000000]-         mov qword[columnaAMover], 0
   863 00000C4C 00000000           
   864                                      mSscanf byte[casillaMovOfic+2], formatoAtoi, columnaAMover
    69 00000C50 488D3C25[92000000]  <1>  lea rdi, %1
    70 00000C58 48BE-               <1>  mov rsi, %2
    70 00000C5A [B60A000000000000]  <1>
    71 00000C62 48BA-               <1>  mov rdx, %3
    71 00000C64 [B400000000000000]  <1>
    72 00000C6C 4883EC08            <1>  sub rsp, 8
    73 00000C70 E8(00000000)        <1>  call sscanf
    74 00000C75 4883C408            <1>  add rsp, 8
   865                                  
   866 00000C79 4883F801                    cmp rax, 1
   867 00000C7D 0F8C6C010000                jl errorInputOficMov
   868                                  
   869 00000C83 8A0425[93000000]            mov al, byte[casillaMovOfic+3] ; Caracter nulo
   870 00000C8A 3C00                        cmp al, 0
   871 00000C8C 0F855D010000                jne errorInputOficMov
   872                                  
   873                                      ; Comparamos la fila a mover con la fila actual
   874                                      mMov filaAux, fila, 1
    31 00000C92 B901000000          <1>  mov rcx, %3
    32 00000C97 488D3425[94000000]  <1>  lea rsi, [%2]
    33 00000C9F 488D3C25[C4000000]  <1>  lea rdi, [%1]
    34 00000CA7 F3A4                <1>  rep movsb
   875                                  
   876                                      mCmp [filaAux], [filaAMover], 1
    38 00000CA9 B901000000          <1>  mov rcx, %3
    39 00000CAE 488D3425[C4000000]  <1>  lea rsi, %1
    40 00000CB6 488D3C25[AC000000]  <1>  lea rdi, %2
    41 00000CBE F3A6                <1>  repe cmpsb
   877 00000CC0 7448                        je filaOficAMoverValida ; Filas iguales -> v√°lido
   878 00000CC2 48FF0425[C4000000]          inc qword[filaAux]
   879                                      mCmp [filaAux], [filaAMover], 1
    38 00000CCA B901000000          <1>  mov rcx, %3
    39 00000CCF 488D3425[C4000000]  <1>  lea rsi, %1
    40 00000CD7 488D3C25[AC000000]  <1>  lea rdi, %2
    41 00000CDF F3A6                <1>  repe cmpsb
   880 00000CE1 7427                        je filaOficAMoverValida
   881 00000CE3 48832C25[C4000000]-         sub qword[filaAux], 2
   881 00000CEB 02                 
   882                                      mCmp [filaAux], [filaAMover], 1
    38 00000CEC B901000000          <1>  mov rcx, %3
    39 00000CF1 488D3425[C4000000]  <1>  lea rsi, %1
    40 00000CF9 488D3C25[AC000000]  <1>  lea rdi, %2
    41 00000D01 F3A6                <1>  repe cmpsb
   883 00000D03 7405                        je filaOficAMoverValida
   884                                  
   885 00000D05 E909010000                  jmp errorCasillaInvalidaOficMov
   886                                  
   887                                      filaOficAMoverValida:
   888                                          ; Comparamos la columna a mover con la columna actual
   889 00000D0A 48C70425[CC000000]-             mov qword[columnaAux], 0 ; Reiniciamos la columna auxiliar
   889 00000D12 00000000           
   890                                          mMov columnaAux, columna, 1
    31 00000D16 B901000000          <1>  mov rcx, %3
    32 00000D1B 488D3425[9C000000]  <1>  lea rsi, [%2]
    33 00000D23 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 00000D2B F3A4                <1>  rep movsb
   891                                  
   892                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento hacia adelante
    38 00000D2D B901000000          <1>  mov rcx, %3
    39 00000D32 488D3425[CC000000]  <1>  lea rsi, %1
    40 00000D3A 488D3C25[B4000000]  <1>  lea rdi, %2
    41 00000D42 F3A6                <1>  repe cmpsb
   893 00000D44 7448                            je columnaOficAMoverValida
   894                                  
   895 00000D46 48FF0425[CC000000]              inc qword[columnaAux]
   896                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la izquierda
    38 00000D4E B901000000          <1>  mov rcx, %3
    39 00000D53 488D3425[CC000000]  <1>  lea rsi, %1
    40 00000D5B 488D3C25[B4000000]  <1>  lea rdi, %2
    41 00000D63 F3A6                <1>  repe cmpsb
   897 00000D65 7427                            je columnaOficAMoverValida
   898                                  
   899 00000D67 48832C25[CC000000]-             sub qword[columnaAux], 2
   899 00000D6F 02                 
   900                                          mCmp [columnaAux], [columnaAMover], 1 ; Movimiento diagonal hacia la derecha
    38 00000D70 B901000000          <1>  mov rcx, %3
    39 00000D75 488D3425[CC000000]  <1>  lea rsi, %1
    40 00000D7D 488D3C25[B4000000]  <1>  lea rdi, %2
    41 00000D85 F3A6                <1>  repe cmpsb
   901 00000D87 7405                            je columnaOficAMoverValida
   902                                  
   903 00000D89 E985000000                      jmp errorCasillaInvalidaOficMov
   904                                  
   905                                      columnaOficAMoverValida: ; Podr√≠amos hacer un movimiento normal (casilla vac√≠a) o capturar un soldado...
   906                                          mCalcDesplaz [filaAMover], [columnaAMover], qword[desplazCasAMover]
    86 00000D8E 488B3C25[AC000000]  <1>  mov rdi, %1
    87 00000D96 488B3425[B4000000]  <1>  mov rsi, %2
    88 00000D9E E8C5000000          <1>  call calcularDesplazamiento
    89 00000DA3 48890425[BC000000]  <1>  mov %3, rax
   907                                          mEstaVacia qword[desplazCasAMover]
    93 00000DAB B800000000          <1>  mov rax, 0
    94 00000DB0 488B3C25[BC000000]  <1>  mov rdi, %1
    95 00000DB8 E896000000          <1>  call estaVacia
   908 00000DBD 4883F800                        cmp rax, 0
   909 00000DC1 0F841FF6FFFF                    je moverOficial ; Si llegamos ac√°, la casilla a mover est√° vac√≠a -> movimiento normal
   910                                          
   911                                          ; Si llegamos ac√°, la casilla no est√° vac√≠a: ver si hay un soldado para capturar
   912                                          mHaySoldado qword[desplazCasAMover]
    99 00000DC7 B800000000          <1>  mov rax, 0
   100 00000DCC 488B3C25[BC000000]  <1>  mov rdi, %1
   101 00000DD4 E8EB010000          <1>  call haySoldado
   913 00000DD9 4883F801                        cmp rax, 1
   914 00000DDD 7434                            je errorCasillaInvalidaOficMov ; Si recibimos 1, la casilla a ocupar no tiene un soldado -> movimiento inv√°lido
   915                                  
   916                                          ; Si llegamos ac√°, la casilla a ocupar tiene un soldado: debemos ver si el oficial puede saltar sobre √©l...
   917 00000DDF E804020000                      call sePuedeSaltarSoldado
   918 00000DE4 4883F801                        cmp rax, 1
   919 00000DE8 7429                            je errorCasillaInvalidaOficMov ; Si recibimos 1, el oficial no puede saltar sobre el soldado -> movimiento inv√°lido
   920                                  
   921 00000DEA E910F6FFFF                      jmp capturar
   922                                  
   923                                  
   924                                      errorInputOficMov:
   925 00000DEF 488B0425[35030000]              mov rax, [msgErrorInputOfic]
   926                                          mMov msgErrorEspecificoOfic, msgErrorInputOfic, 61
    31 00000DF7 B93D000000          <1>  mov rcx, %3
    32 00000DFC 488D3425[35030000]  <1>  lea rsi, [%2]
    33 00000E04 488D3C25[23010000]  <1>  lea rdi, [%1]
    34 00000E0C F3A4                <1>  rep movsb
   927 00000E0E E929F5FFFF                      jmp turnoOficiales
   928                                  
   929                                      errorCasillaInvalidaOficMov:
   930 00000E13 488B0425[73030000]              mov rax, [msgCasillaInvMovOfic]
   931                                          mMov msgErrorEspecificoOfic, msgCasillaInvMovOfic, 61
    31 00000E1B B93D000000          <1>  mov rcx, %3
    32 00000E20 488D3425[73030000]  <1>  lea rsi, [%2]
    33 00000E28 488D3C25[23010000]  <1>  lea rdi, [%1]
    34 00000E30 F3A4                <1>  rep movsb
   932 00000E32 E905F5FFFF                      jmp turnoOficiales
   933                                  
   934                                      imprimirErrorOficMov:
   935                                          mPuts msgErrorEspecificoOfic
     2 00000E37 48BF-               <1>  mov rdi, %1
     2 00000E39 [2301000000000000]  <1>
     3 00000E41 4883EC08            <1>  sub rsp, 8
     4 00000E45 E8(00000000)        <1>  call puts
     5 00000E4A 4883C408            <1>  add rsp, 8
   936 00000E4E E9E9F4FFFF                      jmp turnoOficiales
   937                                  
   938                                  ; --------------------------------------------------------------------------------------------
   939                                  ; RUTINA PARA VERIFICAR SI UNA CASILLA EST√Å VAC√çA
   940                                  ; --------------------------------------------------------------------------------------------
   941                                  
   942                                  estaVacia:
   943 00000E53 80BF[10000000]20            cmp byte[tableroEnJuego+rdi], ' '
   944 00000E5A 7406                        je okVacia
   945                                  
   946 00000E5C B801000000                  mov rax, 1
   947 00000E61 C3                          ret
   948                                  
   949                                      okVacia:
   950 00000E62 B800000000                      mov rax, 0
   951 00000E67 C3                              ret
   952                                  
   953                                  ; --------------------------------------------------------------------------------------------
   954                                  ; RUTINA PARA CALCULAR EL DESPLAZAMIENTO DE UNA CASILLA EN EL TABLERO
   955                                  ; --------------------------------------------------------------------------------------------
   956                                  
   957                                  calcularDesplazamiento:
   958 00000E68 B800000000                  mov rax, 0
   959 00000E6D 4889F8                      mov rax, rdi
   960 00000E70 48FFC0                      inc rax
   961 00000E73 666BC00B                    imul ax, 11
   962 00000E77 4801F0                      add rax, rsi
   963 00000E7A 48FFC0                      inc rax
   964                                  
   965 00000E7D C3                          ret
   966                                  
   967                                  ; --------------------------------------------------------------------------------------------
   968                                  ; RUTINAS PARA REALIZAR MOVIMIENTOS SIMPLES DE SOLDADOS Y OFICIALES (los que no requieren capturas)
   969                                  ; --------------------------------------------------------------------------------------------
   970                                  
   971                                  realizarMovimientoSold:
   972 00000E7E 488B0425[A4000000]          mov rax, qword[desplazCasOrig]
   973 00000E86 488B1C25[BC000000]          mov rbx, qword[desplazCasAMover]
   974                                  
   975 00000E8E C680[10000000]20            mov byte[tableroEnJuego+rax], ' '
   976                                      mMov tableroEnJuego+rbx, simboloSoldados, 1
    31 00000E95 B901000000          <1>  mov rcx, %3
    32 00000E9A 488D3425[AC0A0000]  <1>  lea rsi, [%2]
    33 00000EA2 488DBB[10000000]    <1>  lea rdi, [%1]
    34 00000EA9 F3A4                <1>  rep movsb
   977                                  
   978 00000EAB C3                          ret
   979                                  
   980                                  realizarMovimientoOfic:
   981                                      ; Vemos si el oficial pod√≠a capturar un soldado y no lo hizo
   982 00000EAC E808060000                  call podiaCapturarSoldado 
   983 00000EB1 4883F800                    cmp rax, 0 ; Si fue as√≠, significa que el oficial se desentendi√≥ de su deber
   984 00000EB5 740D                        je quitarOficial
   985                                  
   986                                      ; Necesitamos chequear si el otro oficial podr√≠a haber capturado al soldado
   987 00000EB7 E82C090000                  call podiaCapturarSoldadoOtroOficial
   988 00000EBC 4883F800                    cmp rax, 0 ; Si fue as√≠, significa que el otro oficial se desentendi√≥ de su deber
   989 00000EC0 7408                        je quitarOtroOficial
   990                                  
   991 00000EC2 EB0C                        jmp noPodianHacerNada
   992                                  
   993                                      quitarOficial:
   994 00000EC4 E8C7080000                      call desentenderOficial
   995 00000EC9 C3                              ret
   996                                      
   997                                      quitarOtroOficial:
   998 00000ECA E893090000                      call desentenderOtroOficial
   999 00000ECF C3                              ret
  1000                                  
  1001                                      ; Si llegamos ac√°, el oficial no pod√≠a capturar un soldado -> OK!
  1002                                      noPodianHacerNada:
  1003 00000ED0 488B0425[A4000000]              mov rax, qword[desplazCasOrig]
  1004 00000ED8 488B1C25[BC000000]              mov rbx, qword[desplazCasAMover]
  1005                                  
  1006 00000EE0 C680[10000000]20                mov byte[tableroEnJuego+rax], ' '
  1007                                          mMov tableroEnJuego+rbx, simboloOficiales, 1
    31 00000EE7 B901000000          <1>  mov rcx, %3
    32 00000EEC 488D3425[AA0A0000]  <1>  lea rsi, [%2]
    33 00000EF4 488DBB[10000000]    <1>  lea rdi, [%1]
    34 00000EFB F3A4                <1>  rep movsb
  1008                                  
  1009 00000EFD E8B9030000                      call verQueOficialEs ; Verificamos qu√© oficial es el que se quiere mover
  1010                                  
  1011                                          ; Incrementamos la cantidad de movimientos del oficial correspondiente
  1012 00000F02 4883F801                        cmp rax, 1 ; Si recibimos 1, el oficial 1 es el que se mueve
  1013 00000F06 740B                            je movOfic1
  1014                                          
  1015                                          ; Si llegamos ac√°, el oficial 2 es el que se mueve
  1016 00000F08 E89D040000                      call actualizarContadoresOfic2
  1017 00000F0D E878050000                      call refrescarCasActOfic2
  1018 00000F12 C3                              ret
  1019                                      
  1020                                      movOfic1: ; Si llegamos ac√°, el oficial 1 es el que se mueve
  1021 00000F13 E8E1030000                      call actualizarContadoresOfic1
  1022 00000F18 E83E050000                      call refrescarCasActOfic1
  1023                                  
  1024 00000F1D C3                          ret
  1025                                      
  1026                                  ; --------------------------------------------------------------------------------------------
  1027                                  ; RUTINAS PARA CAMBIAR EL TABLERO CON LOS SIMBOLOS PERSONALIZADOS
  1028                                  ; --------------------------------------------------------------------------------------------
  1029                                  
  1030                                  cambiarTableroSoldNuevo:
  1031 00000F1E BB1A000000                  mov rbx, 26 ; Desplazamiento de la primera casilla en donde puede haber piezas
  1032                                  
  1033                                      cicloCambiarSoldados:
  1034 00000F23 80BB[10000000]58                cmp byte[tableroEnJuego+rbx], 'X'
  1035 00000F2A 7516                            jne noCambiarSoldado
  1036                                          mMov tableroEnJuego+rbx, simboloSoldados, 1 ; Cambio el simbolo de los soldados
    31 00000F2C B901000000          <1>  mov rcx, %3
    32 00000F31 488D3425[AC0A0000]  <1>  lea rsi, [%2]
    33 00000F39 488DBB[10000000]    <1>  lea rdi, [%1]
    34 00000F40 F3A4                <1>  rep movsb
  1037                                  
  1038                                          noCambiarSoldado:
  1039 00000F42 48FFC3                              inc rbx
  1040 00000F45 4883FB4B                            cmp rbx, 75 ; Desplazamiento de la √∫ltima casilla en donde puede haber piezas
  1041 00000F49 7CD8                                jl cicloCambiarSoldados
  1042                                  
  1043 00000F4B C3                          ret
  1044                                  
  1045                                  cambiarTableroOficNuevo:
  1046                                      mMov tableroEnJuego+83, simboloOficiales, 1 ; Primer oficial (desplazamiento)
    31 00000F4C B901000000          <1>  mov rcx, %3
    32 00000F51 488D3425[AA0A0000]  <1>  lea rsi, [%2]
    33 00000F59 488D3C25[63000000]  <1>  lea rdi, [%1]
    34 00000F61 F3A4                <1>  rep movsb
  1047                                      mMov tableroEnJuego+92, simboloOficiales, 1 ; Segundo oficial (desplazamiento)
    31 00000F63 B901000000          <1>  mov rcx, %3
    32 00000F68 488D3425[AA0A0000]  <1>  lea rsi, [%2]
    33 00000F70 488D3C25[6C000000]  <1>  lea rdi, [%1]
    34 00000F78 F3A4                <1>  rep movsb
  1048 00000F7A C3                          ret
  1049                                  
  1050                                  ; --------------------------------------------------------------------------------------------
  1051                                  ; RUTINA PARA CHEQUEAR SI LA CASILLA DE ORIGEN DE UN SOLDADO ES UNA POSICI√ìN ESPECIAL
  1052                                  ; --------------------------------------------------------------------------------------------
  1053                                  
  1054                                  chequearSoldPosEspeciales:
  1055 00000F7B B800000000                  mov rax, 0
  1056                                  
  1057 00000F80 48833C25[94000000]-         cmp qword[fila], 5
  1057 00000F88 05                 
  1058 00000F89 752C                        jne noEsLugarEspecial ; Si la fila no es 5, no estamos en una posici√≥n especial
  1059                                  
  1060                                      ; Si la columna es 1 o 2 (fila 5), estamos en una posici√≥n especial: solo podemos movernos a la derecha
  1061 00000F8B 48833C25[9C000000]-         cmp qword[columna], 1
  1061 00000F93 01                 
  1062 00000F94 7428                        je esLugarEspecialADer 
  1063 00000F96 48833C25[9C000000]-         cmp qword[columna], 2
  1063 00000F9E 02                 
  1064 00000F9F 741D                        je esLugarEspecialADer 
  1065                                  
  1066                                      ; Si la columna es 6 o 7 (fila 5), estamos en una posici√≥n especial: solo podemos movernos a la izquierda
  1067 00000FA1 48833C25[9C000000]-         cmp qword[columna], 6
  1067 00000FA9 06                 
  1068 00000FAA 740C                        je esLugarEspecialAIzq 
  1069 00000FAC 48833C25[9C000000]-         cmp qword[columna], 7
  1069 00000FB4 07                 
  1070 00000FB5 7401                        je esLugarEspecialAIzq
  1071                                  
  1072                                      noEsLugarEspecial:
  1073 00000FB7 C3                              ret
  1074                                  
  1075                                      esLugarEspecialAIzq:
  1076 00000FB8 B802000000                      mov rax, 2
  1077 00000FBD C3                              ret
  1078                                      
  1079                                      esLugarEspecialADer:
  1080 00000FBE B801000000                      mov rax, 1
  1081 00000FC3 C3                              ret
  1082                                  
  1083                                  ; --------------------------------------------------------------------------------------------
  1084                                  ; RUTINA PARA VERIFICAR SI HAY UN SOLDADO EN LA CASILLA DESTINO
  1085                                  ; --------------------------------------------------------------------------------------------
  1086                                  
  1087                                  haySoldado:
  1088                                      ; Calculamos desplazamiento en tablero
  1089                                      mCmp byte[tableroEnJuego+rdi], [simboloSoldados], 1
    38 00000FC4 B901000000          <1>  mov rcx, %3
    39 00000FC9 488DB7[10000000]    <1>  lea rsi, %1
    40 00000FD0 488D3C25[AC0A0000]  <1>  lea rdi, %2
    41 00000FD8 F3A6                <1>  repe cmpsb
  1090 00000FDA 7406                        je okSoldado
  1091                                  
  1092 00000FDC B801000000                  mov rax, 1
  1093 00000FE1 C3                          ret
  1094                                  
  1095                                      okSoldado:
  1096 00000FE2 B800000000                      mov rax, 0
  1097 00000FE7 C3                              ret
  1098                                  
  1099                                  ; --------------------------------------------------------------------------------------------
  1100                                  ; RUTINA PARA VERIFICAR SI UN OFICIAL PUEDE SALTAR SOBRE UN SOLDADO
  1101                                  ; --------------------------------------------------------------------------------------------
  1102                                  
  1103                                  sePuedeSaltarSoldado:
  1104 00000FE8 488B0425[94000000]          mov rax, qword[fila]
  1105 00000FF0 488B1C25[AC000000]          mov rbx, qword[filaAMover]
  1106 00000FF8 4829D8                      sub rax, rbx
  1107 00000FFB 0F8F07010000                jg saltoHaciaArriba ; Si la fila original es mayor que la fila destino, el salto es hacia arriba
  1108 00001001 0F8CA3010000                jl saltoHaciaAbajo ; Si la fila original es menor que la fila destino, el salto es hacia abajo
  1109                                  
  1110                                      ; Si estamos ac√°, el salto es en la misma fila
  1111 00001007 488B0425[9C000000]          mov rax, qword[columna]
  1112 0000100F 488B1C25[B4000000]          mov rbx, qword[columnaAMover]
  1113                                  
  1114 00001017 4829D8                      sub rax, rbx
  1115 0000101A 7F02                        jg saltoHaciaIzq ; Si la columna original es mayor que la columna destino, el salto es hacia la izquierda
  1116 0000101C 7C75                        jl saltoHaciaDer ; Si la columna original es menor que la columna destino, el salto es hacia la derecha
  1117                                  
  1118                                      saltoHaciaIzq:
  1119                                          mMov filaAux, filaAMover, 1
    31 0000101E B901000000          <1>  mov rcx, %3
    32 00001023 488D3425[AC000000]  <1>  lea rsi, [%2]
    33 0000102B 488D3C25[C4000000]  <1>  lea rdi, [%1]
    34 00001033 F3A4                <1>  rep movsb
  1120                                          mMov columnaAux, columnaAMover, 1
    31 00001035 B901000000          <1>  mov rcx, %3
    32 0000103A 488D3425[B4000000]  <1>  lea rsi, [%2]
    33 00001042 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 0000104A F3A4                <1>  rep movsb
  1121 0000104C 48FF0C25[CC000000]              dec qword[columnaAux]
  1122                                  
  1123                                          mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    86 00001054 488B3C25[C4000000]  <1>  mov rdi, %1
    87 0000105C 488B3425[CC000000]  <1>  mov rsi, %2
    88 00001064 E8FFFDFFFF          <1>  call calcularDesplazamiento
    89 00001069 48890425[D4000000]  <1>  mov %3, rax
  1124                                          mEstaVacia qword[desplazAux]
    93 00001071 B800000000          <1>  mov rax, 0
    94 00001076 488B3C25[D4000000]  <1>  mov rdi, %1
    95 0000107E E8D0FDFFFF          <1>  call estaVacia
  1125 00001083 4883F801                        cmp rax, 1
  1126 00001087 0F84BB010000                    je saltoInvalido
  1127                                  
  1128 0000108D B800000000                      mov rax, 0
  1129 00001092 C3                              ret
  1130                                  
  1131                                      saltoHaciaDer:
  1132                                          mMov filaAux, filaAMover, 1
    31 00001093 B901000000          <1>  mov rcx, %3
    32 00001098 488D3425[AC000000]  <1>  lea rsi, [%2]
    33 000010A0 488D3C25[C4000000]  <1>  lea rdi, [%1]
    34 000010A8 F3A4                <1>  rep movsb
  1133                                          mMov columnaAux, columnaAMover, 1
    31 000010AA B901000000          <1>  mov rcx, %3
    32 000010AF 488D3425[B4000000]  <1>  lea rsi, [%2]
    33 000010B7 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 000010BF F3A4                <1>  rep movsb
  1134 000010C1 48FF0425[CC000000]              inc qword[columnaAux]
  1135                                  
  1136                                          mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    86 000010C9 488B3C25[C4000000]  <1>  mov rdi, %1
    87 000010D1 488B3425[CC000000]  <1>  mov rsi, %2
    88 000010D9 E88AFDFFFF          <1>  call calcularDesplazamiento
    89 000010DE 48890425[D4000000]  <1>  mov %3, rax
  1137                                          mEstaVacia qword[desplazAux]
    93 000010E6 B800000000          <1>  mov rax, 0
    94 000010EB 488B3C25[D4000000]  <1>  mov rdi, %1
    95 000010F3 E85BFDFFFF          <1>  call estaVacia
  1138 000010F8 4883F801                        cmp rax, 1
  1139 000010FC 0F8446010000                    je saltoInvalido
  1140                                  
  1141 00001102 B800000000                      mov rax, 0
  1142 00001107 C3                              ret
  1143                                  
  1144                                      saltoHaciaArriba:
  1145                                          mMov filaAux, filaAMover, 1
    31 00001108 B901000000          <1>  mov rcx, %3
    32 0000110D 488D3425[AC000000]  <1>  lea rsi, [%2]
    33 00001115 488D3C25[C4000000]  <1>  lea rdi, [%1]
    34 0000111D F3A4                <1>  rep movsb
  1146                                          mMov columnaAux, columnaAMover, 1
    31 0000111F B901000000          <1>  mov rcx, %3
    32 00001124 488D3425[B4000000]  <1>  lea rsi, [%2]
    33 0000112C 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 00001134 F3A4                <1>  rep movsb
  1147 00001136 48FF0C25[C4000000]              dec qword[filaAux]
  1148                                          
  1149                                          mCmp [columna], [columnaAMover], 1
    38 0000113E B901000000          <1>  mov rcx, %3
    39 00001143 488D3425[9C000000]  <1>  lea rsi, %1
    40 0000114B 488D3C25[B4000000]  <1>  lea rdi, %2
    41 00001153 F3A6                <1>  repe cmpsb
  1150 00001155 7414                            je seguirSaltoArriba ; Si las columnas son iguales, el salto es hacia arriba y en l√≠nea recta
  1151 00001157 7F0A                            jg haciaArribaIzq ; Si la columna original es mayor que la columna destino, el salto es hacia la izquierda
  1152                                  
  1153 00001159 48FF0425[CC000000]              inc qword[columnaAux] ; Salto hacia arriba y a la derecha
  1154 00001161 EB08                            jmp seguirSaltoArriba
  1155                                  
  1156                                          haciaArribaIzq:
  1157 00001163 48FF0C25[CC000000]                  dec qword[columnaAux] ; Salto hacia arriba y a la izquierda
  1158                                  
  1159                                          seguirSaltoArriba:
  1160                                              mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    86 0000116B 488B3C25[C4000000]  <1>  mov rdi, %1
    87 00001173 488B3425[CC000000]  <1>  mov rsi, %2
    88 0000117B E8E8FCFFFF          <1>  call calcularDesplazamiento
    89 00001180 48890425[D4000000]  <1>  mov %3, rax
  1161                                              mEstaVacia qword[desplazAux]
    93 00001188 B800000000          <1>  mov rax, 0
    94 0000118D 488B3C25[D4000000]  <1>  mov rdi, %1
    95 00001195 E8B9FCFFFF          <1>  call estaVacia
  1162 0000119A 4883F801                            cmp rax, 1
  1163 0000119E 0F84A4000000                        je saltoInvalido
  1164                                  
  1165 000011A4 B800000000                          mov rax, 0
  1166 000011A9 C3                                  ret
  1167                                  
  1168                                      saltoHaciaAbajo:
  1169                                          mMov filaAux, filaAMover, 1
    31 000011AA B901000000          <1>  mov rcx, %3
    32 000011AF 488D3425[AC000000]  <1>  lea rsi, [%2]
    33 000011B7 488D3C25[C4000000]  <1>  lea rdi, [%1]
    34 000011BF F3A4                <1>  rep movsb
  1170                                          mMov columnaAux, columnaAMover, 1
    31 000011C1 B901000000          <1>  mov rcx, %3
    32 000011C6 488D3425[B4000000]  <1>  lea rsi, [%2]
    33 000011CE 488D3C25[CC000000]  <1>  lea rdi, [%1]
    34 000011D6 F3A4                <1>  rep movsb
  1171 000011D8 48FF0425[C4000000]              inc qword[filaAux]
  1172                                          
  1173                                          mCmp [columna], [columnaAMover], 1
    38 000011E0 B901000000          <1>  mov rcx, %3
    39 000011E5 488D3425[9C000000]  <1>  lea rsi, %1
    40 000011ED 488D3C25[B4000000]  <1>  lea rdi, %2
    41 000011F5 F3A6                <1>  repe cmpsb
  1174 000011F7 7414                            je seguirSaltoAbajo ; Si las columnas son iguales, el salto es hacia abajo y en l√≠nea recta
  1175 000011F9 7F0A                            jg haciaAbajoIzq ; Si la columna original es mayor que la columna destino, el salto es hacia la izquierda
  1176                                  
  1177 000011FB 48FF0425[CC000000]              inc qword[columnaAux] ; Salto hacia abajo y a la derecha
  1178 00001203 EB08                            jmp seguirSaltoAbajo
  1179                                  
  1180                                          haciaAbajoIzq:
  1181 00001205 48FF0C25[CC000000]                  dec qword[columnaAux] ; Salto hacia abajo y a la izquierda
  1182                                  
  1183                                          seguirSaltoAbajo:
  1184                                              mCalcDesplaz [filaAux], [columnaAux], qword[desplazAux]
    86 0000120D 488B3C25[C4000000]  <1>  mov rdi, %1
    87 00001215 488B3425[CC000000]  <1>  mov rsi, %2
    88 0000121D E846FCFFFF          <1>  call calcularDesplazamiento
    89 00001222 48890425[D4000000]  <1>  mov %3, rax
  1185                                              mEstaVacia qword[desplazAux]
    93 0000122A B800000000          <1>  mov rax, 0
    94 0000122F 488B3C25[D4000000]  <1>  mov rdi, %1
    95 00001237 E817FCFFFF          <1>  call estaVacia
  1186 0000123C 4883F801                            cmp rax, 1
  1187 00001240 7406                                je saltoInvalido
  1188                                  
  1189 00001242 B800000000                          mov rax, 0
  1190 00001247 C3                                  ret
  1191                                  
  1192                                      saltoInvalido:
  1193 00001248 B801000000                      mov rax, 1
  1194 0000124D C3                              ret
  1195                                  
  1196 0000124E C3                          ret
  1197                                  
  1198                                  ; --------------------------------------------------------------------------------------------
  1199                                  ; RUTINA PARA CAPTURAR UN SOLDADO
  1200                                  ; --------------------------------------------------------------------------------------------
  1201                                  
  1202                                  capturarSoldado:
  1203 0000124F 488B0425[A4000000]          mov rax, qword[desplazCasOrig] ; Oficial a mover
  1204 00001257 488B1C25[BC000000]          mov rbx, qword[desplazCasAMover] ; Soldado a capturar
  1205 0000125F 488B0C25[D4000000]          mov rcx, qword[desplazAux] ; Casilla destino del oficial (donde va a quedar)
  1206                                  
  1207 00001267 C680[10000000]20            mov byte[tableroEnJuego+rax], ' '
  1208 0000126E C683[10000000]20            mov byte[tableroEnJuego+rbx], ' '
  1209                                      
  1210 00001275 8A1425[AA0A0000]            mov dl, byte[simboloOficiales]
  1211 0000127C 8891[10000000]              mov byte[tableroEnJuego+rcx], dl
  1212                                  
  1213 00001282 48FF0425[710A0000]          inc qword[cantSoldCapturados] ; Aumentamos el contador de capturas
  1214                                  
  1215 0000128A E82C000000                  call verQueOficialEs ; Verificamos qu√© oficial es el que se quiere mover
  1216                                  
  1217 0000128F 4883F801                    cmp rax, 1
  1218 00001293 7413                        je movOfic1Captura
  1219                                  
  1220 00001295 48FF0425[A20A0000]          inc qword[cantCapturasOfic2]
  1221 0000129D E808010000                  call actualizarContadoresOfic2
  1222 000012A2 E8E3010000                  call refrescarCasActOfic2
  1223 000012A7 C3                          ret
  1224                                  
  1225                                      movOfic1Captura:
  1226 000012A8 48FF0425[9A0A0000]              inc qword[cantCapturasOfic1]
  1227 000012B0 E844000000                      call actualizarContadoresOfic1
  1228 000012B5 E8A1010000                      call refrescarCasActOfic1
  1229                                  
  1230 000012BA C3                          ret
  1231                                  
  1232                                  ; --------------------------------------------------------------------------------------------
  1233                                  ; RUTINA PARA VERIFICAR CU√ÅL OFICIAL SE EST√Å MOVIENDO
  1234                                  ; --------------------------------------------------------------------------------------------
  1235                                  
  1236                                  verQueOficialEs:
  1237                                      ; Comenzamos verificando si el oficial 1 es el que se est√° moviendo
  1238                                      mCmp qword[fila], qword[casillaOfic1], 1 ; Fila de la casilla de origen vs. Fila del oficial 1
    38 000012BB B901000000          <1>  mov rcx, %3
    39 000012C0 488D3425[94000000]  <1>  lea rsi, %1
    40 000012C8 488D3C25[7A0A0000]  <1>  lea rdi, %2
    41 000012D0 F3A6                <1>  repe cmpsb
  1239 000012D2 751F                        jne esOfic2 ; Si las filas no son iguales, el oficial 1 no es el que se est√° moviendo
  1240                                      mCmp qword[columna], qword[casillaOfic1+8], 1 ; Columna de la casilla de origen vs. Columna del oficial 1
    38 000012D4 B901000000          <1>  mov rcx, %3
    39 000012D9 488D3425[9C000000]  <1>  lea rsi, %1
    40 000012E1 488D3C25[820A0000]  <1>  lea rdi, %2
    41 000012E9 F3A6                <1>  repe cmpsb
  1241 000012EB 7506                        jne esOfic2 ; Si las columnas no son iguales, el oficial 1 no es el que se est√° moviendo
  1242                                  
  1243 000012ED B801000000                  mov rax, 1 ; es el oficial 1
  1244 000012F2 C3                          ret
  1245                                  
  1246                                      esOfic2:
  1247 000012F3 B802000000                      mov rax, 2 ; es el oficial 2
  1248                                  
  1249 000012F8 C3                          ret
  1250                                  
  1251                                  
  1252                                  ; --------------------------------------------------------------------------------------------
  1253                                  ; RUTINA PARA ACTUALIZAR LOS CONTADORES DE MOVIMIENTOS DE LOS OFICIALES
  1254                                  ; --------------------------------------------------------------------------------------------
  1255                                  
  1256                                  actualizarContadoresOfic1:
  1257 000012F9 48FF0425[D1090000]          inc qword[movimientosOfic1]
  1258 00001301 488B0425[A4000000]          mov rax, qword[desplazCasOrig]
  1259 00001309 482B0425[BC000000]          sub rax, qword[desplazCasAMover] ; rax = desplazOrigen - desplazDestino
  1260 00001311 4883F801                    cmp rax, 1
  1261 00001315 742B                        je movOfic1Izq
  1262 00001317 4883F8FF                    cmp rax, -1
  1263 0000131B 742E                        je movOfic1Der
  1264 0000131D 4883F80B                    cmp rax, 11
  1265 00001321 7431                        je movOfic1Arriba
  1266 00001323 4883F8F5                    cmp rax, -11
  1267 00001327 7434                        je movOfic1Abajo
  1268 00001329 4883F80A                    cmp rax, 10
  1269 0000132D 7437                        je movOfic1ArrDer
  1270 0000132F 4883F8F6                    cmp rax, -10
  1271 00001333 7453                        je movOfic1AbjIzq
  1272 00001335 4883F80C                    cmp rax, 12
  1273 00001339 745E                        je movOfic1ArrIzq
  1274 0000133B 4883F8F4                    cmp rax, -12
  1275 0000133F 7436                        je movOfic1AbjDer
  1276                                  
  1277 00001341 C3                          ret
  1278                                  
  1279                                      movOfic1Izq:
  1280 00001342 48FF0425[F1090000]              inc qword[movOfic1Izquierda]
  1281 0000134A C3                              ret
  1282                                      movOfic1Der:
  1283 0000134B 48FF0425[E9090000]              inc qword[movOfic1Derecha]
  1284 00001353 C3                              ret
  1285                                      movOfic1Arriba:
  1286 00001354 48FF0425[E1090000]              inc qword[movOfic1Adelante]
  1287 0000135C C3                              ret
  1288                                      movOfic1Abajo:
  1289 0000135D 48FF0425[F9090000]              inc qword[movOfic1Atras]
  1290 00001365 C3                              ret
  1291                                      movOfic1ArrDer:
  1292 00001366 48FF0425[010A0000]              inc qword[movOfic1Diagonal]
  1293 0000136E 48FF0425[090A0000]              inc qword[movOfic1DiagArribaDer]
  1294 00001376 C3                              ret
  1295                                      movOfic1AbjDer:
  1296 00001377 48FF0425[010A0000]              inc qword[movOfic1Diagonal]
  1297 0000137F 48FF0425[190A0000]              inc qword[movOfic1DiagAbajoDer]
  1298 00001387 C3                              ret
  1299                                      movOfic1AbjIzq:
  1300 00001388 48FF0425[010A0000]              inc qword[movOfic1Diagonal]
  1301 00001390 48FF0425[210A0000]              inc qword[movOfic1DiagAbajoIzq]
  1302 00001398 C3                              ret
  1303                                      movOfic1ArrIzq:
  1304 00001399 48FF0425[010A0000]              inc qword[movOfic1Diagonal]
  1305 000013A1 48FF0425[110A0000]              inc qword[movOfic1DiagArribaIzq]
  1306 000013A9 C3                              ret
  1307                                  
  1308                                  actualizarContadoresOfic2:
  1309 000013AA 48FF0425[D9090000]          inc qword[movimientosOfic2]
  1310 000013B2 488B0425[A4000000]          mov rax, qword[desplazCasOrig]
  1311 000013BA 482B0425[BC000000]          sub rax, qword[desplazCasAMover] ; rax = desplazOrigen - desplazDestino
  1312 000013C2 4883F801                    cmp rax, 1
  1313 000013C6 742B                        je movOfic2Izq
  1314 000013C8 4883F8FF                    cmp rax, -1
  1315 000013CC 742E                        je movOfic2Der
  1316 000013CE 4883F80B                    cmp rax, 11
  1317 000013D2 7431                        je movOfic2Arriba
  1318 000013D4 4883F8F5                    cmp rax, -11
  1319 000013D8 7434                        je movOfic2Abajo
  1320 000013DA 4883F80A                    cmp rax, 10
  1321 000013DE 7437                        je movOfic2ArrDer
  1322 000013E0 4883F8F6                    cmp rax, -10
  1323 000013E4 7453                        je movOfic2AbjIzq
  1324 000013E6 4883F80C                    cmp rax, 12
  1325 000013EA 745E                        je movOfic2ArrIzq
  1326 000013EC 4883F8F4                    cmp rax, -12
  1327 000013F0 7436                        je movOfic2AbjDer
  1328                                  
  1329 000013F2 C3                          ret
  1330                                  
  1331                                      movOfic2Izq:
  1332 000013F3 48FF0425[390A0000]              inc qword[movOfic2Izquierda]
  1333 000013FB C3                              ret
  1334                                      movOfic2Der:
  1335 000013FC 48FF0425[310A0000]              inc qword[movOfic2Derecha]
  1336 00001404 C3                              ret
  1337                                      movOfic2Arriba:
  1338 00001405 48FF0425[290A0000]              inc qword[movOfic2Adelante]
  1339 0000140D C3                              ret
  1340                                      movOfic2Abajo:
  1341 0000140E 48FF0425[410A0000]              inc qword[movOfic2Atras]
  1342 00001416 C3                              ret
  1343                                      movOfic2ArrDer:
  1344 00001417 48FF0425[490A0000]              inc qword[movOfic2Diagonal]
  1345 0000141F 48FF0425[510A0000]              inc qword[movOfic2DiagArribaDer]
  1346 00001427 C3                              ret
  1347                                      movOfic2AbjDer:
  1348 00001428 48FF0425[490A0000]              inc qword[movOfic2Diagonal]
  1349 00001430 48FF0425[610A0000]              inc qword[movOfic2DiagAbajoDer]
  1350 00001438 C3                              ret
  1351                                      movOfic2AbjIzq:
  1352 00001439 48FF0425[490A0000]              inc qword[movOfic2Diagonal]
  1353 00001441 48FF0425[690A0000]              inc qword[movOfic2DiagAbajoIzq]
  1354 00001449 C3                              ret
  1355                                      movOfic2ArrIzq:
  1356 0000144A 48FF0425[490A0000]              inc qword[movOfic2Diagonal]
  1357 00001452 48FF0425[590A0000]              inc qword[movOfic2DiagArribaIzq]
  1358 0000145A C3                              ret
  1359                                  
  1360                                  ; --------------------------------------------------------------------------------------------
  1361                                  ; RUTINA PARA REFRESCAR LA CASILLA ACTUAL DE LOS OFICIALES
  1362                                  ; --------------------------------------------------------------------------------------------
  1363                                  
  1364                                  refrescarCasActOfic1:
  1365                                      mMov casillaOfic1, filaAMover, 1
    31 0000145B B901000000          <1>  mov rcx, %3
    32 00001460 488D3425[AC000000]  <1>  lea rsi, [%2]
    33 00001468 488D3C25[7A0A0000]  <1>  lea rdi, [%1]
    34 00001470 F3A4                <1>  rep movsb
  1366                                      mMov casillaOfic1+8, columnaAMover, 1
    31 00001472 B901000000          <1>  mov rcx, %3
    32 00001477 488D3425[B4000000]  <1>  lea rsi, [%2]
    33 0000147F 488D3C25[820A0000]  <1>  lea rdi, [%1]
    34 00001487 F3A4                <1>  rep movsb
  1367 00001489 C3                          ret
  1368                                  
  1369                                  refrescarCasActOfic2:
  1370                                      mMov casillaOfic2, filaAMover, 1
    31 0000148A B901000000          <1>  mov rcx, %3
    32 0000148F 488D3425[AC000000]  <1>  lea rsi, [%2]
    33 00001497 488D3C25[8A0A0000]  <1>  lea rdi, [%1]
    34 0000149F F3A4                <1>  rep movsb
  1371                                      mMov casillaOfic2+8, columnaAMover, 1
    31 000014A1 B901000000          <1>  mov rcx, %3
    32 000014A6 488D3425[B4000000]  <1>  lea rsi, [%2]
    33 000014AE 488D3C25[920A0000]  <1>  lea rdi, [%1]
    34 000014B6 F3A4                <1>  rep movsb
  1372 000014B8 C3                          ret    
  1373                                  
  1374                                  ; --------------------------------------------------------------------------------------------
  1375                                  ; RUTINA PARA VERIFICAR SI UN OFICIAL POD√çA CAPTURAR UN SOLDADO Y NO LO HIZO
  1376                                  ; --------------------------------------------------------------------------------------------
  1377                                  
  1378                                  podiaCapturarSoldado:
  1379 000014B9 FF3425[A4000000]            push qword[desplazCasOrig]
  1380                                      mMov desplazAux, desplazCasOrig, 1
    31 000014C0 B901000000          <1>  mov rcx, %3
    32 000014C5 488D3425[A4000000]  <1>  lea rsi, [%2]
    33 000014CD 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 000014D5 F3A4                <1>  rep movsb
  1381                                  
  1382                                      ; Casilla arriba-izquierda
  1383 000014D7 48832C25[D4000000]-         sub qword[desplazAux], 12
  1383 000014DF 0C                 
  1384                                      mHaySoldado qword[desplazAux]
    99 000014E0 B800000000          <1>  mov rax, 0
   100 000014E5 488B3C25[D4000000]  <1>  mov rdi, %1
   101 000014ED E8D2FAFFFF          <1>  call haySoldado
  1385 000014F2 4883F800                    cmp rax, 0
  1386 000014F6 7519                        jne verCasArriba
  1387                                  
  1388                                      mPuedeCapturar 12, 1 ; restar 12 a desplazAux
   105 000014F8 BF0C000000          <1>  mov rdi, %1
   106 000014FD BE01000000          <1>  mov rsi, %2
   107 00001502 E84D020000          <1>  call podiaComerPieza
  1389 00001507 4883F800                    cmp rax, 0
  1390 0000150B 0F8436020000                je podiaCapturar
  1391                                  
  1392                                      ; Casilla arriba
  1393                                      verCasArriba:
  1394                                          mMov desplazAux, desplazCasOrig, 1
    31 00001511 B901000000          <1>  mov rcx, %3
    32 00001516 488D3425[A4000000]  <1>  lea rsi, [%2]
    33 0000151E 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 00001526 F3A4                <1>  rep movsb
  1395 00001528 48832C25[D4000000]-             sub qword[desplazAux], 11
  1395 00001530 0B                 
  1396                                          mHaySoldado qword[desplazAux]
    99 00001531 B800000000          <1>  mov rax, 0
   100 00001536 488B3C25[D4000000]  <1>  mov rdi, %1
   101 0000153E E881FAFFFF          <1>  call haySoldado
  1397 00001543 4883F800                        cmp rax, 0
  1398 00001547 7519                            jne verCasArribaDer
  1399                                  
  1400                                          mPuedeCapturar 11, 1 ; restar 11 a desplazAux
   105 00001549 BF0B000000          <1>  mov rdi, %1
   106 0000154E BE01000000          <1>  mov rsi, %2
   107 00001553 E8FC010000          <1>  call podiaComerPieza
  1401 00001558 4883F800                        cmp rax, 0
  1402 0000155C 0F84E5010000                    je podiaCapturar
  1403                                  
  1404                                      ; Casilla arriba-derecha
  1405                                      verCasArribaDer:
  1406                                          mMov desplazAux, desplazCasOrig, 1
    31 00001562 B901000000          <1>  mov rcx, %3
    32 00001567 488D3425[A4000000]  <1>  lea rsi, [%2]
    33 0000156F 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 00001577 F3A4                <1>  rep movsb
  1407 00001579 48832C25[D4000000]-             sub qword[desplazAux], 10
  1407 00001581 0A                 
  1408                                          mHaySoldado qword[desplazAux]
    99 00001582 B800000000          <1>  mov rax, 0
   100 00001587 488B3C25[D4000000]  <1>  mov rdi, %1
   101 0000158F E830FAFFFF          <1>  call haySoldado
  1409 00001594 4883F800                        cmp rax, 0
  1410 00001598 7519                            jne verCasIzq
  1411                                          
  1412                                          mPuedeCapturar 10, 1 ; restar 10 a desplazAux
   105 0000159A BF0A000000          <1>  mov rdi, %1
   106 0000159F BE01000000          <1>  mov rsi, %2
   107 000015A4 E8AB010000          <1>  call podiaComerPieza
  1413 000015A9 4883F800                        cmp rax, 0
  1414 000015AD 0F8494010000                    je podiaCapturar
  1415                                  
  1416                                      ; Casilla izquierda
  1417                                      verCasIzq:
  1418                                          mMov desplazAux, desplazCasOrig, 1
    31 000015B3 B901000000          <1>  mov rcx, %3
    32 000015B8 488D3425[A4000000]  <1>  lea rsi, [%2]
    33 000015C0 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 000015C8 F3A4                <1>  rep movsb
  1419 000015CA 48832C25[D4000000]-             sub qword[desplazAux], 1
  1419 000015D2 01                 
  1420                                          mHaySoldado qword[desplazAux]
    99 000015D3 B800000000          <1>  mov rax, 0
   100 000015D8 488B3C25[D4000000]  <1>  mov rdi, %1
   101 000015E0 E8DFF9FFFF          <1>  call haySoldado
  1421 000015E5 4883F800                        cmp rax, 0
  1422 000015E9 7519                            jne verCasDer
  1423                                          
  1424                                          mPuedeCapturar 1, 1 ; restar 1 a desplazAux
   105 000015EB BF01000000          <1>  mov rdi, %1
   106 000015F0 BE01000000          <1>  mov rsi, %2
   107 000015F5 E85A010000          <1>  call podiaComerPieza
  1425 000015FA 4883F800                        cmp rax, 0
  1426 000015FE 0F8443010000                    je podiaCapturar
  1427                                  
  1428                                      ; Casilla derecha
  1429                                      verCasDer:
  1430                                          mMov desplazAux, desplazCasOrig, 1
    31 00001604 B901000000          <1>  mov rcx, %3
    32 00001609 488D3425[A4000000]  <1>  lea rsi, [%2]
    33 00001611 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 00001619 F3A4                <1>  rep movsb
  1431 0000161B 48830425[D4000000]-             add qword[desplazAux], 1
  1431 00001623 01                 
  1432                                          mHaySoldado qword[desplazAux]
    99 00001624 B800000000          <1>  mov rax, 0
   100 00001629 488B3C25[D4000000]  <1>  mov rdi, %1
   101 00001631 E88EF9FFFF          <1>  call haySoldado
  1433 00001636 4883F800                        cmp rax, 0
  1434 0000163A 7519                            jne verCasAbajoIzq
  1435                                          
  1436                                          mPuedeCapturar 1, 0 ; sumar 1 a desplazAux
   105 0000163C BF01000000          <1>  mov rdi, %1
   106 00001641 BE00000000          <1>  mov rsi, %2
   107 00001646 E809010000          <1>  call podiaComerPieza
  1437 0000164B 4883F800                        cmp rax, 0
  1438 0000164F 0F84F2000000                    je podiaCapturar
  1439                                  
  1440                                      ; Casilla abajo-izquierda
  1441                                      verCasAbajoIzq:
  1442                                          mMov desplazAux, desplazCasOrig, 1
    31 00001655 B901000000          <1>  mov rcx, %3
    32 0000165A 488D3425[A4000000]  <1>  lea rsi, [%2]
    33 00001662 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 0000166A F3A4                <1>  rep movsb
  1443 0000166C 48830425[D4000000]-             add qword[desplazAux], 10
  1443 00001674 0A                 
  1444                                          mHaySoldado qword[desplazAux]
    99 00001675 B800000000          <1>  mov rax, 0
   100 0000167A 488B3C25[D4000000]  <1>  mov rdi, %1
   101 00001682 E83DF9FFFF          <1>  call haySoldado
  1445 00001687 4883F800                        cmp rax, 0
  1446 0000168B 7519                            jne verCasAbajo
  1447                                          
  1448                                          mPuedeCapturar 10, 0 ; sumar 10 a desplazAux
   105 0000168D BF0A000000          <1>  mov rdi, %1
   106 00001692 BE00000000          <1>  mov rsi, %2
   107 00001697 E8B8000000          <1>  call podiaComerPieza
  1449 0000169C 4883F800                        cmp rax, 0
  1450 000016A0 0F84A1000000                    je podiaCapturar
  1451                                  
  1452                                      ; Casilla abajo
  1453                                      verCasAbajo:
  1454                                          mMov desplazAux, desplazCasOrig, 1
    31 000016A6 B901000000          <1>  mov rcx, %3
    32 000016AB 488D3425[A4000000]  <1>  lea rsi, [%2]
    33 000016B3 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 000016BB F3A4                <1>  rep movsb
  1455 000016BD 48830425[D4000000]-             add qword[desplazAux], 11
  1455 000016C5 0B                 
  1456                                          mHaySoldado qword[desplazAux]
    99 000016C6 B800000000          <1>  mov rax, 0
   100 000016CB 488B3C25[D4000000]  <1>  mov rdi, %1
   101 000016D3 E8ECF8FFFF          <1>  call haySoldado
  1457 000016D8 4883F800                        cmp rax, 0
  1458 000016DC 7515                            jne verCasAbajoDer
  1459                                          
  1460                                          mPuedeCapturar 11, 0 ; sumar 11 a desplazAux
   105 000016DE BF0B000000          <1>  mov rdi, %1
   106 000016E3 BE00000000          <1>  mov rsi, %2
   107 000016E8 E867000000          <1>  call podiaComerPieza
  1461 000016ED 4883F800                        cmp rax, 0
  1462 000016F1 7454                            je podiaCapturar
  1463                                  
  1464                                      ; Casilla abajo-derecha
  1465                                      verCasAbajoDer:
  1466                                          mMov desplazAux, desplazCasOrig, 1
    31 000016F3 B901000000          <1>  mov rcx, %3
    32 000016F8 488D3425[A4000000]  <1>  lea rsi, [%2]
    33 00001700 488D3C25[D4000000]  <1>  lea rdi, [%1]
    34 00001708 F3A4                <1>  rep movsb
  1467 0000170A 48830425[D4000000]-             add qword[desplazAux], 12
  1467 00001712 0C                 
  1468                                          mHaySoldado qword[desplazAux]
    99 00001713 B800000000          <1>  mov rax, 0
   100 00001718 488B3C25[D4000000]  <1>  mov rdi, %1
   101 00001720 E89FF8FFFF          <1>  call haySoldado
  1469 00001725 4883F800                        cmp rax, 0
  1470 00001729 7515                            jne okNoPodiaCapturar
  1471                                          
  1472                                          mPuedeCapturar 12, 0 ; sumar 12 a desplazAux
   105 0000172B BF0C000000          <1>  mov rdi, %1
   106 00001730 BE00000000          <1>  mov rsi, %2
   107 00001735 E81A000000          <1>  call podiaComerPieza
  1473 0000173A 4883F800                        cmp rax, 0
  1474 0000173E 7407                            je podiaCapturar
  1475                                      
  1476                                      okNoPodiaCapturar:
  1477 00001740 B801000000                      mov rax, 1
  1478 00001745 EB05                            jmp popDesplazIntermedio
  1479                                      
  1480                                      podiaCapturar:
  1481 00001747 B800000000                      mov rax, 0
  1482                                  
  1483                                      popDesplazIntermedio:
  1484 0000174C 8F0425[A4000000]                pop qword[desplazCasOrig]
  1485 00001753 C3                              ret
  1486                                  
  1487                                  podiaComerPieza:
  1488 00001754 4883FE00                    cmp rsi, 0
  1489 00001758 740A                        je sumarDesplaz 
  1490 0000175A 48293C25[D4000000]          sub qword[desplazAux], rdi
  1491 00001762 EB08                        jmp verSiEspacioEstaLibre
  1492                                  
  1493                                      sumarDesplaz:
  1494 00001764 48013C25[D4000000]              add qword[desplazAux], rdi
  1495                                  
  1496                                      verSiEspacioEstaLibre:
  1497                                          mEstaVacia qword[desplazAux]
    93 0000176C B800000000          <1>  mov rax, 0
    94 00001771 488B3C25[D4000000]  <1>  mov rdi, %1
    95 00001779 E8D5F6FFFF          <1>  call estaVacia
  1498 0000177E 4883F800                        cmp rax, 0
  1499 00001782 7406                            je okComerPieza
  1500                                  
  1501 00001784 B801000000                      mov rax, 1
  1502 00001789 C3                              ret
  1503                                  
  1504                                      okComerPieza:
  1505 0000178A B800000000                      mov rax, 0
  1506 0000178F C3                              ret
  1507                                  
  1508                                  ; --------------------------------------------------------------------------------------------
  1509                                  ; RUTINA PARA QUITAR AL OFICIAL QUE SE DESPREOCUP√ì DE CAPTURAR SOLDADOS
  1510                                  ; --------------------------------------------------------------------------------------------
  1511                                  
  1512                                  desentenderOficial:
  1513 00001790 488B1C25[A4000000]          mov rbx, qword[desplazCasOrig]
  1514 00001798 BA20000000                  mov rdx, ' '
  1515 0000179D 8893[10000000]              mov byte[tableroEnJuego+rbx], dl
  1516                                  
  1517 000017A3 E813FBFFFF                  call verQueOficialEs ; Verificamos qu√© oficial es el que se quiere mover
  1518                                  
  1519 000017A8 4883F801                    cmp rax, 1
  1520 000017AC 741A                        je desentenderOfic1
  1521                                  
  1522                                      desentenderOfic2:
  1523 000017AE 48C70425[8A0A0000]-             mov qword[casillaOfic2], 0
  1523 000017B6 00000000           
  1524 000017BA 48C70425[920A0000]-             mov qword[casillaOfic2+8], 0
  1524 000017C2 00000000           
  1525 000017C6 EB18                            jmp agregarOficDesentendido
  1526                                  
  1527                                      desentenderOfic1:
  1528 000017C8 48C70425[7A0A0000]-             mov qword[casillaOfic1], 0
  1528 000017D0 00000000           
  1529 000017D4 48C70425[820A0000]-             mov qword[casillaOfic1+8], 0
  1529 000017DC 00000000           
  1530                                  
  1531                                      agregarOficDesentendido:
  1532 000017E0 FE0425[790A0000]                inc byte[cantOficInvalidados]
  1533                                      
  1534 000017E7 C3                          ret
  1535                                      
  1536                                  ; --------------------------------------------------------------------------------------------
  1537                                  ; RUTINA PARA VERIFICAR SI EL OTRO OFICIAL POD√çA CAPTURAR UN SOLDADO Y NO LO HIZO
  1538                                  ; --------------------------------------------------------------------------------------------
  1539                                  
  1540                                  podiaCapturarSoldadoOtroOficial:
  1541 000017E8 FF3425[A4000000]            push qword[desplazCasOrig]
  1542                                  
  1543 000017EF E8C7FAFFFF                  call verQueOficialEs ; Verificamos qu√© oficial es el que se quiere mover
  1544 000017F4 4883F801                    cmp rax, 1
  1545 000017F8 742A                        je verificarOfic2
  1546                                  
  1547                                      verificarOfic1:
  1548                                          mCalcDesplaz qword[casillaOfic1], qword[casillaOfic1+8], qword[desplazCasOrig]
    86 000017FA 488B3C25[7A0A0000]  <1>  mov rdi, %1
    87 00001802 488B3425[820A0000]  <1>  mov rsi, %2
    88 0000180A E859F6FFFF          <1>  call calcularDesplazamiento
    89 0000180F 48890425[A4000000]  <1>  mov %3, rax
  1549 00001817 E89DFCFFFF                      call podiaCapturarSoldado
  1550 0000181C 4883F800                        cmp rax, 0
  1551 00001820 742C                            je okPodiaComerElOtro
  1552 00001822 EB31                            jmp noPodiaComerElOtro
  1553                                      
  1554                                      verificarOfic2:
  1555                                          mCalcDesplaz qword[casillaOfic2], qword[casillaOfic2+8], qword[desplazCasOrig]
    86 00001824 488B3C25[8A0A0000]  <1>  mov rdi, %1
    87 0000182C 488B3425[920A0000]  <1>  mov rsi, %2
    88 00001834 E82FF6FFFF          <1>  call calcularDesplazamiento
    89 00001839 48890425[A4000000]  <1>  mov %3, rax
  1556 00001841 E873FCFFFF                      call podiaCapturarSoldado
  1557 00001846 4883F800                        cmp rax, 0
  1558 0000184A 7402                            je okPodiaComerElOtro
  1559 0000184C EB07                            jmp noPodiaComerElOtro
  1560                                  
  1561                                      okPodiaComerElOtro:
  1562 0000184E B800000000                      mov rax, 0
  1563 00001853 EB05                            jmp popDesplaz
  1564                                  
  1565                                      noPodiaComerElOtro:
  1566 00001855 B801000000                      mov rax, 1
  1567                                  
  1568                                      popDesplaz:
  1569 0000185A 8F0425[A4000000]                pop qword[desplazCasOrig]
  1570                                  
  1571 00001861 C3                          ret
  1572                                  
  1573                                  ; --------------------------------------------------------------------------------------------
  1574                                  ; RUTINA PARA INVALIDAR AL OTRO OFICIAL QUE NO SE MOVI√ì (el cual pod√≠a capturar un soldado)
  1575                                  ; --------------------------------------------------------------------------------------------
  1576                                  
  1577                                  desentenderOtroOficial:
  1578 00001862 E854FAFFFF                  call verQueOficialEs ; Verificamos qu√© oficial es el que se quiere mover
  1579                                  
  1580 00001867 4883F801                    cmp rax, 1
  1581 0000186B 7451                        je otroEsOfic2
  1582                                  
  1583                                      otroEsOfic1:
  1584                                          mMov fila, casillaOfic1, 1
    31 0000186D B901000000          <1>  mov rcx, %3
    32 00001872 488D3425[7A0A0000]  <1>  lea rsi, [%2]
    33 0000187A 488D3C25[94000000]  <1>  lea rdi, [%1]
    34 00001882 F3A4                <1>  rep movsb
  1585                                          mMov columna, casillaOfic1+8, 1
    31 00001884 B901000000          <1>  mov rcx, %3
    32 00001889 488D3425[820A0000]  <1>  lea rsi, [%2]
    33 00001891 488D3C25[9C000000]  <1>  lea rdi, [%1]
    34 00001899 F3A4                <1>  rep movsb
  1586                                          mCalcDesplaz qword[casillaOfic1], qword[casillaOfic1+8], qword[desplazCasOrig]
    86 0000189B 488B3C25[7A0A0000]  <1>  mov rdi, %1
    87 000018A3 488B3425[820A0000]  <1>  mov rsi, %2
    88 000018AB E8B8F5FFFF          <1>  call calcularDesplazamiento
    89 000018B0 48890425[A4000000]  <1>  mov %3, rax
  1587 000018B8 E8D3FEFFFF                      call desentenderOficial
  1588 000018BD C3                              ret
  1589                                  
  1590                                      otroEsOfic2:
  1591                                          mMov fila, casillaOfic2, 1
    31 000018BE B901000000          <1>  mov rcx, %3
    32 000018C3 488D3425[8A0A0000]  <1>  lea rsi, [%2]
    33 000018CB 488D3C25[94000000]  <1>  lea rdi, [%1]
    34 000018D3 F3A4                <1>  rep movsb
  1592                                          mMov columna, casillaOfic2+8, 1
    31 000018D5 B901000000          <1>  mov rcx, %3
    32 000018DA 488D3425[920A0000]  <1>  lea rsi, [%2]
    33 000018E2 488D3C25[9C000000]  <1>  lea rdi, [%1]
    34 000018EA F3A4                <1>  rep movsb
  1593                                          mCalcDesplaz qword[casillaOfic2], qword[casillaOfic2+8], qword[desplazCasOrig]
    86 000018EC 488B3C25[8A0A0000]  <1>  mov rdi, %1
    87 000018F4 488B3425[920A0000]  <1>  mov rsi, %2
    88 000018FC E867F5FFFF          <1>  call calcularDesplazamiento
    89 00001901 48890425[A4000000]  <1>  mov %3, rax
  1594 00001909 E882FEFFFF                      call desentenderOficial
  1595                                      
  1596 0000190E C3                          ret
  1597                                  
  1598                                  ; --------------------------------------------------------------------------------------------
  1599                                  ; RUTINA PARA VER SI EL MOVIMIENTO DE UN OFICIAL RESULTA EN EL FIN DEL JUEGO
  1600                                  ; --------------------------------------------------------------------------------------------
  1601                                  
  1602                                  verificarFinJuegoOficiales:
  1603                                      ; Verificamos si ambos oficiales han sido invalidados
  1604 0000190F 803C25[790A0000]02          cmp byte[cantOficInvalidados], 2
  1605 00001917 7411                        je finInvalidados
  1606                                  
  1607                                      ; Verificamos que los oficiales hayan capturado necesarios soldados para ganar
  1608 00001919 48833C25[710A0000]-         cmp qword[cantSoldCapturados], 16
  1608 00001921 10                 
  1609 00001922 7413                        je finSoldCapturados
  1610                                  
  1611 00001924 B801000000                  mov rax, 1
  1612 00001929 C3                          ret
  1613                                  
  1614                                      finInvalidados:
  1615 0000192A C70425[2B070000]6F-             mov dword[varRazonFin], "oInv"
  1615 00001932 496E76             
  1616 00001935 EB0B                            jmp hayFinJuegoOfic
  1617                                  
  1618                                      finSoldCapturados:
  1619 00001937 C70425[2B070000]73-             mov dword[varRazonFin], "sCap"
  1619 0000193F 436170             
  1620                                  
  1621                                      hayFinJuegoOfic:
  1622 00001942 B800000000                      mov rax, 0
  1623 00001947 C3                              ret
  1624                                  
  1625                                  ; --------------------------------------------------------------------------------------------
  1626                                  ; RUTINA PARA VERIFICAR SI EL MOVIMIENTO DE UN SOLDADO RESULTA EN EL FIN DEL JUEGO
  1627                                  ; --------------------------------------------------------------------------------------------
  1628                                  
  1629                                  verificarFinJuegoSoldados:
  1630 00001948 C3                          ret
  1631                                  
  1632                                  ; --------------------------------------------------------------------------------------------
  1633                                  ; RUTINAS PARA TERMINAR EL JUEGO Y MOSTRAR LAS ESTAD√çSTICAS
  1634                                  ; --------------------------------------------------------------------------------------------
  1635                                  
  1636                                  finDeJuego:
  1637                                      mCommand cmdLimpiarPantalla
    24 00001949 48BF-               <1>  mov rdi, %1
    24 0000194B [B00A000000000000]  <1>
    25 00001953 4883EC08            <1>  sub rsp, 8
    26 00001957 E8(00000000)        <1>  call system
    27 0000195C 4883C408            <1>  add rsp, 8
  1638                                      mPuts msgJuegoTerminado
     2 00001960 48BF-               <1>  mov rdi, %1
     2 00001962 [CC06000000000000]  <1>
     3 0000196A 4883EC08            <1>  sub rsp, 8
     4 0000196E E8(00000000)        <1>  call puts
     5 00001973 4883C408            <1>  add rsp, 8
  1639                                  
  1640 00001977 813C25[2B070000]6F-         cmp dword[varRazonFin], "oInv"
  1640 0000197F 496E76             
  1641 00001982 740E                        je oficialesInvalidados
  1642                                  
  1643 00001984 813C25[2B070000]73-         cmp dword[varRazonFin], "sCap"
  1643 0000198C 436170             
  1644 0000198F 7445                        je soldadosCapturados
  1645                                  
  1646 00001991 C3                          ret
  1647                                  
  1648                                      oficialesInvalidados:
  1649                                          mPrint msgGanador, stringSoldados
     9 00001992 48BF-               <1>  mov rdi, %1
     9 00001994 [E606000000000000]  <1>
    10 0000199C 48BE-               <1>  mov rsi, %2
    10 0000199E [0C07000000000000]  <1>
    11 000019A6 4883EC08            <1>  sub rsp, 8
    12 000019AA E8(00000000)        <1>  call printf
    13 000019AF 4883C408            <1>  add rsp, 8
  1650                                          mPrint msgRazonGanador, msgSoldadosInvalidar
     9 000019B3 48BF-               <1>  mov rdi, %1
     9 000019B5 [1F07000000000000]  <1>
    10 000019BD 48BE-               <1>  mov rsi, %2
    10 000019BF [D307000000000000]  <1>
    11 000019C7 4883EC08            <1>  sub rsp, 8
    12 000019CB E8(00000000)        <1>  call printf
    13 000019D0 4883C408            <1>  add rsp, 8
  1651 000019D4 EB44                            jmp mostrarEstadisticas
  1652                                  
  1653                                      soldadosCapturados:
  1654                                          mPrint msgGanador, stringOficiales
     9 000019D6 48BF-               <1>  mov rdi, %1
     9 000019D8 [E606000000000000]  <1>
    10 000019E0 48BE-               <1>  mov rsi, %2
    10 000019E2 [1507000000000000]  <1>
    11 000019EA 4883EC08            <1>  sub rsp, 8
    12 000019EE E8(00000000)        <1>  call printf
    13 000019F3 4883C408            <1>  add rsp, 8
  1655                                          mPrint msgRazonGanador, msgOficialesGanan
     9 000019F7 48BF-               <1>  mov rdi, %1
     9 000019F9 [1F07000000000000]  <1>
    10 00001A01 48BE-               <1>  mov rsi, %2
    10 00001A03 [F907000000000000]  <1>
    11 00001A0B 4883EC08            <1>  sub rsp, 8
    12 00001A0F E8(00000000)        <1>  call printf
    13 00001A14 4883C408            <1>  add rsp, 8
  1656 00001A18 EB00                            jmp mostrarEstadisticas
  1657                                  
  1658                                  
  1659                                  mostrarEstadisticas:
  1660                                      mPuts msgEstadisticas
     2 00001A1A 48BF-               <1>  mov rdi, %1
     2 00001A1C [5C05000000000000]  <1>
     3 00001A24 4883EC08            <1>  sub rsp, 8
     4 00001A28 E8(00000000)        <1>  call puts
     5 00001A2D 4883C408            <1>  add rsp, 8
  1661                                  
  1662                                      mPrint msgCantTotalCapturas, qword[cantSoldCapturados]
     9 00001A31 48BF-               <1>  mov rdi, %1
     9 00001A33 [7D05000000000000]  <1>
    10 00001A3B 488B3425[710A0000]  <1>  mov rsi, %2
    11 00001A43 4883EC08            <1>  sub rsp, 8
    12 00001A47 E8(00000000)        <1>  call printf
    13 00001A4C 4883C408            <1>  add rsp, 8
  1663                                  
  1664                                      ; Estad√≠sticas del oficial 1
  1665                                      mPuts msgOficial1
     2 00001A50 48BF-               <1>  mov rdi, %1
     2 00001A52 [9E05000000000000]  <1>
     3 00001A5A 4883EC08            <1>  sub rsp, 8
     4 00001A5E E8(00000000)        <1>  call puts
     5 00001A63 4883C408            <1>  add rsp, 8
  1666                                      mPrint msgCantMovimientos, qword[movimientosOfic1]
     9 00001A67 48BF-               <1>  mov rdi, %1
     9 00001A69 [B605000000000000]  <1>
    10 00001A71 488B3425[D1090000]  <1>  mov rsi, %2
    11 00001A79 4883EC08            <1>  sub rsp, 8
    12 00001A7D E8(00000000)        <1>  call printf
    13 00001A82 4883C408            <1>  add rsp, 8
  1667                                      mPrint msgCantAdelante, qword[movOfic1Adelante]
     9 00001A86 48BF-               <1>  mov rdi, %1
     9 00001A88 [CF05000000000000]  <1>
    10 00001A90 488B3425[E1090000]  <1>  mov rsi, %2
    11 00001A98 4883EC08            <1>  sub rsp, 8
    12 00001A9C E8(00000000)        <1>  call printf
    13 00001AA1 4883C408            <1>  add rsp, 8
  1668                                      mPrint msgCantDerecha, qword[movOfic1Derecha]
     9 00001AA5 48BF-               <1>  mov rdi, %1
     9 00001AA7 [E505000000000000]  <1>
    10 00001AAF 488B3425[E9090000]  <1>  mov rsi, %2
    11 00001AB7 4883EC08            <1>  sub rsp, 8
    12 00001ABB E8(00000000)        <1>  call printf
    13 00001AC0 4883C408            <1>  add rsp, 8
  1669                                      mPrint msgCantIzquierda, qword[movOfic1Izquierda]
     9 00001AC4 48BF-               <1>  mov rdi, %1
     9 00001AC6 [FD05000000000000]  <1>
    10 00001ACE 488B3425[F1090000]  <1>  mov rsi, %2
    11 00001AD6 4883EC08            <1>  sub rsp, 8
    12 00001ADA E8(00000000)        <1>  call printf
    13 00001ADF 4883C408            <1>  add rsp, 8
  1670                                      mPrint msgCantAtras, qword[movOfic1Atras]
     9 00001AE3 48BF-               <1>  mov rdi, %1
     9 00001AE5 [1706000000000000]  <1>
    10 00001AED 488B3425[F9090000]  <1>  mov rsi, %2
    11 00001AF5 4883EC08            <1>  sub rsp, 8
    12 00001AF9 E8(00000000)        <1>  call printf
    13 00001AFE 4883C408            <1>  add rsp, 8
  1671                                      mPrint msgCantDiagonal, qword[movOfic1Diagonal]
     9 00001B02 48BF-               <1>  mov rdi, %1
     9 00001B04 [2B06000000000000]  <1>
    10 00001B0C 488B3425[010A0000]  <1>  mov rsi, %2
    11 00001B14 4883EC08            <1>  sub rsp, 8
    12 00001B18 E8(00000000)        <1>  call printf
    13 00001B1D 4883C408            <1>  add rsp, 8
  1672                                      mPrint msgCantDiagArribaDer, qword[movOfic1DiagArribaDer]
     9 00001B21 48BF-               <1>  mov rdi, %1
     9 00001B23 [3E06000000000000]  <1>
    10 00001B2B 488B3425[090A0000]  <1>  mov rsi, %2
    11 00001B33 4883EC08            <1>  sub rsp, 8
    12 00001B37 E8(00000000)        <1>  call printf
    13 00001B3C 4883C408            <1>  add rsp, 8
  1673                                      mPrint msgCantDiagArribaIzq, qword[movOfic1DiagArribaIzq]
     9 00001B40 48BF-               <1>  mov rdi, %1
     9 00001B42 [5806000000000000]  <1>
    10 00001B4A 488B3425[110A0000]  <1>  mov rsi, %2
    11 00001B52 4883EC08            <1>  sub rsp, 8
    12 00001B56 E8(00000000)        <1>  call printf
    13 00001B5B 4883C408            <1>  add rsp, 8
  1674                                      mPrint msgCantDiagAbajoDer, qword[movOfic1DiagAbajoDer]
     9 00001B5F 48BF-               <1>  mov rdi, %1
     9 00001B61 [7406000000000000]  <1>
    10 00001B69 488B3425[190A0000]  <1>  mov rsi, %2
    11 00001B71 4883EC08            <1>  sub rsp, 8
    12 00001B75 E8(00000000)        <1>  call printf
    13 00001B7A 4883C408            <1>  add rsp, 8
  1675                                      mPrint msgCantDiagAbajoIzq, qword[movOfic1DiagAbajoIzq]
     9 00001B7E 48BF-               <1>  mov rdi, %1
     9 00001B80 [8C06000000000000]  <1>
    10 00001B88 488B3425[210A0000]  <1>  mov rsi, %2
    11 00001B90 4883EC08            <1>  sub rsp, 8
    12 00001B94 E8(00000000)        <1>  call printf
    13 00001B99 4883C408            <1>  add rsp, 8
  1676                                      mPrint msgCantSoldadosCapt, qword[cantCapturasOfic1]
     9 00001B9D 48BF-               <1>  mov rdi, %1
     9 00001B9F [A606000000000000]  <1>
    10 00001BA7 488B3425[9A0A0000]  <1>  mov rsi, %2
    11 00001BAF 4883EC08            <1>  sub rsp, 8
    12 00001BB3 E8(00000000)        <1>  call printf
    13 00001BB8 4883C408            <1>  add rsp, 8
  1677                                  
  1678                                      ; Estad√≠sticas del oficial 2
  1679                                      mPuts msgOficial2
     2 00001BBC 48BF-               <1>  mov rdi, %1
     2 00001BBE [AA05000000000000]  <1>
     3 00001BC6 4883EC08            <1>  sub rsp, 8
     4 00001BCA E8(00000000)        <1>  call puts
     5 00001BCF 4883C408            <1>  add rsp, 8
  1680                                      mPrint msgCantMovimientos, qword[movimientosOfic2]
     9 00001BD3 48BF-               <1>  mov rdi, %1
     9 00001BD5 [B605000000000000]  <1>
    10 00001BDD 488B3425[D9090000]  <1>  mov rsi, %2
    11 00001BE5 4883EC08            <1>  sub rsp, 8
    12 00001BE9 E8(00000000)        <1>  call printf
    13 00001BEE 4883C408            <1>  add rsp, 8
  1681                                      mPrint msgCantAdelante, qword[movOfic2Adelante]
     9 00001BF2 48BF-               <1>  mov rdi, %1
     9 00001BF4 [CF05000000000000]  <1>
    10 00001BFC 488B3425[290A0000]  <1>  mov rsi, %2
    11 00001C04 4883EC08            <1>  sub rsp, 8
    12 00001C08 E8(00000000)        <1>  call printf
    13 00001C0D 4883C408            <1>  add rsp, 8
  1682                                      mPrint msgCantDerecha, qword[movOfic2Derecha]
     9 00001C11 48BF-               <1>  mov rdi, %1
     9 00001C13 [E505000000000000]  <1>
    10 00001C1B 488B3425[310A0000]  <1>  mov rsi, %2
    11 00001C23 4883EC08            <1>  sub rsp, 8
    12 00001C27 E8(00000000)        <1>  call printf
    13 00001C2C 4883C408            <1>  add rsp, 8
  1683                                      mPrint msgCantIzquierda, qword[movOfic2Izquierda]
     9 00001C30 48BF-               <1>  mov rdi, %1
     9 00001C32 [FD05000000000000]  <1>
    10 00001C3A 488B3425[390A0000]  <1>  mov rsi, %2
    11 00001C42 4883EC08            <1>  sub rsp, 8
    12 00001C46 E8(00000000)        <1>  call printf
    13 00001C4B 4883C408            <1>  add rsp, 8
  1684                                      mPrint msgCantAtras, qword[movOfic2Atras]
     9 00001C4F 48BF-               <1>  mov rdi, %1
     9 00001C51 [1706000000000000]  <1>
    10 00001C59 488B3425[410A0000]  <1>  mov rsi, %2
    11 00001C61 4883EC08            <1>  sub rsp, 8
    12 00001C65 E8(00000000)        <1>  call printf
    13 00001C6A 4883C408            <1>  add rsp, 8
  1685                                      mPrint msgCantDiagonal, qword[movOfic2Diagonal]
     9 00001C6E 48BF-               <1>  mov rdi, %1
     9 00001C70 [2B06000000000000]  <1>
    10 00001C78 488B3425[490A0000]  <1>  mov rsi, %2
    11 00001C80 4883EC08            <1>  sub rsp, 8
    12 00001C84 E8(00000000)        <1>  call printf
    13 00001C89 4883C408            <1>  add rsp, 8
  1686                                      mPrint msgCantDiagArribaDer, qword[movOfic2DiagArribaDer]
     9 00001C8D 48BF-               <1>  mov rdi, %1
     9 00001C8F [3E06000000000000]  <1>
    10 00001C97 488B3425[510A0000]  <1>  mov rsi, %2
    11 00001C9F 4883EC08            <1>  sub rsp, 8
    12 00001CA3 E8(00000000)        <1>  call printf
    13 00001CA8 4883C408            <1>  add rsp, 8
  1687                                      mPrint msgCantDiagArribaIzq, qword[movOfic2DiagArribaIzq]
     9 00001CAC 48BF-               <1>  mov rdi, %1
     9 00001CAE [5806000000000000]  <1>
    10 00001CB6 488B3425[590A0000]  <1>  mov rsi, %2
    11 00001CBE 4883EC08            <1>  sub rsp, 8
    12 00001CC2 E8(00000000)        <1>  call printf
    13 00001CC7 4883C408            <1>  add rsp, 8
  1688                                      mPrint msgCantDiagAbajoDer, qword[movOfic2DiagAbajoDer]
     9 00001CCB 48BF-               <1>  mov rdi, %1
     9 00001CCD [7406000000000000]  <1>
    10 00001CD5 488B3425[610A0000]  <1>  mov rsi, %2
    11 00001CDD 4883EC08            <1>  sub rsp, 8
    12 00001CE1 E8(00000000)        <1>  call printf
    13 00001CE6 4883C408            <1>  add rsp, 8
  1689                                      mPrint msgCantDiagAbajoIzq, qword[movOfic2DiagAbajoIzq]
     9 00001CEA 48BF-               <1>  mov rdi, %1
     9 00001CEC [8C06000000000000]  <1>
    10 00001CF4 488B3425[690A0000]  <1>  mov rsi, %2
    11 00001CFC 4883EC08            <1>  sub rsp, 8
    12 00001D00 E8(00000000)        <1>  call printf
    13 00001D05 4883C408            <1>  add rsp, 8
  1690                                      mPrint msgCantSoldadosCapt, qword[cantCapturasOfic2]
     9 00001D09 48BF-               <1>  mov rdi, %1
     9 00001D0B [A606000000000000]  <1>
    10 00001D13 488B3425[A20A0000]  <1>  mov rsi, %2
    11 00001D1B 4883EC08            <1>  sub rsp, 8
    12 00001D1F E8(00000000)        <1>  call printf
    13 00001D24 4883C408            <1>  add rsp, 8
  1691                                  
  1692 00001D28 C3                          ret
